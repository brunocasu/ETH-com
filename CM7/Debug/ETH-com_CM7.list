
ETH-com_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017834  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003044  08017ad4  08017ad4  00027ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ab18  0801ab18  0002ab18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ab20  0801ab20  0002ab20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ab24  0801ab24  0002ab24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0801ab28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000082d8  24000098  0801abc0  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24008370  0801abc0  00038370  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005901a  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008f19  00000000  00000000  000890e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002a20  00000000  00000000  00092000  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002828  00000000  00000000  00094a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004a6b4  00000000  00000000  00097248  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00032e32  00000000  00000000  000e18fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001a9f74  00000000  00000000  0011472e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002be6a2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b648  00000000  00000000  002be720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017abc 	.word	0x08017abc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08017abc 	.word	0x08017abc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <SCB_EnableICache+0x3c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <SCB_EnableICache+0x3c>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <SCB_EnableICache+0x3c>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <SCB_EnableDCache+0x7c>)
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800081c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	0b5b      	lsrs	r3, r3, #13
 8000822:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000826:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000830:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	015a      	lsls	r2, r3, #5
 8000836:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800083a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000842:	4313      	orrs	r3, r2
 8000844:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1ef      	bne.n	8000832 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	60fa      	str	r2, [r7, #12]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e5      	bne.n	8000828 <SCB_EnableDCache+0x24>
 800085c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086a:	6153      	str	r3, [r2, #20]
 800086c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Config();
 800088a:	f000 fa2b 	bl	8000ce4 <MPU_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800088e:	f7ff ff99 	bl	80007c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000892:	f7ff ffb7 	bl	8000804 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800089c:	bf00      	nop
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <main+0xe8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <main+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	61fa      	str	r2, [r7, #28]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dcf4      	bgt.n	800089e <main+0x1a>
  if ( timeout < 0 )
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da01      	bge.n	80008be <main+0x3a>
  {
  Error_Handler();
 80008ba:	f000 fabf 	bl	8000e3c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fe2f 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f85d 	bl	8000980 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <main+0xe8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a27      	ldr	r2, [pc, #156]	; (800096c <main+0xe8>)
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <main+0xe8>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f002 ff33 	bl	8003750 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f002 ff49 	bl	8003784 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008f8:	bf00      	nop
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <main+0xe8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <main+0x8c>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	61fa      	str	r2, [r7, #28]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dcf4      	bgt.n	80008fa <main+0x76>
if ( timeout < 0 )
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	2b00      	cmp	r3, #0
 8000914:	da01      	bge.n	800091a <main+0x96>
{
Error_Handler();
 8000916:	f000 fa91 	bl	8000e3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 f97d 	bl	8000c18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800091e:	f000 f8fd 	bl	8000b1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000922:	f000 f947 	bl	8000bb4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin for RED LED - NUCLEO LED3 on PB14*/
  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <main+0xec>)
 800092e:	f002 fef5 	bl	800371c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000932:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	4809      	ldr	r0, [pc, #36]	; (8000970 <main+0xec>)
 800094c:	f002 fd36 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000950:	f007 ff3e 	bl	80087d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <main+0xf0>)
 8000956:	2100      	movs	r1, #0
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <main+0xf4>)
 800095a:	f007 ffcb 	bl	80088f4 <osThreadNew>
 800095e:	4602      	mov	r2, r0
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <main+0xf8>)
 8000962:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000964:	f007 ff68 	bl	8008838 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000968:	e7fe      	b.n	8000968 <main+0xe4>
 800096a:	bf00      	nop
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	0801a914 	.word	0x0801a914
 8000978:	08000d6d 	.word	0x08000d6d
 800097c:	24004b60 	.word	0x24004b60

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0cc      	sub	sp, #304	; 0x130
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800098a:	224c      	movs	r2, #76	; 0x4c
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f016 f96c 	bl	8016c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f016 f965 	bl	8016c6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4618      	mov	r0, r3
 80009a8:	23bc      	movs	r3, #188	; 0xbc
 80009aa:	461a      	mov	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f016 f95d 	bl	8016c6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009b2:	2004      	movs	r0, #4
 80009b4:	f003 f842 	bl	8003a3c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	4b53      	ldr	r3, [pc, #332]	; (8000b0c <SystemClock_Config+0x18c>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	4a52      	ldr	r2, [pc, #328]	; (8000b0c <SystemClock_Config+0x18c>)
 80009c4:	f023 0301 	bic.w	r3, r3, #1
 80009c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009ca:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <SystemClock_Config+0x18c>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	f003 0201 	and.w	r2, r3, #1
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	4b4e      	ldr	r3, [pc, #312]	; (8000b10 <SystemClock_Config+0x190>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009de:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <SystemClock_Config+0x190>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <SystemClock_Config+0x190>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f6:	bf00      	nop
 80009f8:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <SystemClock_Config+0x190>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a04:	d1f8      	bne.n	80009f8 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <SystemClock_Config+0x194>)
 8000a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0a:	f023 0303 	bic.w	r3, r3, #3
 8000a0e:	4a41      	ldr	r2, [pc, #260]	; (8000b14 <SystemClock_Config+0x194>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f86b 	bl	8003b10 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a40:	f000 f9fc 	bl	8000e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	233f      	movs	r3, #63	; 0x3f
 8000a46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 fc58 	bl	8004330 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000a86:	f000 f9d9 	bl	8000e3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <SystemClock_Config+0x198>)
 8000a90:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2201      	movs	r2, #1
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2218      	movs	r2, #24
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2204      	movs	r2, #4
 8000ab0:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000ac2:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	2200      	movs	r2, #0
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2200      	movs	r2, #0
 8000ada:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 ffe5 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x17c>
  {
    Error_Handler();
 8000af8:	f000 f9a0 	bl	8000e3c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000afc:	f002 fff8 	bl	8003af0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b00:	bf00      	nop
 8000b02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	58000400 	.word	0x58000400
 8000b10:	58024800 	.word	0x58024800
 8000b14:	58024400 	.word	0x58024400
 8000b18:	00040002 	.word	0x00040002

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <MX_USART3_UART_Init+0x94>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b66:	f005 fd41 	bl	80065ec <HAL_UART_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f964 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b78:	f006 fcdb 	bl	8007532 <HAL_UARTEx_SetTxFifoThreshold>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b82:	f000 f95b 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b8a:	f006 fd10 	bl	80075ae <HAL_UARTEx_SetRxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b94:	f000 f952 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b9a:	f006 fc91 	bl	80074c0 <HAL_UARTEx_DisableFifoMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f94a 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	24004b64 	.word	0x24004b64
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc0:	2209      	movs	r2, #9
 8000bc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfc:	f002 fdd6 	bl	80037ac <HAL_PCD_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c06:	f000 f919 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	24004bf0 	.word	0x24004bf0
 8000c14:	40080000 	.word	0x40080000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_GPIO_Init+0xc8>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

}
 8000cd2:	bf00      	nop
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000cea:	f000 fd97 	bl	800181c <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MPU_Config+0x80>)
 8000cf4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fdb1 	bl	8001884 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MPU_Config+0x84>)
 8000d28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000d2a:	230d      	movs	r3, #13
 8000d2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fd97 	bl	8001884 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d56:	2004      	movs	r0, #4
 8000d58:	f000 fd76 	bl	8001848 <HAL_MPU_Enable>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	30040000 	.word	0x30040000
 8000d68:	30044000 	.word	0x30044000

08000d6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d74:	f006 ff6c 	bl	8007c50 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  const char* message = "Hello UDP message!\n\r";
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <StartDefaultTask+0xa0>)
 8000d7a:	617b      	str	r3, [r7, #20]

  osDelay(1000);
 8000d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d80:	f007 fe5e 	bl	8008a40 <osDelay>

  ip_addr_t PC_IPADDR;
  IP_ADDR4(&PC_IPADDR, 192, 168, 1, 100);
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <StartDefaultTask+0xa4>)
 8000d86:	60bb      	str	r3, [r7, #8]

  struct udp_pcb* my_udp = udp_new();
 8000d88:	f015 feea 	bl	8016b60 <udp_new>
 8000d8c:	6138      	str	r0, [r7, #16]
  udp_connect(my_udp, &PC_IPADDR, 55151);
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	f24d 726f 	movw	r2, #55151	; 0xd76f
 8000d96:	4619      	mov	r1, r3
 8000d98:	6938      	ldr	r0, [r7, #16]
 8000d9a:	f015 fe73 	bl	8016a84 <udp_connect>
  struct pbuf* udp_buffer = NULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for (;;) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da8:	481a      	ldr	r0, [pc, #104]	; (8000e14 <StartDefaultTask+0xa8>)
 8000daa:	f002 fcb7 	bl	800371c <HAL_GPIO_WritePin>
    osDelay(920);
 8000dae:	f44f 7066 	mov.w	r0, #920	; 0x398
 8000db2:	f007 fe45 	bl	8008a40 <osDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbc:	4815      	ldr	r0, [pc, #84]	; (8000e14 <StartDefaultTask+0xa8>)
 8000dbe:	f002 fcad 	bl	800371c <HAL_GPIO_WritePin>
    osDelay(80);
 8000dc2:	2050      	movs	r0, #80	; 0x50
 8000dc4:	f007 fe3c 	bl	8008a40 <osDelay>
    udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8000dc8:	6978      	ldr	r0, [r7, #20]
 8000dca:	f7ff fa89 	bl	80002e0 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2036      	movs	r0, #54	; 0x36
 8000dda:	f00e ff31 	bl	800fc40 <pbuf_alloc>
 8000dde:	60f8      	str	r0, [r7, #12]
    if (udp_buffer != NULL) {
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0dd      	beq.n	8000da2 <StartDefaultTask+0x36>
      memcpy(udp_buffer->payload, message, strlen(message));
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	685c      	ldr	r4, [r3, #4]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff fa78 	bl	80002e0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	6979      	ldr	r1, [r7, #20]
 8000df6:	4620      	mov	r0, r4
 8000df8:	f015 ff2d 	bl	8016c56 <memcpy>
      udp_send(my_udp, udp_buffer);
 8000dfc:	68f9      	ldr	r1, [r7, #12]
 8000dfe:	6938      	ldr	r0, [r7, #16]
 8000e00:	f015 fbce 	bl	80165a0 <udp_send>
      pbuf_free(udp_buffer);
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f00f f9fb 	bl	8010200 <pbuf_free>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e0a:	e7ca      	b.n	8000da2 <StartDefaultTask+0x36>
 8000e0c:	08017ae0 	.word	0x08017ae0
 8000e10:	6401a8c0 	.word	0x6401a8c0
 8000e14:	58020400 	.word	0x58020400

08000e18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2a:	f000 fbb5 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40001400 	.word	0x40001400

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_MspInit+0x30>)
 8000e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_MspInit+0x30>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x30>)
 8000e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58024400 	.word	0x58024400

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12e      	bne.n	8000f00 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_UART_MspInit+0x90>)
 8000efc:	f002 fa5e 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004800 	.word	0x40004800
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	58020c00 	.word	0x58020c00

08000f14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_PCD_MspInit+0xa4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13b      	bne.n	8000fae <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_PCD_MspInit+0xa8>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_PCD_MspInit+0xa8>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_PCD_MspInit+0xa8>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f54:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f66:	230a      	movs	r3, #10
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <HAL_PCD_MspInit+0xac>)
 8000f72:	f002 fa23 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <HAL_PCD_MspInit+0xac>)
 8000f8c:	f002 fa16 	bl	80033bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_PCD_MspInit+0xa8>)
 8000f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f96:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <HAL_PCD_MspInit+0xa8>)
 8000f98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_PCD_MspInit+0xa8>)
 8000fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40080000 	.word	0x40080000
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020000 	.word	0x58020000

08000fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	2037      	movs	r0, #55	; 0x37
 8000fda:	f000 fbf7 	bl	80017cc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fde:	2037      	movs	r0, #55	; 0x37
 8000fe0:	f000 fc0e 	bl	8001800 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_InitTick+0xa4>)
 8000fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fea:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <HAL_InitTick+0xa4>)
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_InitTick+0xa4>)
 8000ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fd13 	bl	8004a38 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001012:	f003 fce5 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8001016:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_InitTick+0xa8>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	0c9b      	lsrs	r3, r3, #18
 8001022:	3b01      	subs	r3, #1
 8001024:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0xac>)
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_InitTick+0xb0>)
 800102a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_InitTick+0xac>)
 800102e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001032:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_InitTick+0xac>)
 8001036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001038:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_InitTick+0xac>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_InitTick+0xac>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001046:	480a      	ldr	r0, [pc, #40]	; (8001070 <HAL_InitTick+0xac>)
 8001048:	f005 f838 	bl	80060bc <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <HAL_InitTick+0xac>)
 8001054:	f005 f894 	bl	8006180 <HAL_TIM_Base_Start_IT>
 8001058:	4603      	mov	r3, r0
 800105a:	e000      	b.n	800105e <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	3738      	adds	r7, #56	; 0x38
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58024400 	.word	0x58024400
 800106c:	431bde83 	.word	0x431bde83
 8001070:	24004ff8 	.word	0x24004ff8
 8001074:	40001400 	.word	0x40001400

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM7_IRQHandler+0x10>)
 80010b2:	f005 f89b 	bl	80061ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24004ff8 	.word	0x24004ff8

080010c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e00a      	b.n	80010e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010d2:	f3af 8000 	nop.w
 80010d6:	4601      	mov	r1, r0
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	60ba      	str	r2, [r7, #8]
 80010de:	b2ca      	uxtb	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf0      	blt.n	80010d2 <_read+0x12>
	}

return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e009      	b.n	8001120 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf1      	blt.n	800110c <_write+0x12>
	}
	return len;
 8001128:	687b      	ldr	r3, [r7, #4]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_close>:

int _close(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	return -1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115a:	605a      	str	r2, [r3, #4]
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <_isatty>:

int _isatty(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	return 1;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
	return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d205      	bcs.n	80011d8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <_sbrk+0x6c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d6:	e009      	b.n	80011ec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a06      	ldr	r2, [pc, #24]	; (8001200 <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	20020000 	.word	0x20020000
 80011fc:	00000400 	.word	0x00000400
 8001200:	240000b4 	.word	0x240000b4
 8001204:	24008370 	.word	0x24008370
 8001208:	24008344 	.word	0x24008344

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001210:	f7ff fa3e 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001216:	e003      	b.n	8001220 <LoopCopyDataInit>

08001218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800121a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800121c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121e:	3104      	adds	r1, #4

08001220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001228:	d3f6      	bcc.n	8001218 <CopyDataInit>
  ldr  r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800122c:	e002      	b.n	8001234 <LoopFillZerobss>

0800122e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800122e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001230:	f842 3b04 	str.w	r3, [r2], #4

08001234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001238:	d3f9      	bcc.n	800122e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800123a:	f015 fcd9 	bl	8016bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fb21 	bl	8000884 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001248:	0801ab28 	.word	0x0801ab28
  ldr  r0, =_sdata
 800124c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001250:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 8001254:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 8001258:	24008370 	.word	0x24008370

0800125c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC3_IRQHandler>

0800125e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <LAN8742_RegisterBusIO+0x28>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <LAN8742_RegisterBusIO+0x28>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <LAN8742_RegisterBusIO+0x28>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128a:	e014      	b.n	80012b6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d17c      	bne.n	80013dc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2220      	movs	r2, #32
 80012f4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e01c      	b.n	8001336 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f107 0208 	add.w	r2, r7, #8
 8001304:	2112      	movs	r1, #18
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	4798      	blx	r3
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	da03      	bge.n	8001318 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001310:	f06f 0304 	mvn.w	r3, #4
 8001314:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001316:	e00b      	b.n	8001330 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	d105      	bne.n	8001330 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
         break;
 800132e:	e005      	b.n	800133c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b1f      	cmp	r3, #31
 800133a:	d9df      	bls.n	80012fc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b1f      	cmp	r3, #31
 8001342:	d902      	bls.n	800134a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001344:	f06f 0302 	mvn.w	r3, #2
 8001348:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d145      	bne.n	80013dc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6810      	ldr	r0, [r2, #0]
 8001358:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800135c:	2100      	movs	r1, #0
 800135e:	4798      	blx	r3
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	db37      	blt.n	80013d6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6810      	ldr	r0, [r2, #0]
 800136e:	f107 0208 	add.w	r2, r7, #8
 8001372:	2100      	movs	r1, #0
 8001374:	4798      	blx	r3
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	db28      	blt.n	80013ce <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4798      	blx	r3
 8001382:	4603      	mov	r3, r0
 8001384:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001386:	e01c      	b.n	80013c2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4798      	blx	r3
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800139a:	d80e      	bhi.n	80013ba <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6810      	ldr	r0, [r2, #0]
 80013a4:	f107 0208 	add.w	r2, r7, #8
 80013a8:	2100      	movs	r1, #0
 80013aa:	4798      	blx	r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da07      	bge.n	80013c2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80013b2:	f06f 0304 	mvn.w	r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
                 break;
 80013b8:	e010      	b.n	80013dc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80013ba:	f06f 0301 	mvn.w	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
               break;
 80013c0:	e00c      	b.n	80013dc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1dd      	bne.n	8001388 <LAN8742_Init+0xc6>
 80013cc:	e006      	b.n	80013dc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80013ce:	f06f 0304 	mvn.w	r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	e002      	b.n	80013dc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013d6:	f06f 0303 	mvn.w	r3, #3
 80013da:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d112      	bne.n	8001408 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4798      	blx	r3
 80013e8:	4603      	mov	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013ec:	bf00      	nop
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4798      	blx	r3
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001400:	d9f5      	bls.n	80013ee <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001408:	693b      	ldr	r3, [r7, #16]
 }
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6810      	ldr	r0, [r2, #0]
 8001426:	f107 020c 	add.w	r2, r7, #12
 800142a:	2101      	movs	r1, #1
 800142c:	4798      	blx	r3
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	da02      	bge.n	800143a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001434:	f06f 0304 	mvn.w	r3, #4
 8001438:	e06e      	b.n	8001518 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6810      	ldr	r0, [r2, #0]
 8001442:	f107 020c 	add.w	r2, r7, #12
 8001446:	2101      	movs	r1, #1
 8001448:	4798      	blx	r3
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	da02      	bge.n	8001456 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001450:	f06f 0304 	mvn.w	r3, #4
 8001454:	e060      	b.n	8001518 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001460:	2301      	movs	r3, #1
 8001462:	e059      	b.n	8001518 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6810      	ldr	r0, [r2, #0]
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	2100      	movs	r1, #0
 8001472:	4798      	blx	r3
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	da02      	bge.n	8001480 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800147a:	f06f 0304 	mvn.w	r3, #4
 800147e:	e04b      	b.n	8001518 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d11b      	bne.n	80014c2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <LAN8742_GetLinkState+0x90>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800149e:	2302      	movs	r3, #2
 80014a0:	e03a      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e033      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014ba:	2304      	movs	r3, #4
 80014bc:	e02c      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014be:	2305      	movs	r3, #5
 80014c0:	e02a      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6810      	ldr	r0, [r2, #0]
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	211f      	movs	r1, #31
 80014d0:	4798      	blx	r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da02      	bge.n	80014de <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014d8:	f06f 0304 	mvn.w	r3, #4
 80014dc:	e01c      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014e8:	2306      	movs	r3, #6
 80014ea:	e015      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 031c 	and.w	r3, r3, #28
 80014f2:	2b18      	cmp	r3, #24
 80014f4:	d101      	bne.n	80014fa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014f6:	2302      	movs	r3, #2
 80014f8:	e00e      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f003 031c 	and.w	r3, r3, #28
 8001500:	2b08      	cmp	r3, #8
 8001502:	d101      	bne.n	8001508 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001504:	2303      	movs	r3, #3
 8001506:	e007      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 031c 	and.w	r3, r3, #28
 800150e:	2b14      	cmp	r3, #20
 8001510:	d101      	bne.n	8001516 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001512:	2304      	movs	r3, #4
 8001514:	e000      	b.n	8001518 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001516:	2305      	movs	r3, #5
    }				
  }
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 f945 	bl	80017b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800152c:	f003 f8b6 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8001530:	4601      	mov	r1, r0
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_Init+0x68>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <HAL_Init+0x6c>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	fa21 f303 	lsr.w	r3, r1, r3
 8001548:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_Init+0x68>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_Init+0x6c>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_Init+0x70>)
 8001562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <HAL_Init+0x74>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fd2a 	bl	8000fc4 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e002      	b.n	8001580 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157a:	f7ff fc67 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	58024400 	.word	0x58024400
 800158c:	0801a904 	.word	0x0801a904
 8001590:	24000004 	.word	0x24000004
 8001594:	24000000 	.word	0x24000000

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2400000c 	.word	0x2400000c
 80015bc:	24005044 	.word	0x24005044

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	24005044 	.word	0x24005044

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_Delay+0x40>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2400000c 	.word	0x2400000c

0800161c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetREVID+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0c1b      	lsrs	r3, r3, #16
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	5c001000 	.word	0x5c001000

08001634 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001644:	4904      	ldr	r1, [pc, #16]	; (8001658 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	58000400 	.word	0x58000400

0800165c <__NVIC_SetPriorityGrouping>:
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <__NVIC_SetPriorityGrouping+0x40>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	4313      	orrs	r3, r2
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x40>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00
 80016a0:	05fa0000 	.word	0x05fa0000

080016a4 <__NVIC_GetPriorityGrouping>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff4c 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017da:	f7ff ff63 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 80017de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	6978      	ldr	r0, [r7, #20]
 80017e6:	f7ff ffb3 	bl	8001750 <NVIC_EncodePriority>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff82 	bl	80016fc <__NVIC_SetPriority>
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff56 	bl	80016c0 <__NVIC_EnableIRQ>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001820:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_MPU_Disable+0x24>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <HAL_MPU_Disable+0x24>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <HAL_MPU_Disable+0x28>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	e000ed90 	.word	0xe000ed90

08001848 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_MPU_Enable+0x34>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_MPU_Enable+0x38>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MPU_Enable+0x38>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001866:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800186a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed90 	.word	0xe000ed90
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	785a      	ldrb	r2, [r3, #1]
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_MPU_ConfigRegion+0x84>)
 8001892:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d029      	beq.n	80018f0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_MPU_ConfigRegion+0x84>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7b1b      	ldrb	r3, [r3, #12]
 80018a8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7adb      	ldrb	r3, [r3, #11]
 80018ae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7a9b      	ldrb	r3, [r3, #10]
 80018b6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7b5b      	ldrb	r3, [r3, #13]
 80018be:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7b9b      	ldrb	r3, [r3, #14]
 80018c6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7bdb      	ldrb	r3, [r3, #15]
 80018ce:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7a5b      	ldrb	r3, [r3, #9]
 80018d6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7a1b      	ldrb	r3, [r3, #8]
 80018de:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018e0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018ec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80018ee:	e005      	b.n	80018fc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_MPU_ConfigRegion+0x84>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_MPU_ConfigRegion+0x84>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed90 	.word	0xe000ed90

0800190c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e0c6      	b.n	8001aac <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f006 fb14 	bl	8007f54 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2223      	movs	r2, #35	; 0x23
 8001930:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <HAL_ETH_Init+0x1a8>)
 8001934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001938:	4a5e      	ldr	r2, [pc, #376]	; (8001ab4 <HAL_ETH_Init+0x1a8>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001942:	4b5c      	ldr	r3, [pc, #368]	; (8001ab4 <HAL_ETH_Init+0x1a8>)
 8001944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7a1b      	ldrb	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fe6b 	bl	8001634 <HAL_SYSCFG_ETHInterfaceSelect>
 800195e:	e003      	b.n	8001968 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001960:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001964:	f7ff fe66 	bl	8001634 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001980:	f7ff fe1e 	bl	80015c0 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001986:	e00f      	b.n	80019a8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001988:	f7ff fe1a 	bl	80015c0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001996:	d907      	bls.n	80019a8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2204      	movs	r2, #4
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	22e0      	movs	r2, #224	; 0xe0
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e081      	b.n	8001aac <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1e6      	bne.n	8001988 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 f9ae 	bl	8002d1c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80019c0:	f002 ffde 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <HAL_ETH_Init+0x1ac>)
 80019c8:	fba3 2302 	umull	r2, r3, r3, r2
 80019cc:	0c9a      	lsrs	r2, r3, #18
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3a01      	subs	r2, #1
 80019d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 f901 	bl	8002be0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019f8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	22e0      	movs	r2, #224	; 0xe0
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e04a      	b.n	8001aac <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a1e:	4413      	add	r3, r2
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_ETH_Init+0x1b0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6952      	ldr	r2, [r2, #20]
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	6809      	ldr	r1, [r1, #0]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a36:	440b      	add	r3, r1
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f001 f9c6 	bl	8002dcc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f001 fa0a 	bl	8002e5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	3305      	adds	r3, #5
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	021a      	lsls	r2, r3, #8
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	3303      	adds	r3, #3
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	061a      	lsls	r2, r3, #24
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	3302      	adds	r3, #2
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a92:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a94:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	ffff8001 	.word	0xffff8001

08001ac0 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	330a      	adds	r3, #10
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_ETH_DescAssignMemory+0x28>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d904      	bls.n	8001af2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e021      	b.n	8001b36 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d174      	bne.n	8001c3c <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2223      	movs	r2, #35	; 0x23
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e00f      	b.n	8001b7e <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	330a      	adds	r3, #10
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d9ec      	bls.n	8001b5e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0202 	orr.w	r2, r2, #2
 8001b98:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bc6:	4413      	add	r3, r2
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6811      	ldr	r1, [r2, #0]
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bd6:	440b      	add	r3, r1
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f241 1308 	movw	r3, #4360	; 0x1108
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6811      	ldr	r1, [r2, #0]
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bf2:	440b      	add	r3, r1
 8001bf4:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001c08:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001c0c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f241 1334 	movw	r3, #4404	; 0x1134
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6811      	ldr	r1, [r2, #0]
 8001c1e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001c22:	431a      	orrs	r2, r3
 8001c24:	f241 1334 	movw	r3, #4404	; 0x1134
 8001c28:	440b      	add	r3, r1
 8001c2a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2222      	movs	r2, #34	; 0x22
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e000      	b.n	8001c3e <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
  }
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d067      	beq.n	8001d2c <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2223      	movs	r2, #35	; 0x23
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f241 1334 	movw	r3, #4404	; 0x1134
 8001c6a:	4413      	add	r3, r2
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6811      	ldr	r1, [r2, #0]
 8001c72:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <HAL_ETH_Stop_IT+0xf0>)
 8001c74:	401a      	ands	r2, r3
 8001c76:	f241 1334 	movw	r3, #4404	; 0x1134
 8001c7a:	440b      	add	r3, r1
 8001c7c:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f241 1304 	movw	r3, #4356	; 0x1104
 8001c86:	4413      	add	r3, r2
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	f023 0201 	bic.w	r2, r3, #1
 8001c92:	f241 1304 	movw	r3, #4356	; 0x1104
 8001c96:	440b      	add	r3, r1
 8001c98:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ca2:	4413      	add	r3, r2
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	f023 0201 	bic.w	r2, r3, #1
 8001cae:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cb2:	440b      	add	r3, r1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0202 	bic.w	r2, r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e00f      	b.n	8001d10 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	330a      	adds	r3, #10
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d9ec      	bls.n	8001cf0 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2210      	movs	r2, #16
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2210      	movs	r2, #16
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
  }
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	ffff2fbe 	.word	0xffff2fbe

08001d40 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e073      	b.n	8001e4a <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d16e      	bne.n	8001e48 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f001 f8d0 	bl	8002f14 <ETH_Prepare_Tx_Descriptors>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e05f      	b.n	8001e4a <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3206      	adds	r2, #6
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d904      	bls.n	8001db4 <HAL_ETH_Transmit+0x74>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	1f1a      	subs	r2, r3, #4
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	3106      	adds	r1, #6
 8001dc0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001dc4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001dc8:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001dca:	f7ff fbf9 	bl	80015c0 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001dd0:	e034      	b.n	8001e3c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d011      	beq.n	8001e08 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	f043 0208 	orr.w	r2, r3, #8
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	22e0      	movs	r2, #224	; 0xe0
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e020      	b.n	8001e4a <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0e:	d015      	beq.n	8001e3c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001e10:	f7ff fbd6 	bl	80015c0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d302      	bcc.n	8001e26 <HAL_ETH_Transmit+0xe6>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10a      	bne.n	8001e3c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	f043 0204 	orr.w	r2, r3, #4
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22e0      	movs	r2, #224	; 0xe0
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e006      	b.n	8001e4a <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dbc6      	blt.n	8001dd2 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b089      	sub	sp, #36	; 0x24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	332c      	adds	r3, #44	; 0x2c
 8001e5e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6e:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d06b      	beq.n	8001f5c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e0ce      	b.n	8002026 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d036      	beq.n	8001f08 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d902      	bls.n	8001ebc <HAL_ETH_IsRxDataAvailable+0x6a>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b04      	subs	r3, #4
 8001eba:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db11      	blt.n	8001ef2 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2201      	movs	r2, #1
 8001ede:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d902      	bls.n	8001ef2 <HAL_ETH_IsRxDataAvailable+0xa0>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e08e      	b.n	8002026 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d012      	beq.n	8001f3a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d902      	bls.n	8001f2e <HAL_ETH_IsRxDataAvailable+0xdc>
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	e010      	b.n	8001f5c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3301      	adds	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d902      	bls.n	8001f52 <HAL_ETH_IsRxDataAvailable+0x100>
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db02      	blt.n	8001f6a <HAL_ETH_IsRxDataAvailable+0x118>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d98e      	bls.n	8001e88 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d056      	beq.n	800201e <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e03b      	b.n	8002008 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f9e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d20d      	bcs.n	8002002 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d902      	bls.n	8001ff8 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b04      	subs	r3, #4
 8001ff6:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3bf      	bcc.n	8001f90 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	f241 1328 	movw	r3, #4392	; 0x1128
 800201a:	440b      	add	r3, r1
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]

  return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08a      	sub	sp, #40	; 0x28
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	332c      	adds	r3, #44	; 0x2c
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07d      	b.n	8002166 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10f      	bne.n	8002092 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff feed 	bl	8001e52 <HAL_ETH_IsRxDataAvailable>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e071      	b.n	8002166 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002090:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
 8002096:	e031      	b.n	80020fc <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	461a      	mov	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	461a      	mov	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020d2:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d902      	bls.n	80020e6 <HAL_ETH_GetRxDataBuffer+0xb4>
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	3b04      	subs	r3, #4
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	3301      	adds	r3, #1
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	3b01      	subs	r3, #1
 8002102:	6a3a      	ldr	r2, [r7, #32]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3c7      	bcc.n	8002098 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	461a      	mov	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	429a      	cmp	r2, r3
 8002128:	d803      	bhi.n	8002132 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	e018      	b.n	8002164 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	461a      	mov	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	e001      	b.n	8002164 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3728      	adds	r7, #40	; 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	332c      	adds	r3, #44	; 0x2c
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fe60 	bl	8001e52 <HAL_ETH_IsRxDataAvailable>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e017      	b.n	80021cc <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4413      	add	r3, r2
 80021a4:	3b01      	subs	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d902      	bls.n	80021b4 <HAL_ETH_GetRxDataLength+0x46>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3b04      	subs	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	332c      	adds	r3, #44	; 0x2c
 80021e0:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e057      	b.n	80022b4 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e03b      	b.n	8002290 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002226:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3b01      	subs	r3, #1
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d20d      	bcs.n	800228a <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d902      	bls.n	8002280 <HAL_ETH_BuildRxDescriptors+0xac>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b04      	subs	r3, #4
 800227e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	3301      	adds	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	d3bf      	bcc.n	8002218 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	f241 1328 	movw	r3, #4392	; 0x1128
 80022a2:	440b      	add	r3, r1
 80022a4:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3724      	adds	r7, #36	; 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e03e      	b.n	8002360 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ea:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	055b      	lsls	r3, r3, #21
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f043 030c 	orr.w	r3, r3, #12
 800230e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002322:	f7ff f94d 	bl	80015c0 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002328:	e009      	b.n	800233e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800232a:	f7ff f949 	bl	80015c0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002338:	d901      	bls.n	800233e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e010      	b.n	8002360 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ed      	bne.n	800232a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e03c      	b.n	8002404 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002392:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	055b      	lsls	r3, r3, #21
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 030c 	bic.w	r3, r3, #12
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_ETH_WritePHYRegister+0xa4>)
 80023ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_ETH_WritePHYRegister+0xa4>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80023d6:	f7ff f8f3 	bl	80015c0 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023dc:	e009      	b.n	80023f2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80023de:	f7ff f8ef 	bl	80015c0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ec:	d901      	bls.n	80023f2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e008      	b.n	8002404 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ed      	bne.n	80023de <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40028000 	.word	0x40028000

08002410 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e1c3      	b.n	80027ac <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf14      	ite	ne
 8002486:	2301      	movne	r3, #1
 8002488:	2300      	moveq	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0e5b      	lsrs	r3, r3, #25
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf14      	ite	ne
 8002722:	2301      	movne	r3, #1
 8002724:	2300      	moveq	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002738:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002748:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e00a      	b.n	80027e2 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d105      	bne.n	80027e0 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f860 	bl	800289c <ETH_SetMACConfig>

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027fc:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002804:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002806:	f002 f8bb 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 800280a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d908      	bls.n	8002826 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d804      	bhi.n	8002826 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e027      	b.n	8002876 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d908      	bls.n	8002840 <HAL_ETH_SetMDIOClockRange+0x54>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d804      	bhi.n	8002840 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e01a      	b.n	8002876 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d903      	bls.n	8002850 <HAL_ETH_SetMDIOClockRange+0x64>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d911      	bls.n	8002874 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d908      	bls.n	800286a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_ETH_SetMDIOClockRange+0xac>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d804      	bhi.n	800286a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e005      	b.n	8002876 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e000      	b.n	8002876 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002874:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	01312cff 	.word	0x01312cff
 800288c:	02160ebf 	.word	0x02160ebf
 8002890:	039386ff 	.word	0x039386ff
 8002894:	05f5e0ff 	.word	0x05f5e0ff
 8002898:	08f0d17f 	.word	0x08f0d17f

0800289c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80028ae:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	791b      	ldrb	r3, [r3, #4]
 80028b4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80028b6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	7b1b      	ldrb	r3, [r3, #12]
 80028bc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028be:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	7b5b      	ldrb	r3, [r3, #13]
 80028c4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028c6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	7b9b      	ldrb	r3, [r3, #14]
 80028cc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	7bdb      	ldrb	r3, [r3, #15]
 80028d4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028d6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	7c12      	ldrb	r2, [r2, #16]
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d102      	bne.n	80028e6 <ETH_SetMACConfig+0x4a>
 80028e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028e4:	e000      	b.n	80028e8 <ETH_SetMACConfig+0x4c>
 80028e6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028e8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	7c52      	ldrb	r2, [r2, #17]
 80028ee:	2a00      	cmp	r2, #0
 80028f0:	d102      	bne.n	80028f8 <ETH_SetMACConfig+0x5c>
 80028f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f6:	e000      	b.n	80028fa <ETH_SetMACConfig+0x5e>
 80028f8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028fa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	7c9b      	ldrb	r3, [r3, #18]
 8002900:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002902:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002908:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800290e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	7f1b      	ldrb	r3, [r3, #28]
 8002914:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002916:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	7f5b      	ldrb	r3, [r3, #29]
 800291c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800291e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	7f92      	ldrb	r2, [r2, #30]
 8002924:	2a00      	cmp	r2, #0
 8002926:	d102      	bne.n	800292e <ETH_SetMACConfig+0x92>
 8002928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800292c:	e000      	b.n	8002930 <ETH_SetMACConfig+0x94>
 800292e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002930:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	7fdb      	ldrb	r3, [r3, #31]
 8002936:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002938:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002940:	2a00      	cmp	r2, #0
 8002942:	d102      	bne.n	800294a <ETH_SetMACConfig+0xae>
 8002944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002948:	e000      	b.n	800294c <ETH_SetMACConfig+0xb0>
 800294a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800294c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002952:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800295a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800295c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <ETH_SetMACConfig+0x22c>)
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	430b      	orrs	r3, r1
 8002978:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002986:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002988:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002990:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002992:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800299a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800299c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d102      	bne.n	80029ae <ETH_SetMACConfig+0x112>
 80029a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ac:	e000      	b.n	80029b0 <ETH_SetMACConfig+0x114>
 80029ae:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80029b0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <ETH_SetMACConfig+0x230>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <ETH_SetMACConfig+0x234>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029fe:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a06:	2a00      	cmp	r2, #0
 8002a08:	d101      	bne.n	8002a0e <ETH_SetMACConfig+0x172>
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	e000      	b.n	8002a10 <ETH_SetMACConfig+0x174>
 8002a0e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002a10:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a16:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a22:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002a26:	4013      	ands	r3, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	68f9      	ldr	r1, [r7, #12]
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002a38:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002a40:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f023 0103 	bic.w	r1, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a66:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002a82:	2a00      	cmp	r2, #0
 8002a84:	d101      	bne.n	8002a8a <ETH_SetMACConfig+0x1ee>
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	e000      	b.n	8002a8c <ETH_SetMACConfig+0x1f0>
 8002a8a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002a8c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002a94:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a96:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a9e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002aac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	00048083 	.word	0x00048083
 8002acc:	c0f88000 	.word	0xc0f88000
 8002ad0:	fffffef0 	.word	0xfffffef0

08002ad4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <ETH_SetDMAConfig+0xf8>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6809      	ldr	r1, [r1, #0]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002afa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b06:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b1a:	4413      	add	r3, r2
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <ETH_SetDMAConfig+0xfc>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6811      	ldr	r1, [r2, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b2e:	440b      	add	r3, r1
 8002b30:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7b5b      	ldrb	r3, [r3, #13]
 8002b36:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <ETH_SetDMAConfig+0x100>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002b5a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	7d1b      	ldrb	r3, [r3, #20]
 8002b64:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b66:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	7f5b      	ldrb	r3, [r3, #29]
 8002b6c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b7a:	4413      	add	r3, r2
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <ETH_SetDMAConfig+0x104>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6811      	ldr	r1, [r2, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b8e:	440b      	add	r3, r1
 8002b90:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	7f1b      	ldrb	r3, [r3, #28]
 8002b96:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ba8:	4413      	add	r3, r2
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <ETH_SetDMAConfig+0x108>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6811      	ldr	r1, [r2, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bbc:	440b      	add	r3, r1
 8002bbe:	601a      	str	r2, [r3, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	ffff87fd 	.word	0xffff87fd
 8002bd0:	ffff2ffe 	.word	0xffff2ffe
 8002bd4:	fffec000 	.word	0xfffec000
 8002bd8:	ffc0efef 	.word	0xffc0efef
 8002bdc:	7fc0ffff 	.word	0x7fc0ffff

08002be0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0a4      	sub	sp, #144	; 0x90
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c38:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002c3c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002c62:	2300      	movs	r3, #0
 8002c64:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fde6 	bl	800289c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cf8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002d00:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fee1 	bl	8002ad4 <ETH_SetDMAConfig>
}
 8002d12:	bf00      	nop
 8002d14:	3790      	adds	r7, #144	; 0x90
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d36:	f001 fe23 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 8002d3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d908      	bls.n	8002d56 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d804      	bhi.n	8002d56 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e027      	b.n	8002da6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d908      	bls.n	8002d70 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d804      	bhi.n	8002d70 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e01a      	b.n	8002da6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d903      	bls.n	8002d80 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d911      	bls.n	8002da4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d908      	bls.n	8002d9a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d804      	bhi.n	8002d9a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e005      	b.n	8002da6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e000      	b.n	8002da6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002da4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	01312cff 	.word	0x01312cff
 8002dbc:	02160ebf 	.word	0x02160ebf
 8002dc0:	039386ff 	.word	0x039386ff
 8002dc4:	05f5e0ff 	.word	0x05f5e0ff
 8002dc8:	08f0d17f 	.word	0x08f0d17f

08002dcc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e01d      	b.n	8002e16 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	3206      	adds	r2, #6
 8002e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d9de      	bls.n	8002dda <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f241 132c 	movw	r3, #4396	; 0x112c
 8002e2a:	4413      	add	r3, r2
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68d9      	ldr	r1, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f241 1314 	movw	r3, #4372	; 0x1114
 8002e3c:	4413      	add	r3, r2
 8002e3e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002e4c:	601a      	str	r2, [r3, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e024      	b.n	8002eb2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6919      	ldr	r1, [r3, #16]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	330a      	adds	r3, #10
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d9d7      	bls.n	8002e68 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f241 1330 	movw	r3, #4400	; 0x1130
 8002ede:	4413      	add	r3, r2
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6919      	ldr	r1, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	f241 131c 	movw	r3, #4380	; 0x111c
 8002ef0:	4413      	add	r3, r2
 8002ef2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	f241 1328 	movw	r3, #4392	; 0x1128
 8002f04:	4413      	add	r3, r2
 8002f06:	6019      	str	r1, [r3, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b08d      	sub	sp, #52	; 0x34
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3318      	adds	r3, #24
 8002f24:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f52:	d101      	bne.n	8002f58 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002f54:	2302      	movs	r3, #2
 8002f56:	e223      	b.n	80033a0 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d044      	beq.n	8002fee <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4b72      	ldr	r3, [pc, #456]	; (8003134 <ETH_Prepare_Tx_Descriptors+0x220>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f70:	431a      	orrs	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d027      	beq.n	8002fee <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fdc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fec:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003000:	4013      	ands	r3, r2
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	6992      	ldr	r2, [r2, #24]
 8003006:	431a      	orrs	r2, r3
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <ETH_Prepare_Tx_Descriptors+0x11c>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d030      	beq.n	8003092 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	3301      	adds	r3, #1
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	2b03      	cmp	r3, #3
 8003052:	d902      	bls.n	800305a <ETH_Prepare_Tx_Descriptors+0x146>
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	3b04      	subs	r3, #4
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	3301      	adds	r3, #1
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003076:	d10c      	bne.n	8003092 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	e186      	b.n	80033a0 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	3301      	adds	r3, #1
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <ETH_Prepare_Tx_Descriptors+0x224>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	6852      	ldr	r2, [r2, #4]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d012      	beq.n	80030e2 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	4b1a      	ldr	r3, [pc, #104]	; (800313c <ETH_Prepare_Tx_Descriptors+0x228>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	6852      	ldr	r2, [r2, #4]
 80030d8:	0412      	lsls	r2, r2, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e008      	b.n	80030f4 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2200      	movs	r2, #0
 80030e6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <ETH_Prepare_Tx_Descriptors+0x228>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d021      	beq.n	8003144 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	04db      	lsls	r3, r3, #19
 800310e:	431a      	orrs	r2, r3
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800311a:	4013      	ands	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	69d2      	ldr	r2, [r2, #28]
 8003120:	431a      	orrs	r2, r3
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	e02e      	b.n	8003192 <ETH_Prepare_Tx_Descriptors+0x27e>
 8003134:	ffff0000 	.word	0xffff0000
 8003138:	ffffc000 	.word	0xffffc000
 800313c:	c000ffff 	.word	0xc000ffff
 8003140:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	4b98      	ldr	r3, [pc, #608]	; (80033ac <ETH_Prepare_Tx_Descriptors+0x498>)
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	431a      	orrs	r2, r3
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	431a      	orrs	r2, r3
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	431a      	orrs	r2, r3
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	431a      	orrs	r2, r3
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80c0 	beq.w	8003362 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80031f4:	e0b5      	b.n	8003362 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	3301      	adds	r3, #1
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	2b03      	cmp	r3, #3
 800320c:	d902      	bls.n	8003214 <ETH_Prepare_Tx_Descriptors+0x300>
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	3b04      	subs	r3, #4
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003236:	d126      	bne.n	8003286 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	e016      	b.n	800327a <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	3301      	adds	r3, #1
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b03      	cmp	r3, #3
 8003262:	d902      	bls.n	800326a <ETH_Prepare_Tx_Descriptors+0x356>
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	3b04      	subs	r3, #4
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003272:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	3301      	adds	r3, #1
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	429a      	cmp	r2, r3
 8003280:	d3e4      	bcc.n	800324c <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8003282:	2302      	movs	r3, #2
 8003284:	e08c      	b.n	80033a0 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	3301      	adds	r3, #1
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	6852      	ldr	r2, [r2, #4]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	6852      	ldr	r2, [r2, #4]
 80032d2:	0412      	lsls	r2, r2, #16
 80032d4:	431a      	orrs	r2, r3
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	e008      	b.n	80032ee <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2200      	movs	r2, #0
 80032e0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00f      	beq.n	800331a <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003300:	4013      	ands	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	69d2      	ldr	r2, [r2, #28]
 8003306:	431a      	orrs	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e017      	b.n	800334a <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <ETH_Prepare_Tx_Descriptors+0x498>)
 8003320:	4013      	ands	r3, r2
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	6852      	ldr	r2, [r2, #4]
 8003326:	431a      	orrs	r2, r3
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	431a      	orrs	r2, r3
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f47f af45 	bne.w	80031f6 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	e005      	b.n	800338c <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339c:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3734      	adds	r7, #52	; 0x34
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	ffff8000 	.word	0xffff8000
 80033b0:	ffffc000 	.word	0xffffc000
 80033b4:	c000ffff 	.word	0xc000ffff
 80033b8:	fffc0000 	.word	0xfffc0000

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_GPIO_Init+0x234>)
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ce:	e194      	b.n	80036fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8186 	beq.w	80036f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d00b      	beq.n	8003408 <HAL_GPIO_Init+0x4c>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d007      	beq.n	8003408 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033fc:	2b11      	cmp	r3, #17
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b12      	cmp	r3, #18
 8003406:	d130      	bne.n	800346a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343e:	2201      	movs	r2, #1
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 0201 	and.w	r2, r3, #1
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0xee>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80e0 	beq.w	80036f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_GPIO_Init+0x238>)
 8003536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800353a:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_GPIO_Init+0x238>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_GPIO_Init+0x238>)
 8003546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003552:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <HAL_GPIO_Init+0x23c>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a20      	ldr	r2, [pc, #128]	; (80035fc <HAL_GPIO_Init+0x240>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d052      	beq.n	8003624 <HAL_GPIO_Init+0x268>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_GPIO_Init+0x244>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_GPIO_Init+0x22e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_GPIO_Init+0x248>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <HAL_GPIO_Init+0x22a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_GPIO_Init+0x24c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d025      	beq.n	80035e2 <HAL_GPIO_Init+0x226>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_GPIO_Init+0x250>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x222>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_GPIO_Init+0x254>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x21e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_GPIO_Init+0x258>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x21a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_GPIO_Init+0x25c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x216>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_GPIO_Init+0x260>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x212>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a17      	ldr	r2, [pc, #92]	; (8003620 <HAL_GPIO_Init+0x264>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x20e>
 80035c6:	2309      	movs	r3, #9
 80035c8:	e02d      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ca:	230a      	movs	r3, #10
 80035cc:	e02b      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ce:	2308      	movs	r3, #8
 80035d0:	e029      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e027      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e025      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035da:	2305      	movs	r3, #5
 80035dc:	e023      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035de:	2304      	movs	r3, #4
 80035e0:	e021      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e01f      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e01d      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e01b      	b.n	8003626 <HAL_GPIO_Init+0x26a>
 80035ee:	bf00      	nop
 80035f0:	58000080 	.word	0x58000080
 80035f4:	58024400 	.word	0x58024400
 80035f8:	58000400 	.word	0x58000400
 80035fc:	58020000 	.word	0x58020000
 8003600:	58020400 	.word	0x58020400
 8003604:	58020800 	.word	0x58020800
 8003608:	58020c00 	.word	0x58020c00
 800360c:	58021000 	.word	0x58021000
 8003610:	58021400 	.word	0x58021400
 8003614:	58021800 	.word	0x58021800
 8003618:	58021c00 	.word	0x58021c00
 800361c:	58022000 	.word	0x58022000
 8003620:	58022400 	.word	0x58022400
 8003624:	2300      	movs	r3, #0
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	f002 0203 	and.w	r2, r2, #3
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	4093      	lsls	r3, r2
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003636:	4938      	ldr	r1, [pc, #224]	; (8003718 <HAL_GPIO_Init+0x35c>)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3302      	adds	r3, #2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80036be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	f47f ae63 	bne.w	80033d0 <HAL_GPIO_Init+0x14>
  }
}
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	58000400 	.word	0x58000400

0800371c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
 8003728:	4613      	mov	r3, r2
 800372a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800372c:	787b      	ldrb	r3, [r7, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003738:	e003      	b.n	8003742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800373a:	887b      	ldrh	r3, [r7, #2]
 800373c:	041a      	lsls	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	619a      	str	r2, [r3, #24]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_HSEM_FastTake+0x2c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3320      	adds	r3, #32
 800375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <HAL_HSEM_FastTake+0x30>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d101      	bne.n	800376c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	58026400 	.word	0x58026400
 8003780:	80000300 	.word	0x80000300

08003784 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800378e:	4906      	ldr	r1, [pc, #24]	; (80037a8 <HAL_HSEM_Release+0x24>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	58026400 	.word	0x58026400

080037ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ae:	b08f      	sub	sp, #60	; 0x3c
 80037b0:	af0a      	add	r7, sp, #40	; 0x28
 80037b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e116      	b.n	80039ec <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7fd fb9b 	bl	8000f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2203      	movs	r2, #3
 80037e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 ffdf 	bl	80077c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	687e      	ldr	r6, [r7, #4]
 800380a:	466d      	mov	r5, sp
 800380c:	f106 0410 	add.w	r4, r6, #16
 8003810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003818:	e894 0003 	ldmia.w	r4, {r0, r1}
 800381c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003820:	1d33      	adds	r3, r6, #4
 8003822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003824:	6838      	ldr	r0, [r7, #0]
 8003826:	f003 ff69 	bl	80076fc <USB_CoreInit>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0d7      	b.n	80039ec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f003 ffcd 	bl	80077e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	e04a      	b.n	80038e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	333d      	adds	r3, #61	; 0x3d
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	333c      	adds	r3, #60	; 0x3c
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	b298      	uxth	r0, r3
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3342      	adds	r3, #66	; 0x42
 800388a:	4602      	mov	r2, r0
 800388c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	333f      	adds	r3, #63	; 0x3f
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3344      	adds	r3, #68	; 0x44
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3348      	adds	r3, #72	; 0x48
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	3350      	adds	r3, #80	; 0x50
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3301      	adds	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3af      	bcc.n	800384e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	e044      	b.n	800397e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	3301      	adds	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d3b5      	bcc.n	80038f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	687e      	ldr	r6, [r7, #4]
 8003990:	466d      	mov	r5, sp
 8003992:	f106 0410 	add.w	r4, r6, #16
 8003996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039a6:	1d33      	adds	r3, r6, #4
 80039a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039aa:	6838      	ldr	r0, [r7, #0]
 80039ac:	f003 ff44 	bl	8007838 <USB_DevInit>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e014      	b.n	80039ec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d102      	bne.n	80039e0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f80a 	bl	80039f4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 f8e6 	bl	8007bb6 <USB_DevDisconnect>

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	10000003 	.word	0x10000003

08003a3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_PWREx_ConfigSupply+0xb0>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d00a      	beq.n	8003a66 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_PWREx_ConfigSupply+0xb0>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e040      	b.n	8003ae4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e03e      	b.n	8003ae4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_PWREx_ConfigSupply+0xb0>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a6e:	491f      	ldr	r1, [pc, #124]	; (8003aec <HAL_PWREx_ConfigSupply+0xb0>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a76:	f7fd fda3 	bl	80015c0 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a7c:	e009      	b.n	8003a92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a7e:	f7fd fd9f 	bl	80015c0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8c:	d901      	bls.n	8003a92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e028      	b.n	8003ae4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <HAL_PWREx_ConfigSupply+0xb0>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b1e      	cmp	r3, #30
 8003aa4:	d008      	beq.n	8003ab8 <HAL_PWREx_ConfigSupply+0x7c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8003aaa:	d005      	beq.n	8003ab8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b1d      	cmp	r3, #29
 8003ab0:	d002      	beq.n	8003ab8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b2d      	cmp	r3, #45	; 0x2d
 8003ab6:	d114      	bne.n	8003ae2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ab8:	f7fd fd82 	bl	80015c0 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003abe:	e009      	b.n	8003ad4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ac0:	f7fd fd7e 	bl	80015c0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ace:	d901      	bls.n	8003ad4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e007      	b.n	8003ae4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_PWREx_ConfigSupply+0xb0>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d1ee      	bne.n	8003ac0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	58024800 	.word	0x58024800

08003af0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	58024800 	.word	0x58024800

08003b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e3ff      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8087 	beq.w	8003c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b30:	4b99      	ldr	r3, [pc, #612]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b3a:	4b97      	ldr	r3, [pc, #604]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d007      	beq.n	8003b56 <HAL_RCC_OscConfig+0x46>
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b18      	cmp	r3, #24
 8003b4a:	d110      	bne.n	8003b6e <HAL_RCC_OscConfig+0x5e>
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d10b      	bne.n	8003b6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b56:	4b90      	ldr	r3, [pc, #576]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d06c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x12c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d168      	bne.n	8003c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e3d9      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b76:	d106      	bne.n	8003b86 <HAL_RCC_OscConfig+0x76>
 8003b78:	4b87      	ldr	r3, [pc, #540]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a86      	ldr	r2, [pc, #536]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e02e      	b.n	8003be4 <HAL_RCC_OscConfig+0xd4>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x98>
 8003b8e:	4b82      	ldr	r3, [pc, #520]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a81      	ldr	r2, [pc, #516]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7e      	ldr	r2, [pc, #504]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e01d      	b.n	8003be4 <HAL_RCC_OscConfig+0xd4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0xbc>
 8003bb2:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a78      	ldr	r2, [pc, #480]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a75      	ldr	r2, [pc, #468]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0xd4>
 8003bcc:	4b72      	ldr	r3, [pc, #456]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a71      	ldr	r2, [pc, #452]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fce8 	bl	80015c0 <HAL_GetTick>
 8003bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fd fce4 	bl	80015c0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e38d      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c06:	4b64      	ldr	r3, [pc, #400]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xe4>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fd fcd4 	bl	80015c0 <HAL_GetTick>
 8003c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fd fcd0 	bl	80015c0 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e379      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c2e:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x10c>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80ae 	beq.w	8003da8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4c:	4b52      	ldr	r3, [pc, #328]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c56:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_RCC_OscConfig+0x162>
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	2b18      	cmp	r3, #24
 8003c66:	d13a      	bne.n	8003cde <HAL_RCC_OscConfig+0x1ce>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d135      	bne.n	8003cde <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c72:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x17a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e34b      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	f7fd fcc7 	bl	800161c <HAL_GetREVID>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d817      	bhi.n	8003cc8 <HAL_RCC_OscConfig+0x1b8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d108      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x1a2>
 8003ca0:	4b3d      	ldr	r3, [pc, #244]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ca8:	4a3b      	ldr	r2, [pc, #236]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb0:	e07a      	b.n	8003da8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb2:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	031b      	lsls	r3, r3, #12
 8003cc0:	4935      	ldr	r1, [pc, #212]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc6:	e06f      	b.n	8003da8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	4930      	ldr	r1, [pc, #192]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cdc:	e064      	b.n	8003da8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d045      	beq.n	8003d72 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 0219 	bic.w	r2, r3, #25
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4929      	ldr	r1, [pc, #164]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fc62 	bl	80015c0 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fd fc5e 	bl	80015c0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e307      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d12:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1e:	f7fd fc7d 	bl	800161c <HAL_GetREVID>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d817      	bhi.n	8003d5c <HAL_RCC_OscConfig+0x24c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d108      	bne.n	8003d46 <HAL_RCC_OscConfig+0x236>
 8003d34:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d3c:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d42:	6053      	str	r3, [r2, #4]
 8003d44:	e030      	b.n	8003da8 <HAL_RCC_OscConfig+0x298>
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	031b      	lsls	r3, r3, #12
 8003d54:	4910      	ldr	r1, [pc, #64]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
 8003d5a:	e025      	b.n	8003da8 <HAL_RCC_OscConfig+0x298>
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	490b      	ldr	r1, [pc, #44]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
 8003d70:	e01a      	b.n	8003da8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HAL_RCC_OscConfig+0x288>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fc1f 	bl	80015c0 <HAL_GetTick>
 8003d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d86:	f7fd fc1b 	bl	80015c0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d903      	bls.n	8003d9c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e2c4      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
 8003d98:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d9c:	4ba4      	ldr	r3, [pc, #656]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ee      	bne.n	8003d86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a9 	beq.w	8003f08 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db6:	4b9e      	ldr	r3, [pc, #632]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dc0:	4b9b      	ldr	r3, [pc, #620]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d007      	beq.n	8003ddc <HAL_RCC_OscConfig+0x2cc>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b18      	cmp	r3, #24
 8003dd0:	d13a      	bne.n	8003e48 <HAL_RCC_OscConfig+0x338>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d135      	bne.n	8003e48 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ddc:	4b94      	ldr	r3, [pc, #592]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_OscConfig+0x2e4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b80      	cmp	r3, #128	; 0x80
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e296      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003df4:	f7fd fc12 	bl	800161c <HAL_GetREVID>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	f241 0303 	movw	r3, #4099	; 0x1003
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d817      	bhi.n	8003e32 <HAL_RCC_OscConfig+0x322>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d108      	bne.n	8003e1c <HAL_RCC_OscConfig+0x30c>
 8003e0a:	4b89      	ldr	r3, [pc, #548]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e12:	4a87      	ldr	r2, [pc, #540]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e1a:	e075      	b.n	8003f08 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e1c:	4b84      	ldr	r3, [pc, #528]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	069b      	lsls	r3, r3, #26
 8003e2a:	4981      	ldr	r1, [pc, #516]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e30:	e06a      	b.n	8003f08 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e32:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	497b      	ldr	r1, [pc, #492]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e46:	e05f      	b.n	8003f08 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d042      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e50:	4b77      	ldr	r3, [pc, #476]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a76      	ldr	r2, [pc, #472]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fbb0 	bl	80015c0 <HAL_GetTick>
 8003e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e64:	f7fd fbac 	bl	80015c0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e255      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e76:	4b6e      	ldr	r3, [pc, #440]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e82:	f7fd fbcb 	bl	800161c <HAL_GetREVID>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d817      	bhi.n	8003ec0 <HAL_RCC_OscConfig+0x3b0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d108      	bne.n	8003eaa <HAL_RCC_OscConfig+0x39a>
 8003e98:	4b65      	ldr	r3, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ea0:	4a63      	ldr	r2, [pc, #396]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003ea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea6:	6053      	str	r3, [r2, #4]
 8003ea8:	e02e      	b.n	8003f08 <HAL_RCC_OscConfig+0x3f8>
 8003eaa:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	069b      	lsls	r3, r3, #26
 8003eb8:	495d      	ldr	r1, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
 8003ebe:	e023      	b.n	8003f08 <HAL_RCC_OscConfig+0x3f8>
 8003ec0:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	4958      	ldr	r1, [pc, #352]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60cb      	str	r3, [r1, #12]
 8003ed4:	e018      	b.n	8003f08 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fb6d 	bl	80015c0 <HAL_GetTick>
 8003ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003eea:	f7fd fb69 	bl	80015c0 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e212      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003efc:	4b4c      	ldr	r3, [pc, #304]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f0      	bne.n	8003eea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d036      	beq.n	8003f82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d019      	beq.n	8003f50 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1c:	4b44      	ldr	r3, [pc, #272]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f20:	4a43      	ldr	r2, [pc, #268]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fd fb4a 	bl	80015c0 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd fb46 	bl	80015c0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e1ef      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f42:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x420>
 8003f4e:	e018      	b.n	8003f82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f50:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f54:	4a36      	ldr	r2, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fb30 	bl	80015c0 <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd fb2c 	bl	80015c0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e1d5      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d036      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d019      	beq.n	8003fca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a25      	ldr	r2, [pc, #148]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fa2:	f7fd fb0d 	bl	80015c0 <HAL_GetTick>
 8003fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003faa:	f7fd fb09 	bl	80015c0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e1b2      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x49a>
 8003fc8:	e018      	b.n	8003ffc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd faf3 	bl	80015c0 <HAL_GetTick>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fde:	f7fd faef 	bl	80015c0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e198      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCC_OscConfig+0x520>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8085 	beq.w	8004114 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCC_OscConfig+0x524>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_OscConfig+0x524>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004016:	f7fd fad3 	bl	80015c0 <HAL_GetTick>
 800401a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401c:	e00c      	b.n	8004038 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd facf 	bl	80015c0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b64      	cmp	r3, #100	; 0x64
 800402a:	d905      	bls.n	8004038 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e178      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
 8004030:	58024400 	.word	0x58024400
 8004034:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004038:	4b96      	ldr	r3, [pc, #600]	; (8004294 <HAL_RCC_OscConfig+0x784>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ec      	beq.n	800401e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d106      	bne.n	800405a <HAL_RCC_OscConfig+0x54a>
 800404c:	4b92      	ldr	r3, [pc, #584]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	4a91      	ldr	r2, [pc, #580]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6713      	str	r3, [r2, #112]	; 0x70
 8004058:	e02d      	b.n	80040b6 <HAL_RCC_OscConfig+0x5a6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x56c>
 8004062:	4b8d      	ldr	r3, [pc, #564]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a8c      	ldr	r2, [pc, #560]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
 800406e:	4b8a      	ldr	r3, [pc, #552]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a89      	ldr	r2, [pc, #548]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	e01c      	b.n	80040b6 <HAL_RCC_OscConfig+0x5a6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d10c      	bne.n	800409e <HAL_RCC_OscConfig+0x58e>
 8004084:	4b84      	ldr	r3, [pc, #528]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	4a83      	ldr	r2, [pc, #524]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6713      	str	r3, [r2, #112]	; 0x70
 8004090:	4b81      	ldr	r3, [pc, #516]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	4a80      	ldr	r2, [pc, #512]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	e00b      	b.n	80040b6 <HAL_RCC_OscConfig+0x5a6>
 800409e:	4b7e      	ldr	r3, [pc, #504]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	4a7d      	ldr	r2, [pc, #500]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6713      	str	r3, [r2, #112]	; 0x70
 80040aa:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a7a      	ldr	r2, [pc, #488]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d015      	beq.n	80040ea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fd fa7f 	bl	80015c0 <HAL_GetTick>
 80040c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd fa7b 	bl	80015c0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e122      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040dc:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ee      	beq.n	80040c6 <HAL_RCC_OscConfig+0x5b6>
 80040e8:	e014      	b.n	8004114 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7fd fa69 	bl	80015c0 <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fd fa65 	bl	80015c0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e10c      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004108:	4b63      	ldr	r3, [pc, #396]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ee      	bne.n	80040f2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8101 	beq.w	8004320 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800411e:	4b5e      	ldr	r3, [pc, #376]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004126:	2b18      	cmp	r3, #24
 8004128:	f000 80bc 	beq.w	80042a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b02      	cmp	r3, #2
 8004132:	f040 8095 	bne.w	8004260 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004136:	4b58      	ldr	r3, [pc, #352]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a57      	ldr	r2, [pc, #348]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800413c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fd fa3d 	bl	80015c0 <HAL_GetTick>
 8004146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414a:	f7fd fa39 	bl	80015c0 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e0e2      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800415c:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004168:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800416a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416c:	4b4b      	ldr	r3, [pc, #300]	; (800429c <HAL_RCC_OscConfig+0x78c>)
 800416e:	4013      	ands	r3, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004178:	0112      	lsls	r2, r2, #4
 800417a:	430a      	orrs	r2, r1
 800417c:	4946      	ldr	r1, [pc, #280]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800417e:	4313      	orrs	r3, r2
 8004180:	628b      	str	r3, [r1, #40]	; 0x28
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	3b01      	subs	r3, #1
 8004188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	3b01      	subs	r3, #1
 8004192:	025b      	lsls	r3, r3, #9
 8004194:	b29b      	uxth	r3, r3
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	3b01      	subs	r3, #1
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	3b01      	subs	r3, #1
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041b2:	4939      	ldr	r1, [pc, #228]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80041b8:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a36      	ldr	r2, [pc, #216]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041c4:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c8:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <HAL_RCC_OscConfig+0x790>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041d0:	00d2      	lsls	r2, r2, #3
 80041d2:	4931      	ldr	r1, [pc, #196]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041d8:	4b2f      	ldr	r3, [pc, #188]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	f023 020c 	bic.w	r2, r3, #12
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	492c      	ldr	r1, [pc, #176]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	f023 0202 	bic.w	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	4928      	ldr	r1, [pc, #160]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4a25      	ldr	r2, [pc, #148]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004208:	4b23      	ldr	r3, [pc, #140]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800420e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004214:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800421a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800421e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004220:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd f9c2 	bl	80015c0 <HAL_GetTick>
 800423c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004240:	f7fd f9be 	bl	80015c0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e067      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x730>
 800425e:	e05f      	b.n	8004320 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004260:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800426a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd f9a8 	bl	80015c0 <HAL_GetTick>
 8004270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004274:	f7fd f9a4 	bl	80015c0 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e04d      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RCC_OscConfig+0x788>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x764>
 8004292:	e045      	b.n	8004320 <HAL_RCC_OscConfig+0x810>
 8004294:	58024800 	.word	0x58024800
 8004298:	58024400 	.word	0x58024400
 800429c:	fffffc0c 	.word	0xfffffc0c
 80042a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042a4:	4b21      	ldr	r3, [pc, #132]	; (800432c <HAL_RCC_OscConfig+0x81c>)
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCC_OscConfig+0x81c>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d031      	beq.n	800431c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0203 	and.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d12a      	bne.n	800431c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d122      	bne.n	800431c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d11a      	bne.n	800431c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	0a5b      	lsrs	r3, r3, #9
 80042ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d111      	bne.n	800431c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d108      	bne.n	800431c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	0e1b      	lsrs	r3, r3, #24
 800430e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3730      	adds	r7, #48	; 0x30
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	58024400 	.word	0x58024400

08004330 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e19c      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b8a      	ldr	r3, [pc, #552]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b87      	ldr	r3, [pc, #540]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	4985      	ldr	r1, [pc, #532]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b83      	ldr	r3, [pc, #524]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e184      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	4b7b      	ldr	r3, [pc, #492]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800438c:	429a      	cmp	r2, r3
 800438e:	d908      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004390:	4b78      	ldr	r3, [pc, #480]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4975      	ldr	r1, [pc, #468]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	4b70      	ldr	r3, [pc, #448]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d908      	bls.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043be:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	496a      	ldr	r1, [pc, #424]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	4b64      	ldr	r3, [pc, #400]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d908      	bls.n	80043fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043ec:	4b61      	ldr	r3, [pc, #388]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	495e      	ldr	r1, [pc, #376]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004416:	429a      	cmp	r2, r3
 8004418:	d908      	bls.n	800442c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800441a:	4b56      	ldr	r3, [pc, #344]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4953      	ldr	r1, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004428:	4313      	orrs	r3, r2
 800442a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	4b4d      	ldr	r3, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	429a      	cmp	r2, r3
 8004446:	d908      	bls.n	800445a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b4a      	ldr	r3, [pc, #296]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f023 020f 	bic.w	r2, r3, #15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4947      	ldr	r1, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004456:	4313      	orrs	r3, r2
 8004458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d055      	beq.n	8004512 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4940      	ldr	r1, [pc, #256]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004474:	4313      	orrs	r3, r2
 8004476:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004480:	4b3c      	ldr	r3, [pc, #240]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0f6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004498:	4b36      	ldr	r3, [pc, #216]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d115      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0ea      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0de      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0d6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044d0:	4b28      	ldr	r3, [pc, #160]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 0207 	bic.w	r2, r3, #7
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4925      	ldr	r1, [pc, #148]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fd f86d 	bl	80015c0 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fd f869 	bl	80015c0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0be      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004500:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	429a      	cmp	r2, r3
 8004510:	d1eb      	bne.n	80044ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	429a      	cmp	r2, r3
 800452c:	d208      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x244>)
 800453c:	4313      	orrs	r3, r2
 800453e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d214      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 020f 	bic.w	r2, r3, #15
 8004556:	4906      	ldr	r1, [pc, #24]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d005      	beq.n	8004578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e086      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
 8004570:	52002000 	.word	0x52002000
 8004574:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	4b3f      	ldr	r3, [pc, #252]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004590:	429a      	cmp	r2, r3
 8004592:	d208      	bcs.n	80045a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004594:	4b3c      	ldr	r3, [pc, #240]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4939      	ldr	r1, [pc, #228]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	4b34      	ldr	r3, [pc, #208]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045be:	429a      	cmp	r2, r3
 80045c0:	d208      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045c2:	4b31      	ldr	r3, [pc, #196]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	492e      	ldr	r1, [pc, #184]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	4b28      	ldr	r3, [pc, #160]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d208      	bcs.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045f0:	4b25      	ldr	r3, [pc, #148]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	4922      	ldr	r1, [pc, #136]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800461a:	429a      	cmp	r2, r3
 800461c:	d208      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800461e:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4917      	ldr	r1, [pc, #92]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 800462c:	4313      	orrs	r3, r2
 800462e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004630:	f000 f834 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004634:	4601      	mov	r1, r0
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa21 f303 	lsr.w	r3, r1, r3
 800464c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800464e:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	4a0d      	ldr	r2, [pc, #52]	; (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004658:	5cd3      	ldrb	r3, [r2, r3]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
 8004664:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_RCC_ClockConfig+0x360>)
 8004666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004668:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <HAL_RCC_ClockConfig+0x364>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCC_ClockConfig+0x368>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc fca6 	bl	8000fc4 <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
 800468c:	0801a904 	.word	0x0801a904
 8004690:	24000004 	.word	0x24000004
 8004694:	24000000 	.word	0x24000000
 8004698:	24000008 	.word	0x24000008

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a2:	4baf      	ldr	r3, [pc, #700]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046aa:	2b18      	cmp	r3, #24
 80046ac:	f200 814e 	bhi.w	800494c <HAL_RCC_GetSysClockFreq+0x2b0>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800494d 	.word	0x0800494d
 80046c0:	0800494d 	.word	0x0800494d
 80046c4:	0800494d 	.word	0x0800494d
 80046c8:	0800494d 	.word	0x0800494d
 80046cc:	0800494d 	.word	0x0800494d
 80046d0:	0800494d 	.word	0x0800494d
 80046d4:	0800494d 	.word	0x0800494d
 80046d8:	08004743 	.word	0x08004743
 80046dc:	0800494d 	.word	0x0800494d
 80046e0:	0800494d 	.word	0x0800494d
 80046e4:	0800494d 	.word	0x0800494d
 80046e8:	0800494d 	.word	0x0800494d
 80046ec:	0800494d 	.word	0x0800494d
 80046f0:	0800494d 	.word	0x0800494d
 80046f4:	0800494d 	.word	0x0800494d
 80046f8:	08004749 	.word	0x08004749
 80046fc:	0800494d 	.word	0x0800494d
 8004700:	0800494d 	.word	0x0800494d
 8004704:	0800494d 	.word	0x0800494d
 8004708:	0800494d 	.word	0x0800494d
 800470c:	0800494d 	.word	0x0800494d
 8004710:	0800494d 	.word	0x0800494d
 8004714:	0800494d 	.word	0x0800494d
 8004718:	0800474f 	.word	0x0800474f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800471c:	4b90      	ldr	r3, [pc, #576]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004728:	4b8d      	ldr	r3, [pc, #564]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a8c      	ldr	r2, [pc, #560]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800473a:	e10a      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800473c:	4b89      	ldr	r3, [pc, #548]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800473e:	61bb      	str	r3, [r7, #24]
    break;
 8004740:	e107      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004742:	4b89      	ldr	r3, [pc, #548]	; (8004968 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004744:	61bb      	str	r3, [r7, #24]
    break;
 8004746:	e104      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004748:	4b88      	ldr	r3, [pc, #544]	; (800496c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800474a:	61bb      	str	r3, [r7, #24]
    break;
 800474c:	e101      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474e:	4b84      	ldr	r3, [pc, #528]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004758:	4b81      	ldr	r3, [pc, #516]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004762:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004764:	4b7e      	ldr	r3, [pc, #504]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800476e:	4b7c      	ldr	r3, [pc, #496]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80da 	beq.w	8004946 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d05a      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x1b2>
 8004798:	2b01      	cmp	r3, #1
 800479a:	d302      	bcc.n	80047a2 <HAL_RCC_GetSysClockFreq+0x106>
 800479c:	2b02      	cmp	r3, #2
 800479e:	d078      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0x1f6>
 80047a0:	e099      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a2:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d02d      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ae:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	4a6a      	ldr	r2, [pc, #424]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80047ba:	fa22 f303 	lsr.w	r3, r2, r3
 80047be:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e0:	ee07 3a90 	vmov	s15, r3
 80047e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ec:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2d4>
 80047f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004804:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004808:	e087      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004814:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004974 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004830:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004848:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484c:	e065      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004858:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004978 <HAL_RCC_GetSysClockFreq+0x2dc>
 800485c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004860:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004870:	ed97 6a02 	vldr	s12, [r7, #8]
 8004874:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004890:	e043      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800497c <HAL_RCC_GetSysClockFreq+0x2e0>
 80048a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2d4>
 80048bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d4:	e021      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004978 <HAL_RCC_GetSysClockFreq+0x2dc>
 80048e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80048fc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004914:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004918:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	0a5b      	lsrs	r3, r3, #9
 8004920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004924:	3301      	adds	r3, #1
 8004926:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004932:	edd7 6a07 	vldr	s13, [r7, #28]
 8004936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493e:	ee17 3a90 	vmov	r3, s15
 8004942:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004944:	e005      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	61bb      	str	r3, [r7, #24]
    break;
 800494a:	e002      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800494e:	61bb      	str	r3, [r7, #24]
    break;
 8004950:	bf00      	nop
  }

  return sysclockfreq;
 8004952:	69bb      	ldr	r3, [r7, #24]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3724      	adds	r7, #36	; 0x24
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	58024400 	.word	0x58024400
 8004964:	03d09000 	.word	0x03d09000
 8004968:	003d0900 	.word	0x003d0900
 800496c:	007a1200 	.word	0x007a1200
 8004970:	46000000 	.word	0x46000000
 8004974:	4c742400 	.word	0x4c742400
 8004978:	4a742400 	.word	0x4a742400
 800497c:	4af42400 	.word	0x4af42400

08004980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004986:	f7ff fe89 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800498a:	4601      	mov	r1, r0
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	fa21 f303 	lsr.w	r3, r1, r3
 80049a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049ae:	5cd3      	ldrb	r3, [r2, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	4a07      	ldr	r2, [pc, #28]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	58024400 	.word	0x58024400
 80049d4:	0801a904 	.word	0x0801a904
 80049d8:	24000004 	.word	0x24000004
 80049dc:	24000000 	.word	0x24000000

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049e4:	f7ff ffcc 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049e8:	4601      	mov	r1, r0
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	58024400 	.word	0x58024400
 8004a08:	0801a904 	.word	0x0801a904

08004a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a10:	f7ff ffb6 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 8004a14:	4601      	mov	r1, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	58024400 	.word	0x58024400
 8004a34:	0801a904 	.word	0x0801a904

08004a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	223f      	movs	r2, #63	; 0x3f
 8004a46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0207 	and.w	r2, r3, #7
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004a54:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCC_GetClockConfig+0x80>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	52002000 	.word	0x52002000

08004abc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae0:	d013      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae6:	d802      	bhi.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004aec:	e01f      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af2:	d013      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004af4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004af8:	d01c      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004afa:	e018      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afc:	4baf      	ldr	r3, [pc, #700]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4aae      	ldr	r2, [pc, #696]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b08:	e015      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f96f 	bl	8005df4 <RCCEx_PLL2_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b1a:	e00c      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3324      	adds	r3, #36	; 0x24
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 fa18 	bl	8005f58 <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b2c:	e003      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
      break;
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b3c:	4b9f      	ldr	r3, [pc, #636]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b48:	499c      	ldr	r1, [pc, #624]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b4e:	e001      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d03d      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d826      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b85 	.word	0x08004b85
 8004b74:	08004b93 	.word	0x08004b93
 8004b78:	08004ba5 	.word	0x08004ba5
 8004b7c:	08004bbd 	.word	0x08004bbd
 8004b80:	08004bbd 	.word	0x08004bbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b84:	4b8d      	ldr	r3, [pc, #564]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a8c      	ldr	r2, [pc, #560]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b90:	e015      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	2100      	movs	r1, #0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 f92b 	bl	8005df4 <RCCEx_PLL2_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ba2:	e00c      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3324      	adds	r3, #36	; 0x24
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f9d4 	bl	8005f58 <RCCEx_PLL3_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bb4:	e003      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bc4:	4b7d      	ldr	r3, [pc, #500]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc8:	f023 0207 	bic.w	r2, r3, #7
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd0:	497a      	ldr	r1, [pc, #488]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	650b      	str	r3, [r1, #80]	; 0x50
 8004bd6:	e001      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d03e      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	2b80      	cmp	r3, #128	; 0x80
 8004bee:	d01c      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004bf0:	2b80      	cmp	r3, #128	; 0x80
 8004bf2:	d804      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d00d      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004bfc:	e01e      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004c00:	d01f      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c06:	d01e      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c08:	e018      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0a:	4b6c      	ldr	r3, [pc, #432]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a6b      	ldr	r2, [pc, #428]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c16:	e017      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 f8e8 	bl	8005df4 <RCCEx_PLL2_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c28:	e00e      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3324      	adds	r3, #36	; 0x24
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 f991 	bl	8005f58 <RCCEx_PLL3_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c3a:	e005      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	e002      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c4e:	4b5b      	ldr	r3, [pc, #364]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	4958      	ldr	r1, [pc, #352]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c60:	e001      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d044      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7c:	d01f      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c82:	d805      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8c:	d00e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004c8e:	e01f      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c94:	d01f      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004c96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c9a:	d01e      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004c9c:	e018      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c9e:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	4a46      	ldr	r2, [pc, #280]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004caa:	e017      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 f89e 	bl	8005df4 <RCCEx_PLL2_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cbc:	e00e      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3324      	adds	r3, #36	; 0x24
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f947 	bl	8005f58 <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cce:	e005      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd4:	e002      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e000      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ce2:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cf0:	4932      	ldr	r1, [pc, #200]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	658b      	str	r3, [r1, #88]	; 0x58
 8004cf6:	e001      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d044      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d12:	d01f      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d18:	d805      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d22:	d00e      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d24:	e01f      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004d26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d2a:	d01f      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d30:	d01e      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004d32:	e018      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d40:	e017      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3304      	adds	r3, #4
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 f853 	bl	8005df4 <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d52:	e00e      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3324      	adds	r3, #36	; 0x24
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f8fc 	bl	8005f58 <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d64:	e005      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004d6c:	bf00      	nop
 8004d6e:	e000      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d78:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d86:	490d      	ldr	r1, [pc, #52]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d8c:	e001      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d035      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d00c      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d802      	bhi.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01b      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004dae:	e017      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d00c      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004db4:	2b30      	cmp	r3, #48	; 0x30
 8004db6:	d018      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004db8:	e012      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004dba:	bf00      	nop
 8004dbc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc0:	4baf      	ldr	r3, [pc, #700]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4aae      	ldr	r2, [pc, #696]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004dcc:	e00e      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 f80d 	bl	8005df4 <RCCEx_PLL2_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004dde:	e005      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
      break;
 8004de4:	e002      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004df2:	4ba3      	ldr	r3, [pc, #652]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	49a0      	ldr	r1, [pc, #640]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e04:	e001      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d042      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	d01f      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e24:	d805      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d00e      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004e30:	e01f      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004e32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e36:	d01f      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e3c:	d01e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004e3e:	e018      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e40:	4b8f      	ldr	r3, [pc, #572]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a8e      	ldr	r2, [pc, #568]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e4c:	e017      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 ffcd 	bl	8005df4 <RCCEx_PLL2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e5e:	e00e      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3324      	adds	r3, #36	; 0x24
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f001 f876 	bl	8005f58 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e70:	e005      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
      break;
 8004e76:	e002      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e84:	4b7e      	ldr	r3, [pc, #504]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	497b      	ldr	r1, [pc, #492]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	650b      	str	r3, [r1, #80]	; 0x50
 8004e96:	e001      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d042      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb0:	d01b      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb6:	d805      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d022      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ec2:	e01b      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004ec4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ec8:	d01d      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ece:	d01c      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004ed0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ed4:	d01b      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004ed6:	e011      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 ff88 	bl	8005df4 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ee8:	e012      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 f831 	bl	8005f58 <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004efa:	e009      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f16:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f22:	4957      	ldr	r1, [pc, #348]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	650b      	str	r3, [r1, #80]	; 0x50
 8004f28:	e001      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d044      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f44:	d01b      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4a:	d805      	bhi.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d022      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004f56:	e01b      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d01d      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f62:	d01c      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f68:	d01b      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004f6a:	e011      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2101      	movs	r1, #1
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 ff3e 	bl	8005df4 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f7c:	e012      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	2101      	movs	r1, #1
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 ffe7 	bl	8005f58 <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e009      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
      break;
 8004f94:	e006      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e004      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004faa:	4b35      	ldr	r3, [pc, #212]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fb8:	4931      	ldr	r1, [pc, #196]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8004fbe:	e001      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d02d      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fd8:	d005      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fde:	d009      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004fe4:	e00f      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	4a25      	ldr	r2, [pc, #148]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ff2:	e00c      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fefa 	bl	8005df4 <RCCEx_PLL2_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005004:	e003      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
      break;
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800500c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005014:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005020:	4917      	ldr	r1, [pc, #92]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005022:	4313      	orrs	r3, r2
 8005024:	650b      	str	r3, [r1, #80]	; 0x50
 8005026:	e001      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d035      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	2b03      	cmp	r3, #3
 800503e:	d81b      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	08005085 	.word	0x08005085
 800504c:	08005059 	.word	0x08005059
 8005050:	08005067 	.word	0x08005067
 8005054:	08005085 	.word	0x08005085
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800505e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005064:	e00f      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3304      	adds	r3, #4
 800506a:	2102      	movs	r1, #2
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fec1 	bl	8005df4 <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005076:	e006      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	e003      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
      break;
 8005084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800508c:	4bba      	ldr	r3, [pc, #744]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800508e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005090:	f023 0203 	bic.w	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	49b7      	ldr	r1, [pc, #732]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800509e:	e001      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8086 	beq.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b2:	4bb2      	ldr	r3, [pc, #712]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4ab1      	ldr	r2, [pc, #708]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050be:	f7fc fa7f 	bl	80015c0 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c4:	e009      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fc fa7b 	bl	80015c0 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b64      	cmp	r3, #100	; 0x64
 80050d2:	d902      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	75fb      	strb	r3, [r7, #23]
        break;
 80050d8:	e005      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050da:	4ba8      	ldr	r3, [pc, #672]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ef      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d166      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050ec:	4ba2      	ldr	r3, [pc, #648]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050f6:	4053      	eors	r3, r2
 80050f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005100:	4b9d      	ldr	r3, [pc, #628]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005108:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800510a:	4b9b      	ldr	r3, [pc, #620]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a9a      	ldr	r2, [pc, #616]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005116:	4b98      	ldr	r3, [pc, #608]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	4a97      	ldr	r2, [pc, #604]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800511c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005120:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005122:	4a95      	ldr	r2, [pc, #596]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d115      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fc fa44 	bl	80015c0 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800513a:	e00b      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513c:	f7fc fa40 	bl	80015c0 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d902      	bls.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	75fb      	strb	r3, [r7, #23]
            break;
 8005152:	e005      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005154:	4b88      	ldr	r3, [pc, #544]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ed      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d126      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800516c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005174:	d10d      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005176:	4b80      	ldr	r3, [pc, #512]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005184:	0919      	lsrs	r1, r3, #4
 8005186:	4b7e      	ldr	r3, [pc, #504]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005188:	400b      	ands	r3, r1
 800518a:	497b      	ldr	r1, [pc, #492]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	610b      	str	r3, [r1, #16]
 8005190:	e005      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005192:	4b79      	ldr	r3, [pc, #484]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	4a78      	ldr	r2, [pc, #480]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005198:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800519c:	6113      	str	r3, [r2, #16]
 800519e:	4b76      	ldr	r3, [pc, #472]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ac:	4972      	ldr	r1, [pc, #456]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	670b      	str	r3, [r1, #112]	; 0x70
 80051b2:	e004      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	75bb      	strb	r3, [r7, #22]
 80051b8:	e001      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d07d      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ce:	2b28      	cmp	r3, #40	; 0x28
 80051d0:	d866      	bhi.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080052a7 	.word	0x080052a7
 80051dc:	080052a1 	.word	0x080052a1
 80051e0:	080052a1 	.word	0x080052a1
 80051e4:	080052a1 	.word	0x080052a1
 80051e8:	080052a1 	.word	0x080052a1
 80051ec:	080052a1 	.word	0x080052a1
 80051f0:	080052a1 	.word	0x080052a1
 80051f4:	080052a1 	.word	0x080052a1
 80051f8:	0800527d 	.word	0x0800527d
 80051fc:	080052a1 	.word	0x080052a1
 8005200:	080052a1 	.word	0x080052a1
 8005204:	080052a1 	.word	0x080052a1
 8005208:	080052a1 	.word	0x080052a1
 800520c:	080052a1 	.word	0x080052a1
 8005210:	080052a1 	.word	0x080052a1
 8005214:	080052a1 	.word	0x080052a1
 8005218:	0800528f 	.word	0x0800528f
 800521c:	080052a1 	.word	0x080052a1
 8005220:	080052a1 	.word	0x080052a1
 8005224:	080052a1 	.word	0x080052a1
 8005228:	080052a1 	.word	0x080052a1
 800522c:	080052a1 	.word	0x080052a1
 8005230:	080052a1 	.word	0x080052a1
 8005234:	080052a1 	.word	0x080052a1
 8005238:	080052a7 	.word	0x080052a7
 800523c:	080052a1 	.word	0x080052a1
 8005240:	080052a1 	.word	0x080052a1
 8005244:	080052a1 	.word	0x080052a1
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052a1 	.word	0x080052a1
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080052a1 	.word	0x080052a1
 8005258:	080052a7 	.word	0x080052a7
 800525c:	080052a1 	.word	0x080052a1
 8005260:	080052a1 	.word	0x080052a1
 8005264:	080052a1 	.word	0x080052a1
 8005268:	080052a1 	.word	0x080052a1
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052a1 	.word	0x080052a1
 8005274:	080052a1 	.word	0x080052a1
 8005278:	080052a7 	.word	0x080052a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	2101      	movs	r1, #1
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fdb6 	bl	8005df4 <RCCEx_PLL2_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800528c:	e00c      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3324      	adds	r3, #36	; 0x24
 8005292:	2101      	movs	r1, #1
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fe5f 	bl	8005f58 <RCCEx_PLL3_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800529e:	e003      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	75fb      	strb	r3, [r7, #23]
      break;
 80052a4:	e000      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80052a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052ae:	4b32      	ldr	r3, [pc, #200]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ba:	492f      	ldr	r1, [pc, #188]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	654b      	str	r3, [r1, #84]	; 0x54
 80052c0:	e001      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d037      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d820      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005323 	.word	0x08005323
 80052e4:	080052f9 	.word	0x080052f9
 80052e8:	0800530b 	.word	0x0800530b
 80052ec:	08005323 	.word	0x08005323
 80052f0:	08005323 	.word	0x08005323
 80052f4:	08005323 	.word	0x08005323
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd78 	bl	8005df4 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005308:	e00c      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	; 0x24
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fe21 	bl	8005f58 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800531a:	e003      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f023 0207 	bic.w	r2, r3, #7
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005336:	4910      	ldr	r1, [pc, #64]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	654b      	str	r3, [r1, #84]	; 0x54
 800533c:	e001      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
 8005340:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d040      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005354:	2b05      	cmp	r3, #5
 8005356:	d827      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005358:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800535a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535e:	bf00      	nop
 8005360:	080053af 	.word	0x080053af
 8005364:	08005385 	.word	0x08005385
 8005368:	08005397 	.word	0x08005397
 800536c:	080053af 	.word	0x080053af
 8005370:	080053af 	.word	0x080053af
 8005374:	080053af 	.word	0x080053af
 8005378:	58024400 	.word	0x58024400
 800537c:	58024800 	.word	0x58024800
 8005380:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	2101      	movs	r1, #1
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fd32 	bl	8005df4 <RCCEx_PLL2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005394:	e00c      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3324      	adds	r3, #36	; 0x24
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fddb 	bl	8005f58 <RCCEx_PLL3_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053a6:	e003      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
      break;
 80053ac:	e000      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80053ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053b6:	4bb2      	ldr	r3, [pc, #712]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ba:	f023 0207 	bic.w	r2, r3, #7
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	49ae      	ldr	r1, [pc, #696]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	658b      	str	r3, [r1, #88]	; 0x58
 80053ca:	e001      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d044      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e6:	d01b      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80053e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ec:	d805      	bhi.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d022      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80053f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x952>
 80053f8:	e01b      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d01d      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005404:	d01c      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800540a:	d01b      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800540c:	e011      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fced 	bl	8005df4 <RCCEx_PLL2_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800541e:	e012      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3324      	adds	r3, #36	; 0x24
 8005424:	2102      	movs	r1, #2
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fd96 	bl	8005f58 <RCCEx_PLL3_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005430:	e009      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]
      break;
 8005436:	e006      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005438:	bf00      	nop
 800543a:	e004      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800543c:	bf00      	nop
 800543e:	e002      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005440:	bf00      	nop
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800544c:	4b8c      	ldr	r3, [pc, #560]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545a:	4989      	ldr	r1, [pc, #548]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	654b      	str	r3, [r1, #84]	; 0x54
 8005460:	e001      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d044      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547c:	d01b      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800547e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005482:	d805      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d022      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800548e:	e01b      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005494:	d01d      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005496:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800549a:	d01c      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800549c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a0:	d01b      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80054a2:	e011      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fca2 	bl	8005df4 <RCCEx_PLL2_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054b4:	e012      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3324      	adds	r3, #36	; 0x24
 80054ba:	2102      	movs	r1, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fd4b 	bl	8005f58 <RCCEx_PLL3_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054c6:	e009      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
      break;
 80054cc:	e006      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80054ce:	bf00      	nop
 80054d0:	e004      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80054da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054e2:	4b67      	ldr	r3, [pc, #412]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f0:	4963      	ldr	r1, [pc, #396]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	658b      	str	r3, [r1, #88]	; 0x58
 80054f6:	e001      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b00      	cmp	r3, #0
 8005506:	d044      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800550e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005512:	d01b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005518:	d805      	bhi.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d022      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800551e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005524:	e01b      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552a:	d01d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800552c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005530:	d01c      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005532:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005536:	d01b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005538:	e011      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3304      	adds	r3, #4
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fc57 	bl	8005df4 <RCCEx_PLL2_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800554a:	e012      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3324      	adds	r3, #36	; 0x24
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fd00 	bl	8005f58 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800555c:	e009      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
      break;
 8005562:	e006      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005564:	bf00      	nop
 8005566:	e004      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005568:	bf00      	nop
 800556a:	e002      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800556c:	bf00      	nop
 800556e:	e000      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005578:	4b41      	ldr	r3, [pc, #260]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005586:	493e      	ldr	r1, [pc, #248]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005588:	4313      	orrs	r3, r2
 800558a:	658b      	str	r3, [r1, #88]	; 0x58
 800558c:	e001      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3324      	adds	r3, #36	; 0x24
 80055ae:	2102      	movs	r1, #2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fcd1 	bl	8005f58 <RCCEx_PLL3_Config>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055c0:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ce:	492c      	ldr	r1, [pc, #176]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ea:	d10a      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3324      	adds	r3, #36	; 0x24
 80055f0:	2102      	movs	r1, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fcb0 	bl	8005f58 <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005602:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005610:	491b      	ldr	r1, [pc, #108]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d032      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d00d      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800562e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005632:	d016      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d111      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fbd8 	bl	8005df4 <RCCEx_PLL2_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005648:	e00c      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3324      	adds	r3, #36	; 0x24
 800564e:	2102      	movs	r1, #2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fc81 	bl	8005f58 <RCCEx_PLL3_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
      break;
 8005660:	e000      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10c      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005678:	4901      	ldr	r1, [pc, #4]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	658b      	str	r3, [r1, #88]	; 0x58
 800567e:	e003      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02f      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569e:	d00c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80056a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056a4:	d015      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056aa:	d10f      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ac:	4b79      	ldr	r3, [pc, #484]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	4a78      	ldr	r2, [pc, #480]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80056b8:	e00c      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3324      	adds	r3, #36	; 0x24
 80056be:	2101      	movs	r1, #1
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fc49 	bl	8005f58 <RCCEx_PLL3_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80056ca:	e003      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
      break;
 80056d0:	e000      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80056d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056da:	4b6e      	ldr	r3, [pc, #440]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e8:	496a      	ldr	r1, [pc, #424]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	654b      	str	r3, [r1, #84]	; 0x54
 80056ee:	e001      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d029      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d007      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800570e:	e00f      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005710:	4b60      	ldr	r3, [pc, #384]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a5f      	ldr	r2, [pc, #380]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800571c:	e00b      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3304      	adds	r3, #4
 8005722:	2102      	movs	r1, #2
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb65 	bl	8005df4 <RCCEx_PLL2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800572e:	e002      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
      break;
 8005734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800573c:	4b55      	ldr	r3, [pc, #340]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005748:	4952      	ldr	r1, [pc, #328]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800574e:	e001      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3324      	adds	r3, #36	; 0x24
 8005764:	2102      	movs	r1, #2
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fbf6 	bl	8005f58 <RCCEx_PLL3_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578a:	d00c      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800578c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005790:	d802      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005796:	e00d      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579c:	d00f      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800579e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a2:	d00e      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80057a4:	e006      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a6:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a3a      	ldr	r2, [pc, #232]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80057b2:	e007      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	75fb      	strb	r3, [r7, #23]
      break;
 80057b8:	e004      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80057ba:	bf00      	nop
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80057c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ca:	4b32      	ldr	r3, [pc, #200]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d6:	492f      	ldr	r1, [pc, #188]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	654b      	str	r3, [r1, #84]	; 0x54
 80057dc:	e001      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057ee:	4b29      	ldr	r3, [pc, #164]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4926      	ldr	r1, [pc, #152]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800581a:	491e      	ldr	r1, [pc, #120]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800582c:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005838:	4916      	ldr	r1, [pc, #88]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800583a:	4313      	orrs	r3, r2
 800583c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	4a11      	ldr	r2, [pc, #68]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005854:	6113      	str	r3, [r2, #16]
 8005856:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005860:	490c      	ldr	r1, [pc, #48]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	da08      	bge.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	4906      	ldr	r1, [pc, #24]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800587c:	4313      	orrs	r3, r2
 800587e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005880:	7dbb      	ldrb	r3, [r7, #22]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	58024400 	.word	0x58024400

08005898 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800589c:	f7ff f870 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80058a0:	4601      	mov	r1, r0
 80058a2:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	091b      	lsrs	r3, r3, #4
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058ae:	5cd3      	ldrb	r3, [r2, r3]
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	58024400 	.word	0x58024400
 80058c0:	0801a904 	.word	0x0801a904

080058c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b089      	sub	sp, #36	; 0x24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058cc:	4b9d      	ldr	r3, [pc, #628]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80058d6:	4b9b      	ldr	r3, [pc, #620]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	0b1b      	lsrs	r3, r3, #12
 80058dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058e2:	4b98      	ldr	r3, [pc, #608]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80058ee:	4b95      	ldr	r3, [pc, #596]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 810a 	beq.w	8005b26 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d05a      	beq.n	80059ce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005918:	2b01      	cmp	r3, #1
 800591a:	d302      	bcc.n	8005922 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800591c:	2b02      	cmp	r3, #2
 800591e:	d078      	beq.n	8005a12 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005920:	e099      	b.n	8005a56 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005922:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d02d      	beq.n	800598a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800592e:	4b85      	ldr	r3, [pc, #532]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	08db      	lsrs	r3, r3, #3
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	4a83      	ldr	r2, [pc, #524]	; (8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800593a:	fa22 f303 	lsr.w	r3, r2, r3
 800593e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005958:	4b7a      	ldr	r3, [pc, #488]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005968:	ed97 6a03 	vldr	s12, [r7, #12]
 800596c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005984:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005988:	e087      	b.n	8005a9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005994:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599c:	4b69      	ldr	r3, [pc, #420]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80059b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059cc:	e065      	b.n	8005a9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80059dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e0:	4b58      	ldr	r3, [pc, #352]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80059f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a10:	e043      	b.n	8005a9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	ee07 3a90 	vmov	s15, r3
 8005a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a24:	4b47      	ldr	r3, [pc, #284]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a54:	e021      	b.n	8005a9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a60:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a68:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a98:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a9a:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	0a5b      	lsrs	r3, r3, #9
 8005aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac0:	ee17 2a90 	vmov	r2, s15
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aee:	ee17 2a90 	vmov	r2, s15
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	0e1b      	lsrs	r3, r3, #24
 8005afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1c:	ee17 2a90 	vmov	r2, s15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	3724      	adds	r7, #36	; 0x24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	58024400 	.word	0x58024400
 8005b48:	03d09000 	.word	0x03d09000
 8005b4c:	46000000 	.word	0x46000000
 8005b50:	4c742400 	.word	0x4c742400
 8005b54:	4a742400 	.word	0x4a742400
 8005b58:	4af42400 	.word	0x4af42400

08005b5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	; 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b64:	4b9d      	ldr	r3, [pc, #628]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b6e:	4b9b      	ldr	r3, [pc, #620]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	0d1b      	lsrs	r3, r3, #20
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b7a:	4b98      	ldr	r3, [pc, #608]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b86:	4b95      	ldr	r3, [pc, #596]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 810a 	beq.w	8005dbe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d05a      	beq.n	8005c66 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d302      	bcc.n	8005bba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d078      	beq.n	8005caa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005bb8:	e099      	b.n	8005cee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bba:	4b88      	ldr	r3, [pc, #544]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d02d      	beq.n	8005c22 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bc6:	4b85      	ldr	r3, [pc, #532]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	4a83      	ldr	r2, [pc, #524]	; (8005de0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf0:	4b7a      	ldr	r3, [pc, #488]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c00:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c04:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c20:	e087      	b.n	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c34:	4b69      	ldr	r3, [pc, #420]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c48:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c64:	e065      	b.n	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c70:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c78:	4b58      	ldr	r3, [pc, #352]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ca8:	e043      	b.n	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbc:	4b47      	ldr	r3, [pc, #284]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cec:	e021      	b.n	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d00:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d14:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d30:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d32:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	0a5b      	lsrs	r3, r3, #9
 8005d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d58:	ee17 2a90 	vmov	r2, s15
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d60:	4b1e      	ldr	r3, [pc, #120]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	0c1b      	lsrs	r3, r3, #16
 8005d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d86:	ee17 2a90 	vmov	r2, s15
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	0e1b      	lsrs	r3, r3, #24
 8005d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db4:	ee17 2a90 	vmov	r2, s15
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	3724      	adds	r7, #36	; 0x24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	58024400 	.word	0x58024400
 8005de0:	03d09000 	.word	0x03d09000
 8005de4:	46000000 	.word	0x46000000
 8005de8:	4c742400 	.word	0x4c742400
 8005dec:	4a742400 	.word	0x4a742400
 8005df0:	4af42400 	.word	0x4af42400

08005df4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e02:	4b53      	ldr	r3, [pc, #332]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d101      	bne.n	8005e12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e099      	b.n	8005f46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e12:	4b4f      	ldr	r3, [pc, #316]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a4e      	ldr	r2, [pc, #312]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1e:	f7fb fbcf 	bl	80015c0 <HAL_GetTick>
 8005e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e24:	e008      	b.n	8005e38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e26:	f7fb fbcb 	bl	80015c0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e086      	b.n	8005f46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e38:	4b45      	ldr	r3, [pc, #276]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e44:	4b42      	ldr	r3, [pc, #264]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	493f      	ldr	r1, [pc, #252]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	628b      	str	r3, [r1, #40]	; 0x28
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	025b      	lsls	r3, r3, #9
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	061b      	lsls	r3, r3, #24
 8005e84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e88:	4931      	ldr	r1, [pc, #196]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e8e:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	492d      	ldr	r1, [pc, #180]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f023 0220 	bic.w	r2, r3, #32
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	4928      	ldr	r1, [pc, #160]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f023 0310 	bic.w	r3, r3, #16
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <RCCEx_PLL2_Config+0x160>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	69d2      	ldr	r2, [r2, #28]
 8005eca:	00d2      	lsls	r2, r2, #3
 8005ecc:	4920      	ldr	r1, [pc, #128]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ed2:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ed8:	f043 0310 	orr.w	r3, r3, #16
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ef0:	e00f      	b.n	8005f12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f04:	e005      	b.n	8005f12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f06:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fb fb4f 	bl	80015c0 <HAL_GetTick>
 8005f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f24:	e008      	b.n	8005f38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f26:	f7fb fb4b 	bl	80015c0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e006      	b.n	8005f46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	58024400 	.word	0x58024400
 8005f54:	ffff0007 	.word	0xffff0007

08005f58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f66:	4b53      	ldr	r3, [pc, #332]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d101      	bne.n	8005f76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e099      	b.n	80060aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f76:	4b4f      	ldr	r3, [pc, #316]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a4e      	ldr	r2, [pc, #312]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f82:	f7fb fb1d 	bl	80015c0 <HAL_GetTick>
 8005f86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f88:	e008      	b.n	8005f9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f8a:	f7fb fb19 	bl	80015c0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e086      	b.n	80060aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f9c:	4b45      	ldr	r3, [pc, #276]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f0      	bne.n	8005f8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fa8:	4b42      	ldr	r3, [pc, #264]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	051b      	lsls	r3, r3, #20
 8005fb6:	493f      	ldr	r1, [pc, #252]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	628b      	str	r3, [r1, #40]	; 0x28
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	025b      	lsls	r3, r3, #9
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fec:	4931      	ldr	r1, [pc, #196]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ff2:	4b30      	ldr	r3, [pc, #192]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	492d      	ldr	r1, [pc, #180]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006004:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4928      	ldr	r1, [pc, #160]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006016:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <RCCEx_PLL3_Config+0x160>)
 8006028:	4013      	ands	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	69d2      	ldr	r2, [r2, #28]
 800602e:	00d2      	lsls	r2, r2, #3
 8006030:	4920      	ldr	r1, [pc, #128]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006036:	4b1f      	ldr	r3, [pc, #124]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800604e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006054:	e00f      	b.n	8006076 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d106      	bne.n	800606a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800605c:	4b15      	ldr	r3, [pc, #84]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006062:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006066:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006068:	e005      	b.n	8006076 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	4a11      	ldr	r2, [pc, #68]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006070:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006074:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800607c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006082:	f7fb fa9d 	bl	80015c0 <HAL_GetTick>
 8006086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006088:	e008      	b.n	800609c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800608a:	f7fb fa99 	bl	80015c0 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e006      	b.n	80060aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	58024400 	.word	0x58024400
 80060b8:	ffff0007 	.word	0xffff0007

080060bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e049      	b.n	8006162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f841 	bl	800616a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f000 f9be 	bl	800647c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d001      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e021      	b.n	80061dc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <HAL_TIM_Base_Start_IT+0x68>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d00b      	beq.n	80061da <HAL_TIM_Base_Start_IT+0x5a>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d007      	beq.n	80061da <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	00010007 	.word	0x00010007

080061ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d122      	bne.n	8006248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d11b      	bne.n	8006248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0202 	mvn.w	r2, #2
 8006218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f905 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8f7 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f908 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b04      	cmp	r3, #4
 8006254:	d122      	bne.n	800629c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b04      	cmp	r3, #4
 8006262:	d11b      	bne.n	800629c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0204 	mvn.w	r2, #4
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f8db 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8cd 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8de 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d122      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d11b      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0208 	mvn.w	r2, #8
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2204      	movs	r2, #4
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8b1 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8a3 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f8b4 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d122      	bne.n	8006344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d11b      	bne.n	8006344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0210 	mvn.w	r2, #16
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2208      	movs	r2, #8
 800631a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f887 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 8006330:	e005      	b.n	800633e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f879 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f88a 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0201 	mvn.w	r2, #1
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fa fd54 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d10e      	bne.n	800639c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006388:	2b80      	cmp	r3, #128	; 0x80
 800638a:	d107      	bne.n	800639c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f914 	bl	80065c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063aa:	d10e      	bne.n	80063ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f907 	bl	80065d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d10e      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d107      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f838 	bl	8006466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b20      	cmp	r3, #32
 8006402:	d10e      	bne.n	8006422 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b20      	cmp	r3, #32
 8006410:	d107      	bne.n	8006422 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0220 	mvn.w	r2, #32
 800641a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8c7 	bl	80065b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a40      	ldr	r2, [pc, #256]	; (8006590 <TIM_Base_SetConfig+0x114>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649a:	d00f      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3d      	ldr	r2, [pc, #244]	; (8006594 <TIM_Base_SetConfig+0x118>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3c      	ldr	r2, [pc, #240]	; (8006598 <TIM_Base_SetConfig+0x11c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3b      	ldr	r2, [pc, #236]	; (800659c <TIM_Base_SetConfig+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3a      	ldr	r2, [pc, #232]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d108      	bne.n	80064ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2f      	ldr	r2, [pc, #188]	; (8006590 <TIM_Base_SetConfig+0x114>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01f      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d01b      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <TIM_Base_SetConfig+0x118>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d017      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <TIM_Base_SetConfig+0x11c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2a      	ldr	r2, [pc, #168]	; (800659c <TIM_Base_SetConfig+0x120>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a28      	ldr	r2, [pc, #160]	; (80065a4 <TIM_Base_SetConfig+0x128>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <TIM_Base_SetConfig+0x12c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a26      	ldr	r2, [pc, #152]	; (80065ac <TIM_Base_SetConfig+0x130>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d108      	bne.n	8006528 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a10      	ldr	r2, [pc, #64]	; (8006590 <TIM_Base_SetConfig+0x114>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00f      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a12      	ldr	r2, [pc, #72]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00b      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a11      	ldr	r2, [pc, #68]	; (80065a4 <TIM_Base_SetConfig+0x128>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <TIM_Base_SetConfig+0x12c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a0f      	ldr	r2, [pc, #60]	; (80065ac <TIM_Base_SetConfig+0x130>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d103      	bne.n	800657c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	615a      	str	r2, [r3, #20]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40010000 	.word	0x40010000
 8006594:	40000400 	.word	0x40000400
 8006598:	40000800 	.word	0x40000800
 800659c:	40000c00 	.word	0x40000c00
 80065a0:	40010400 	.word	0x40010400
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400
 80065ac:	40014800 	.word	0x40014800

080065b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e042      	b.n	8006684 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fa fc35 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2224      	movs	r2, #36	; 0x24
 800661a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f82c 	bl	800668c <UART_SetConfig>
 8006634:	4603      	mov	r3, r0
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e022      	b.n	8006684 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fdd0 	bl	80071ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800665a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800666a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fe57 	bl	8007330 <UART_CheckIdleState>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800668c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006690:	b08e      	sub	sp, #56	; 0x38
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ba:	4313      	orrs	r3, r2
 80066bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4bc1      	ldr	r3, [pc, #772]	; (80069cc <UART_SetConfig+0x340>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066ce:	430b      	orrs	r3, r1
 80066d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4ab7      	ldr	r2, [pc, #732]	; (80069d0 <UART_SetConfig+0x344>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fe:	4313      	orrs	r3, r2
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	4bb2      	ldr	r3, [pc, #712]	; (80069d4 <UART_SetConfig+0x348>)
 800670a:	4013      	ands	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006712:	430b      	orrs	r3, r1
 8006714:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	f023 010f 	bic.w	r1, r3, #15
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4aa9      	ldr	r2, [pc, #676]	; (80069d8 <UART_SetConfig+0x34c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d177      	bne.n	8006826 <UART_SetConfig+0x19a>
 8006736:	4ba9      	ldr	r3, [pc, #676]	; (80069dc <UART_SetConfig+0x350>)
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800673e:	2b28      	cmp	r3, #40	; 0x28
 8006740:	d86c      	bhi.n	800681c <UART_SetConfig+0x190>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0xbc>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	080067ed 	.word	0x080067ed
 800674c:	0800681d 	.word	0x0800681d
 8006750:	0800681d 	.word	0x0800681d
 8006754:	0800681d 	.word	0x0800681d
 8006758:	0800681d 	.word	0x0800681d
 800675c:	0800681d 	.word	0x0800681d
 8006760:	0800681d 	.word	0x0800681d
 8006764:	0800681d 	.word	0x0800681d
 8006768:	080067f5 	.word	0x080067f5
 800676c:	0800681d 	.word	0x0800681d
 8006770:	0800681d 	.word	0x0800681d
 8006774:	0800681d 	.word	0x0800681d
 8006778:	0800681d 	.word	0x0800681d
 800677c:	0800681d 	.word	0x0800681d
 8006780:	0800681d 	.word	0x0800681d
 8006784:	0800681d 	.word	0x0800681d
 8006788:	080067fd 	.word	0x080067fd
 800678c:	0800681d 	.word	0x0800681d
 8006790:	0800681d 	.word	0x0800681d
 8006794:	0800681d 	.word	0x0800681d
 8006798:	0800681d 	.word	0x0800681d
 800679c:	0800681d 	.word	0x0800681d
 80067a0:	0800681d 	.word	0x0800681d
 80067a4:	0800681d 	.word	0x0800681d
 80067a8:	08006805 	.word	0x08006805
 80067ac:	0800681d 	.word	0x0800681d
 80067b0:	0800681d 	.word	0x0800681d
 80067b4:	0800681d 	.word	0x0800681d
 80067b8:	0800681d 	.word	0x0800681d
 80067bc:	0800681d 	.word	0x0800681d
 80067c0:	0800681d 	.word	0x0800681d
 80067c4:	0800681d 	.word	0x0800681d
 80067c8:	0800680d 	.word	0x0800680d
 80067cc:	0800681d 	.word	0x0800681d
 80067d0:	0800681d 	.word	0x0800681d
 80067d4:	0800681d 	.word	0x0800681d
 80067d8:	0800681d 	.word	0x0800681d
 80067dc:	0800681d 	.word	0x0800681d
 80067e0:	0800681d 	.word	0x0800681d
 80067e4:	0800681d 	.word	0x0800681d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f2:	e233      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80067f4:	2304      	movs	r3, #4
 80067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fa:	e22f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80067fc:	2308      	movs	r3, #8
 80067fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006802:	e22b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006804:	2310      	movs	r3, #16
 8006806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680a:	e227      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800680c:	2320      	movs	r3, #32
 800680e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006812:	e223      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681a:	e21f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006822:	bf00      	nop
 8006824:	e21a      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6d      	ldr	r2, [pc, #436]	; (80069e0 <UART_SetConfig+0x354>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d132      	bne.n	8006896 <UART_SetConfig+0x20a>
 8006830:	4b6a      	ldr	r3, [pc, #424]	; (80069dc <UART_SetConfig+0x350>)
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	2b05      	cmp	r3, #5
 800683a:	d827      	bhi.n	800688c <UART_SetConfig+0x200>
 800683c:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <UART_SetConfig+0x1b8>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	0800685d 	.word	0x0800685d
 8006848:	08006865 	.word	0x08006865
 800684c:	0800686d 	.word	0x0800686d
 8006850:	08006875 	.word	0x08006875
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006885 	.word	0x08006885
 800685c:	2300      	movs	r3, #0
 800685e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006862:	e1fb      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686a:	e1f7      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006872:	e1f3      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687a:	e1ef      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800687c:	2320      	movs	r3, #32
 800687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006882:	e1eb      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006884:	2340      	movs	r3, #64	; 0x40
 8006886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800688a:	e1e7      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800688c:	2380      	movs	r3, #128	; 0x80
 800688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006892:	bf00      	nop
 8006894:	e1e2      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a52      	ldr	r2, [pc, #328]	; (80069e4 <UART_SetConfig+0x358>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d132      	bne.n	8006906 <UART_SetConfig+0x27a>
 80068a0:	4b4e      	ldr	r3, [pc, #312]	; (80069dc <UART_SetConfig+0x350>)
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	2b05      	cmp	r3, #5
 80068aa:	d827      	bhi.n	80068fc <UART_SetConfig+0x270>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <UART_SetConfig+0x228>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	080068dd 	.word	0x080068dd
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d2:	e1c3      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068da:	e1bf      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e2:	e1bb      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ea:	e1b7      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80068ec:	2320      	movs	r3, #32
 80068ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f2:	e1b3      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fa:	e1af      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006902:	bf00      	nop
 8006904:	e1aa      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a37      	ldr	r2, [pc, #220]	; (80069e8 <UART_SetConfig+0x35c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d132      	bne.n	8006976 <UART_SetConfig+0x2ea>
 8006910:	4b32      	ldr	r3, [pc, #200]	; (80069dc <UART_SetConfig+0x350>)
 8006912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	2b05      	cmp	r3, #5
 800691a:	d827      	bhi.n	800696c <UART_SetConfig+0x2e0>
 800691c:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <UART_SetConfig+0x298>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	0800693d 	.word	0x0800693d
 8006928:	08006945 	.word	0x08006945
 800692c:	0800694d 	.word	0x0800694d
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	2300      	movs	r3, #0
 800693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006942:	e18b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800694a:	e187      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006952:	e183      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695a:	e17f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800695c:	2320      	movs	r3, #32
 800695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006962:	e17b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696a:	e177      	b.n	8006c5c <UART_SetConfig+0x5d0>
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006972:	bf00      	nop
 8006974:	e172      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <UART_SetConfig+0x360>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d144      	bne.n	8006a0a <UART_SetConfig+0x37e>
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <UART_SetConfig+0x350>)
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	2b05      	cmp	r3, #5
 800698a:	d839      	bhi.n	8006a00 <UART_SetConfig+0x374>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0x308>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069ad 	.word	0x080069ad
 8006998:	080069b5 	.word	0x080069b5
 800699c:	080069bd 	.word	0x080069bd
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069f1 	.word	0x080069f1
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	2300      	movs	r3, #0
 80069ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069b2:	e153      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ba:	e14f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c2:	e14b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ca:	e147      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80069cc:	cfff69f3 	.word	0xcfff69f3
 80069d0:	58000c00 	.word	0x58000c00
 80069d4:	11fff4ff 	.word	0x11fff4ff
 80069d8:	40011000 	.word	0x40011000
 80069dc:	58024400 	.word	0x58024400
 80069e0:	40004400 	.word	0x40004400
 80069e4:	40004800 	.word	0x40004800
 80069e8:	40004c00 	.word	0x40004c00
 80069ec:	40005000 	.word	0x40005000
 80069f0:	2320      	movs	r3, #32
 80069f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f6:	e131      	b.n	8006c5c <UART_SetConfig+0x5d0>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fe:	e12d      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a06:	bf00      	nop
 8006a08:	e128      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4ab6      	ldr	r2, [pc, #728]	; (8006ce8 <UART_SetConfig+0x65c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d178      	bne.n	8006b06 <UART_SetConfig+0x47a>
 8006a14:	4bb5      	ldr	r3, [pc, #724]	; (8006cec <UART_SetConfig+0x660>)
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a1c:	2b28      	cmp	r3, #40	; 0x28
 8006a1e:	d86d      	bhi.n	8006afc <UART_SetConfig+0x470>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x39c>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006acd 	.word	0x08006acd
 8006a2c:	08006afd 	.word	0x08006afd
 8006a30:	08006afd 	.word	0x08006afd
 8006a34:	08006afd 	.word	0x08006afd
 8006a38:	08006afd 	.word	0x08006afd
 8006a3c:	08006afd 	.word	0x08006afd
 8006a40:	08006afd 	.word	0x08006afd
 8006a44:	08006afd 	.word	0x08006afd
 8006a48:	08006ad5 	.word	0x08006ad5
 8006a4c:	08006afd 	.word	0x08006afd
 8006a50:	08006afd 	.word	0x08006afd
 8006a54:	08006afd 	.word	0x08006afd
 8006a58:	08006afd 	.word	0x08006afd
 8006a5c:	08006afd 	.word	0x08006afd
 8006a60:	08006afd 	.word	0x08006afd
 8006a64:	08006afd 	.word	0x08006afd
 8006a68:	08006add 	.word	0x08006add
 8006a6c:	08006afd 	.word	0x08006afd
 8006a70:	08006afd 	.word	0x08006afd
 8006a74:	08006afd 	.word	0x08006afd
 8006a78:	08006afd 	.word	0x08006afd
 8006a7c:	08006afd 	.word	0x08006afd
 8006a80:	08006afd 	.word	0x08006afd
 8006a84:	08006afd 	.word	0x08006afd
 8006a88:	08006ae5 	.word	0x08006ae5
 8006a8c:	08006afd 	.word	0x08006afd
 8006a90:	08006afd 	.word	0x08006afd
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006afd 	.word	0x08006afd
 8006a9c:	08006afd 	.word	0x08006afd
 8006aa0:	08006afd 	.word	0x08006afd
 8006aa4:	08006afd 	.word	0x08006afd
 8006aa8:	08006aed 	.word	0x08006aed
 8006aac:	08006afd 	.word	0x08006afd
 8006ab0:	08006afd 	.word	0x08006afd
 8006ab4:	08006afd 	.word	0x08006afd
 8006ab8:	08006afd 	.word	0x08006afd
 8006abc:	08006afd 	.word	0x08006afd
 8006ac0:	08006afd 	.word	0x08006afd
 8006ac4:	08006afd 	.word	0x08006afd
 8006ac8:	08006af5 	.word	0x08006af5
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad2:	e0c3      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ada:	e0bf      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006adc:	2308      	movs	r3, #8
 8006ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae2:	e0bb      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aea:	e0b7      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006aec:	2320      	movs	r3, #32
 8006aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af2:	e0b3      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006af4:	2340      	movs	r3, #64	; 0x40
 8006af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afa:	e0af      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b02:	bf00      	nop
 8006b04:	e0aa      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a79      	ldr	r2, [pc, #484]	; (8006cf0 <UART_SetConfig+0x664>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d132      	bne.n	8006b76 <UART_SetConfig+0x4ea>
 8006b10:	4b76      	ldr	r3, [pc, #472]	; (8006cec <UART_SetConfig+0x660>)
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	2b05      	cmp	r3, #5
 8006b1a:	d827      	bhi.n	8006b6c <UART_SetConfig+0x4e0>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0x498>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b3d 	.word	0x08006b3d
 8006b28:	08006b45 	.word	0x08006b45
 8006b2c:	08006b4d 	.word	0x08006b4d
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b42:	e08b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b44:	2304      	movs	r3, #4
 8006b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4a:	e087      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b52:	e083      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b54:	2310      	movs	r3, #16
 8006b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5a:	e07f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b62:	e07b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b64:	2340      	movs	r3, #64	; 0x40
 8006b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b6a:	e077      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b72:	bf00      	nop
 8006b74:	e072      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a5e      	ldr	r2, [pc, #376]	; (8006cf4 <UART_SetConfig+0x668>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d132      	bne.n	8006be6 <UART_SetConfig+0x55a>
 8006b80:	4b5a      	ldr	r3, [pc, #360]	; (8006cec <UART_SetConfig+0x660>)
 8006b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	d827      	bhi.n	8006bdc <UART_SetConfig+0x550>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x508>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bad 	.word	0x08006bad
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	08006bbd 	.word	0x08006bbd
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb2:	e053      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bba:	e04f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc2:	e04b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bca:	e047      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006bcc:	2320      	movs	r3, #32
 8006bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd2:	e043      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006bd4:	2340      	movs	r3, #64	; 0x40
 8006bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bda:	e03f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006be2:	bf00      	nop
 8006be4:	e03a      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a43      	ldr	r2, [pc, #268]	; (8006cf8 <UART_SetConfig+0x66c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d132      	bne.n	8006c56 <UART_SetConfig+0x5ca>
 8006bf0:	4b3e      	ldr	r3, [pc, #248]	; (8006cec <UART_SetConfig+0x660>)
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d827      	bhi.n	8006c4c <UART_SetConfig+0x5c0>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0x578>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c1d 	.word	0x08006c1d
 8006c08:	08006c25 	.word	0x08006c25
 8006c0c:	08006c2d 	.word	0x08006c2d
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c22:	e01b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006c24:	2304      	movs	r3, #4
 8006c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2a:	e017      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006c2c:	2308      	movs	r3, #8
 8006c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c32:	e013      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006c34:	2310      	movs	r3, #16
 8006c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3a:	e00f      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006c3c:	2320      	movs	r3, #32
 8006c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c42:	e00b      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4a:	e007      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <UART_SetConfig+0x5d0>
 8006c56:	2380      	movs	r3, #128	; 0x80
 8006c58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <UART_SetConfig+0x66c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f040 80b8 	bne.w	8006dd8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d019      	beq.n	8006ca4 <UART_SetConfig+0x618>
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	dc04      	bgt.n	8006c7e <UART_SetConfig+0x5f2>
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d009      	beq.n	8006c8c <UART_SetConfig+0x600>
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d00b      	beq.n	8006c94 <UART_SetConfig+0x608>
 8006c7c:	e042      	b.n	8006d04 <UART_SetConfig+0x678>
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d02b      	beq.n	8006cda <UART_SetConfig+0x64e>
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d02c      	beq.n	8006ce0 <UART_SetConfig+0x654>
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d014      	beq.n	8006cb4 <UART_SetConfig+0x628>
 8006c8a:	e03b      	b.n	8006d04 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c8c:	f7fe fe04 	bl	8005898 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c90:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c92:	e03d      	b.n	8006d10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fe13 	bl	80058c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ca2:	e035      	b.n	8006d10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca4:	f107 0308 	add.w	r3, r7, #8
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe ff57 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cb2:	e02d      	b.n	8006d10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <UART_SetConfig+0x660>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <UART_SetConfig+0x660>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	08db      	lsrs	r3, r3, #3
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <UART_SetConfig+0x670>)
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cd2:	e01d      	b.n	8006d10 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006cd4:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <UART_SetConfig+0x670>)
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cd8:	e01a      	b.n	8006d10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <UART_SetConfig+0x674>)
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cde:	e017      	b.n	8006d10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ce6:	e013      	b.n	8006d10 <UART_SetConfig+0x684>
 8006ce8:	40011400 	.word	0x40011400
 8006cec:	58024400 	.word	0x58024400
 8006cf0:	40007800 	.word	0x40007800
 8006cf4:	40007c00 	.word	0x40007c00
 8006cf8:	58000c00 	.word	0x58000c00
 8006cfc:	03d09000 	.word	0x03d09000
 8006d00:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 824d 	beq.w	80071b2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	4aad      	ldr	r2, [pc, #692]	; (8006fd4 <UART_SetConfig+0x948>)
 8006d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d2a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	4413      	add	r3, r2
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d305      	bcc.n	8006d48 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d903      	bls.n	8006d50 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d4e:	e230      	b.n	80071b2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	4618      	mov	r0, r3
 8006d54:	f04f 0100 	mov.w	r1, #0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	4a9d      	ldr	r2, [pc, #628]	; (8006fd4 <UART_SetConfig+0x948>)
 8006d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f04f 0400 	mov.w	r4, #0
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	f7f9 fb10 	bl	8000390 <__aeabi_uldivmod>
 8006d70:	4603      	mov	r3, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4619      	mov	r1, r3
 8006d76:	4622      	mov	r2, r4
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	f04f 0400 	mov.w	r4, #0
 8006d80:	0214      	lsls	r4, r2, #8
 8006d82:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006d86:	020b      	lsls	r3, r1, #8
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6852      	ldr	r2, [r2, #4]
 8006d8c:	0852      	lsrs	r2, r2, #1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	eb13 0b01 	adds.w	fp, r3, r1
 8006d98:	eb44 0c02 	adc.w	ip, r4, r2
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	4661      	mov	r1, ip
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f04f 0400 	mov.w	r4, #0
 8006da8:	461a      	mov	r2, r3
 8006daa:	4623      	mov	r3, r4
 8006dac:	f7f9 faf0 	bl	8000390 <__aeabi_uldivmod>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dbc:	d308      	bcc.n	8006dd0 <UART_SetConfig+0x744>
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc4:	d204      	bcs.n	8006dd0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dcc:	60da      	str	r2, [r3, #12]
 8006dce:	e1f0      	b.n	80071b2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006dd6:	e1ec      	b.n	80071b2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de0:	f040 8100 	bne.w	8006fe4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	f200 80b7 	bhi.w	8006f5c <UART_SetConfig+0x8d0>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0x768>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006ef9 	.word	0x08006ef9
 8006df8:	08006f01 	.word	0x08006f01
 8006dfc:	08006f5d 	.word	0x08006f5d
 8006e00:	08006f5d 	.word	0x08006f5d
 8006e04:	08006f09 	.word	0x08006f09
 8006e08:	08006f5d 	.word	0x08006f5d
 8006e0c:	08006f5d 	.word	0x08006f5d
 8006e10:	08006f5d 	.word	0x08006f5d
 8006e14:	08006f19 	.word	0x08006f19
 8006e18:	08006f5d 	.word	0x08006f5d
 8006e1c:	08006f5d 	.word	0x08006f5d
 8006e20:	08006f5d 	.word	0x08006f5d
 8006e24:	08006f5d 	.word	0x08006f5d
 8006e28:	08006f5d 	.word	0x08006f5d
 8006e2c:	08006f5d 	.word	0x08006f5d
 8006e30:	08006f5d 	.word	0x08006f5d
 8006e34:	08006f29 	.word	0x08006f29
 8006e38:	08006f5d 	.word	0x08006f5d
 8006e3c:	08006f5d 	.word	0x08006f5d
 8006e40:	08006f5d 	.word	0x08006f5d
 8006e44:	08006f5d 	.word	0x08006f5d
 8006e48:	08006f5d 	.word	0x08006f5d
 8006e4c:	08006f5d 	.word	0x08006f5d
 8006e50:	08006f5d 	.word	0x08006f5d
 8006e54:	08006f5d 	.word	0x08006f5d
 8006e58:	08006f5d 	.word	0x08006f5d
 8006e5c:	08006f5d 	.word	0x08006f5d
 8006e60:	08006f5d 	.word	0x08006f5d
 8006e64:	08006f5d 	.word	0x08006f5d
 8006e68:	08006f5d 	.word	0x08006f5d
 8006e6c:	08006f5d 	.word	0x08006f5d
 8006e70:	08006f5d 	.word	0x08006f5d
 8006e74:	08006f4f 	.word	0x08006f4f
 8006e78:	08006f5d 	.word	0x08006f5d
 8006e7c:	08006f5d 	.word	0x08006f5d
 8006e80:	08006f5d 	.word	0x08006f5d
 8006e84:	08006f5d 	.word	0x08006f5d
 8006e88:	08006f5d 	.word	0x08006f5d
 8006e8c:	08006f5d 	.word	0x08006f5d
 8006e90:	08006f5d 	.word	0x08006f5d
 8006e94:	08006f5d 	.word	0x08006f5d
 8006e98:	08006f5d 	.word	0x08006f5d
 8006e9c:	08006f5d 	.word	0x08006f5d
 8006ea0:	08006f5d 	.word	0x08006f5d
 8006ea4:	08006f5d 	.word	0x08006f5d
 8006ea8:	08006f5d 	.word	0x08006f5d
 8006eac:	08006f5d 	.word	0x08006f5d
 8006eb0:	08006f5d 	.word	0x08006f5d
 8006eb4:	08006f5d 	.word	0x08006f5d
 8006eb8:	08006f5d 	.word	0x08006f5d
 8006ebc:	08006f5d 	.word	0x08006f5d
 8006ec0:	08006f5d 	.word	0x08006f5d
 8006ec4:	08006f5d 	.word	0x08006f5d
 8006ec8:	08006f5d 	.word	0x08006f5d
 8006ecc:	08006f5d 	.word	0x08006f5d
 8006ed0:	08006f5d 	.word	0x08006f5d
 8006ed4:	08006f5d 	.word	0x08006f5d
 8006ed8:	08006f5d 	.word	0x08006f5d
 8006edc:	08006f5d 	.word	0x08006f5d
 8006ee0:	08006f5d 	.word	0x08006f5d
 8006ee4:	08006f5d 	.word	0x08006f5d
 8006ee8:	08006f5d 	.word	0x08006f5d
 8006eec:	08006f5d 	.word	0x08006f5d
 8006ef0:	08006f5d 	.word	0x08006f5d
 8006ef4:	08006f55 	.word	0x08006f55
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef8:	f7fd fd72 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8006efc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006efe:	e033      	b.n	8006f68 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f00:	f7fd fd84 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 8006f04:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f06:	e02f      	b.n	8006f68 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fcd9 	bl	80058c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f16:	e027      	b.n	8006f68 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f18:	f107 0308 	add.w	r3, r7, #8
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe fe1d 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f26:	e01f      	b.n	8006f68 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f28:	4b2b      	ldr	r3, [pc, #172]	; (8006fd8 <UART_SetConfig+0x94c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f34:	4b28      	ldr	r3, [pc, #160]	; (8006fd8 <UART_SetConfig+0x94c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	08db      	lsrs	r3, r3, #3
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	4a27      	ldr	r2, [pc, #156]	; (8006fdc <UART_SetConfig+0x950>)
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f46:	e00f      	b.n	8006f68 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006f48:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <UART_SetConfig+0x950>)
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f4c:	e00c      	b.n	8006f68 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <UART_SetConfig+0x954>)
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f52:	e009      	b.n	8006f68 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f5a:	e005      	b.n	8006f68 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8121 	beq.w	80071b2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <UART_SetConfig+0x948>)
 8006f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f82:	005a      	lsls	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	085b      	lsrs	r3, r3, #1
 8006f8a:	441a      	add	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	2b0f      	cmp	r3, #15
 8006f9c:	d916      	bls.n	8006fcc <UART_SetConfig+0x940>
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa4:	d212      	bcs.n	8006fcc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f023 030f 	bic.w	r3, r3, #15
 8006fae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	e0f2      	b.n	80071b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006fd2:	e0ee      	b.n	80071b2 <UART_SetConfig+0xb26>
 8006fd4:	0801a938 	.word	0x0801a938
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	03d09000 	.word	0x03d09000
 8006fe0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fe4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	f200 80b7 	bhi.w	800715c <UART_SetConfig+0xad0>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <UART_SetConfig+0x968>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	080070f9 	.word	0x080070f9
 8006ff8:	08007101 	.word	0x08007101
 8006ffc:	0800715d 	.word	0x0800715d
 8007000:	0800715d 	.word	0x0800715d
 8007004:	08007109 	.word	0x08007109
 8007008:	0800715d 	.word	0x0800715d
 800700c:	0800715d 	.word	0x0800715d
 8007010:	0800715d 	.word	0x0800715d
 8007014:	08007119 	.word	0x08007119
 8007018:	0800715d 	.word	0x0800715d
 800701c:	0800715d 	.word	0x0800715d
 8007020:	0800715d 	.word	0x0800715d
 8007024:	0800715d 	.word	0x0800715d
 8007028:	0800715d 	.word	0x0800715d
 800702c:	0800715d 	.word	0x0800715d
 8007030:	0800715d 	.word	0x0800715d
 8007034:	08007129 	.word	0x08007129
 8007038:	0800715d 	.word	0x0800715d
 800703c:	0800715d 	.word	0x0800715d
 8007040:	0800715d 	.word	0x0800715d
 8007044:	0800715d 	.word	0x0800715d
 8007048:	0800715d 	.word	0x0800715d
 800704c:	0800715d 	.word	0x0800715d
 8007050:	0800715d 	.word	0x0800715d
 8007054:	0800715d 	.word	0x0800715d
 8007058:	0800715d 	.word	0x0800715d
 800705c:	0800715d 	.word	0x0800715d
 8007060:	0800715d 	.word	0x0800715d
 8007064:	0800715d 	.word	0x0800715d
 8007068:	0800715d 	.word	0x0800715d
 800706c:	0800715d 	.word	0x0800715d
 8007070:	0800715d 	.word	0x0800715d
 8007074:	0800714f 	.word	0x0800714f
 8007078:	0800715d 	.word	0x0800715d
 800707c:	0800715d 	.word	0x0800715d
 8007080:	0800715d 	.word	0x0800715d
 8007084:	0800715d 	.word	0x0800715d
 8007088:	0800715d 	.word	0x0800715d
 800708c:	0800715d 	.word	0x0800715d
 8007090:	0800715d 	.word	0x0800715d
 8007094:	0800715d 	.word	0x0800715d
 8007098:	0800715d 	.word	0x0800715d
 800709c:	0800715d 	.word	0x0800715d
 80070a0:	0800715d 	.word	0x0800715d
 80070a4:	0800715d 	.word	0x0800715d
 80070a8:	0800715d 	.word	0x0800715d
 80070ac:	0800715d 	.word	0x0800715d
 80070b0:	0800715d 	.word	0x0800715d
 80070b4:	0800715d 	.word	0x0800715d
 80070b8:	0800715d 	.word	0x0800715d
 80070bc:	0800715d 	.word	0x0800715d
 80070c0:	0800715d 	.word	0x0800715d
 80070c4:	0800715d 	.word	0x0800715d
 80070c8:	0800715d 	.word	0x0800715d
 80070cc:	0800715d 	.word	0x0800715d
 80070d0:	0800715d 	.word	0x0800715d
 80070d4:	0800715d 	.word	0x0800715d
 80070d8:	0800715d 	.word	0x0800715d
 80070dc:	0800715d 	.word	0x0800715d
 80070e0:	0800715d 	.word	0x0800715d
 80070e4:	0800715d 	.word	0x0800715d
 80070e8:	0800715d 	.word	0x0800715d
 80070ec:	0800715d 	.word	0x0800715d
 80070f0:	0800715d 	.word	0x0800715d
 80070f4:	08007155 	.word	0x08007155
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f8:	f7fd fc72 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 80070fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070fe:	e033      	b.n	8007168 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007100:	f7fd fc84 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 8007104:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007106:	e02f      	b.n	8007168 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007108:	f107 0314 	add.w	r3, r7, #20
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fbd9 	bl	80058c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007116:	e027      	b.n	8007168 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007118:	f107 0308 	add.w	r3, r7, #8
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fd1d 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007126:	e01f      	b.n	8007168 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007128:	4b2c      	ldr	r3, [pc, #176]	; (80071dc <UART_SetConfig+0xb50>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007134:	4b29      	ldr	r3, [pc, #164]	; (80071dc <UART_SetConfig+0xb50>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	08db      	lsrs	r3, r3, #3
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	4a28      	ldr	r2, [pc, #160]	; (80071e0 <UART_SetConfig+0xb54>)
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007146:	e00f      	b.n	8007168 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <UART_SetConfig+0xb54>)
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800714c:	e00c      	b.n	8007168 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800714e:	4b25      	ldr	r3, [pc, #148]	; (80071e4 <UART_SetConfig+0xb58>)
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007152:	e009      	b.n	8007168 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800715a:	e005      	b.n	8007168 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007166:	bf00      	nop
    }

    if (pclk != 0U)
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d021      	beq.n	80071b2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <UART_SetConfig+0xb5c>)
 8007174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007178:	461a      	mov	r2, r3
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	441a      	add	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007190:	b29b      	uxth	r3, r3
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2b0f      	cmp	r3, #15
 8007198:	d908      	bls.n	80071ac <UART_SetConfig+0xb20>
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a0:	d204      	bcs.n	80071ac <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a8:	60da      	str	r2, [r3, #12]
 80071aa:	e002      	b.n	80071b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80071ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3738      	adds	r7, #56	; 0x38
 80071d6:	46bd      	mov	sp, r7
 80071d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80071dc:	58024400 	.word	0x58024400
 80071e0:	03d09000 	.word	0x03d09000
 80071e4:	003d0900 	.word	0x003d0900
 80071e8:	0801a938 	.word	0x0801a938

080071ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01a      	beq.n	8007302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ea:	d10a      	bne.n	8007302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af02      	add	r7, sp, #8
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007340:	f7fa f93e 	bl	80015c0 <HAL_GetTick>
 8007344:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b08      	cmp	r3, #8
 8007352:	d10e      	bne.n	8007372 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f82c 	bl	80073c0 <UART_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e022      	b.n	80073b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b04      	cmp	r3, #4
 800737e:	d10e      	bne.n	800739e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f816 	bl	80073c0 <UART_WaitOnFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e00c      	b.n	80073b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d0:	e062      	b.n	8007498 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d8:	d05e      	beq.n	8007498 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073da:	f7fa f8f1 	bl	80015c0 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d302      	bcc.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d11d      	bne.n	800742c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2220      	movs	r2, #32
 800741c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e045      	b.n	80074b8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d02e      	beq.n	8007498 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007448:	d126      	bne.n	8007498 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007452:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007462:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2220      	movs	r2, #32
 8007488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e00f      	b.n	80074b8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69da      	ldr	r2, [r3, #28]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4013      	ands	r3, r2
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	bf0c      	ite	eq
 80074a8:	2301      	moveq	r3, #1
 80074aa:	2300      	movne	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d08d      	beq.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e027      	b.n	8007526 <HAL_UARTEx_DisableFifoMode+0x66>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2224      	movs	r2, #36	; 0x24
 80074e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0201 	bic.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007504:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007546:	2302      	movs	r3, #2
 8007548:	e02d      	b.n	80075a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2224      	movs	r2, #36	; 0x24
 8007556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f850 	bl	800762c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e02d      	b.n	8007622 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2224      	movs	r2, #36	; 0x24
 80075d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f812 	bl	800762c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b089      	sub	sp, #36	; 0x24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007634:	4a2f      	ldr	r2, [pc, #188]	; (80076f4 <UARTEx_SetNbDataToProcess+0xc8>)
 8007636:	f107 0314 	add.w	r3, r7, #20
 800763a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800763e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007642:	4a2d      	ldr	r2, [pc, #180]	; (80076f8 <UARTEx_SetNbDataToProcess+0xcc>)
 8007644:	f107 030c 	add.w	r3, r7, #12
 8007648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800764c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007654:	2b00      	cmp	r3, #0
 8007656:	d108      	bne.n	800766a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007668:	e03d      	b.n	80076e6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800766a:	2310      	movs	r3, #16
 800766c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800766e:	2310      	movs	r3, #16
 8007670:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	0e5b      	lsrs	r3, r3, #25
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	0f5b      	lsrs	r3, r3, #29
 800768a:	b2db      	uxtb	r3, r3
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007692:	7fbb      	ldrb	r3, [r7, #30]
 8007694:	7f3a      	ldrb	r2, [r7, #28]
 8007696:	f107 0120 	add.w	r1, r7, #32
 800769a:	440a      	add	r2, r1
 800769c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80076a0:	fb02 f303 	mul.w	r3, r2, r3
 80076a4:	7f3a      	ldrb	r2, [r7, #28]
 80076a6:	f107 0120 	add.w	r1, r7, #32
 80076aa:	440a      	add	r2, r1
 80076ac:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80076b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80076bc:	7ffb      	ldrb	r3, [r7, #31]
 80076be:	7f7a      	ldrb	r2, [r7, #29]
 80076c0:	f107 0120 	add.w	r1, r7, #32
 80076c4:	440a      	add	r2, r1
 80076c6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	7f7a      	ldrb	r2, [r7, #29]
 80076d0:	f107 0120 	add.w	r1, r7, #32
 80076d4:	440a      	add	r2, r1
 80076d6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80076da:	fb93 f3f2 	sdiv	r3, r3, r2
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80076e6:	bf00      	nop
 80076e8:	3724      	adds	r7, #36	; 0x24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	08017af8 	.word	0x08017af8
 80076f8:	08017b00 	.word	0x08017b00

080076fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076fc:	b084      	sub	sp, #16
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	f107 001c 	add.w	r0, r7, #28
 800770a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	2b01      	cmp	r3, #1
 8007712:	d120      	bne.n	8007756 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	4b25      	ldr	r3, [pc, #148]	; (80077bc <USB_CoreInit+0xc0>)
 8007726:	4013      	ands	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773a:	2b01      	cmp	r3, #1
 800773c:	d105      	bne.n	800774a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa4c 	bl	8007be8 <USB_CoreReset>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	e01a      	b.n	800778c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa40 	bl	8007be8 <USB_CoreReset>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	639a      	str	r2, [r3, #56]	; 0x38
 800777e:	e005      	b.n	800778c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	2b01      	cmp	r3, #1
 8007790:	d10b      	bne.n	80077aa <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f043 0206 	orr.w	r2, r3, #6
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b6:	b004      	add	sp, #16
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	ffbdffbf 	.word	0xffbdffbf

080077c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f023 0201 	bic.w	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d106      	bne.n	800780e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60da      	str	r2, [r3, #12]
 800780c:	e00b      	b.n	8007826 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]
 8007820:	e001      	b.n	8007826 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e003      	b.n	800782e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007826:	2032      	movs	r0, #50	; 0x32
 8007828:	f7f9 fed6 	bl	80015d8 <HAL_Delay>

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007838:	b084      	sub	sp, #16
 800783a:	b580      	push	{r7, lr}
 800783c:	b086      	sub	sp, #24
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	e009      	b.n	800786c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	3340      	adds	r3, #64	; 0x40
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	2200      	movs	r2, #0
 8007864:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	3301      	adds	r3, #1
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b0e      	cmp	r3, #14
 8007870:	d9f2      	bls.n	8007858 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d11c      	bne.n	80078b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007886:	f043 0302 	orr.w	r3, r3, #2
 800788a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	e005      	b.n	80078be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078c4:	461a      	mov	r2, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d0:	4619      	mov	r1, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d8:	461a      	mov	r2, r3
 80078da:	680b      	ldr	r3, [r1, #0]
 80078dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d10c      	bne.n	80078fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f949 	bl	8007b84 <USB_SetDevSpeed>
 80078f2:	e008      	b.n	8007906 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078f4:	2101      	movs	r1, #1
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f944 	bl	8007b84 <USB_SetDevSpeed>
 80078fc:	e003      	b.n	8007906 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078fe:	2103      	movs	r1, #3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f93f 	bl	8007b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007906:	2110      	movs	r1, #16
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f8f3 	bl	8007af4 <USB_FlushTxFifo>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f911 	bl	8007b40 <USB_FlushRxFifo>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793a:	461a      	mov	r2, r3
 800793c:	2300      	movs	r3, #0
 800793e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007946:	461a      	mov	r2, r3
 8007948:	2300      	movs	r3, #0
 800794a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800794c:	2300      	movs	r3, #0
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	e043      	b.n	80079da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007968:	d118      	bne.n	800799c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797c:	461a      	mov	r2, r3
 800797e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	e013      	b.n	80079ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007992:	461a      	mov	r2, r3
 8007994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e008      	b.n	80079ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	461a      	mov	r2, r3
 80079aa:	2300      	movs	r3, #0
 80079ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	461a      	mov	r2, r3
 80079ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	3301      	adds	r3, #1
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d3b7      	bcc.n	8007952 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079e2:	2300      	movs	r3, #0
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	e043      	b.n	8007a70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079fe:	d118      	bne.n	8007a32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a12:	461a      	mov	r2, r3
 8007a14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	e013      	b.n	8007a44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	e008      	b.n	8007a44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	461a      	mov	r2, r3
 8007a40:	2300      	movs	r3, #0
 8007a42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	461a      	mov	r2, r3
 8007a52:	2300      	movs	r3, #0
 8007a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	461a      	mov	r2, r3
 8007a64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d3b7      	bcc.n	80079e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f043 0210 	orr.w	r2, r3, #16
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <USB_DevInit+0x2b4>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f043 0208 	orr.w	r2, r3, #8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d105      	bne.n	8007adc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <USB_DevInit+0x2b8>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ae8:	b004      	add	sp, #16
 8007aea:	4770      	bx	lr
 8007aec:	803c3800 	.word	0x803c3800
 8007af0:	40000004 	.word	0x40000004

08007af4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	019b      	lsls	r3, r3, #6
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <USB_FlushTxFifo+0x48>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d901      	bls.n	8007b20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e006      	b.n	8007b2e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d0f0      	beq.n	8007b0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	00030d40 	.word	0x00030d40

08007b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <USB_FlushRxFifo+0x40>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d901      	bls.n	8007b64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e006      	b.n	8007b72 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d0f0      	beq.n	8007b52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	00030d40 	.word	0x00030d40

08007b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007bd6:	2003      	movs	r0, #3
 8007bd8:	f7f9 fcfe 	bl	80015d8 <HAL_Delay>

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <USB_CoreReset+0x64>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e01b      	b.n	8007c3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	daf2      	bge.n	8007bf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3301      	adds	r3, #1
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4a09      	ldr	r2, [pc, #36]	; (8007c4c <USB_CoreReset+0x64>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d901      	bls.n	8007c30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e006      	b.n	8007c3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d0f0      	beq.n	8007c1e <USB_CoreReset+0x36>

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	00030d40 	.word	0x00030d40

08007c50 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007c56:	4b98      	ldr	r3, [pc, #608]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007c58:	22c0      	movs	r2, #192	; 0xc0
 8007c5a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007c5c:	4b96      	ldr	r3, [pc, #600]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007c5e:	22a8      	movs	r2, #168	; 0xa8
 8007c60:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007c62:	4b95      	ldr	r3, [pc, #596]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8007c68:	4b93      	ldr	r3, [pc, #588]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007c6a:	226e      	movs	r2, #110	; 0x6e
 8007c6c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007c6e:	4b93      	ldr	r3, [pc, #588]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007c70:	22ff      	movs	r2, #255	; 0xff
 8007c72:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007c74:	4b91      	ldr	r3, [pc, #580]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007c76:	22ff      	movs	r2, #255	; 0xff
 8007c78:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007c7a:	4b90      	ldr	r3, [pc, #576]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007c7c:	22ff      	movs	r2, #255	; 0xff
 8007c7e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007c80:	4b8e      	ldr	r3, [pc, #568]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007c86:	4b8e      	ldr	r3, [pc, #568]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007c8c:	4b8c      	ldr	r3, [pc, #560]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007c92:	4b8b      	ldr	r3, [pc, #556]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007c98:	4b89      	ldr	r3, [pc, #548]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	f00e f8d5 	bl	8015e50 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007ca6:	4b84      	ldr	r3, [pc, #528]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	061a      	lsls	r2, r3, #24
 8007cac:	4b82      	ldr	r3, [pc, #520]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	041b      	lsls	r3, r3, #16
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	4b80      	ldr	r3, [pc, #512]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	4a7e      	ldr	r2, [pc, #504]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cbe:	78d2      	ldrb	r2, [r2, #3]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	061a      	lsls	r2, r3, #24
 8007cc4:	4b7c      	ldr	r3, [pc, #496]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	0619      	lsls	r1, r3, #24
 8007cca:	4b7b      	ldr	r3, [pc, #492]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	4319      	orrs	r1, r3
 8007cd2:	4b79      	ldr	r3, [pc, #484]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cd4:	789b      	ldrb	r3, [r3, #2]
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	4977      	ldr	r1, [pc, #476]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cdc:	78c9      	ldrb	r1, [r1, #3]
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	4b73      	ldr	r3, [pc, #460]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	0619      	lsls	r1, r3, #24
 8007cee:	4b72      	ldr	r3, [pc, #456]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	041b      	lsls	r3, r3, #16
 8007cf4:	4319      	orrs	r1, r3
 8007cf6:	4b70      	ldr	r3, [pc, #448]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007cf8:	789b      	ldrb	r3, [r3, #2]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	496e      	ldr	r1, [pc, #440]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007d00:	78c9      	ldrb	r1, [r1, #3]
 8007d02:	430b      	orrs	r3, r1
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	4b6a      	ldr	r3, [pc, #424]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	0619      	lsls	r1, r3, #24
 8007d12:	4b69      	ldr	r3, [pc, #420]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007d14:	785b      	ldrb	r3, [r3, #1]
 8007d16:	041b      	lsls	r3, r3, #16
 8007d18:	4319      	orrs	r1, r3
 8007d1a:	4b67      	ldr	r3, [pc, #412]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007d1c:	789b      	ldrb	r3, [r3, #2]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	430b      	orrs	r3, r1
 8007d22:	4965      	ldr	r1, [pc, #404]	; (8007eb8 <MX_LWIP_Init+0x268>)
 8007d24:	78c9      	ldrb	r1, [r1, #3]
 8007d26:	430b      	orrs	r3, r1
 8007d28:	0e1b      	lsrs	r3, r3, #24
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	4a65      	ldr	r2, [pc, #404]	; (8007ec4 <MX_LWIP_Init+0x274>)
 8007d2e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007d30:	4b62      	ldr	r3, [pc, #392]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	061a      	lsls	r2, r3, #24
 8007d36:	4b61      	ldr	r3, [pc, #388]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	4b5f      	ldr	r3, [pc, #380]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	4313      	orrs	r3, r2
 8007d46:	4a5d      	ldr	r2, [pc, #372]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d48:	78d2      	ldrb	r2, [r2, #3]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	061a      	lsls	r2, r3, #24
 8007d4e:	4b5b      	ldr	r3, [pc, #364]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	0619      	lsls	r1, r3, #24
 8007d54:	4b59      	ldr	r3, [pc, #356]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	041b      	lsls	r3, r3, #16
 8007d5a:	4319      	orrs	r1, r3
 8007d5c:	4b57      	ldr	r3, [pc, #348]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d5e:	789b      	ldrb	r3, [r3, #2]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	430b      	orrs	r3, r1
 8007d64:	4955      	ldr	r1, [pc, #340]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d66:	78c9      	ldrb	r1, [r1, #3]
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d70:	431a      	orrs	r2, r3
 8007d72:	4b52      	ldr	r3, [pc, #328]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	0619      	lsls	r1, r3, #24
 8007d78:	4b50      	ldr	r3, [pc, #320]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	4319      	orrs	r1, r3
 8007d80:	4b4e      	ldr	r3, [pc, #312]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d82:	789b      	ldrb	r3, [r3, #2]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	430b      	orrs	r3, r1
 8007d88:	494c      	ldr	r1, [pc, #304]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d8a:	78c9      	ldrb	r1, [r1, #3]
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d94:	431a      	orrs	r2, r3
 8007d96:	4b49      	ldr	r3, [pc, #292]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	0619      	lsls	r1, r3, #24
 8007d9c:	4b47      	ldr	r3, [pc, #284]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	4319      	orrs	r1, r3
 8007da4:	4b45      	ldr	r3, [pc, #276]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007da6:	789b      	ldrb	r3, [r3, #2]
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	430b      	orrs	r3, r1
 8007dac:	4943      	ldr	r1, [pc, #268]	; (8007ebc <MX_LWIP_Init+0x26c>)
 8007dae:	78c9      	ldrb	r1, [r1, #3]
 8007db0:	430b      	orrs	r3, r1
 8007db2:	0e1b      	lsrs	r3, r3, #24
 8007db4:	4313      	orrs	r3, r2
 8007db6:	4a44      	ldr	r2, [pc, #272]	; (8007ec8 <MX_LWIP_Init+0x278>)
 8007db8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007dba:	4b41      	ldr	r3, [pc, #260]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	061a      	lsls	r2, r3, #24
 8007dc0:	4b3f      	ldr	r3, [pc, #252]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	4b3d      	ldr	r3, [pc, #244]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007dca:	789b      	ldrb	r3, [r3, #2]
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	4a3b      	ldr	r2, [pc, #236]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007dd2:	78d2      	ldrb	r2, [r2, #3]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	061a      	lsls	r2, r3, #24
 8007dd8:	4b39      	ldr	r3, [pc, #228]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	0619      	lsls	r1, r3, #24
 8007dde:	4b38      	ldr	r3, [pc, #224]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	4319      	orrs	r1, r3
 8007de6:	4b36      	ldr	r3, [pc, #216]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007de8:	789b      	ldrb	r3, [r3, #2]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	430b      	orrs	r3, r1
 8007dee:	4934      	ldr	r1, [pc, #208]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007df0:	78c9      	ldrb	r1, [r1, #3]
 8007df2:	430b      	orrs	r3, r1
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	4b30      	ldr	r3, [pc, #192]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	0619      	lsls	r1, r3, #24
 8007e02:	4b2f      	ldr	r3, [pc, #188]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	041b      	lsls	r3, r3, #16
 8007e08:	4319      	orrs	r1, r3
 8007e0a:	4b2d      	ldr	r3, [pc, #180]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	430b      	orrs	r3, r1
 8007e12:	492b      	ldr	r1, [pc, #172]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007e14:	78c9      	ldrb	r1, [r1, #3]
 8007e16:	430b      	orrs	r3, r1
 8007e18:	0a1b      	lsrs	r3, r3, #8
 8007e1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	0619      	lsls	r1, r3, #24
 8007e26:	4b26      	ldr	r3, [pc, #152]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	041b      	lsls	r3, r3, #16
 8007e2c:	4319      	orrs	r1, r3
 8007e2e:	4b24      	ldr	r3, [pc, #144]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007e30:	789b      	ldrb	r3, [r3, #2]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	430b      	orrs	r3, r1
 8007e36:	4922      	ldr	r1, [pc, #136]	; (8007ec0 <MX_LWIP_Init+0x270>)
 8007e38:	78c9      	ldrb	r1, [r1, #3]
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	0e1b      	lsrs	r3, r3, #24
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	4a22      	ldr	r2, [pc, #136]	; (8007ecc <MX_LWIP_Init+0x27c>)
 8007e42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007e44:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <MX_LWIP_Init+0x280>)
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <MX_LWIP_Init+0x284>)
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	4b1e      	ldr	r3, [pc, #120]	; (8007ecc <MX_LWIP_Init+0x27c>)
 8007e52:	4a1d      	ldr	r2, [pc, #116]	; (8007ec8 <MX_LWIP_Init+0x278>)
 8007e54:	491b      	ldr	r1, [pc, #108]	; (8007ec4 <MX_LWIP_Init+0x274>)
 8007e56:	4820      	ldr	r0, [pc, #128]	; (8007ed8 <MX_LWIP_Init+0x288>)
 8007e58:	f007 fb64 	bl	800f524 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007e5c:	481e      	ldr	r0, [pc, #120]	; (8007ed8 <MX_LWIP_Init+0x288>)
 8007e5e:	f007 fd13 	bl	800f888 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007e62:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <MX_LWIP_Init+0x288>)
 8007e64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e68:	089b      	lsrs	r3, r3, #2
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007e74:	4818      	ldr	r0, [pc, #96]	; (8007ed8 <MX_LWIP_Init+0x288>)
 8007e76:	f007 fd17 	bl	800f8a8 <netif_set_up>
 8007e7a:	e002      	b.n	8007e82 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007e7c:	4816      	ldr	r0, [pc, #88]	; (8007ed8 <MX_LWIP_Init+0x288>)
 8007e7e:	f007 fd7f 	bl	800f980 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007e82:	4916      	ldr	r1, [pc, #88]	; (8007edc <MX_LWIP_Init+0x28c>)
 8007e84:	4814      	ldr	r0, [pc, #80]	; (8007ed8 <MX_LWIP_Init+0x288>)
 8007e86:	f007 fe11 	bl	800faac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007e8a:	2224      	movs	r2, #36	; 0x24
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4814      	ldr	r0, [pc, #80]	; (8007ee0 <MX_LWIP_Init+0x290>)
 8007e90:	f00e feec 	bl	8016c6c <memset>
  attributes.name = "EthLink";
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <MX_LWIP_Init+0x290>)
 8007e96:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <MX_LWIP_Init+0x294>)
 8007e98:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <MX_LWIP_Init+0x290>)
 8007e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ea0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007ea2:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <MX_LWIP_Init+0x290>)
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	; (8007ee0 <MX_LWIP_Init+0x290>)
 8007eaa:	490b      	ldr	r1, [pc, #44]	; (8007ed8 <MX_LWIP_Init+0x288>)
 8007eac:	480e      	ldr	r0, [pc, #56]	; (8007ee8 <MX_LWIP_Init+0x298>)
 8007eae:	f000 fd21 	bl	80088f4 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007eb2:	bf00      	nop
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	240050ac 	.word	0x240050ac
 8007ebc:	240050a8 	.word	0x240050a8
 8007ec0:	24005048 	.word	0x24005048
 8007ec4:	240050a4 	.word	0x240050a4
 8007ec8:	240050b0 	.word	0x240050b0
 8007ecc:	240050b4 	.word	0x240050b4
 8007ed0:	08015d8d 	.word	0x08015d8d
 8007ed4:	0800858d 	.word	0x0800858d
 8007ed8:	24005070 	.word	0x24005070
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	2400504c 	.word	0x2400504c
 8007ee4:	08017b08 	.word	0x08017b08
 8007ee8:	080086b5 	.word	0x080086b5

08007eec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007f12:	2320      	movs	r3, #32
 8007f14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f16:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8007f1a:	e00b      	b.n	8007f34 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8007f1c:	4a0c      	ldr	r2, [pc, #48]	; (8007f50 <SCB_InvalidateDCache_by_Addr+0x50>)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4413      	add	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	dcf0      	bgt.n	8007f1c <SCB_InvalidateDCache_by_Addr+0x1c>
 8007f3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f3e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	e000ed00 	.word	0xe000ed00

08007f54 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	60da      	str	r2, [r3, #12]
 8007f6a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a59      	ldr	r2, [pc, #356]	; (80080d8 <HAL_ETH_MspInit+0x184>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	f040 80ab 	bne.w	80080ce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007f78:	4b58      	ldr	r3, [pc, #352]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f7e:	4a57      	ldr	r2, [pc, #348]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007f88:	4b54      	ldr	r3, [pc, #336]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f92:	623b      	str	r3, [r7, #32]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007f96:	4b51      	ldr	r3, [pc, #324]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f9c:	4a4f      	ldr	r2, [pc, #316]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007fa6:	4b4d      	ldr	r3, [pc, #308]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007fb4:	4b49      	ldr	r3, [pc, #292]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fba:	4a48      	ldr	r2, [pc, #288]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007fc4:	4b45      	ldr	r3, [pc, #276]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fd2:	4b42      	ldr	r3, [pc, #264]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fd8:	4a40      	ldr	r2, [pc, #256]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007fda:	f043 0304 	orr.w	r3, r3, #4
 8007fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fe2:	4b3e      	ldr	r3, [pc, #248]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ff0:	4b3a      	ldr	r3, [pc, #232]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ff6:	4a39      	ldr	r2, [pc, #228]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8007ff8:	f043 0301 	orr.w	r3, r3, #1
 8007ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008000:	4b36      	ldr	r3, [pc, #216]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8008002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	613b      	str	r3, [r7, #16]
 800800c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800800e:	4b33      	ldr	r3, [pc, #204]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8008010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008014:	4a31      	ldr	r2, [pc, #196]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8008016:	f043 0302 	orr.w	r3, r3, #2
 800801a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800801e:	4b2f      	ldr	r3, [pc, #188]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8008020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800802c:	4b2b      	ldr	r3, [pc, #172]	; (80080dc <HAL_ETH_MspInit+0x188>)
 800802e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008032:	4a2a      	ldr	r2, [pc, #168]	; (80080dc <HAL_ETH_MspInit+0x188>)
 8008034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800803c:	4b27      	ldr	r3, [pc, #156]	; (80080dc <HAL_ETH_MspInit+0x188>)
 800803e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800804a:	2332      	movs	r3, #50	; 0x32
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800804e:	2302      	movs	r3, #2
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008052:	2300      	movs	r3, #0
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008056:	2303      	movs	r3, #3
 8008058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800805a:	230b      	movs	r3, #11
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800805e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008062:	4619      	mov	r1, r3
 8008064:	481e      	ldr	r0, [pc, #120]	; (80080e0 <HAL_ETH_MspInit+0x18c>)
 8008066:	f7fb f9a9 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800806a:	2386      	movs	r3, #134	; 0x86
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800806e:	2302      	movs	r3, #2
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008072:	2300      	movs	r3, #0
 8008074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008076:	2303      	movs	r3, #3
 8008078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800807a:	230b      	movs	r3, #11
 800807c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800807e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008082:	4619      	mov	r1, r3
 8008084:	4817      	ldr	r0, [pc, #92]	; (80080e4 <HAL_ETH_MspInit+0x190>)
 8008086:	f7fb f999 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800808a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008090:	2302      	movs	r3, #2
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008094:	2300      	movs	r3, #0
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008098:	2303      	movs	r3, #3
 800809a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800809c:	230b      	movs	r3, #11
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a4:	4619      	mov	r1, r3
 80080a6:	4810      	ldr	r0, [pc, #64]	; (80080e8 <HAL_ETH_MspInit+0x194>)
 80080a8:	f7fb f988 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80080ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b2:	2302      	movs	r3, #2
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080ba:	2303      	movs	r3, #3
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080be:	230b      	movs	r3, #11
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c6:	4619      	mov	r1, r3
 80080c8:	4808      	ldr	r0, [pc, #32]	; (80080ec <HAL_ETH_MspInit+0x198>)
 80080ca:	f7fb f977 	bl	80033bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80080ce:	bf00      	nop
 80080d0:	3738      	adds	r7, #56	; 0x38
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	40028000 	.word	0x40028000
 80080dc:	58024400 	.word	0x58024400
 80080e0:	58020800 	.word	0x58020800
 80080e4:	58020000 	.word	0x58020000
 80080e8:	58020400 	.word	0x58020400
 80080ec:	58021800 	.word	0x58021800

080080f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b0ac      	sub	sp, #176	; 0xb0
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800810a:	4b8f      	ldr	r3, [pc, #572]	; (8008348 <low_level_init+0x258>)
 800810c:	4a8f      	ldr	r2, [pc, #572]	; (800834c <low_level_init+0x25c>)
 800810e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008110:	2300      	movs	r3, #0
 8008112:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8008114:	2380      	movs	r3, #128	; 0x80
 8008116:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8008118:	23e1      	movs	r3, #225	; 0xe1
 800811a:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8008120:	2300      	movs	r3, #0
 8008122:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8008124:	2300      	movs	r3, #0
 8008126:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8008128:	4a87      	ldr	r2, [pc, #540]	; (8008348 <low_level_init+0x258>)
 800812a:	f107 030c 	add.w	r3, r7, #12
 800812e:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008130:	4b85      	ldr	r3, [pc, #532]	; (8008348 <low_level_init+0x258>)
 8008132:	2201      	movs	r2, #1
 8008134:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008136:	4b84      	ldr	r3, [pc, #528]	; (8008348 <low_level_init+0x258>)
 8008138:	4a85      	ldr	r2, [pc, #532]	; (8008350 <low_level_init+0x260>)
 800813a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800813c:	4b82      	ldr	r3, [pc, #520]	; (8008348 <low_level_init+0x258>)
 800813e:	4a85      	ldr	r2, [pc, #532]	; (8008354 <low_level_init+0x264>)
 8008140:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008142:	4b81      	ldr	r3, [pc, #516]	; (8008348 <low_level_init+0x258>)
 8008144:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008148:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800814a:	487f      	ldr	r0, [pc, #508]	; (8008348 <low_level_init+0x258>)
 800814c:	f7f9 fbde 	bl	800190c <HAL_ETH_Init>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008156:	2234      	movs	r2, #52	; 0x34
 8008158:	2100      	movs	r1, #0
 800815a:	487f      	ldr	r0, [pc, #508]	; (8008358 <low_level_init+0x268>)
 800815c:	f00e fd86 	bl	8016c6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008160:	4b7d      	ldr	r3, [pc, #500]	; (8008358 <low_level_init+0x268>)
 8008162:	2221      	movs	r2, #33	; 0x21
 8008164:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008166:	4b7c      	ldr	r3, [pc, #496]	; (8008358 <low_level_init+0x268>)
 8008168:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800816c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800816e:	4b7a      	ldr	r3, [pc, #488]	; (8008358 <low_level_init+0x268>)
 8008170:	2200      	movs	r2, #0
 8008172:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008174:	4879      	ldr	r0, [pc, #484]	; (800835c <low_level_init+0x26c>)
 8008176:	f007 f88f 	bl	800f298 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2206      	movs	r2, #6
 800817e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008182:	4b71      	ldr	r3, [pc, #452]	; (8008348 <low_level_init+0x258>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800818e:	4b6e      	ldr	r3, [pc, #440]	; (8008348 <low_level_init+0x258>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	785a      	ldrb	r2, [r3, #1]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800819a:	4b6b      	ldr	r3, [pc, #428]	; (8008348 <low_level_init+0x258>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	789a      	ldrb	r2, [r3, #2]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80081a6:	4b68      	ldr	r3, [pc, #416]	; (8008348 <low_level_init+0x258>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	78da      	ldrb	r2, [r3, #3]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80081b2:	4b65      	ldr	r3, [pc, #404]	; (8008348 <low_level_init+0x258>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	791a      	ldrb	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80081be:	4b62      	ldr	r3, [pc, #392]	; (8008348 <low_level_init+0x258>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	795a      	ldrb	r2, [r3, #5]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80081d0:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081d8:	f043 030a 	orr.w	r3, r3, #10
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80081e4:	2300      	movs	r3, #0
 80081e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081ea:	e012      	b.n	8008212 <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80081ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	4a59      	ldr	r2, [pc, #356]	; (8008360 <low_level_init+0x270>)
 80081fa:	441a      	add	r2, r3
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008202:	4851      	ldr	r0, [pc, #324]	; (8008348 <low_level_init+0x258>)
 8008204:	f7f9 fc5c 	bl	8001ac0 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8008208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800820c:	3301      	adds	r3, #1
 800820e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008216:	2b03      	cmp	r3, #3
 8008218:	d9e8      	bls.n	80081ec <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800821a:	2200      	movs	r2, #0
 800821c:	2101      	movs	r1, #1
 800821e:	2001      	movs	r0, #1
 8008220:	f000 fd84 	bl	8008d2c <osSemaphoreNew>
 8008224:	4602      	mov	r2, r0
 8008226:	4b4f      	ldr	r3, [pc, #316]	; (8008364 <low_level_init+0x274>)
 8008228:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800822a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800822e:	2224      	movs	r2, #36	; 0x24
 8008230:	2100      	movs	r1, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f00e fd1a 	bl	8016c6c <memset>
  attributes.name = "EthIf";
 8008238:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <low_level_init+0x278>)
 800823a:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800823c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008240:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 8008244:	2330      	movs	r3, #48	; 0x30
 8008246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 800824a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800824e:	461a      	mov	r2, r3
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4846      	ldr	r0, [pc, #280]	; (800836c <low_level_init+0x27c>)
 8008254:	f000 fb4e 	bl	80088f4 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008258:	4945      	ldr	r1, [pc, #276]	; (8008370 <low_level_init+0x280>)
 800825a:	4846      	ldr	r0, [pc, #280]	; (8008374 <low_level_init+0x284>)
 800825c:	f7f8 ffff 	bl	800125e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008260:	4844      	ldr	r0, [pc, #272]	; (8008374 <low_level_init+0x284>)
 8008262:	f7f9 f82e 	bl	80012c2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008266:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d165      	bne.n	800833a <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800826e:	4841      	ldr	r0, [pc, #260]	; (8008374 <low_level_init+0x284>)
 8008270:	f7f9 f8cf 	bl	8001412 <LAN8742_GetLinkState>
 8008274:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800827c:	2b01      	cmp	r3, #1
 800827e:	dc06      	bgt.n	800828e <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f007 fbe3 	bl	800fa4c <netif_set_link_down>
      netif_set_down(netif);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f007 fb7a 	bl	800f980 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800828c:	e057      	b.n	800833e <low_level_init+0x24e>
      switch (PHYLinkState)
 800828e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008292:	3b02      	subs	r3, #2
 8008294:	2b03      	cmp	r3, #3
 8008296:	d82b      	bhi.n	80082f0 <low_level_init+0x200>
 8008298:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <low_level_init+0x1b0>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082c3 	.word	0x080082c3
 80082a8:	080082d3 	.word	0x080082d3
 80082ac:	080082e3 	.word	0x080082e3
        duplex = ETH_FULLDUPLEX_MODE;
 80082b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80082b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80082c0:	e01f      	b.n	8008302 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80082c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80082d0:	e017      	b.n	8008302 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80082d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80082da:	2300      	movs	r3, #0
 80082dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80082e0:	e00f      	b.n	8008302 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80082e8:	2300      	movs	r3, #0
 80082ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80082ee:	e008      	b.n	8008302 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80082f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80082f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008300:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008302:	f107 0314 	add.w	r3, r7, #20
 8008306:	4619      	mov	r1, r3
 8008308:	480f      	ldr	r0, [pc, #60]	; (8008348 <low_level_init+0x258>)
 800830a:	f7fa f881 	bl	8002410 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800830e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008312:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 8008314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800831a:	f107 0314 	add.w	r3, r7, #20
 800831e:	4619      	mov	r1, r3
 8008320:	4809      	ldr	r0, [pc, #36]	; (8008348 <low_level_init+0x258>)
 8008322:	f7fa fa49 	bl	80027b8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008326:	4808      	ldr	r0, [pc, #32]	; (8008348 <low_level_init+0x258>)
 8008328:	f7f9 fc0b 	bl	8001b42 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f007 fabb 	bl	800f8a8 <netif_set_up>
    netif_set_link_up(netif);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f007 fb56 	bl	800f9e4 <netif_set_link_up>
}
 8008338:	e001      	b.n	800833e <low_level_init+0x24e>
    Error_Handler();
 800833a:	f7f8 fd7f 	bl	8000e3c <Error_Handler>
}
 800833e:	bf00      	nop
 8008340:	37b0      	adds	r7, #176	; 0xb0
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	240051a4 	.word	0x240051a4
 800834c:	40028000 	.word	0x40028000
 8008350:	30040060 	.word	0x30040060
 8008354:	30040000 	.word	0x30040000
 8008358:	24005214 	.word	0x24005214
 800835c:	0801a950 	.word	0x0801a950
 8008360:	30040200 	.word	0x30040200
 8008364:	240000b8 	.word	0x240000b8
 8008368:	08017b10 	.word	0x08017b10
 800836c:	0800853d 	.word	0x0800853d
 8008370:	24000010 	.word	0x24000010
 8008374:	24005184 	.word	0x24005184

08008378 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b092      	sub	sp, #72	; 0x48
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8008382:	2300      	movs	r3, #0
 8008384:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800838c:	f107 030c 	add.w	r3, r7, #12
 8008390:	2230      	movs	r2, #48	; 0x30
 8008392:	2100      	movs	r1, #0
 8008394:	4618      	mov	r0, r3
 8008396:	f00e fc69 	bl	8016c6c <memset>

  for(q = p; q != NULL; q = q->next)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	643b      	str	r3, [r7, #64]	; 0x40
 800839e:	e049      	b.n	8008434 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 80083a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d902      	bls.n	80083ac <low_level_output+0x34>
      return ERR_IF;
 80083a6:	f06f 030b 	mvn.w	r3, #11
 80083aa:	e056      	b.n	800845a <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 80083ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ae:	6859      	ldr	r1, [r3, #4]
 80083b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083b2:	4613      	mov	r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80083be:	4413      	add	r3, r2
 80083c0:	3b3c      	subs	r3, #60	; 0x3c
 80083c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80083c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c6:	895b      	ldrh	r3, [r3, #10]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083cc:	4613      	mov	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80083d8:	4413      	add	r3, r2
 80083da:	3b38      	subs	r3, #56	; 0x38
 80083dc:	6019      	str	r1, [r3, #0]

    if(i>0)
 80083de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d012      	beq.n	800840a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80083e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e6:	1e5a      	subs	r2, r3, #1
 80083e8:	f107 000c 	add.w	r0, r7, #12
 80083ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083ee:	460b      	mov	r3, r1
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	440b      	add	r3, r1
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	18c1      	adds	r1, r0, r3
 80083f8:	4613      	mov	r3, r2
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008404:	4413      	add	r3, r2
 8008406:	3b34      	subs	r3, #52	; 0x34
 8008408:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800840a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8008412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008414:	4613      	mov	r3, r2
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008420:	4413      	add	r3, r2
 8008422:	3b34      	subs	r3, #52	; 0x34
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800842a:	3301      	adds	r3, #1
 800842c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800842e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	643b      	str	r3, [r7, #64]	; 0x40
 8008434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1b2      	bne.n	80083a0 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	891b      	ldrh	r3, [r3, #8]
 800843e:	461a      	mov	r2, r3
 8008440:	4b08      	ldr	r3, [pc, #32]	; (8008464 <low_level_output+0xec>)
 8008442:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008444:	4a07      	ldr	r2, [pc, #28]	; (8008464 <low_level_output+0xec>)
 8008446:	f107 030c 	add.w	r3, r7, #12
 800844a:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800844c:	2214      	movs	r2, #20
 800844e:	4905      	ldr	r1, [pc, #20]	; (8008464 <low_level_output+0xec>)
 8008450:	4805      	ldr	r0, [pc, #20]	; (8008468 <low_level_output+0xf0>)
 8008452:	f7f9 fc75 	bl	8001d40 <HAL_ETH_Transmit>

  return errval;
 8008456:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800845a:	4618      	mov	r0, r3
 800845c:	3748      	adds	r7, #72	; 0x48
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	24005214 	.word	0x24005214
 8008468:	240051a4 	.word	0x240051a4

0800846c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b094      	sub	sp, #80	; 0x50
 8008470:	af02      	add	r7, sp, #8
 8008472:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	60bb      	str	r3, [r7, #8]
 800847c:	2300      	movs	r3, #0
 800847e:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008480:	f107 030c 	add.w	r3, r7, #12
 8008484:	2230      	movs	r2, #48	; 0x30
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f00e fbef 	bl	8016c6c <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800848e:	2300      	movs	r3, #0
 8008490:	643b      	str	r3, [r7, #64]	; 0x40
 8008492:	e015      	b.n	80084c0 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8008494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	f107 010c 	add.w	r1, r7, #12
 800849c:	4613      	mov	r3, r2
 800849e:	005b      	lsls	r3, r3, #1
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4419      	add	r1, r3
 80084a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084a8:	4613      	mov	r3, r2
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084b4:	4413      	add	r3, r2
 80084b6:	3b34      	subs	r3, #52	; 0x34
 80084b8:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80084ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084bc:	3301      	adds	r3, #1
 80084be:	643b      	str	r3, [r7, #64]	; 0x40
 80084c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d9e6      	bls.n	8008494 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 80084c6:	f107 030c 	add.w	r3, r7, #12
 80084ca:	4619      	mov	r1, r3
 80084cc:	4818      	ldr	r0, [pc, #96]	; (8008530 <low_level_input+0xc4>)
 80084ce:	f7f9 fdb0 	bl	8002032 <HAL_ETH_GetRxDataBuffer>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d125      	bne.n	8008524 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 80084d8:	f107 0308 	add.w	r3, r7, #8
 80084dc:	4619      	mov	r1, r3
 80084de:	4814      	ldr	r0, [pc, #80]	; (8008530 <low_level_input+0xc4>)
 80084e0:	f7f9 fe45 	bl	800216e <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 80084e4:	4812      	ldr	r0, [pc, #72]	; (8008530 <low_level_input+0xc4>)
 80084e6:	f7f9 fe75 	bl	80021d4 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	4611      	mov	r1, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff fd05 	bl	8007f00 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80084f6:	480f      	ldr	r0, [pc, #60]	; (8008534 <low_level_input+0xc8>)
 80084f8:	f006 ff4a 	bl	800f390 <memp_malloc_pool>
 80084fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00f      	beq.n	8008524 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8008504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008506:	4a0c      	ldr	r2, [pc, #48]	; (8008538 <low_level_input+0xcc>)
 8008508:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	b299      	uxth	r1, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	b292      	uxth	r2, r2
 8008514:	9201      	str	r2, [sp, #4]
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851a:	2241      	movs	r2, #65	; 0x41
 800851c:	2000      	movs	r0, #0
 800851e:	f007 fcb5 	bl	800fe8c <pbuf_alloced_custom>
 8008522:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 8008524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008526:	4618      	mov	r0, r3
 8008528:	3748      	adds	r7, #72	; 0x48
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	240051a4 	.word	0x240051a4
 8008534:	0801a950 	.word	0x0801a950
 8008538:	080085e9 	.word	0x080085e9

0800853c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <ethernetif_input+0x4c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008550:	4618      	mov	r0, r3
 8008552:	f000 fc89 	bl	8008e68 <osSemaphoreAcquire>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1f5      	bne.n	8008548 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff ff85 	bl	800846c <low_level_input>
 8008562:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	68f9      	ldr	r1, [r7, #12]
 8008570:	68b8      	ldr	r0, [r7, #8]
 8008572:	4798      	blx	r3
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800857a:	68b8      	ldr	r0, [r7, #8]
 800857c:	f007 fe40 	bl	8010200 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1ea      	bne.n	800855c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008586:	e7df      	b.n	8008548 <ethernetif_input+0xc>
 8008588:	240000b8 	.word	0x240000b8

0800858c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <ethernetif_init+0x1c>
 800859a:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <ethernetif_init+0x48>)
 800859c:	f240 2247 	movw	r2, #583	; 0x247
 80085a0:	490d      	ldr	r1, [pc, #52]	; (80085d8 <ethernetif_init+0x4c>)
 80085a2:	480e      	ldr	r0, [pc, #56]	; (80085dc <ethernetif_init+0x50>)
 80085a4:	f00e fb6a 	bl	8016c7c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2273      	movs	r2, #115	; 0x73
 80085ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2274      	movs	r2, #116	; 0x74
 80085b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <ethernetif_init+0x54>)
 80085bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <ethernetif_init+0x58>)
 80085c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff fd93 	bl	80080f0 <low_level_init>

  return ERR_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	08017b18 	.word	0x08017b18
 80085d8:	08017b34 	.word	0x08017b34
 80085dc:	08017b44 	.word	0x08017b44
 80085e0:	0800cbc9 	.word	0x0800cbc9
 80085e4:	08008379 	.word	0x08008379

080085e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	4803      	ldr	r0, [pc, #12]	; (8008604 <pbuf_free_custom+0x1c>)
 80085f8:	f006 ff3e 	bl	800f478 <memp_free_pool>
}
 80085fc:	bf00      	nop
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	0801a950 	.word	0x0801a950

08008608 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800860c:	f7f8 ffd8 	bl	80015c0 <HAL_GetTick>
 8008610:	4603      	mov	r3, r0
}
 8008612:	4618      	mov	r0, r3
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800861c:	4802      	ldr	r0, [pc, #8]	; (8008628 <ETH_PHY_IO_Init+0x10>)
 800861e:	f7fa f8e5 	bl	80027ec <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	bd80      	pop	{r7, pc}
 8008628:	240051a4 	.word	0x240051a4

0800862c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  return 0;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	68f9      	ldr	r1, [r7, #12]
 800864e:	4807      	ldr	r0, [pc, #28]	; (800866c <ETH_PHY_IO_ReadReg+0x30>)
 8008650:	f7f9 fe36 	bl	80022c0 <HAL_ETH_ReadPHYRegister>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800865a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800865e:	e000      	b.n	8008662 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	240051a4 	.word	0x240051a4

08008670 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	4807      	ldr	r0, [pc, #28]	; (80086a0 <ETH_PHY_IO_WriteReg+0x30>)
 8008684:	f7f9 fe70 	bl	8002368 <HAL_ETH_WritePHYRegister>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800868e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008692:	e000      	b.n	8008696 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	240051a4 	.word	0x240051a4

080086a4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80086a8:	f7f8 ff8a 	bl	80015c0 <HAL_GetTick>
 80086ac:	4603      	mov	r3, r0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b0a0      	sub	sp, #128	; 0x80
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80086bc:	2300      	movs	r3, #0
 80086be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086c0:	2300      	movs	r3, #0
 80086c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80086c4:	2300      	movs	r3, #0
 80086c6:	677b      	str	r3, [r7, #116]	; 0x74

/* USER CODE END ETH link init */

  for(;;)
  {
  struct netif *netif = (struct netif *) argument;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	673b      	str	r3, [r7, #112]	; 0x70
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80086cc:	483a      	ldr	r0, [pc, #232]	; (80087b8 <ethernet_link_thread+0x104>)
 80086ce:	f7f8 fea0 	bl	8001412 <LAN8742_GetLinkState>
 80086d2:	4603      	mov	r3, r0
 80086d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80086d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086dc:	089b      	lsrs	r3, r3, #2
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00c      	beq.n	8008702 <ethernet_link_thread+0x4e>
 80086e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d809      	bhi.n	8008702 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 80086ee:	4833      	ldr	r0, [pc, #204]	; (80087bc <ethernet_link_thread+0x108>)
 80086f0:	f7f9 faac 	bl	8001c4c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80086f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80086f6:	f007 f943 	bl	800f980 <netif_set_down>
    netif_set_link_down(netif);
 80086fa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80086fc:	f007 f9a6 	bl	800fa4c <netif_set_link_down>
 8008700:	e055      	b.n	80087ae <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d14e      	bne.n	80087ae <ethernet_link_thread+0xfa>
 8008710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d94b      	bls.n	80087ae <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 8008716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008718:	3b02      	subs	r3, #2
 800871a:	2b03      	cmp	r3, #3
 800871c:	d82a      	bhi.n	8008774 <ethernet_link_thread+0xc0>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <ethernet_link_thread+0x70>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008735 	.word	0x08008735
 8008728:	08008747 	.word	0x08008747
 800872c:	08008757 	.word	0x08008757
 8008730:	08008767 	.word	0x08008767
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008738:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800873a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800873e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008740:	2301      	movs	r3, #1
 8008742:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008744:	e017      	b.n	8008776 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008746:	2300      	movs	r3, #0
 8008748:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800874a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800874e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008750:	2301      	movs	r3, #1
 8008752:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008754:	e00f      	b.n	8008776 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800875a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800875c:	2300      	movs	r3, #0
 800875e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008760:	2301      	movs	r3, #1
 8008762:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008764:	e007      	b.n	8008776 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008766:	2300      	movs	r3, #0
 8008768:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800876a:	2300      	movs	r3, #0
 800876c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800876e:	2301      	movs	r3, #1
 8008770:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008772:	e000      	b.n	8008776 <ethernet_link_thread+0xc2>
    default:
      break;
 8008774:	bf00      	nop
    }

    if(linkchanged)
 8008776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d018      	beq.n	80087ae <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800877c:	f107 0308 	add.w	r3, r7, #8
 8008780:	4619      	mov	r1, r3
 8008782:	480e      	ldr	r0, [pc, #56]	; (80087bc <ethernet_link_thread+0x108>)
 8008784:	f7f9 fe44 	bl	8002410 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800878a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800878c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800878e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008790:	f107 0308 	add.w	r3, r7, #8
 8008794:	4619      	mov	r1, r3
 8008796:	4809      	ldr	r0, [pc, #36]	; (80087bc <ethernet_link_thread+0x108>)
 8008798:	f7fa f80e 	bl	80027b8 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800879c:	4807      	ldr	r0, [pc, #28]	; (80087bc <ethernet_link_thread+0x108>)
 800879e:	f7f9 f9d0 	bl	8001b42 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80087a2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80087a4:	f007 f880 	bl	800f8a8 <netif_set_up>
      netif_set_link_up(netif);
 80087a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80087aa:	f007 f91b 	bl	800f9e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80087ae:	2064      	movs	r0, #100	; 0x64
 80087b0:	f000 f946 	bl	8008a40 <osDelay>
  {
 80087b4:	e788      	b.n	80086c8 <ethernet_link_thread+0x14>
 80087b6:	bf00      	nop
 80087b8:	24005184 	.word	0x24005184
 80087bc:	240051a4 	.word	0x240051a4

080087c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80087c4:	bf00      	nop
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087d6:	f3ef 8305 	mrs	r3, IPSR
 80087da:	60bb      	str	r3, [r7, #8]
  return(result);
 80087dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10f      	bne.n	8008802 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087e2:	f3ef 8310 	mrs	r3, PRIMASK
 80087e6:	607b      	str	r3, [r7, #4]
  return(result);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d105      	bne.n	80087fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087ee:	f3ef 8311 	mrs	r3, BASEPRI
 80087f2:	603b      	str	r3, [r7, #0]
  return(result);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <osKernelInitialize+0x3a>
 80087fa:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <osKernelInitialize+0x64>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d103      	bne.n	800880a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008802:	f06f 0305 	mvn.w	r3, #5
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	e00c      	b.n	8008824 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800880a:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <osKernelInitialize+0x64>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d105      	bne.n	800881e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008812:	4b08      	ldr	r3, [pc, #32]	; (8008834 <osKernelInitialize+0x64>)
 8008814:	2201      	movs	r2, #1
 8008816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e002      	b.n	8008824 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800881e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008822:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008824:	68fb      	ldr	r3, [r7, #12]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	240000c0 	.word	0x240000c0

08008838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800883e:	f3ef 8305 	mrs	r3, IPSR
 8008842:	60bb      	str	r3, [r7, #8]
  return(result);
 8008844:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10f      	bne.n	800886a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800884a:	f3ef 8310 	mrs	r3, PRIMASK
 800884e:	607b      	str	r3, [r7, #4]
  return(result);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d105      	bne.n	8008862 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008856:	f3ef 8311 	mrs	r3, BASEPRI
 800885a:	603b      	str	r3, [r7, #0]
  return(result);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <osKernelStart+0x3a>
 8008862:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <osKernelStart+0x68>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d103      	bne.n	8008872 <osKernelStart+0x3a>
    stat = osErrorISR;
 800886a:	f06f 0305 	mvn.w	r3, #5
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e010      	b.n	8008894 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008872:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <osKernelStart+0x68>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d109      	bne.n	800888e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800887a:	f7ff ffa1 	bl	80087c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800887e:	4b08      	ldr	r3, [pc, #32]	; (80088a0 <osKernelStart+0x68>)
 8008880:	2202      	movs	r2, #2
 8008882:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008884:	f002 fbae 	bl	800afe4 <vTaskStartScheduler>
      stat = osOK;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e002      	b.n	8008894 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800888e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008892:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008894:	68fb      	ldr	r3, [r7, #12]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	240000c0 	.word	0x240000c0

080088a4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088aa:	f3ef 8305 	mrs	r3, IPSR
 80088ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80088b0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10f      	bne.n	80088d6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b6:	f3ef 8310 	mrs	r3, PRIMASK
 80088ba:	607b      	str	r3, [r7, #4]
  return(result);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d105      	bne.n	80088ce <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088c2:	f3ef 8311 	mrs	r3, BASEPRI
 80088c6:	603b      	str	r3, [r7, #0]
  return(result);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <osKernelGetTickCount+0x3a>
 80088ce:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <osKernelGetTickCount+0x4c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d103      	bne.n	80088de <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80088d6:	f002 fca3 	bl	800b220 <xTaskGetTickCountFromISR>
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	e002      	b.n	80088e4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80088de:	f002 fc8f 	bl	800b200 <xTaskGetTickCount>
 80088e2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80088e4:	68fb      	ldr	r3, [r7, #12]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	240000c0 	.word	0x240000c0

080088f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b090      	sub	sp, #64	; 0x40
 80088f8:	af04      	add	r7, sp, #16
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008904:	f3ef 8305 	mrs	r3, IPSR
 8008908:	61fb      	str	r3, [r7, #28]
  return(result);
 800890a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800890c:	2b00      	cmp	r3, #0
 800890e:	f040 808f 	bne.w	8008a30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008912:	f3ef 8310 	mrs	r3, PRIMASK
 8008916:	61bb      	str	r3, [r7, #24]
  return(result);
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800891e:	f3ef 8311 	mrs	r3, BASEPRI
 8008922:	617b      	str	r3, [r7, #20]
  return(result);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <osThreadNew+0x3e>
 800892a:	4b44      	ldr	r3, [pc, #272]	; (8008a3c <osThreadNew+0x148>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d07e      	beq.n	8008a30 <osThreadNew+0x13c>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d07b      	beq.n	8008a30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800893c:	2318      	movs	r3, #24
 800893e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008948:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d045      	beq.n	80089dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <osThreadNew+0x6a>
        name = attr->name;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d008      	beq.n	8008984 <osThreadNew+0x90>
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	2b38      	cmp	r3, #56	; 0x38
 8008976:	d805      	bhi.n	8008984 <osThreadNew+0x90>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <osThreadNew+0x94>
        return (NULL);
 8008984:	2300      	movs	r3, #0
 8008986:	e054      	b.n	8008a32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	089b      	lsrs	r3, r3, #2
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00e      	beq.n	80089be <osThreadNew+0xca>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b5b      	cmp	r3, #91	; 0x5b
 80089a6:	d90a      	bls.n	80089be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <osThreadNew+0xca>
        mem = 1;
 80089b8:	2301      	movs	r3, #1
 80089ba:	623b      	str	r3, [r7, #32]
 80089bc:	e010      	b.n	80089e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10c      	bne.n	80089e0 <osThreadNew+0xec>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d108      	bne.n	80089e0 <osThreadNew+0xec>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <osThreadNew+0xec>
          mem = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	623b      	str	r3, [r7, #32]
 80089da:	e001      	b.n	80089e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d110      	bne.n	8008a08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089ee:	9202      	str	r2, [sp, #8]
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f002 f91f 	bl	800ac40 <xTaskCreateStatic>
 8008a02:	4603      	mov	r3, r0
 8008a04:	613b      	str	r3, [r7, #16]
 8008a06:	e013      	b.n	8008a30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d110      	bne.n	8008a30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	f107 0310 	add.w	r3, r7, #16
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f002 f967 	bl	800acf4 <xTaskCreate>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d001      	beq.n	8008a30 <osThreadNew+0x13c>
          hTask = NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a30:	693b      	ldr	r3, [r7, #16]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3730      	adds	r7, #48	; 0x30
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	240000c0 	.word	0x240000c0

08008a40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a48:	f3ef 8305 	mrs	r3, IPSR
 8008a4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008a4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10f      	bne.n	8008a74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a54:	f3ef 8310 	mrs	r3, PRIMASK
 8008a58:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d105      	bne.n	8008a6c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a60:	f3ef 8311 	mrs	r3, BASEPRI
 8008a64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <osDelay+0x3c>
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <osDelay+0x58>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d103      	bne.n	8008a7c <osDelay+0x3c>
    stat = osErrorISR;
 8008a74:	f06f 0305 	mvn.w	r3, #5
 8008a78:	617b      	str	r3, [r7, #20]
 8008a7a:	e007      	b.n	8008a8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f002 fa78 	bl	800af7c <vTaskDelay>
    }
  }

  return (stat);
 8008a8c:	697b      	ldr	r3, [r7, #20]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	240000c0 	.word	0x240000c0

08008a9c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08a      	sub	sp, #40	; 0x28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aa8:	f3ef 8305 	mrs	r3, IPSR
 8008aac:	613b      	str	r3, [r7, #16]
  return(result);
 8008aae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 8085 	bne.w	8008bc0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aba:	60fb      	str	r3, [r7, #12]
  return(result);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <osMutexNew+0x3a>
 8008ace:	4b3f      	ldr	r3, [pc, #252]	; (8008bcc <osMutexNew+0x130>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d074      	beq.n	8008bc0 <osMutexNew+0x124>
    if (attr != NULL) {
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	623b      	str	r3, [r7, #32]
 8008ae2:	e001      	b.n	8008ae8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <osMutexNew+0x5c>
      rmtx = 1U;
 8008af2:	2301      	movs	r3, #1
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e001      	b.n	8008afc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d15c      	bne.n	8008bc0 <osMutexNew+0x124>
      mem = -1;
 8008b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b0a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d015      	beq.n	8008b3e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d006      	beq.n	8008b28 <osMutexNew+0x8c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	2b4f      	cmp	r3, #79	; 0x4f
 8008b20:	d902      	bls.n	8008b28 <osMutexNew+0x8c>
          mem = 1;
 8008b22:	2301      	movs	r3, #1
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	e00c      	b.n	8008b42 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d108      	bne.n	8008b42 <osMutexNew+0xa6>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <osMutexNew+0xa6>
            mem = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61bb      	str	r3, [r7, #24]
 8008b3c:	e001      	b.n	8008b42 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d112      	bne.n	8008b6e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	4619      	mov	r1, r3
 8008b54:	2004      	movs	r0, #4
 8008b56:	f001 f9ca 	bl	8009eee <xQueueCreateMutexStatic>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b5c:	e016      	b.n	8008b8c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	4619      	mov	r1, r3
 8008b64:	2001      	movs	r0, #1
 8008b66:	f001 f9c2 	bl	8009eee <xQueueCreateMutexStatic>
 8008b6a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b6c:	e00e      	b.n	8008b8c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10b      	bne.n	8008b8c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008b7a:	2004      	movs	r0, #4
 8008b7c:	f001 f99f 	bl	8009ebe <xQueueCreateMutex>
 8008b80:	6278      	str	r0, [r7, #36]	; 0x24
 8008b82:	e003      	b.n	8008b8c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008b84:	2001      	movs	r0, #1
 8008b86:	f001 f99a 	bl	8009ebe <xQueueCreateMutex>
 8008b8a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00c      	beq.n	8008bac <osMutexNew+0x110>
        if (attr != NULL) {
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <osMutexNew+0x104>
          name = attr->name;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	e001      	b.n	8008ba4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008ba4:	6979      	ldr	r1, [r7, #20]
 8008ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ba8:	f001 ffc4 	bl	800ab34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d006      	beq.n	8008bc0 <osMutexNew+0x124>
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3728      	adds	r7, #40	; 0x28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	240000c0 	.word	0x240000c0

08008bd0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bee:	f3ef 8305 	mrs	r3, IPSR
 8008bf2:	613b      	str	r3, [r7, #16]
  return(result);
 8008bf4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10f      	bne.n	8008c1a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8008bfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d105      	bne.n	8008c12 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c06:	f3ef 8311 	mrs	r3, BASEPRI
 8008c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d007      	beq.n	8008c22 <osMutexAcquire+0x52>
 8008c12:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <osMutexAcquire+0xb8>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d103      	bne.n	8008c22 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008c1a:	f06f 0305 	mvn.w	r3, #5
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	e02c      	b.n	8008c7c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008c28:	f06f 0303 	mvn.w	r3, #3
 8008c2c:	61fb      	str	r3, [r7, #28]
 8008c2e:	e025      	b.n	8008c7c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d011      	beq.n	8008c5a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	69b8      	ldr	r0, [r7, #24]
 8008c3a:	f001 f9a6 	bl	8009f8a <xQueueTakeMutexRecursive>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d01b      	beq.n	8008c7c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008c4a:	f06f 0301 	mvn.w	r3, #1
 8008c4e:	61fb      	str	r3, [r7, #28]
 8008c50:	e014      	b.n	8008c7c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008c52:	f06f 0302 	mvn.w	r3, #2
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	e010      	b.n	8008c7c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	69b8      	ldr	r0, [r7, #24]
 8008c5e:	f001 fc99 	bl	800a594 <xQueueSemaphoreTake>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d009      	beq.n	8008c7c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008c6e:	f06f 0301 	mvn.w	r3, #1
 8008c72:	61fb      	str	r3, [r7, #28]
 8008c74:	e002      	b.n	8008c7c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008c76:	f06f 0302 	mvn.w	r3, #2
 8008c7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c7c:	69fb      	ldr	r3, [r7, #28]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	240000c0 	.word	0x240000c0

08008c8c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca8:	f3ef 8305 	mrs	r3, IPSR
 8008cac:	613b      	str	r3, [r7, #16]
  return(result);
 8008cae:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10f      	bne.n	8008cd4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d105      	bne.n	8008ccc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8008cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <osMutexRelease+0x50>
 8008ccc:	4b16      	ldr	r3, [pc, #88]	; (8008d28 <osMutexRelease+0x9c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d103      	bne.n	8008cdc <osMutexRelease+0x50>
    stat = osErrorISR;
 8008cd4:	f06f 0305 	mvn.w	r3, #5
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	e01f      	b.n	8008d1c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008ce2:	f06f 0303 	mvn.w	r3, #3
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	e018      	b.n	8008d1c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d009      	beq.n	8008d04 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008cf0:	69b8      	ldr	r0, [r7, #24]
 8008cf2:	f001 f917 	bl	8009f24 <xQueueGiveMutexRecursive>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d00f      	beq.n	8008d1c <osMutexRelease+0x90>
        stat = osErrorResource;
 8008cfc:	f06f 0302 	mvn.w	r3, #2
 8008d00:	61fb      	str	r3, [r7, #28]
 8008d02:	e00b      	b.n	8008d1c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	69b8      	ldr	r0, [r7, #24]
 8008d0c:	f001 f9d8 	bl	800a0c0 <xQueueGenericSend>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d002      	beq.n	8008d1c <osMutexRelease+0x90>
        stat = osErrorResource;
 8008d16:	f06f 0302 	mvn.w	r3, #2
 8008d1a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008d1c:	69fb      	ldr	r3, [r7, #28]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3720      	adds	r7, #32
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	240000c0 	.word	0x240000c0

08008d2c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08c      	sub	sp, #48	; 0x30
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d3c:	f3ef 8305 	mrs	r3, IPSR
 8008d40:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 8087 	bne.w	8008e58 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d4e:	617b      	str	r3, [r7, #20]
  return(result);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d105      	bne.n	8008d62 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d56:	f3ef 8311 	mrs	r3, BASEPRI
 8008d5a:	613b      	str	r3, [r7, #16]
  return(result);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <osSemaphoreNew+0x3e>
 8008d62:	4b40      	ldr	r3, [pc, #256]	; (8008e64 <osSemaphoreNew+0x138>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d076      	beq.n	8008e58 <osSemaphoreNew+0x12c>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d073      	beq.n	8008e58 <osSemaphoreNew+0x12c>
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d86f      	bhi.n	8008e58 <osSemaphoreNew+0x12c>
    mem = -1;
 8008d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d015      	beq.n	8008db0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d006      	beq.n	8008d9a <osSemaphoreNew+0x6e>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	2b4f      	cmp	r3, #79	; 0x4f
 8008d92:	d902      	bls.n	8008d9a <osSemaphoreNew+0x6e>
        mem = 1;
 8008d94:	2301      	movs	r3, #1
 8008d96:	623b      	str	r3, [r7, #32]
 8008d98:	e00c      	b.n	8008db4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d108      	bne.n	8008db4 <osSemaphoreNew+0x88>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <osSemaphoreNew+0x88>
          mem = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	623b      	str	r3, [r7, #32]
 8008dae:	e001      	b.n	8008db4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dba:	d04d      	beq.n	8008e58 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d129      	bne.n	8008e16 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d10b      	bne.n	8008de0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	2303      	movs	r3, #3
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	f000 ff82 	bl	8009ce0 <xQueueGenericCreateStatic>
 8008ddc:	6278      	str	r0, [r7, #36]	; 0x24
 8008dde:	e005      	b.n	8008dec <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008de0:	2203      	movs	r2, #3
 8008de2:	2100      	movs	r1, #0
 8008de4:	2001      	movs	r0, #1
 8008de6:	f000 ffee 	bl	8009dc6 <xQueueGenericCreate>
 8008dea:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d022      	beq.n	8008e38 <osSemaphoreNew+0x10c>
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01f      	beq.n	8008e38 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e00:	f001 f95e 	bl	800a0c0 <xQueueGenericSend>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d016      	beq.n	8008e38 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8008e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e0c:	f001 fd47 	bl	800a89e <vQueueDelete>
            hSemaphore = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
 8008e14:	e010      	b.n	8008e38 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d108      	bne.n	8008e2e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	461a      	mov	r2, r3
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f001 f8e5 	bl	8009ff4 <xQueueCreateCountingSemaphoreStatic>
 8008e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e2c:	e004      	b.n	8008e38 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f001 f914 	bl	800a05e <xQueueCreateCountingSemaphore>
 8008e36:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00c      	beq.n	8008e58 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <osSemaphoreNew+0x120>
          name = attr->name;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e001      	b.n	8008e50 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008e50:	69f9      	ldr	r1, [r7, #28]
 8008e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e54:	f001 fe6e 	bl	800ab34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3728      	adds	r7, #40	; 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	240000c0 	.word	0x240000c0

08008e68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d103      	bne.n	8008e88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008e80:	f06f 0303 	mvn.w	r3, #3
 8008e84:	61fb      	str	r3, [r7, #28]
 8008e86:	e04b      	b.n	8008f20 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e88:	f3ef 8305 	mrs	r3, IPSR
 8008e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8008e8e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10f      	bne.n	8008eb4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e94:	f3ef 8310 	mrs	r3, PRIMASK
 8008e98:	613b      	str	r3, [r7, #16]
  return(result);
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d105      	bne.n	8008eac <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d026      	beq.n	8008efa <osSemaphoreAcquire+0x92>
 8008eac:	4b1f      	ldr	r3, [pc, #124]	; (8008f2c <osSemaphoreAcquire+0xc4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d122      	bne.n	8008efa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008eba:	f06f 0303 	mvn.w	r3, #3
 8008ebe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008ec0:	e02d      	b.n	8008f1e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	461a      	mov	r2, r3
 8008ecc:	2100      	movs	r1, #0
 8008ece:	69b8      	ldr	r0, [r7, #24]
 8008ed0:	f001 fc68 	bl	800a7a4 <xQueueReceiveFromISR>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d003      	beq.n	8008ee2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008eda:	f06f 0302 	mvn.w	r3, #2
 8008ede:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008ee0:	e01d      	b.n	8008f1e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01a      	beq.n	8008f1e <osSemaphoreAcquire+0xb6>
 8008ee8:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <osSemaphoreAcquire+0xc8>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008ef8:	e011      	b.n	8008f1e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	69b8      	ldr	r0, [r7, #24]
 8008efe:	f001 fb49 	bl	800a594 <xQueueSemaphoreTake>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d00b      	beq.n	8008f20 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008f0e:	f06f 0301 	mvn.w	r3, #1
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	e004      	b.n	8008f20 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008f16:	f06f 0302 	mvn.w	r3, #2
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	e000      	b.n	8008f20 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008f1e:	bf00      	nop
      }
    }
  }

  return (stat);
 8008f20:	69fb      	ldr	r3, [r7, #28]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	240000c0 	.word	0x240000c0
 8008f30:	e000ed04 	.word	0xe000ed04

08008f34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08c      	sub	sp, #48	; 0x30
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f44:	f3ef 8305 	mrs	r3, IPSR
 8008f48:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d170      	bne.n	8009032 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f50:	f3ef 8310 	mrs	r3, PRIMASK
 8008f54:	617b      	str	r3, [r7, #20]
  return(result);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d105      	bne.n	8008f68 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8008f60:	613b      	str	r3, [r7, #16]
  return(result);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <osMessageQueueNew+0x3c>
 8008f68:	4b34      	ldr	r3, [pc, #208]	; (800903c <osMessageQueueNew+0x108>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d060      	beq.n	8009032 <osMessageQueueNew+0xfe>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d05d      	beq.n	8009032 <osMessageQueueNew+0xfe>
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d05a      	beq.n	8009032 <osMessageQueueNew+0xfe>
    mem = -1;
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d029      	beq.n	8008fdc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d012      	beq.n	8008fb6 <osMessageQueueNew+0x82>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b4f      	cmp	r3, #79	; 0x4f
 8008f96:	d90e      	bls.n	8008fb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	695a      	ldr	r2, [r3, #20]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	fb01 f303 	mul.w	r3, r1, r3
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d302      	bcc.n	8008fb6 <osMessageQueueNew+0x82>
        mem = 1;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	623b      	str	r3, [r7, #32]
 8008fb4:	e014      	b.n	8008fe0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d110      	bne.n	8008fe0 <osMessageQueueNew+0xac>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10c      	bne.n	8008fe0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d108      	bne.n	8008fe0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d104      	bne.n	8008fe0 <osMessageQueueNew+0xac>
          mem = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	623b      	str	r3, [r7, #32]
 8008fda:	e001      	b.n	8008fe0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d10c      	bne.n	8009000 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6899      	ldr	r1, [r3, #8]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fe72 	bl	8009ce0 <xQueueGenericCreateStatic>
 8008ffc:	6278      	str	r0, [r7, #36]	; 0x24
 8008ffe:	e008      	b.n	8009012 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d105      	bne.n	8009012 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009006:	2200      	movs	r2, #0
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fedb 	bl	8009dc6 <xQueueGenericCreate>
 8009010:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00c      	beq.n	8009032 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <osMessageQueueNew+0xf2>
        name = attr->name;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	61fb      	str	r3, [r7, #28]
 8009024:	e001      	b.n	800902a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800902a:	69f9      	ldr	r1, [r7, #28]
 800902c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800902e:	f001 fd81 	bl	800ab34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009034:	4618      	mov	r0, r3
 8009036:	3728      	adds	r7, #40	; 0x28
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	240000c0 	.word	0x240000c0

08009040 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009040:	b580      	push	{r7, lr}
 8009042:	b08a      	sub	sp, #40	; 0x28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	4613      	mov	r3, r2
 800904e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009054:	2300      	movs	r3, #0
 8009056:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009058:	f3ef 8305 	mrs	r3, IPSR
 800905c:	61fb      	str	r3, [r7, #28]
  return(result);
 800905e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10f      	bne.n	8009084 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009064:	f3ef 8310 	mrs	r3, PRIMASK
 8009068:	61bb      	str	r3, [r7, #24]
  return(result);
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d105      	bne.n	800907c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009070:	f3ef 8311 	mrs	r3, BASEPRI
 8009074:	617b      	str	r3, [r7, #20]
  return(result);
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02c      	beq.n	80090d6 <osMessageQueuePut+0x96>
 800907c:	4b28      	ldr	r3, [pc, #160]	; (8009120 <osMessageQueuePut+0xe0>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d128      	bne.n	80090d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <osMessageQueuePut+0x56>
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <osMessageQueuePut+0x56>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009096:	f06f 0303 	mvn.w	r3, #3
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800909c:	e039      	b.n	8009112 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800909e:	2300      	movs	r3, #0
 80090a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80090a2:	f107 0210 	add.w	r2, r7, #16
 80090a6:	2300      	movs	r3, #0
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	6a38      	ldr	r0, [r7, #32]
 80090ac:	f001 f902 	bl	800a2b4 <xQueueGenericSendFromISR>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d003      	beq.n	80090be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80090b6:	f06f 0302 	mvn.w	r3, #2
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090bc:	e029      	b.n	8009112 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d026      	beq.n	8009112 <osMessageQueuePut+0xd2>
 80090c4:	4b17      	ldr	r3, [pc, #92]	; (8009124 <osMessageQueuePut+0xe4>)
 80090c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090d4:	e01d      	b.n	8009112 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <osMessageQueuePut+0xa2>
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d103      	bne.n	80090ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80090e2:	f06f 0303 	mvn.w	r3, #3
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
 80090e8:	e014      	b.n	8009114 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80090ea:	2300      	movs	r3, #0
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	6a38      	ldr	r0, [r7, #32]
 80090f2:	f000 ffe5 	bl	800a0c0 <xQueueGenericSend>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d00b      	beq.n	8009114 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009102:	f06f 0301 	mvn.w	r3, #1
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
 8009108:	e004      	b.n	8009114 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800910a:	f06f 0302 	mvn.w	r3, #2
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
 8009110:	e000      	b.n	8009114 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009112:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009116:	4618      	mov	r0, r3
 8009118:	3728      	adds	r7, #40	; 0x28
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	240000c0 	.word	0x240000c0
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	; 0x28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800913a:	2300      	movs	r3, #0
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800913e:	f3ef 8305 	mrs	r3, IPSR
 8009142:	61fb      	str	r3, [r7, #28]
  return(result);
 8009144:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10f      	bne.n	800916a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800914a:	f3ef 8310 	mrs	r3, PRIMASK
 800914e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009156:	f3ef 8311 	mrs	r3, BASEPRI
 800915a:	617b      	str	r3, [r7, #20]
  return(result);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d02c      	beq.n	80091bc <osMessageQueueGet+0x94>
 8009162:	4b28      	ldr	r3, [pc, #160]	; (8009204 <osMessageQueueGet+0xdc>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d128      	bne.n	80091bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d005      	beq.n	800917c <osMessageQueueGet+0x54>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <osMessageQueueGet+0x54>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800917c:	f06f 0303 	mvn.w	r3, #3
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009182:	e038      	b.n	80091f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009184:	2300      	movs	r3, #0
 8009186:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009188:	f107 0310 	add.w	r3, r7, #16
 800918c:	461a      	mov	r2, r3
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	6a38      	ldr	r0, [r7, #32]
 8009192:	f001 fb07 	bl	800a7a4 <xQueueReceiveFromISR>
 8009196:	4603      	mov	r3, r0
 8009198:	2b01      	cmp	r3, #1
 800919a:	d003      	beq.n	80091a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800919c:	f06f 0302 	mvn.w	r3, #2
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091a2:	e028      	b.n	80091f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d025      	beq.n	80091f6 <osMessageQueueGet+0xce>
 80091aa:	4b17      	ldr	r3, [pc, #92]	; (8009208 <osMessageQueueGet+0xe0>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091ba:	e01c      	b.n	80091f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <osMessageQueueGet+0xa0>
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d103      	bne.n	80091d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80091c8:	f06f 0303 	mvn.w	r3, #3
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
 80091ce:	e013      	b.n	80091f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	68b9      	ldr	r1, [r7, #8]
 80091d4:	6a38      	ldr	r0, [r7, #32]
 80091d6:	f001 f901 	bl	800a3dc <xQueueReceive>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d00b      	beq.n	80091f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80091e6:	f06f 0301 	mvn.w	r3, #1
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
 80091ec:	e004      	b.n	80091f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80091ee:	f06f 0302 	mvn.w	r3, #2
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
 80091f4:	e000      	b.n	80091f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3728      	adds	r7, #40	; 0x28
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	240000c0 	.word	0x240000c0
 8009208:	e000ed04 	.word	0xe000ed04

0800920c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4a07      	ldr	r2, [pc, #28]	; (8009238 <vApplicationGetIdleTaskMemory+0x2c>)
 800921c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	4a06      	ldr	r2, [pc, #24]	; (800923c <vApplicationGetIdleTaskMemory+0x30>)
 8009222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2280      	movs	r2, #128	; 0x80
 8009228:	601a      	str	r2, [r3, #0]
}
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	240000c4 	.word	0x240000c4
 800923c:	24000120 	.word	0x24000120

08009240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4a07      	ldr	r2, [pc, #28]	; (800926c <vApplicationGetTimerTaskMemory+0x2c>)
 8009250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	4a06      	ldr	r2, [pc, #24]	; (8009270 <vApplicationGetTimerTaskMemory+0x30>)
 8009256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800925e:	601a      	str	r2, [r3, #0]
}
 8009260:	bf00      	nop
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	24000320 	.word	0x24000320
 8009270:	2400037c 	.word	0x2400037c

08009274 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009280:	f001 ff14 	bl	800b0ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009284:	4b57      	ldr	r3, [pc, #348]	; (80093e4 <pvPortMalloc+0x170>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800928c:	f000 f90c 	bl	80094a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009290:	4b55      	ldr	r3, [pc, #340]	; (80093e8 <pvPortMalloc+0x174>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4013      	ands	r3, r2
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 808c 	bne.w	80093b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01c      	beq.n	80092de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80092a4:	2208      	movs	r2, #8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d013      	beq.n	80092de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f023 0307 	bic.w	r3, r3, #7
 80092bc:	3308      	adds	r3, #8
 80092be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d009      	beq.n	80092de <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e7fe      	b.n	80092dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d068      	beq.n	80093b6 <pvPortMalloc+0x142>
 80092e4:	4b41      	ldr	r3, [pc, #260]	; (80093ec <pvPortMalloc+0x178>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d863      	bhi.n	80093b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092ee:	4b40      	ldr	r3, [pc, #256]	; (80093f0 <pvPortMalloc+0x17c>)
 80092f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092f2:	4b3f      	ldr	r3, [pc, #252]	; (80093f0 <pvPortMalloc+0x17c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092f8:	e004      	b.n	8009304 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d903      	bls.n	8009316 <pvPortMalloc+0xa2>
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f1      	bne.n	80092fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009316:	4b33      	ldr	r3, [pc, #204]	; (80093e4 <pvPortMalloc+0x170>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931c:	429a      	cmp	r2, r3
 800931e:	d04a      	beq.n	80093b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2208      	movs	r2, #8
 8009326:	4413      	add	r3, r2
 8009328:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	1ad2      	subs	r2, r2, r3
 800933a:	2308      	movs	r3, #8
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	429a      	cmp	r2, r3
 8009340:	d91e      	bls.n	8009380 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4413      	add	r3, r2
 8009348:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <pvPortMalloc+0xf4>
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	e7fe      	b.n	8009366 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800937a:	69b8      	ldr	r0, [r7, #24]
 800937c:	f000 f8f6 	bl	800956c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009380:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <pvPortMalloc+0x178>)
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	4a18      	ldr	r2, [pc, #96]	; (80093ec <pvPortMalloc+0x178>)
 800938c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800938e:	4b17      	ldr	r3, [pc, #92]	; (80093ec <pvPortMalloc+0x178>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b18      	ldr	r3, [pc, #96]	; (80093f4 <pvPortMalloc+0x180>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d203      	bcs.n	80093a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <pvPortMalloc+0x178>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <pvPortMalloc+0x180>)
 80093a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <pvPortMalloc+0x174>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093b6:	f001 fe87 	bl	800b0c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d009      	beq.n	80093d8 <pvPortMalloc+0x164>
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e7fe      	b.n	80093d6 <pvPortMalloc+0x162>
	return pvReturn;
 80093d8:	69fb      	ldr	r3, [r7, #28]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3728      	adds	r7, #40	; 0x28
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	24004384 	.word	0x24004384
 80093e8:	24004390 	.word	0x24004390
 80093ec:	24004388 	.word	0x24004388
 80093f0:	2400437c 	.word	0x2400437c
 80093f4:	2400438c 	.word	0x2400438c

080093f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d046      	beq.n	8009498 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800940a:	2308      	movs	r3, #8
 800940c:	425b      	negs	r3, r3
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4413      	add	r3, r2
 8009412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	4b20      	ldr	r3, [pc, #128]	; (80094a0 <vPortFree+0xa8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4013      	ands	r3, r2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <vPortFree+0x42>
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e7fe      	b.n	8009438 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d009      	beq.n	8009456 <vPortFree+0x5e>
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	60bb      	str	r3, [r7, #8]
 8009454:	e7fe      	b.n	8009454 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <vPortFree+0xa8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4013      	ands	r3, r2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d019      	beq.n	8009498 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d115      	bne.n	8009498 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortFree+0xa8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	43db      	mvns	r3, r3
 8009476:	401a      	ands	r2, r3
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800947c:	f001 fe16 	bl	800b0ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <vPortFree+0xac>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4413      	add	r3, r2
 800948a:	4a06      	ldr	r2, [pc, #24]	; (80094a4 <vPortFree+0xac>)
 800948c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800948e:	6938      	ldr	r0, [r7, #16]
 8009490:	f000 f86c 	bl	800956c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009494:	f001 fe18 	bl	800b0c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009498:	bf00      	nop
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	24004390 	.word	0x24004390
 80094a4:	24004388 	.word	0x24004388

080094a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094b4:	4b27      	ldr	r3, [pc, #156]	; (8009554 <prvHeapInit+0xac>)
 80094b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00c      	beq.n	80094dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3307      	adds	r3, #7
 80094c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0307 	bic.w	r3, r3, #7
 80094ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	4a1f      	ldr	r2, [pc, #124]	; (8009554 <prvHeapInit+0xac>)
 80094d8:	4413      	add	r3, r2
 80094da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094e0:	4a1d      	ldr	r2, [pc, #116]	; (8009558 <prvHeapInit+0xb0>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094e6:	4b1c      	ldr	r3, [pc, #112]	; (8009558 <prvHeapInit+0xb0>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	4413      	add	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094f4:	2208      	movs	r2, #8
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1a9b      	subs	r3, r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4a15      	ldr	r2, [pc, #84]	; (800955c <prvHeapInit+0xb4>)
 8009508:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800950a:	4b14      	ldr	r3, [pc, #80]	; (800955c <prvHeapInit+0xb4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2200      	movs	r2, #0
 8009510:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <prvHeapInit+0xb4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <prvHeapInit+0xb4>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4a0a      	ldr	r2, [pc, #40]	; (8009560 <prvHeapInit+0xb8>)
 8009536:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	4a09      	ldr	r2, [pc, #36]	; (8009564 <prvHeapInit+0xbc>)
 800953e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <prvHeapInit+0xc0>)
 8009542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009546:	601a      	str	r2, [r3, #0]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	2400077c 	.word	0x2400077c
 8009558:	2400437c 	.word	0x2400437c
 800955c:	24004384 	.word	0x24004384
 8009560:	2400438c 	.word	0x2400438c
 8009564:	24004388 	.word	0x24004388
 8009568:	24004390 	.word	0x24004390

0800956c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009574:	4b28      	ldr	r3, [pc, #160]	; (8009618 <prvInsertBlockIntoFreeList+0xac>)
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e002      	b.n	8009580 <prvInsertBlockIntoFreeList+0x14>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d8f7      	bhi.n	800957a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	4413      	add	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	d108      	bne.n	80095ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	441a      	add	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d118      	bne.n	80095f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4b15      	ldr	r3, [pc, #84]	; (800961c <prvInsertBlockIntoFreeList+0xb0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d00d      	beq.n	80095ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	441a      	add	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	e008      	b.n	80095fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <prvInsertBlockIntoFreeList+0xb0>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e003      	b.n	80095fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d002      	beq.n	800960a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800960a:	bf00      	nop
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	2400437c 	.word	0x2400437c
 800961c:	24004384 	.word	0x24004384

08009620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f103 0208 	add.w	r2, r3, #8
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f103 0208 	add.w	r2, r3, #8
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f103 0208 	add.w	r2, r3, #8
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	601a      	str	r2, [r3, #0]
}
 80096b6:	bf00      	nop
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096c2:	b480      	push	{r7}
 80096c4:	b085      	sub	sp, #20
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096d8:	d103      	bne.n	80096e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	e00c      	b.n	80096fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3308      	adds	r3, #8
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	e002      	b.n	80096f0 <vListInsert+0x2e>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d2f6      	bcs.n	80096ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	601a      	str	r2, [r3, #0]
}
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6892      	ldr	r2, [r2, #8]
 800974a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6852      	ldr	r2, [r2, #4]
 8009754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d103      	bne.n	8009768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	1e5a      	subs	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3b04      	subs	r3, #4
 8009798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3b04      	subs	r3, #4
 80097a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f023 0201 	bic.w	r2, r3, #1
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3b04      	subs	r3, #4
 80097b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097b8:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <pxPortInitialiseStack+0x64>)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3b14      	subs	r3, #20
 80097c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3b04      	subs	r3, #4
 80097ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f06f 0202 	mvn.w	r2, #2
 80097d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3b20      	subs	r3, #32
 80097dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097de:	68fb      	ldr	r3, [r7, #12]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	080097f1 	.word	0x080097f1

080097f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097fa:	4b11      	ldr	r3, [pc, #68]	; (8009840 <prvTaskExitError+0x50>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009802:	d009      	beq.n	8009818 <prvTaskExitError+0x28>
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	e7fe      	b.n	8009816 <prvTaskExitError+0x26>
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800982a:	bf00      	nop
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d0fc      	beq.n	800982c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009832:	bf00      	nop
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	24000024 	.word	0x24000024
	...

08009850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <pxCurrentTCBConst2>)
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	6808      	ldr	r0, [r1, #0]
 8009856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	f380 8809 	msr	PSP, r0
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f380 8811 	msr	BASEPRI, r0
 800986a:	4770      	bx	lr
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst2>:
 8009870:	2400439c 	.word	0x2400439c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009878:	4808      	ldr	r0, [pc, #32]	; (800989c <prvPortStartFirstTask+0x24>)
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	6800      	ldr	r0, [r0, #0]
 800987e:	f380 8808 	msr	MSP, r0
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8814 	msr	CONTROL, r0
 800988a:	b662      	cpsie	i
 800988c:	b661      	cpsie	f
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	df00      	svc	0
 8009898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800989a:	bf00      	nop
 800989c:	e000ed08 	.word	0xe000ed08

080098a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098a6:	4b44      	ldr	r3, [pc, #272]	; (80099b8 <xPortStartScheduler+0x118>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a44      	ldr	r2, [pc, #272]	; (80099bc <xPortStartScheduler+0x11c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d109      	bne.n	80098c4 <xPortStartScheduler+0x24>
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	613b      	str	r3, [r7, #16]
 80098c2:	e7fe      	b.n	80098c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098c4:	4b3c      	ldr	r3, [pc, #240]	; (80099b8 <xPortStartScheduler+0x118>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a3d      	ldr	r2, [pc, #244]	; (80099c0 <xPortStartScheduler+0x120>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d109      	bne.n	80098e2 <xPortStartScheduler+0x42>
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e7fe      	b.n	80098e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098e2:	4b38      	ldr	r3, [pc, #224]	; (80099c4 <xPortStartScheduler+0x124>)
 80098e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	22ff      	movs	r2, #255	; 0xff
 80098f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009904:	b2da      	uxtb	r2, r3
 8009906:	4b30      	ldr	r3, [pc, #192]	; (80099c8 <xPortStartScheduler+0x128>)
 8009908:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800990a:	4b30      	ldr	r3, [pc, #192]	; (80099cc <xPortStartScheduler+0x12c>)
 800990c:	2207      	movs	r2, #7
 800990e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009910:	e009      	b.n	8009926 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009912:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <xPortStartScheduler+0x12c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3b01      	subs	r3, #1
 8009918:	4a2c      	ldr	r2, [pc, #176]	; (80099cc <xPortStartScheduler+0x12c>)
 800991a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	b2db      	uxtb	r3, r3
 8009924:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992e:	2b80      	cmp	r3, #128	; 0x80
 8009930:	d0ef      	beq.n	8009912 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009932:	4b26      	ldr	r3, [pc, #152]	; (80099cc <xPortStartScheduler+0x12c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f1c3 0307 	rsb	r3, r3, #7
 800993a:	2b04      	cmp	r3, #4
 800993c:	d009      	beq.n	8009952 <xPortStartScheduler+0xb2>
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	60bb      	str	r3, [r7, #8]
 8009950:	e7fe      	b.n	8009950 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009952:	4b1e      	ldr	r3, [pc, #120]	; (80099cc <xPortStartScheduler+0x12c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	021b      	lsls	r3, r3, #8
 8009958:	4a1c      	ldr	r2, [pc, #112]	; (80099cc <xPortStartScheduler+0x12c>)
 800995a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800995c:	4b1b      	ldr	r3, [pc, #108]	; (80099cc <xPortStartScheduler+0x12c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009964:	4a19      	ldr	r2, [pc, #100]	; (80099cc <xPortStartScheduler+0x12c>)
 8009966:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009970:	4b17      	ldr	r3, [pc, #92]	; (80099d0 <xPortStartScheduler+0x130>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a16      	ldr	r2, [pc, #88]	; (80099d0 <xPortStartScheduler+0x130>)
 8009976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800997a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800997c:	4b14      	ldr	r3, [pc, #80]	; (80099d0 <xPortStartScheduler+0x130>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a13      	ldr	r2, [pc, #76]	; (80099d0 <xPortStartScheduler+0x130>)
 8009982:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009986:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009988:	f000 f8d6 	bl	8009b38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800998c:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <xPortStartScheduler+0x134>)
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009992:	f000 f8f5 	bl	8009b80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009996:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <xPortStartScheduler+0x138>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a0f      	ldr	r2, [pc, #60]	; (80099d8 <xPortStartScheduler+0x138>)
 800999c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099a2:	f7ff ff69 	bl	8009878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099a6:	f001 fd05 	bl	800b3b4 <vTaskSwitchContext>
	prvTaskExitError();
 80099aa:	f7ff ff21 	bl	80097f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	e000ed00 	.word	0xe000ed00
 80099bc:	410fc271 	.word	0x410fc271
 80099c0:	410fc270 	.word	0x410fc270
 80099c4:	e000e400 	.word	0xe000e400
 80099c8:	24004394 	.word	0x24004394
 80099cc:	24004398 	.word	0x24004398
 80099d0:	e000ed20 	.word	0xe000ed20
 80099d4:	24000024 	.word	0x24000024
 80099d8:	e000ef34 	.word	0xe000ef34

080099dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099f4:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <vPortEnterCritical+0x54>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3301      	adds	r3, #1
 80099fa:	4a0d      	ldr	r2, [pc, #52]	; (8009a30 <vPortEnterCritical+0x54>)
 80099fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099fe:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <vPortEnterCritical+0x54>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d10e      	bne.n	8009a24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a06:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <vPortEnterCritical+0x58>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d009      	beq.n	8009a24 <vPortEnterCritical+0x48>
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	603b      	str	r3, [r7, #0]
 8009a22:	e7fe      	b.n	8009a22 <vPortEnterCritical+0x46>
	}
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	24000024 	.word	0x24000024
 8009a34:	e000ed04 	.word	0xe000ed04

08009a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a3e:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <vPortExitCritical+0x4c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d109      	bne.n	8009a5a <vPortExitCritical+0x22>
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	607b      	str	r3, [r7, #4]
 8009a58:	e7fe      	b.n	8009a58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <vPortExitCritical+0x4c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	4a08      	ldr	r2, [pc, #32]	; (8009a84 <vPortExitCritical+0x4c>)
 8009a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a64:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <vPortExitCritical+0x4c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d104      	bne.n	8009a76 <vPortExitCritical+0x3e>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	24000024 	.word	0x24000024
	...

08009a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a90:	f3ef 8009 	mrs	r0, PSP
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <pxCurrentTCBConst>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f01e 0f10 	tst.w	lr, #16
 8009aa0:	bf08      	it	eq
 8009aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aaa:	6010      	str	r0, [r2, #0]
 8009aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ab4:	f380 8811 	msr	BASEPRI, r0
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f001 fc78 	bl	800b3b4 <vTaskSwitchContext>
 8009ac4:	f04f 0000 	mov.w	r0, #0
 8009ac8:	f380 8811 	msr	BASEPRI, r0
 8009acc:	bc09      	pop	{r0, r3}
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	6808      	ldr	r0, [r1, #0]
 8009ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad6:	f01e 0f10 	tst.w	lr, #16
 8009ada:	bf08      	it	eq
 8009adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ae0:	f380 8809 	msr	PSP, r0
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w

08009af0 <pxCurrentTCBConst>:
 8009af0:	2400439c 	.word	0x2400439c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop

08009af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b10:	f001 fb98 	bl	800b244 <xTaskIncrementTick>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b1a:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <SysTick_Handler+0x3c>)
 8009b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	2300      	movs	r3, #0
 8009b24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <vPortSetupTimerInterrupt+0x34>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b42:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <vPortSetupTimerInterrupt+0x38>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <vPortSetupTimerInterrupt+0x3c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a0a      	ldr	r2, [pc, #40]	; (8009b78 <vPortSetupTimerInterrupt+0x40>)
 8009b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b52:	099b      	lsrs	r3, r3, #6
 8009b54:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <vPortSetupTimerInterrupt+0x44>)
 8009b56:	3b01      	subs	r3, #1
 8009b58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b5a:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <vPortSetupTimerInterrupt+0x34>)
 8009b5c:	2207      	movs	r2, #7
 8009b5e:	601a      	str	r2, [r3, #0]
}
 8009b60:	bf00      	nop
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	e000e010 	.word	0xe000e010
 8009b70:	e000e018 	.word	0xe000e018
 8009b74:	24000000 	.word	0x24000000
 8009b78:	10624dd3 	.word	0x10624dd3
 8009b7c:	e000e014 	.word	0xe000e014

08009b80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b90 <vPortEnableVFP+0x10>
 8009b84:	6801      	ldr	r1, [r0, #0]
 8009b86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b8a:	6001      	str	r1, [r0, #0]
 8009b8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b8e:	bf00      	nop
 8009b90:	e000ed88 	.word	0xe000ed88

08009b94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b9a:	f3ef 8305 	mrs	r3, IPSR
 8009b9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b0f      	cmp	r3, #15
 8009ba4:	d913      	bls.n	8009bce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ba6:	4a16      	ldr	r2, [pc, #88]	; (8009c00 <vPortValidateInterruptPriority+0x6c>)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4413      	add	r3, r2
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bb0:	4b14      	ldr	r3, [pc, #80]	; (8009c04 <vPortValidateInterruptPriority+0x70>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	7afa      	ldrb	r2, [r7, #11]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d209      	bcs.n	8009bce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	607b      	str	r3, [r7, #4]
 8009bcc:	e7fe      	b.n	8009bcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bce:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <vPortValidateInterruptPriority+0x74>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <vPortValidateInterruptPriority+0x78>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d909      	bls.n	8009bf2 <vPortValidateInterruptPriority+0x5e>
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	e7fe      	b.n	8009bf0 <vPortValidateInterruptPriority+0x5c>
	}
 8009bf2:	bf00      	nop
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	e000e3f0 	.word	0xe000e3f0
 8009c04:	24004394 	.word	0x24004394
 8009c08:	e000ed0c 	.word	0xe000ed0c
 8009c0c:	24004398 	.word	0x24004398

08009c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d109      	bne.n	8009c38 <xQueueGenericReset+0x28>
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60bb      	str	r3, [r7, #8]
 8009c36:	e7fe      	b.n	8009c36 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009c38:	f7ff fed0 	bl	80099dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c44:	68f9      	ldr	r1, [r7, #12]
 8009c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c48:	fb01 f303 	mul.w	r3, r1, r3
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c6e:	fb01 f303 	mul.w	r3, r1, r3
 8009c72:	441a      	add	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	22ff      	movs	r2, #255	; 0xff
 8009c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	22ff      	movs	r2, #255	; 0xff
 8009c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d114      	bne.n	8009cb8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d01a      	beq.n	8009ccc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3310      	adds	r3, #16
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 fc34 	bl	800b508 <xTaskRemoveFromEventList>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d012      	beq.n	8009ccc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	; (8009cdc <xQueueGenericReset+0xcc>)
 8009ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	e009      	b.n	8009ccc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3310      	adds	r3, #16
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fcaf 	bl	8009620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3324      	adds	r3, #36	; 0x24
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff fcaa 	bl	8009620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ccc:	f7ff feb4 	bl	8009a38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cd0:	2301      	movs	r3, #1
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08e      	sub	sp, #56	; 0x38
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d109      	bne.n	8009d08 <xQueueGenericCreateStatic+0x28>
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d06:	e7fe      	b.n	8009d06 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <xQueueGenericCreateStatic+0x42>
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d20:	e7fe      	b.n	8009d20 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <xQueueGenericCreateStatic+0x4e>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <xQueueGenericCreateStatic+0x52>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e000      	b.n	8009d34 <xQueueGenericCreateStatic+0x54>
 8009d32:	2300      	movs	r3, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d109      	bne.n	8009d4c <xQueueGenericCreateStatic+0x6c>
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	623b      	str	r3, [r7, #32]
 8009d4a:	e7fe      	b.n	8009d4a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <xQueueGenericCreateStatic+0x78>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <xQueueGenericCreateStatic+0x7c>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e000      	b.n	8009d5e <xQueueGenericCreateStatic+0x7e>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <xQueueGenericCreateStatic+0x96>
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e7fe      	b.n	8009d74 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d76:	2350      	movs	r3, #80	; 0x50
 8009d78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b50      	cmp	r3, #80	; 0x50
 8009d7e:	d009      	beq.n	8009d94 <xQueueGenericCreateStatic+0xb4>
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	61bb      	str	r3, [r7, #24]
 8009d92:	e7fe      	b.n	8009d92 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00d      	beq.n	8009dbc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009da8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	4613      	mov	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f844 	bl	8009e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3730      	adds	r7, #48	; 0x30
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b08a      	sub	sp, #40	; 0x28
 8009dca:	af02      	add	r7, sp, #8
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <xQueueGenericCreate+0x28>
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	e7fe      	b.n	8009dec <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009df4:	2300      	movs	r3, #0
 8009df6:	61fb      	str	r3, [r7, #28]
 8009df8:	e004      	b.n	8009e04 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	fb02 f303 	mul.w	r3, r2, r3
 8009e02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	3350      	adds	r3, #80	; 0x50
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff fa33 	bl	8009274 <pvPortMalloc>
 8009e0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d011      	beq.n	8009e3a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	3350      	adds	r3, #80	; 0x50
 8009e1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e28:	79fa      	ldrb	r2, [r7, #7]
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 f805 	bl	8009e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3720      	adds	r7, #32
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d103      	bne.n	8009e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e002      	b.n	8009e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e72:	2101      	movs	r1, #1
 8009e74:	69b8      	ldr	r0, [r7, #24]
 8009e76:	f7ff fecb 	bl	8009c10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00e      	beq.n	8009eb6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009eaa:	2300      	movs	r3, #0
 8009eac:	2200      	movs	r2, #0
 8009eae:	2100      	movs	r1, #0
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f905 	bl	800a0c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009ed0:	79fb      	ldrb	r3, [r7, #7]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	6939      	ldr	r1, [r7, #16]
 8009ed6:	6978      	ldr	r0, [r7, #20]
 8009ed8:	f7ff ff75 	bl	8009dc6 <xQueueGenericCreate>
 8009edc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff ffd3 	bl	8009e8a <prvInitialiseMutex>

		return xNewQueue;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
	}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b088      	sub	sp, #32
 8009ef2:	af02      	add	r7, sp, #8
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	6039      	str	r1, [r7, #0]
 8009ef8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009efa:	2301      	movs	r3, #1
 8009efc:	617b      	str	r3, [r7, #20]
 8009efe:	2300      	movs	r3, #0
 8009f00:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	6939      	ldr	r1, [r7, #16]
 8009f0c:	6978      	ldr	r0, [r7, #20]
 8009f0e:	f7ff fee7 	bl	8009ce0 <xQueueGenericCreateStatic>
 8009f12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff ffb8 	bl	8009e8a <prvInitialiseMutex>

		return xNewQueue;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
	}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d109      	bne.n	8009f4a <xQueueGiveMutexRecursive+0x26>
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	e7fe      	b.n	8009f48 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	689c      	ldr	r4, [r3, #8]
 8009f4e:	f001 fc91 	bl	800b874 <xTaskGetCurrentTaskHandle>
 8009f52:	4603      	mov	r3, r0
 8009f54:	429c      	cmp	r4, r3
 8009f56:	d111      	bne.n	8009f7c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	1e5a      	subs	r2, r3, #1
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6938      	ldr	r0, [r7, #16]
 8009f72:	f000 f8a5 	bl	800a0c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009f76:	2301      	movs	r3, #1
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	e001      	b.n	8009f80 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009f80:	697b      	ldr	r3, [r7, #20]
	}
 8009f82:	4618      	mov	r0, r3
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd90      	pop	{r4, r7, pc}

08009f8a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009f8a:	b590      	push	{r4, r7, lr}
 8009f8c:	b087      	sub	sp, #28
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d109      	bne.n	8009fb2 <xQueueTakeMutexRecursive+0x28>
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	689c      	ldr	r4, [r3, #8]
 8009fb6:	f001 fc5d 	bl	800b874 <xTaskGetCurrentTaskHandle>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	d107      	bne.n	8009fd0 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	617b      	str	r3, [r7, #20]
 8009fce:	e00c      	b.n	8009fea <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6938      	ldr	r0, [r7, #16]
 8009fd4:	f000 fade 	bl	800a594 <xQueueSemaphoreTake>
 8009fd8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009fea:	697b      	ldr	r3, [r7, #20]
	}
 8009fec:	4618      	mov	r0, r3
 8009fee:	371c      	adds	r7, #28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd90      	pop	{r4, r7, pc}

08009ff4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	; 0x28
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d109      	bne.n	800a01a <xQueueCreateCountingSemaphoreStatic+0x26>
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	61bb      	str	r3, [r7, #24]
 800a018:	e7fe      	b.n	800a018 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d909      	bls.n	800a036 <xQueueCreateCountingSemaphoreStatic+0x42>
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	e7fe      	b.n	800a034 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a036:	2302      	movs	r3, #2
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	2100      	movs	r1, #0
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fe4d 	bl	8009ce0 <xQueueGenericCreateStatic>
 800a046:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a054:	69fb      	ldr	r3, [r7, #28]
	}
 800a056:	4618      	mov	r0, r3
 800a058:	3720      	adds	r7, #32
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d109      	bne.n	800a082 <xQueueCreateCountingSemaphore+0x24>
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	e7fe      	b.n	800a080 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d909      	bls.n	800a09e <xQueueCreateCountingSemaphore+0x40>
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	e7fe      	b.n	800a09c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a09e:	2202      	movs	r2, #2
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff fe8f 	bl	8009dc6 <xQueueGenericCreate>
 800a0a8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0b6:	697b      	ldr	r3, [r7, #20]
	}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08e      	sub	sp, #56	; 0x38
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <xQueueGenericSend+0x30>
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ee:	e7fe      	b.n	800a0ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d103      	bne.n	800a0fe <xQueueGenericSend+0x3e>
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <xQueueGenericSend+0x42>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e000      	b.n	800a104 <xQueueGenericSend+0x44>
 800a102:	2300      	movs	r3, #0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d109      	bne.n	800a11c <xQueueGenericSend+0x5c>
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
 800a11a:	e7fe      	b.n	800a11a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d103      	bne.n	800a12a <xQueueGenericSend+0x6a>
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <xQueueGenericSend+0x6e>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <xQueueGenericSend+0x70>
 800a12e:	2300      	movs	r3, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d109      	bne.n	800a148 <xQueueGenericSend+0x88>
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	623b      	str	r3, [r7, #32]
 800a146:	e7fe      	b.n	800a146 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a148:	f001 fba4 	bl	800b894 <xTaskGetSchedulerState>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <xQueueGenericSend+0x98>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <xQueueGenericSend+0x9c>
 800a158:	2301      	movs	r3, #1
 800a15a:	e000      	b.n	800a15e <xQueueGenericSend+0x9e>
 800a15c:	2300      	movs	r3, #0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <xQueueGenericSend+0xb6>
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	e7fe      	b.n	800a174 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a176:	f7ff fc31 	bl	80099dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a182:	429a      	cmp	r2, r3
 800a184:	d302      	bcc.n	800a18c <xQueueGenericSend+0xcc>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d129      	bne.n	800a1e0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	68b9      	ldr	r1, [r7, #8]
 800a190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a192:	f000 fbbe 	bl	800a912 <prvCopyDataToQueue>
 800a196:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d010      	beq.n	800a1c2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	3324      	adds	r3, #36	; 0x24
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f001 f9af 	bl	800b508 <xTaskRemoveFromEventList>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d013      	beq.n	800a1d8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1b0:	4b3f      	ldr	r3, [pc, #252]	; (800a2b0 <xQueueGenericSend+0x1f0>)
 800a1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	e00a      	b.n	800a1d8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d007      	beq.n	800a1d8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1c8:	4b39      	ldr	r3, [pc, #228]	; (800a2b0 <xQueueGenericSend+0x1f0>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1d8:	f7ff fc2e 	bl	8009a38 <vPortExitCritical>
				return pdPASS;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e063      	b.n	800a2a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d103      	bne.n	800a1ee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1e6:	f7ff fc27 	bl	8009a38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	e05c      	b.n	800a2a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1f4:	f107 0314 	add.w	r3, r7, #20
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 f9e7 	bl	800b5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1fe:	2301      	movs	r3, #1
 800a200:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a202:	f7ff fc19 	bl	8009a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a206:	f000 ff51 	bl	800b0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a20a:	f7ff fbe7 	bl	80099dc <vPortEnterCritical>
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a214:	b25b      	sxtb	r3, r3
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a21a:	d103      	bne.n	800a224 <xQueueGenericSend+0x164>
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a22a:	b25b      	sxtb	r3, r3
 800a22c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a230:	d103      	bne.n	800a23a <xQueueGenericSend+0x17a>
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a23a:	f7ff fbfd 	bl	8009a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a23e:	1d3a      	adds	r2, r7, #4
 800a240:	f107 0314 	add.w	r3, r7, #20
 800a244:	4611      	mov	r1, r2
 800a246:	4618      	mov	r0, r3
 800a248:	f001 f9d6 	bl	800b5f8 <xTaskCheckForTimeOut>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d124      	bne.n	800a29c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a254:	f000 fc55 	bl	800ab02 <prvIsQueueFull>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d018      	beq.n	800a290 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a260:	3310      	adds	r3, #16
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	4611      	mov	r1, r2
 800a266:	4618      	mov	r0, r3
 800a268:	f001 f900 	bl	800b46c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a26e:	f000 fbe0 	bl	800aa32 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a272:	f000 ff29 	bl	800b0c8 <xTaskResumeAll>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f47f af7c 	bne.w	800a176 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a27e:	4b0c      	ldr	r3, [pc, #48]	; (800a2b0 <xQueueGenericSend+0x1f0>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	e772      	b.n	800a176 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a292:	f000 fbce 	bl	800aa32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a296:	f000 ff17 	bl	800b0c8 <xTaskResumeAll>
 800a29a:	e76c      	b.n	800a176 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a29e:	f000 fbc8 	bl	800aa32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2a2:	f000 ff11 	bl	800b0c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3738      	adds	r7, #56	; 0x38
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	e000ed04 	.word	0xe000ed04

0800a2b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08e      	sub	sp, #56	; 0x38
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <xQueueGenericSendFromISR+0x2c>
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2de:	e7fe      	b.n	800a2de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d103      	bne.n	800a2ee <xQueueGenericSendFromISR+0x3a>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <xQueueGenericSendFromISR+0x3e>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <xQueueGenericSendFromISR+0x40>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d109      	bne.n	800a30c <xQueueGenericSendFromISR+0x58>
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	623b      	str	r3, [r7, #32]
 800a30a:	e7fe      	b.n	800a30a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d103      	bne.n	800a31a <xQueueGenericSendFromISR+0x66>
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a316:	2b01      	cmp	r3, #1
 800a318:	d101      	bne.n	800a31e <xQueueGenericSendFromISR+0x6a>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e000      	b.n	800a320 <xQueueGenericSendFromISR+0x6c>
 800a31e:	2300      	movs	r3, #0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <xQueueGenericSendFromISR+0x84>
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	61fb      	str	r3, [r7, #28]
 800a336:	e7fe      	b.n	800a336 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a338:	f7ff fc2c 	bl	8009b94 <vPortValidateInterruptPriority>
	__asm volatile
 800a33c:	f3ef 8211 	mrs	r2, BASEPRI
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	61ba      	str	r2, [r7, #24]
 800a352:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a354:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a356:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a360:	429a      	cmp	r2, r3
 800a362:	d302      	bcc.n	800a36a <xQueueGenericSendFromISR+0xb6>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d12c      	bne.n	800a3c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a37a:	f000 faca 	bl	800a912 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a37e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a386:	d112      	bne.n	800a3ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d016      	beq.n	800a3be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	3324      	adds	r3, #36	; 0x24
 800a394:	4618      	mov	r0, r3
 800a396:	f001 f8b7 	bl	800b508 <xTaskRemoveFromEventList>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00e      	beq.n	800a3be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00b      	beq.n	800a3be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
 800a3ac:	e007      	b.n	800a3be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	b25a      	sxtb	r2, r3
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a3c2:	e001      	b.n	800a3c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3738      	adds	r7, #56	; 0x38
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08c      	sub	sp, #48	; 0x30
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <xQueueReceive+0x2e>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	623b      	str	r3, [r7, #32]
 800a408:	e7fe      	b.n	800a408 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d103      	bne.n	800a418 <xQueueReceive+0x3c>
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <xQueueReceive+0x40>
 800a418:	2301      	movs	r3, #1
 800a41a:	e000      	b.n	800a41e <xQueueReceive+0x42>
 800a41c:	2300      	movs	r3, #0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d109      	bne.n	800a436 <xQueueReceive+0x5a>
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	61fb      	str	r3, [r7, #28]
 800a434:	e7fe      	b.n	800a434 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a436:	f001 fa2d 	bl	800b894 <xTaskGetSchedulerState>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d102      	bne.n	800a446 <xQueueReceive+0x6a>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <xQueueReceive+0x6e>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <xQueueReceive+0x70>
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d109      	bne.n	800a464 <xQueueReceive+0x88>
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	e7fe      	b.n	800a462 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a464:	f7ff faba 	bl	80099dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01f      	beq.n	800a4b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a474:	68b9      	ldr	r1, [r7, #8]
 800a476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a478:	f000 fab5 	bl	800a9e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	1e5a      	subs	r2, r3, #1
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00f      	beq.n	800a4ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	3310      	adds	r3, #16
 800a490:	4618      	mov	r0, r3
 800a492:	f001 f839 	bl	800b508 <xTaskRemoveFromEventList>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a49c:	4b3c      	ldr	r3, [pc, #240]	; (800a590 <xQueueReceive+0x1b4>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4ac:	f7ff fac4 	bl	8009a38 <vPortExitCritical>
				return pdPASS;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e069      	b.n	800a588 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d103      	bne.n	800a4c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4ba:	f7ff fabd 	bl	8009a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	e062      	b.n	800a588 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d106      	bne.n	800a4d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4c8:	f107 0310 	add.w	r3, r7, #16
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f001 f87d 	bl	800b5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4d6:	f7ff faaf 	bl	8009a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4da:	f000 fde7 	bl	800b0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4de:	f7ff fa7d 	bl	80099dc <vPortEnterCritical>
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4e8:	b25b      	sxtb	r3, r3
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ee:	d103      	bne.n	800a4f8 <xQueueReceive+0x11c>
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4fe:	b25b      	sxtb	r3, r3
 800a500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a504:	d103      	bne.n	800a50e <xQueueReceive+0x132>
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a50e:	f7ff fa93 	bl	8009a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a512:	1d3a      	adds	r2, r7, #4
 800a514:	f107 0310 	add.w	r3, r7, #16
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 f86c 	bl	800b5f8 <xTaskCheckForTimeOut>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d123      	bne.n	800a56e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a528:	f000 fad5 	bl	800aad6 <prvIsQueueEmpty>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d017      	beq.n	800a562 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	3324      	adds	r3, #36	; 0x24
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	4611      	mov	r1, r2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f000 ff96 	bl	800b46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a542:	f000 fa76 	bl	800aa32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a546:	f000 fdbf 	bl	800b0c8 <xTaskResumeAll>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d189      	bne.n	800a464 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <xQueueReceive+0x1b4>)
 800a552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	e780      	b.n	800a464 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a564:	f000 fa65 	bl	800aa32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a568:	f000 fdae 	bl	800b0c8 <xTaskResumeAll>
 800a56c:	e77a      	b.n	800a464 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a56e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a570:	f000 fa5f 	bl	800aa32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a574:	f000 fda8 	bl	800b0c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57a:	f000 faac 	bl	800aad6 <prvIsQueueEmpty>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	f43f af6f 	beq.w	800a464 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a586:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3730      	adds	r7, #48	; 0x30
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08e      	sub	sp, #56	; 0x38
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d109      	bne.n	800a5c4 <xQueueSemaphoreTake+0x30>
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	623b      	str	r3, [r7, #32]
 800a5c2:	e7fe      	b.n	800a5c2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <xQueueSemaphoreTake+0x4c>
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	61fb      	str	r3, [r7, #28]
 800a5de:	e7fe      	b.n	800a5de <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5e0:	f001 f958 	bl	800b894 <xTaskGetSchedulerState>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <xQueueSemaphoreTake+0x5c>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <xQueueSemaphoreTake+0x60>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <xQueueSemaphoreTake+0x62>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d109      	bne.n	800a60e <xQueueSemaphoreTake+0x7a>
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	61bb      	str	r3, [r7, #24]
 800a60c:	e7fe      	b.n	800a60c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a60e:	f7ff f9e5 	bl	80099dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d024      	beq.n	800a668 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d104      	bne.n	800a638 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a62e:	f001 faa3 	bl	800bb78 <pvTaskIncrementMutexHeldCount>
 800a632:	4602      	mov	r2, r0
 800a634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a636:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00f      	beq.n	800a660 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	3310      	adds	r3, #16
 800a644:	4618      	mov	r0, r3
 800a646:	f000 ff5f 	bl	800b508 <xTaskRemoveFromEventList>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d007      	beq.n	800a660 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a650:	4b53      	ldr	r3, [pc, #332]	; (800a7a0 <xQueueSemaphoreTake+0x20c>)
 800a652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a660:	f7ff f9ea 	bl	8009a38 <vPortExitCritical>
				return pdPASS;
 800a664:	2301      	movs	r3, #1
 800a666:	e096      	b.n	800a796 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d110      	bne.n	800a690 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	2b00      	cmp	r3, #0
 800a672:	d009      	beq.n	800a688 <xQueueSemaphoreTake+0xf4>
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	e7fe      	b.n	800a686 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a688:	f7ff f9d6 	bl	8009a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a68c:	2300      	movs	r3, #0
 800a68e:	e082      	b.n	800a796 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a696:	f107 030c 	add.w	r3, r7, #12
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 ff96 	bl	800b5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6a4:	f7ff f9c8 	bl	8009a38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6a8:	f000 fd00 	bl	800b0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ac:	f7ff f996 	bl	80099dc <vPortEnterCritical>
 800a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6b6:	b25b      	sxtb	r3, r3
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6bc:	d103      	bne.n	800a6c6 <xQueueSemaphoreTake+0x132>
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6cc:	b25b      	sxtb	r3, r3
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6d2:	d103      	bne.n	800a6dc <xQueueSemaphoreTake+0x148>
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6dc:	f7ff f9ac 	bl	8009a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6e0:	463a      	mov	r2, r7
 800a6e2:	f107 030c 	add.w	r3, r7, #12
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 ff85 	bl	800b5f8 <xTaskCheckForTimeOut>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d132      	bne.n	800a75a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6f6:	f000 f9ee 	bl	800aad6 <prvIsQueueEmpty>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d026      	beq.n	800a74e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a708:	f7ff f968 	bl	80099dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	4618      	mov	r0, r3
 800a712:	f001 f8dd 	bl	800b8d0 <xTaskPriorityInherit>
 800a716:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a718:	f7ff f98e 	bl	8009a38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	3324      	adds	r3, #36	; 0x24
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f000 fea1 	bl	800b46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a72a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a72c:	f000 f981 	bl	800aa32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a730:	f000 fcca 	bl	800b0c8 <xTaskResumeAll>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	f47f af69 	bne.w	800a60e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a73c:	4b18      	ldr	r3, [pc, #96]	; (800a7a0 <xQueueSemaphoreTake+0x20c>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	e75f      	b.n	800a60e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a750:	f000 f96f 	bl	800aa32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a754:	f000 fcb8 	bl	800b0c8 <xTaskResumeAll>
 800a758:	e759      	b.n	800a60e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a75a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a75c:	f000 f969 	bl	800aa32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a760:	f000 fcb2 	bl	800b0c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a766:	f000 f9b6 	bl	800aad6 <prvIsQueueEmpty>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f43f af4e 	beq.w	800a60e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00d      	beq.n	800a794 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a778:	f7ff f930 	bl	80099dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a77c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a77e:	f000 f8b0 	bl	800a8e2 <prvGetDisinheritPriorityAfterTimeout>
 800a782:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a78a:	4618      	mov	r0, r3
 800a78c:	f001 f974 	bl	800ba78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a790:	f7ff f952 	bl	8009a38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a794:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a796:	4618      	mov	r0, r3
 800a798:	3738      	adds	r7, #56	; 0x38
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	e000ed04 	.word	0xe000ed04

0800a7a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08e      	sub	sp, #56	; 0x38
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <xQueueReceiveFromISR+0x2a>
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	623b      	str	r3, [r7, #32]
 800a7cc:	e7fe      	b.n	800a7cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d103      	bne.n	800a7dc <xQueueReceiveFromISR+0x38>
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <xQueueReceiveFromISR+0x3c>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e000      	b.n	800a7e2 <xQueueReceiveFromISR+0x3e>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d109      	bne.n	800a7fa <xQueueReceiveFromISR+0x56>
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	61fb      	str	r3, [r7, #28]
 800a7f8:	e7fe      	b.n	800a7f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7fa:	f7ff f9cb 	bl	8009b94 <vPortValidateInterruptPriority>
	__asm volatile
 800a7fe:	f3ef 8211 	mrs	r2, BASEPRI
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	61ba      	str	r2, [r7, #24]
 800a814:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a816:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	2b00      	cmp	r3, #0
 800a824:	d02f      	beq.n	800a886 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a834:	f000 f8d7 	bl	800a9e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	1e5a      	subs	r2, r3, #1
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a848:	d112      	bne.n	800a870 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d016      	beq.n	800a880 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	3310      	adds	r3, #16
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fe56 	bl	800b508 <xTaskRemoveFromEventList>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00e      	beq.n	800a880 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e007      	b.n	800a880 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a874:	3301      	adds	r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	b25a      	sxtb	r2, r3
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a880:	2301      	movs	r3, #1
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
 800a884:	e001      	b.n	800a88a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a886:	2300      	movs	r3, #0
 800a888:	637b      	str	r3, [r7, #52]	; 0x34
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a896:	4618      	mov	r0, r3
 800a898:	3738      	adds	r7, #56	; 0x38
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <vQueueDelete+0x26>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	60bb      	str	r3, [r7, #8]
 800a8c2:	e7fe      	b.n	800a8c2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 f95d 	bl	800ab84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d102      	bne.n	800a8da <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f7fe fd8f 	bl	80093f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a8da:	bf00      	nop
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d006      	beq.n	800a900 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	e001      	b.n	800a904 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a900:	2300      	movs	r3, #0
 800a902:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a904:	68fb      	ldr	r3, [r7, #12]
	}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10d      	bne.n	800a94c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d14d      	bne.n	800a9d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f001 f82f 	bl	800b9a0 <xTaskPriorityDisinherit>
 800a942:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	609a      	str	r2, [r3, #8]
 800a94a:	e043      	b.n	800a9d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d119      	bne.n	800a986 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6858      	ldr	r0, [r3, #4]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95a:	461a      	mov	r2, r3
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	f00c f97a 	bl	8016c56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96a:	441a      	add	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d32b      	bcc.n	800a9d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	605a      	str	r2, [r3, #4]
 800a984:	e026      	b.n	800a9d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	68d8      	ldr	r0, [r3, #12]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	461a      	mov	r2, r3
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	f00c f960 	bl	8016c56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99e:	425b      	negs	r3, r3
 800a9a0:	441a      	add	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d207      	bcs.n	800a9c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	689a      	ldr	r2, [r3, #8]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	425b      	negs	r3, r3
 800a9bc:	441a      	add	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d105      	bne.n	800a9d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9dc:	697b      	ldr	r3, [r7, #20]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d018      	beq.n	800aa2a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68da      	ldr	r2, [r3, #12]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa00:	441a      	add	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68da      	ldr	r2, [r3, #12]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d303      	bcc.n	800aa1a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68d9      	ldr	r1, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa22:	461a      	mov	r2, r3
 800aa24:	6838      	ldr	r0, [r7, #0]
 800aa26:	f00c f916 	bl	8016c56 <memcpy>
	}
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa3a:	f7fe ffcf 	bl	80099dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa44:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa46:	e011      	b.n	800aa6c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d012      	beq.n	800aa76 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3324      	adds	r3, #36	; 0x24
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 fd57 	bl	800b508 <xTaskRemoveFromEventList>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa60:	f000 fe2a 	bl	800b6b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dce9      	bgt.n	800aa48 <prvUnlockQueue+0x16>
 800aa74:	e000      	b.n	800aa78 <prvUnlockQueue+0x46>
					break;
 800aa76:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	22ff      	movs	r2, #255	; 0xff
 800aa7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa80:	f7fe ffda 	bl	8009a38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa84:	f7fe ffaa 	bl	80099dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa8e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa90:	e011      	b.n	800aab6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d012      	beq.n	800aac0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3310      	adds	r3, #16
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 fd32 	bl	800b508 <xTaskRemoveFromEventList>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aaaa:	f000 fe05 	bl	800b6b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aaae:	7bbb      	ldrb	r3, [r7, #14]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dce9      	bgt.n	800aa92 <prvUnlockQueue+0x60>
 800aabe:	e000      	b.n	800aac2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aac0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	22ff      	movs	r2, #255	; 0xff
 800aac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aaca:	f7fe ffb5 	bl	8009a38 <vPortExitCritical>
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aade:	f7fe ff7d 	bl	80099dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d102      	bne.n	800aaf0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aaea:	2301      	movs	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]
 800aaee:	e001      	b.n	800aaf4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaf4:	f7fe ffa0 	bl	8009a38 <vPortExitCritical>

	return xReturn;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab0a:	f7fe ff67 	bl	80099dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d102      	bne.n	800ab20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	e001      	b.n	800ab24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab20:	2300      	movs	r3, #0
 800ab22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab24:	f7fe ff88 	bl	8009a38 <vPortExitCritical>

	return xReturn;
 800ab28:	68fb      	ldr	r3, [r7, #12]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	e014      	b.n	800ab6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab44:	4a0e      	ldr	r2, [pc, #56]	; (800ab80 <vQueueAddToRegistry+0x4c>)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10b      	bne.n	800ab68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab50:	490b      	ldr	r1, [pc, #44]	; (800ab80 <vQueueAddToRegistry+0x4c>)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab5a:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <vQueueAddToRegistry+0x4c>)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	4413      	add	r3, r2
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab66:	e005      	b.n	800ab74 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b07      	cmp	r3, #7
 800ab72:	d9e7      	bls.n	800ab44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab74:	bf00      	nop
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	24005248 	.word	0x24005248

0800ab84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	e016      	b.n	800abc0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab92:	4a10      	ldr	r2, [pc, #64]	; (800abd4 <vQueueUnregisterQueue+0x50>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	4413      	add	r3, r2
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d10b      	bne.n	800abba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aba2:	4a0c      	ldr	r2, [pc, #48]	; (800abd4 <vQueueUnregisterQueue+0x50>)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2100      	movs	r1, #0
 800aba8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800abac:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <vQueueUnregisterQueue+0x50>)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	4413      	add	r3, r2
 800abb4:	2200      	movs	r2, #0
 800abb6:	605a      	str	r2, [r3, #4]
				break;
 800abb8:	e005      	b.n	800abc6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3301      	adds	r3, #1
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b07      	cmp	r3, #7
 800abc4:	d9e5      	bls.n	800ab92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800abc6:	bf00      	nop
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	24005248 	.word	0x24005248

0800abd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800abe8:	f7fe fef8 	bl	80099dc <vPortEnterCritical>
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abf2:	b25b      	sxtb	r3, r3
 800abf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abf8:	d103      	bne.n	800ac02 <vQueueWaitForMessageRestricted+0x2a>
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac08:	b25b      	sxtb	r3, r3
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac0e:	d103      	bne.n	800ac18 <vQueueWaitForMessageRestricted+0x40>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac18:	f7fe ff0e 	bl	8009a38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d106      	bne.n	800ac32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	3324      	adds	r3, #36	; 0x24
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fc41 	bl	800b4b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac32:	6978      	ldr	r0, [r7, #20]
 800ac34:	f7ff fefd 	bl	800aa32 <prvUnlockQueue>
	}
 800ac38:	bf00      	nop
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08e      	sub	sp, #56	; 0x38
 800ac44:	af04      	add	r7, sp, #16
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d109      	bne.n	800ac68 <xTaskCreateStatic+0x28>
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	623b      	str	r3, [r7, #32]
 800ac66:	e7fe      	b.n	800ac66 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d109      	bne.n	800ac82 <xTaskCreateStatic+0x42>
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	61fb      	str	r3, [r7, #28]
 800ac80:	e7fe      	b.n	800ac80 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac82:	235c      	movs	r3, #92	; 0x5c
 800ac84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2b5c      	cmp	r3, #92	; 0x5c
 800ac8a:	d009      	beq.n	800aca0 <xTaskCreateStatic+0x60>
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	61bb      	str	r3, [r7, #24]
 800ac9e:	e7fe      	b.n	800ac9e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aca0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01e      	beq.n	800ace6 <xTaskCreateStatic+0xa6>
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01b      	beq.n	800ace6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acb6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acc0:	2300      	movs	r3, #0
 800acc2:	9303      	str	r3, [sp, #12]
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	9302      	str	r3, [sp, #8]
 800acc8:	f107 0314 	add.w	r3, r7, #20
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	68b9      	ldr	r1, [r7, #8]
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 f850 	bl	800ad7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ace0:	f000 f8dc 	bl	800ae9c <prvAddNewTaskToReadyList>
 800ace4:	e001      	b.n	800acea <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acea:	697b      	ldr	r3, [r7, #20]
	}
 800acec:	4618      	mov	r0, r3
 800acee:	3728      	adds	r7, #40	; 0x28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b08c      	sub	sp, #48	; 0x30
 800acf8:	af04      	add	r7, sp, #16
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	4613      	mov	r3, r2
 800ad02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad04:	88fb      	ldrh	r3, [r7, #6]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fab3 	bl	8009274 <pvPortMalloc>
 800ad0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00e      	beq.n	800ad34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad16:	205c      	movs	r0, #92	; 0x5c
 800ad18:	f7fe faac 	bl	8009274 <pvPortMalloc>
 800ad1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	631a      	str	r2, [r3, #48]	; 0x30
 800ad2a:	e005      	b.n	800ad38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad2c:	6978      	ldr	r0, [r7, #20]
 800ad2e:	f7fe fb63 	bl	80093f8 <vPortFree>
 800ad32:	e001      	b.n	800ad38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d017      	beq.n	800ad6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad46:	88fa      	ldrh	r2, [r7, #6]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9303      	str	r3, [sp, #12]
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	9302      	str	r3, [sp, #8]
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	9301      	str	r3, [sp, #4]
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f80e 	bl	800ad7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad62:	69f8      	ldr	r0, [r7, #28]
 800ad64:	f000 f89a 	bl	800ae9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	e002      	b.n	800ad74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad74:	69bb      	ldr	r3, [r7, #24]
	}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b088      	sub	sp, #32
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	60f8      	str	r0, [r7, #12]
 800ad86:	60b9      	str	r1, [r7, #8]
 800ad88:	607a      	str	r2, [r7, #4]
 800ad8a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	461a      	mov	r2, r3
 800ad96:	21a5      	movs	r1, #165	; 0xa5
 800ad98:	f00b ff68 	bl	8016c6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ada6:	440b      	add	r3, r1
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	f023 0307 	bic.w	r3, r3, #7
 800adb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d009      	beq.n	800add4 <prvInitialiseNewTask+0x56>
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	617b      	str	r3, [r7, #20]
 800add2:	e7fe      	b.n	800add2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01f      	beq.n	800ae1a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adda:	2300      	movs	r3, #0
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	e012      	b.n	800ae06 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4413      	add	r3, r2
 800ade6:	7819      	ldrb	r1, [r3, #0]
 800ade8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	4413      	add	r3, r2
 800adee:	3334      	adds	r3, #52	; 0x34
 800adf0:	460a      	mov	r2, r1
 800adf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	4413      	add	r3, r2
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	3301      	adds	r3, #1
 800ae04:	61fb      	str	r3, [r7, #28]
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2b0f      	cmp	r3, #15
 800ae0a:	d9e9      	bls.n	800ade0 <prvInitialiseNewTask+0x62>
 800ae0c:	e000      	b.n	800ae10 <prvInitialiseNewTask+0x92>
			{
				break;
 800ae0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae18:	e003      	b.n	800ae22 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	2b37      	cmp	r3, #55	; 0x37
 800ae26:	d901      	bls.n	800ae2c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae28:	2337      	movs	r3, #55	; 0x37
 800ae2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	3304      	adds	r3, #4
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe fc0c 	bl	8009660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	3318      	adds	r3, #24
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe fc07 	bl	8009660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	68f9      	ldr	r1, [r7, #12]
 800ae7a:	69b8      	ldr	r0, [r7, #24]
 800ae7c:	f7fe fc84 	bl	8009788 <pxPortInitialiseStack>
 800ae80:	4602      	mov	r2, r0
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae92:	bf00      	nop
 800ae94:	3720      	adds	r7, #32
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aea4:	f7fe fd9a 	bl	80099dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aea8:	4b2d      	ldr	r3, [pc, #180]	; (800af60 <prvAddNewTaskToReadyList+0xc4>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	4a2c      	ldr	r2, [pc, #176]	; (800af60 <prvAddNewTaskToReadyList+0xc4>)
 800aeb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aeb2:	4b2c      	ldr	r3, [pc, #176]	; (800af64 <prvAddNewTaskToReadyList+0xc8>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d109      	bne.n	800aece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aeba:	4a2a      	ldr	r2, [pc, #168]	; (800af64 <prvAddNewTaskToReadyList+0xc8>)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aec0:	4b27      	ldr	r3, [pc, #156]	; (800af60 <prvAddNewTaskToReadyList+0xc4>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d110      	bne.n	800aeea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aec8:	f000 fc1a 	bl	800b700 <prvInitialiseTaskLists>
 800aecc:	e00d      	b.n	800aeea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aece:	4b26      	ldr	r3, [pc, #152]	; (800af68 <prvAddNewTaskToReadyList+0xcc>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aed6:	4b23      	ldr	r3, [pc, #140]	; (800af64 <prvAddNewTaskToReadyList+0xc8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d802      	bhi.n	800aeea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aee4:	4a1f      	ldr	r2, [pc, #124]	; (800af64 <prvAddNewTaskToReadyList+0xc8>)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aeea:	4b20      	ldr	r3, [pc, #128]	; (800af6c <prvAddNewTaskToReadyList+0xd0>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	4a1e      	ldr	r2, [pc, #120]	; (800af6c <prvAddNewTaskToReadyList+0xd0>)
 800aef2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aef4:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <prvAddNewTaskToReadyList+0xd0>)
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af00:	4b1b      	ldr	r3, [pc, #108]	; (800af70 <prvAddNewTaskToReadyList+0xd4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d903      	bls.n	800af10 <prvAddNewTaskToReadyList+0x74>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0c:	4a18      	ldr	r2, [pc, #96]	; (800af70 <prvAddNewTaskToReadyList+0xd4>)
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4a15      	ldr	r2, [pc, #84]	; (800af74 <prvAddNewTaskToReadyList+0xd8>)
 800af1e:	441a      	add	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3304      	adds	r3, #4
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f7fe fba7 	bl	800967a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af2c:	f7fe fd84 	bl	8009a38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af30:	4b0d      	ldr	r3, [pc, #52]	; (800af68 <prvAddNewTaskToReadyList+0xcc>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00e      	beq.n	800af56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af38:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <prvAddNewTaskToReadyList+0xc8>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af42:	429a      	cmp	r2, r3
 800af44:	d207      	bcs.n	800af56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af46:	4b0c      	ldr	r3, [pc, #48]	; (800af78 <prvAddNewTaskToReadyList+0xdc>)
 800af48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	24004870 	.word	0x24004870
 800af64:	2400439c 	.word	0x2400439c
 800af68:	2400487c 	.word	0x2400487c
 800af6c:	2400488c 	.word	0x2400488c
 800af70:	24004878 	.word	0x24004878
 800af74:	240043a0 	.word	0x240043a0
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d016      	beq.n	800afbc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af8e:	4b13      	ldr	r3, [pc, #76]	; (800afdc <vTaskDelay+0x60>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d009      	beq.n	800afaa <vTaskDelay+0x2e>
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	60bb      	str	r3, [r7, #8]
 800afa8:	e7fe      	b.n	800afa8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800afaa:	f000 f87f 	bl	800b0ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afae:	2100      	movs	r1, #0
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fdf5 	bl	800bba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afb6:	f000 f887 	bl	800b0c8 <xTaskResumeAll>
 800afba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d107      	bne.n	800afd2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800afc2:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <vTaskDelay+0x64>)
 800afc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	24004898 	.word	0x24004898
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08a      	sub	sp, #40	; 0x28
 800afe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aff2:	463a      	mov	r2, r7
 800aff4:	1d39      	adds	r1, r7, #4
 800aff6:	f107 0308 	add.w	r3, r7, #8
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe f906 	bl	800920c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	9202      	str	r2, [sp, #8]
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	2300      	movs	r3, #0
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	2300      	movs	r3, #0
 800b010:	460a      	mov	r2, r1
 800b012:	4920      	ldr	r1, [pc, #128]	; (800b094 <vTaskStartScheduler+0xb0>)
 800b014:	4820      	ldr	r0, [pc, #128]	; (800b098 <vTaskStartScheduler+0xb4>)
 800b016:	f7ff fe13 	bl	800ac40 <xTaskCreateStatic>
 800b01a:	4602      	mov	r2, r0
 800b01c:	4b1f      	ldr	r3, [pc, #124]	; (800b09c <vTaskStartScheduler+0xb8>)
 800b01e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b020:	4b1e      	ldr	r3, [pc, #120]	; (800b09c <vTaskStartScheduler+0xb8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b028:	2301      	movs	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e001      	b.n	800b032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d102      	bne.n	800b03e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b038:	f000 fe06 	bl	800bc48 <xTimerCreateTimerTask>
 800b03c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d115      	bne.n	800b070 <vTaskStartScheduler+0x8c>
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b056:	4b12      	ldr	r3, [pc, #72]	; (800b0a0 <vTaskStartScheduler+0xbc>)
 800b058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b05c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b05e:	4b11      	ldr	r3, [pc, #68]	; (800b0a4 <vTaskStartScheduler+0xc0>)
 800b060:	2201      	movs	r2, #1
 800b062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b064:	4b10      	ldr	r3, [pc, #64]	; (800b0a8 <vTaskStartScheduler+0xc4>)
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b06a:	f7fe fc19 	bl	80098a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b06e:	e00d      	b.n	800b08c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b076:	d109      	bne.n	800b08c <vTaskStartScheduler+0xa8>
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	e7fe      	b.n	800b08a <vTaskStartScheduler+0xa6>
}
 800b08c:	bf00      	nop
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	08017b6c 	.word	0x08017b6c
 800b098:	0800b6d1 	.word	0x0800b6d1
 800b09c:	24004894 	.word	0x24004894
 800b0a0:	24004890 	.word	0x24004890
 800b0a4:	2400487c 	.word	0x2400487c
 800b0a8:	24004874 	.word	0x24004874

0800b0ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b0b0:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <vTaskSuspendAll+0x18>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	4a03      	ldr	r2, [pc, #12]	; (800b0c4 <vTaskSuspendAll+0x18>)
 800b0b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b0ba:	bf00      	nop
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	24004898 	.word	0x24004898

0800b0c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0d6:	4b41      	ldr	r3, [pc, #260]	; (800b1dc <xTaskResumeAll+0x114>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d109      	bne.n	800b0f2 <xTaskResumeAll+0x2a>
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	e7fe      	b.n	800b0f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0f2:	f7fe fc73 	bl	80099dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0f6:	4b39      	ldr	r3, [pc, #228]	; (800b1dc <xTaskResumeAll+0x114>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	4a37      	ldr	r2, [pc, #220]	; (800b1dc <xTaskResumeAll+0x114>)
 800b0fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b100:	4b36      	ldr	r3, [pc, #216]	; (800b1dc <xTaskResumeAll+0x114>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d162      	bne.n	800b1ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b108:	4b35      	ldr	r3, [pc, #212]	; (800b1e0 <xTaskResumeAll+0x118>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d05e      	beq.n	800b1ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b110:	e02f      	b.n	800b172 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b112:	4b34      	ldr	r3, [pc, #208]	; (800b1e4 <xTaskResumeAll+0x11c>)
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3318      	adds	r3, #24
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe fb08 	bl	8009734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	3304      	adds	r3, #4
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fe fb03 	bl	8009734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b132:	4b2d      	ldr	r3, [pc, #180]	; (800b1e8 <xTaskResumeAll+0x120>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d903      	bls.n	800b142 <xTaskResumeAll+0x7a>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13e:	4a2a      	ldr	r2, [pc, #168]	; (800b1e8 <xTaskResumeAll+0x120>)
 800b140:	6013      	str	r3, [r2, #0]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b146:	4613      	mov	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4a27      	ldr	r2, [pc, #156]	; (800b1ec <xTaskResumeAll+0x124>)
 800b150:	441a      	add	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3304      	adds	r3, #4
 800b156:	4619      	mov	r1, r3
 800b158:	4610      	mov	r0, r2
 800b15a:	f7fe fa8e 	bl	800967a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b162:	4b23      	ldr	r3, [pc, #140]	; (800b1f0 <xTaskResumeAll+0x128>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b168:	429a      	cmp	r2, r3
 800b16a:	d302      	bcc.n	800b172 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b16c:	4b21      	ldr	r3, [pc, #132]	; (800b1f4 <xTaskResumeAll+0x12c>)
 800b16e:	2201      	movs	r2, #1
 800b170:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b172:	4b1c      	ldr	r3, [pc, #112]	; (800b1e4 <xTaskResumeAll+0x11c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1cb      	bne.n	800b112 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b180:	f000 fb58 	bl	800b834 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b184:	4b1c      	ldr	r3, [pc, #112]	; (800b1f8 <xTaskResumeAll+0x130>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d010      	beq.n	800b1b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b190:	f000 f858 	bl	800b244 <xTaskIncrementTick>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b19a:	4b16      	ldr	r3, [pc, #88]	; (800b1f4 <xTaskResumeAll+0x12c>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1f1      	bne.n	800b190 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b1ac:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <xTaskResumeAll+0x130>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1b2:	4b10      	ldr	r3, [pc, #64]	; (800b1f4 <xTaskResumeAll+0x12c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d009      	beq.n	800b1ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <xTaskResumeAll+0x134>)
 800b1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1ce:	f7fe fc33 	bl	8009a38 <vPortExitCritical>

	return xAlreadyYielded;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	24004898 	.word	0x24004898
 800b1e0:	24004870 	.word	0x24004870
 800b1e4:	24004830 	.word	0x24004830
 800b1e8:	24004878 	.word	0x24004878
 800b1ec:	240043a0 	.word	0x240043a0
 800b1f0:	2400439c 	.word	0x2400439c
 800b1f4:	24004884 	.word	0x24004884
 800b1f8:	24004880 	.word	0x24004880
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b206:	4b05      	ldr	r3, [pc, #20]	; (800b21c <xTaskGetTickCount+0x1c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b20c:	687b      	ldr	r3, [r7, #4]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	24004874 	.word	0x24004874

0800b220 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b226:	f7fe fcb5 	bl	8009b94 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b22a:	2300      	movs	r3, #0
 800b22c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b22e:	4b04      	ldr	r3, [pc, #16]	; (800b240 <xTaskGetTickCountFromISR+0x20>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b234:	683b      	ldr	r3, [r7, #0]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	24004874 	.word	0x24004874

0800b244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b24e:	4b4e      	ldr	r3, [pc, #312]	; (800b388 <xTaskIncrementTick+0x144>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	f040 8088 	bne.w	800b368 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b258:	4b4c      	ldr	r3, [pc, #304]	; (800b38c <xTaskIncrementTick+0x148>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3301      	adds	r3, #1
 800b25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b260:	4a4a      	ldr	r2, [pc, #296]	; (800b38c <xTaskIncrementTick+0x148>)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d11f      	bne.n	800b2ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b26c:	4b48      	ldr	r3, [pc, #288]	; (800b390 <xTaskIncrementTick+0x14c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d009      	beq.n	800b28a <xTaskIncrementTick+0x46>
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	e7fe      	b.n	800b288 <xTaskIncrementTick+0x44>
 800b28a:	4b41      	ldr	r3, [pc, #260]	; (800b390 <xTaskIncrementTick+0x14c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	4b40      	ldr	r3, [pc, #256]	; (800b394 <xTaskIncrementTick+0x150>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a3e      	ldr	r2, [pc, #248]	; (800b390 <xTaskIncrementTick+0x14c>)
 800b296:	6013      	str	r3, [r2, #0]
 800b298:	4a3e      	ldr	r2, [pc, #248]	; (800b394 <xTaskIncrementTick+0x150>)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	4b3e      	ldr	r3, [pc, #248]	; (800b398 <xTaskIncrementTick+0x154>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	4a3c      	ldr	r2, [pc, #240]	; (800b398 <xTaskIncrementTick+0x154>)
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	f000 fac4 	bl	800b834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2ac:	4b3b      	ldr	r3, [pc, #236]	; (800b39c <xTaskIncrementTick+0x158>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d349      	bcc.n	800b34a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b6:	4b36      	ldr	r3, [pc, #216]	; (800b390 <xTaskIncrementTick+0x14c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2c0:	4b36      	ldr	r3, [pc, #216]	; (800b39c <xTaskIncrementTick+0x158>)
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2c6:	601a      	str	r2, [r3, #0]
					break;
 800b2c8:	e03f      	b.n	800b34a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ca:	4b31      	ldr	r3, [pc, #196]	; (800b390 <xTaskIncrementTick+0x14c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2da:	693a      	ldr	r2, [r7, #16]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d203      	bcs.n	800b2ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2e2:	4a2e      	ldr	r2, [pc, #184]	; (800b39c <xTaskIncrementTick+0x158>)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2e8:	e02f      	b.n	800b34a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fa20 	bl	8009734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d004      	beq.n	800b306 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	3318      	adds	r3, #24
 800b300:	4618      	mov	r0, r3
 800b302:	f7fe fa17 	bl	8009734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30a:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <xTaskIncrementTick+0x15c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d903      	bls.n	800b31a <xTaskIncrementTick+0xd6>
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	4a22      	ldr	r2, [pc, #136]	; (800b3a0 <xTaskIncrementTick+0x15c>)
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31e:	4613      	mov	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4413      	add	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4a1f      	ldr	r2, [pc, #124]	; (800b3a4 <xTaskIncrementTick+0x160>)
 800b328:	441a      	add	r2, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	3304      	adds	r3, #4
 800b32e:	4619      	mov	r1, r3
 800b330:	4610      	mov	r0, r2
 800b332:	f7fe f9a2 	bl	800967a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33a:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <xTaskIncrementTick+0x164>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	429a      	cmp	r2, r3
 800b342:	d3b8      	bcc.n	800b2b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b344:	2301      	movs	r3, #1
 800b346:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b348:	e7b5      	b.n	800b2b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b34a:	4b17      	ldr	r3, [pc, #92]	; (800b3a8 <xTaskIncrementTick+0x164>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b350:	4914      	ldr	r1, [pc, #80]	; (800b3a4 <xTaskIncrementTick+0x160>)
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d907      	bls.n	800b372 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b362:	2301      	movs	r3, #1
 800b364:	617b      	str	r3, [r7, #20]
 800b366:	e004      	b.n	800b372 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b368:	4b10      	ldr	r3, [pc, #64]	; (800b3ac <xTaskIncrementTick+0x168>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	4a0f      	ldr	r2, [pc, #60]	; (800b3ac <xTaskIncrementTick+0x168>)
 800b370:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b372:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <xTaskIncrementTick+0x16c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b37a:	2301      	movs	r3, #1
 800b37c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b37e:	697b      	ldr	r3, [r7, #20]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	24004898 	.word	0x24004898
 800b38c:	24004874 	.word	0x24004874
 800b390:	24004828 	.word	0x24004828
 800b394:	2400482c 	.word	0x2400482c
 800b398:	24004888 	.word	0x24004888
 800b39c:	24004890 	.word	0x24004890
 800b3a0:	24004878 	.word	0x24004878
 800b3a4:	240043a0 	.word	0x240043a0
 800b3a8:	2400439c 	.word	0x2400439c
 800b3ac:	24004880 	.word	0x24004880
 800b3b0:	24004884 	.word	0x24004884

0800b3b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3ba:	4b27      	ldr	r3, [pc, #156]	; (800b458 <vTaskSwitchContext+0xa4>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3c2:	4b26      	ldr	r3, [pc, #152]	; (800b45c <vTaskSwitchContext+0xa8>)
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3c8:	e040      	b.n	800b44c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b3ca:	4b24      	ldr	r3, [pc, #144]	; (800b45c <vTaskSwitchContext+0xa8>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d0:	4b23      	ldr	r3, [pc, #140]	; (800b460 <vTaskSwitchContext+0xac>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	e00f      	b.n	800b3f8 <vTaskSwitchContext+0x44>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <vTaskSwitchContext+0x3e>
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	607b      	str	r3, [r7, #4]
 800b3f0:	e7fe      	b.n	800b3f0 <vTaskSwitchContext+0x3c>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	491a      	ldr	r1, [pc, #104]	; (800b464 <vTaskSwitchContext+0xb0>)
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	4413      	add	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	440b      	add	r3, r1
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0e5      	beq.n	800b3d8 <vTaskSwitchContext+0x24>
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4a13      	ldr	r2, [pc, #76]	; (800b464 <vTaskSwitchContext+0xb0>)
 800b418:	4413      	add	r3, r2
 800b41a:	60bb      	str	r3, [r7, #8]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	605a      	str	r2, [r3, #4]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	3308      	adds	r3, #8
 800b42e:	429a      	cmp	r2, r3
 800b430:	d104      	bne.n	800b43c <vTaskSwitchContext+0x88>
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	605a      	str	r2, [r3, #4]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	4a09      	ldr	r2, [pc, #36]	; (800b468 <vTaskSwitchContext+0xb4>)
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	4a06      	ldr	r2, [pc, #24]	; (800b460 <vTaskSwitchContext+0xac>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6013      	str	r3, [r2, #0]
}
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	24004898 	.word	0x24004898
 800b45c:	24004884 	.word	0x24004884
 800b460:	24004878 	.word	0x24004878
 800b464:	240043a0 	.word	0x240043a0
 800b468:	2400439c 	.word	0x2400439c

0800b46c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d109      	bne.n	800b490 <vTaskPlaceOnEventList+0x24>
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	60fb      	str	r3, [r7, #12]
 800b48e:	e7fe      	b.n	800b48e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b490:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <vTaskPlaceOnEventList+0x44>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3318      	adds	r3, #24
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7fe f912 	bl	80096c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b49e:	2101      	movs	r1, #1
 800b4a0:	6838      	ldr	r0, [r7, #0]
 800b4a2:	f000 fb7d 	bl	800bba0 <prvAddCurrentTaskToDelayedList>
}
 800b4a6:	bf00      	nop
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	2400439c 	.word	0x2400439c

0800b4b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <vTaskPlaceOnEventListRestricted+0x26>
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	617b      	str	r3, [r7, #20]
 800b4d8:	e7fe      	b.n	800b4d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4da:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <vTaskPlaceOnEventListRestricted+0x50>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3318      	adds	r3, #24
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7fe f8c9 	bl	800967a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d002      	beq.n	800b4f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b4ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	68b8      	ldr	r0, [r7, #8]
 800b4f8:	f000 fb52 	bl	800bba0 <prvAddCurrentTaskToDelayedList>
	}
 800b4fc:	bf00      	nop
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	2400439c 	.word	0x2400439c

0800b508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d109      	bne.n	800b532 <xTaskRemoveFromEventList+0x2a>
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	e7fe      	b.n	800b530 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	3318      	adds	r3, #24
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe f8fc 	bl	8009734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b53c:	4b1d      	ldr	r3, [pc, #116]	; (800b5b4 <xTaskRemoveFromEventList+0xac>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d11d      	bne.n	800b580 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	3304      	adds	r3, #4
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fe f8f3 	bl	8009734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b552:	4b19      	ldr	r3, [pc, #100]	; (800b5b8 <xTaskRemoveFromEventList+0xb0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d903      	bls.n	800b562 <xTaskRemoveFromEventList+0x5a>
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55e:	4a16      	ldr	r2, [pc, #88]	; (800b5b8 <xTaskRemoveFromEventList+0xb0>)
 800b560:	6013      	str	r3, [r2, #0]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <xTaskRemoveFromEventList+0xb4>)
 800b570:	441a      	add	r2, r3
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	3304      	adds	r3, #4
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f7fe f87e 	bl	800967a <vListInsertEnd>
 800b57e:	e005      	b.n	800b58c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	3318      	adds	r3, #24
 800b584:	4619      	mov	r1, r3
 800b586:	480e      	ldr	r0, [pc, #56]	; (800b5c0 <xTaskRemoveFromEventList+0xb8>)
 800b588:	f7fe f877 	bl	800967a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b590:	4b0c      	ldr	r3, [pc, #48]	; (800b5c4 <xTaskRemoveFromEventList+0xbc>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b596:	429a      	cmp	r2, r3
 800b598:	d905      	bls.n	800b5a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b59a:	2301      	movs	r3, #1
 800b59c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b59e:	4b0a      	ldr	r3, [pc, #40]	; (800b5c8 <xTaskRemoveFromEventList+0xc0>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	e001      	b.n	800b5aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5aa:	697b      	ldr	r3, [r7, #20]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	24004898 	.word	0x24004898
 800b5b8:	24004878 	.word	0x24004878
 800b5bc:	240043a0 	.word	0x240043a0
 800b5c0:	24004830 	.word	0x24004830
 800b5c4:	2400439c 	.word	0x2400439c
 800b5c8:	24004884 	.word	0x24004884

0800b5cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5d4:	4b06      	ldr	r3, [pc, #24]	; (800b5f0 <vTaskInternalSetTimeOutState+0x24>)
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5dc:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <vTaskInternalSetTimeOutState+0x28>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	605a      	str	r2, [r3, #4]
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	24004888 	.word	0x24004888
 800b5f4:	24004874 	.word	0x24004874

0800b5f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d109      	bne.n	800b61c <xTaskCheckForTimeOut+0x24>
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	613b      	str	r3, [r7, #16]
 800b61a:	e7fe      	b.n	800b61a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d109      	bne.n	800b636 <xTaskCheckForTimeOut+0x3e>
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	e7fe      	b.n	800b634 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b636:	f7fe f9d1 	bl	80099dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b63a:	4b1d      	ldr	r3, [pc, #116]	; (800b6b0 <xTaskCheckForTimeOut+0xb8>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b652:	d102      	bne.n	800b65a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b654:	2300      	movs	r3, #0
 800b656:	61fb      	str	r3, [r7, #28]
 800b658:	e023      	b.n	800b6a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <xTaskCheckForTimeOut+0xbc>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	429a      	cmp	r2, r3
 800b664:	d007      	beq.n	800b676 <xTaskCheckForTimeOut+0x7e>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d302      	bcc.n	800b676 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b670:	2301      	movs	r3, #1
 800b672:	61fb      	str	r3, [r7, #28]
 800b674:	e015      	b.n	800b6a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d20b      	bcs.n	800b698 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	1ad2      	subs	r2, r2, r3
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff ff9d 	bl	800b5cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b692:	2300      	movs	r3, #0
 800b694:	61fb      	str	r3, [r7, #28]
 800b696:	e004      	b.n	800b6a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6a2:	f7fe f9c9 	bl	8009a38 <vPortExitCritical>

	return xReturn;
 800b6a6:	69fb      	ldr	r3, [r7, #28]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	24004874 	.word	0x24004874
 800b6b4:	24004888 	.word	0x24004888

0800b6b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6bc:	4b03      	ldr	r3, [pc, #12]	; (800b6cc <vTaskMissedYield+0x14>)
 800b6be:	2201      	movs	r2, #1
 800b6c0:	601a      	str	r2, [r3, #0]
}
 800b6c2:	bf00      	nop
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	24004884 	.word	0x24004884

0800b6d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6d8:	f000 f852 	bl	800b780 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <prvIdleTask+0x28>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d9f9      	bls.n	800b6d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6e4:	4b05      	ldr	r3, [pc, #20]	; (800b6fc <prvIdleTask+0x2c>)
 800b6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6f4:	e7f0      	b.n	800b6d8 <prvIdleTask+0x8>
 800b6f6:	bf00      	nop
 800b6f8:	240043a0 	.word	0x240043a0
 800b6fc:	e000ed04 	.word	0xe000ed04

0800b700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b706:	2300      	movs	r3, #0
 800b708:	607b      	str	r3, [r7, #4]
 800b70a:	e00c      	b.n	800b726 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	4613      	mov	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4a12      	ldr	r2, [pc, #72]	; (800b760 <prvInitialiseTaskLists+0x60>)
 800b718:	4413      	add	r3, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fd ff80 	bl	8009620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	3301      	adds	r3, #1
 800b724:	607b      	str	r3, [r7, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b37      	cmp	r3, #55	; 0x37
 800b72a:	d9ef      	bls.n	800b70c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b72c:	480d      	ldr	r0, [pc, #52]	; (800b764 <prvInitialiseTaskLists+0x64>)
 800b72e:	f7fd ff77 	bl	8009620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b732:	480d      	ldr	r0, [pc, #52]	; (800b768 <prvInitialiseTaskLists+0x68>)
 800b734:	f7fd ff74 	bl	8009620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b738:	480c      	ldr	r0, [pc, #48]	; (800b76c <prvInitialiseTaskLists+0x6c>)
 800b73a:	f7fd ff71 	bl	8009620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b73e:	480c      	ldr	r0, [pc, #48]	; (800b770 <prvInitialiseTaskLists+0x70>)
 800b740:	f7fd ff6e 	bl	8009620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b744:	480b      	ldr	r0, [pc, #44]	; (800b774 <prvInitialiseTaskLists+0x74>)
 800b746:	f7fd ff6b 	bl	8009620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b74a:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <prvInitialiseTaskLists+0x78>)
 800b74c:	4a05      	ldr	r2, [pc, #20]	; (800b764 <prvInitialiseTaskLists+0x64>)
 800b74e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b750:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <prvInitialiseTaskLists+0x7c>)
 800b752:	4a05      	ldr	r2, [pc, #20]	; (800b768 <prvInitialiseTaskLists+0x68>)
 800b754:	601a      	str	r2, [r3, #0]
}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	240043a0 	.word	0x240043a0
 800b764:	24004800 	.word	0x24004800
 800b768:	24004814 	.word	0x24004814
 800b76c:	24004830 	.word	0x24004830
 800b770:	24004844 	.word	0x24004844
 800b774:	2400485c 	.word	0x2400485c
 800b778:	24004828 	.word	0x24004828
 800b77c:	2400482c 	.word	0x2400482c

0800b780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b786:	e019      	b.n	800b7bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b788:	f7fe f928 	bl	80099dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b78c:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <prvCheckTasksWaitingTermination+0x4c>)
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	3304      	adds	r3, #4
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fd ffcb 	bl	8009734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b79e:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <prvCheckTasksWaitingTermination+0x50>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	4a0a      	ldr	r2, [pc, #40]	; (800b7d0 <prvCheckTasksWaitingTermination+0x50>)
 800b7a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7a8:	4b0a      	ldr	r3, [pc, #40]	; (800b7d4 <prvCheckTasksWaitingTermination+0x54>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	4a09      	ldr	r2, [pc, #36]	; (800b7d4 <prvCheckTasksWaitingTermination+0x54>)
 800b7b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7b2:	f7fe f941 	bl	8009a38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f80e 	bl	800b7d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7bc:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <prvCheckTasksWaitingTermination+0x54>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e1      	bne.n	800b788 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7c4:	bf00      	nop
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	24004844 	.word	0x24004844
 800b7d0:	24004870 	.word	0x24004870
 800b7d4:	24004858 	.word	0x24004858

0800b7d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d108      	bne.n	800b7fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fd fe02 	bl	80093f8 <vPortFree>
				vPortFree( pxTCB );
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7fd fdff 	bl	80093f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7fa:	e017      	b.n	800b82c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b802:	2b01      	cmp	r3, #1
 800b804:	d103      	bne.n	800b80e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7fd fdf6 	bl	80093f8 <vPortFree>
	}
 800b80c:	e00e      	b.n	800b82c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b814:	2b02      	cmp	r3, #2
 800b816:	d009      	beq.n	800b82c <prvDeleteTCB+0x54>
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	e7fe      	b.n	800b82a <prvDeleteTCB+0x52>
	}
 800b82c:	bf00      	nop
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b83a:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <prvResetNextTaskUnblockTime+0x38>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d104      	bne.n	800b84e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <prvResetNextTaskUnblockTime+0x3c>)
 800b846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b84a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b84c:	e008      	b.n	800b860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b84e:	4b07      	ldr	r3, [pc, #28]	; (800b86c <prvResetNextTaskUnblockTime+0x38>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	4a04      	ldr	r2, [pc, #16]	; (800b870 <prvResetNextTaskUnblockTime+0x3c>)
 800b85e:	6013      	str	r3, [r2, #0]
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	24004828 	.word	0x24004828
 800b870:	24004890 	.word	0x24004890

0800b874 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b87a:	4b05      	ldr	r3, [pc, #20]	; (800b890 <xTaskGetCurrentTaskHandle+0x1c>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b880:	687b      	ldr	r3, [r7, #4]
	}
 800b882:	4618      	mov	r0, r3
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	2400439c 	.word	0x2400439c

0800b894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b89a:	4b0b      	ldr	r3, [pc, #44]	; (800b8c8 <xTaskGetSchedulerState+0x34>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d102      	bne.n	800b8a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	607b      	str	r3, [r7, #4]
 800b8a6:	e008      	b.n	800b8ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8a8:	4b08      	ldr	r3, [pc, #32]	; (800b8cc <xTaskGetSchedulerState+0x38>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	607b      	str	r3, [r7, #4]
 800b8b4:	e001      	b.n	800b8ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8ba:	687b      	ldr	r3, [r7, #4]
	}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	2400487c 	.word	0x2400487c
 800b8cc:	24004898 	.word	0x24004898

0800b8d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d051      	beq.n	800b98a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ea:	4b2a      	ldr	r3, [pc, #168]	; (800b994 <xTaskPriorityInherit+0xc4>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d241      	bcs.n	800b978 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	db06      	blt.n	800b90a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fc:	4b25      	ldr	r3, [pc, #148]	; (800b994 <xTaskPriorityInherit+0xc4>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6959      	ldr	r1, [r3, #20]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4a1f      	ldr	r2, [pc, #124]	; (800b998 <xTaskPriorityInherit+0xc8>)
 800b91c:	4413      	add	r3, r2
 800b91e:	4299      	cmp	r1, r3
 800b920:	d122      	bne.n	800b968 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	3304      	adds	r3, #4
 800b926:	4618      	mov	r0, r3
 800b928:	f7fd ff04 	bl	8009734 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b92c:	4b19      	ldr	r3, [pc, #100]	; (800b994 <xTaskPriorityInherit+0xc4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b93a:	4b18      	ldr	r3, [pc, #96]	; (800b99c <xTaskPriorityInherit+0xcc>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d903      	bls.n	800b94a <xTaskPriorityInherit+0x7a>
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b946:	4a15      	ldr	r2, [pc, #84]	; (800b99c <xTaskPriorityInherit+0xcc>)
 800b948:	6013      	str	r3, [r2, #0]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4a10      	ldr	r2, [pc, #64]	; (800b998 <xTaskPriorityInherit+0xc8>)
 800b958:	441a      	add	r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	3304      	adds	r3, #4
 800b95e:	4619      	mov	r1, r3
 800b960:	4610      	mov	r0, r2
 800b962:	f7fd fe8a 	bl	800967a <vListInsertEnd>
 800b966:	e004      	b.n	800b972 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <xTaskPriorityInherit+0xc4>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b972:	2301      	movs	r3, #1
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	e008      	b.n	800b98a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b97c:	4b05      	ldr	r3, [pc, #20]	; (800b994 <xTaskPriorityInherit+0xc4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	429a      	cmp	r2, r3
 800b984:	d201      	bcs.n	800b98a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b986:	2301      	movs	r3, #1
 800b988:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b98a:	68fb      	ldr	r3, [r7, #12]
	}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	2400439c 	.word	0x2400439c
 800b998:	240043a0 	.word	0x240043a0
 800b99c:	24004878 	.word	0x24004878

0800b9a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d054      	beq.n	800ba60 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9b6:	4b2d      	ldr	r3, [pc, #180]	; (800ba6c <xTaskPriorityDisinherit+0xcc>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	693a      	ldr	r2, [r7, #16]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d009      	beq.n	800b9d4 <xTaskPriorityDisinherit+0x34>
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	60fb      	str	r3, [r7, #12]
 800b9d2:	e7fe      	b.n	800b9d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d109      	bne.n	800b9f0 <xTaskPriorityDisinherit+0x50>
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	60bb      	str	r3, [r7, #8]
 800b9ee:	e7fe      	b.n	800b9ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f4:	1e5a      	subs	r2, r3, #1
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d02c      	beq.n	800ba60 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d128      	bne.n	800ba60 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	3304      	adds	r3, #4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fd fe8e 	bl	8009734 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <xTaskPriorityDisinherit+0xd0>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d903      	bls.n	800ba40 <xTaskPriorityDisinherit+0xa0>
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3c:	4a0c      	ldr	r2, [pc, #48]	; (800ba70 <xTaskPriorityDisinherit+0xd0>)
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba44:	4613      	mov	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4a09      	ldr	r2, [pc, #36]	; (800ba74 <xTaskPriorityDisinherit+0xd4>)
 800ba4e:	441a      	add	r2, r3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4619      	mov	r1, r3
 800ba56:	4610      	mov	r0, r2
 800ba58:	f7fd fe0f 	bl	800967a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba60:	697b      	ldr	r3, [r7, #20]
	}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	2400439c 	.word	0x2400439c
 800ba70:	24004878 	.word	0x24004878
 800ba74:	240043a0 	.word	0x240043a0

0800ba78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba86:	2301      	movs	r3, #1
 800ba88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d068      	beq.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d109      	bne.n	800baac <vTaskPriorityDisinheritAfterTimeout+0x34>
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	e7fe      	b.n	800baaa <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d902      	bls.n	800babc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	61fb      	str	r3, [r7, #28]
 800baba:	e002      	b.n	800bac2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac6:	69fa      	ldr	r2, [r7, #28]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d04a      	beq.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d145      	bne.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bad6:	4b25      	ldr	r3, [pc, #148]	; (800bb6c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	69ba      	ldr	r2, [r7, #24]
 800badc:	429a      	cmp	r2, r3
 800bade:	d109      	bne.n	800baf4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60bb      	str	r3, [r7, #8]
 800baf2:	e7fe      	b.n	800baf2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	69fa      	ldr	r2, [r7, #28]
 800bafe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	db04      	blt.n	800bb12 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	6959      	ldr	r1, [r3, #20]
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4a13      	ldr	r2, [pc, #76]	; (800bb70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb22:	4413      	add	r3, r2
 800bb24:	4299      	cmp	r1, r3
 800bb26:	d11c      	bne.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fd fe01 	bl	8009734 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb36:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d903      	bls.n	800bb46 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	4a0c      	ldr	r2, [pc, #48]	; (800bb74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4a07      	ldr	r2, [pc, #28]	; (800bb70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb54:	441a      	add	r2, r3
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	3304      	adds	r3, #4
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	f7fd fd8c 	bl	800967a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb62:	bf00      	nop
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	2400439c 	.word	0x2400439c
 800bb70:	240043a0 	.word	0x240043a0
 800bb74:	24004878 	.word	0x24004878

0800bb78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb7c:	4b07      	ldr	r3, [pc, #28]	; (800bb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d004      	beq.n	800bb8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb84:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb8a:	3201      	adds	r2, #1
 800bb8c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bb8e:	4b03      	ldr	r3, [pc, #12]	; (800bb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb90:	681b      	ldr	r3, [r3, #0]
	}
 800bb92:	4618      	mov	r0, r3
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	2400439c 	.word	0x2400439c

0800bba0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbaa:	4b21      	ldr	r3, [pc, #132]	; (800bc30 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbb0:	4b20      	ldr	r3, [pc, #128]	; (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fd fdbc 	bl	8009734 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbc2:	d10a      	bne.n	800bbda <prvAddCurrentTaskToDelayedList+0x3a>
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbca:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4819      	ldr	r0, [pc, #100]	; (800bc38 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbd4:	f7fd fd51 	bl	800967a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbd8:	e026      	b.n	800bc28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4413      	add	r3, r2
 800bbe0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbe2:	4b14      	ldr	r3, [pc, #80]	; (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d209      	bcs.n	800bc06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbf2:	4b12      	ldr	r3, [pc, #72]	; (800bc3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f7fd fd5f 	bl	80096c2 <vListInsert>
}
 800bc04:	e010      	b.n	800bc28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc06:	4b0e      	ldr	r3, [pc, #56]	; (800bc40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	f7fd fd55 	bl	80096c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc18:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d202      	bcs.n	800bc28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc22:	4a08      	ldr	r2, [pc, #32]	; (800bc44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	6013      	str	r3, [r2, #0]
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	24004874 	.word	0x24004874
 800bc34:	2400439c 	.word	0x2400439c
 800bc38:	2400485c 	.word	0x2400485c
 800bc3c:	2400482c 	.word	0x2400482c
 800bc40:	24004828 	.word	0x24004828
 800bc44:	24004890 	.word	0x24004890

0800bc48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	; 0x28
 800bc4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc52:	f000 faff 	bl	800c254 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc56:	4b1c      	ldr	r3, [pc, #112]	; (800bcc8 <xTimerCreateTimerTask+0x80>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d021      	beq.n	800bca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc66:	1d3a      	adds	r2, r7, #4
 800bc68:	f107 0108 	add.w	r1, r7, #8
 800bc6c:	f107 030c 	add.w	r3, r7, #12
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fd fae5 	bl	8009240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	9202      	str	r2, [sp, #8]
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	2302      	movs	r3, #2
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	2300      	movs	r3, #0
 800bc86:	460a      	mov	r2, r1
 800bc88:	4910      	ldr	r1, [pc, #64]	; (800bccc <xTimerCreateTimerTask+0x84>)
 800bc8a:	4811      	ldr	r0, [pc, #68]	; (800bcd0 <xTimerCreateTimerTask+0x88>)
 800bc8c:	f7fe ffd8 	bl	800ac40 <xTaskCreateStatic>
 800bc90:	4602      	mov	r2, r0
 800bc92:	4b10      	ldr	r3, [pc, #64]	; (800bcd4 <xTimerCreateTimerTask+0x8c>)
 800bc94:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc96:	4b0f      	ldr	r3, [pc, #60]	; (800bcd4 <xTimerCreateTimerTask+0x8c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d109      	bne.n	800bcbc <xTimerCreateTimerTask+0x74>
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	613b      	str	r3, [r7, #16]
 800bcba:	e7fe      	b.n	800bcba <xTimerCreateTimerTask+0x72>
	return xReturn;
 800bcbc:	697b      	ldr	r3, [r7, #20]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3718      	adds	r7, #24
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	240048cc 	.word	0x240048cc
 800bccc:	08017b74 	.word	0x08017b74
 800bcd0:	0800be09 	.word	0x0800be09
 800bcd4:	240048d0 	.word	0x240048d0

0800bcd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	; 0x28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
 800bce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d109      	bne.n	800bd04 <xTimerGenericCommand+0x2c>
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	623b      	str	r3, [r7, #32]
 800bd02:	e7fe      	b.n	800bd02 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd04:	4b19      	ldr	r3, [pc, #100]	; (800bd6c <xTimerGenericCommand+0x94>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d02a      	beq.n	800bd62 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	dc18      	bgt.n	800bd50 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd1e:	f7ff fdb9 	bl	800b894 <xTaskGetSchedulerState>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d109      	bne.n	800bd3c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd28:	4b10      	ldr	r3, [pc, #64]	; (800bd6c <xTimerGenericCommand+0x94>)
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	f107 0110 	add.w	r1, r7, #16
 800bd30:	2300      	movs	r3, #0
 800bd32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd34:	f7fe f9c4 	bl	800a0c0 <xQueueGenericSend>
 800bd38:	6278      	str	r0, [r7, #36]	; 0x24
 800bd3a:	e012      	b.n	800bd62 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <xTimerGenericCommand+0x94>)
 800bd3e:	6818      	ldr	r0, [r3, #0]
 800bd40:	f107 0110 	add.w	r1, r7, #16
 800bd44:	2300      	movs	r3, #0
 800bd46:	2200      	movs	r2, #0
 800bd48:	f7fe f9ba 	bl	800a0c0 <xQueueGenericSend>
 800bd4c:	6278      	str	r0, [r7, #36]	; 0x24
 800bd4e:	e008      	b.n	800bd62 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd50:	4b06      	ldr	r3, [pc, #24]	; (800bd6c <xTimerGenericCommand+0x94>)
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	f107 0110 	add.w	r1, r7, #16
 800bd58:	2300      	movs	r3, #0
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	f7fe faaa 	bl	800a2b4 <xQueueGenericSendFromISR>
 800bd60:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3728      	adds	r7, #40	; 0x28
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	240048cc 	.word	0x240048cc

0800bd70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af02      	add	r7, sp, #8
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7a:	4b22      	ldr	r3, [pc, #136]	; (800be04 <prvProcessExpiredTimer+0x94>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	3304      	adds	r3, #4
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fd fcd3 	bl	8009734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd94:	f003 0304 	and.w	r3, r3, #4
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d021      	beq.n	800bde0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	699a      	ldr	r2, [r3, #24]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	18d1      	adds	r1, r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	6978      	ldr	r0, [r7, #20]
 800bdaa:	f000 f8d1 	bl	800bf50 <prvInsertTimerInActiveList>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d01e      	beq.n	800bdf2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	6978      	ldr	r0, [r7, #20]
 800bdc0:	f7ff ff8a 	bl	800bcd8 <xTimerGenericCommand>
 800bdc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d112      	bne.n	800bdf2 <prvProcessExpiredTimer+0x82>
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	60fb      	str	r3, [r7, #12]
 800bdde:	e7fe      	b.n	800bdde <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde6:	f023 0301 	bic.w	r3, r3, #1
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	6978      	ldr	r0, [r7, #20]
 800bdf8:	4798      	blx	r3
}
 800bdfa:	bf00      	nop
 800bdfc:	3718      	adds	r7, #24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	240048c4 	.word	0x240048c4

0800be08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be10:	f107 0308 	add.w	r3, r7, #8
 800be14:	4618      	mov	r0, r3
 800be16:	f000 f857 	bl	800bec8 <prvGetNextExpireTime>
 800be1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	4619      	mov	r1, r3
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 f803 	bl	800be2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be26:	f000 f8d5 	bl	800bfd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be2a:	e7f1      	b.n	800be10 <prvTimerTask+0x8>

0800be2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be36:	f7ff f939 	bl	800b0ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be3a:	f107 0308 	add.w	r3, r7, #8
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 f866 	bl	800bf10 <prvSampleTimeNow>
 800be44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d130      	bne.n	800beae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10a      	bne.n	800be68 <prvProcessTimerOrBlockTask+0x3c>
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	429a      	cmp	r2, r3
 800be58:	d806      	bhi.n	800be68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be5a:	f7ff f935 	bl	800b0c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be5e:	68f9      	ldr	r1, [r7, #12]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff ff85 	bl	800bd70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be66:	e024      	b.n	800beb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d008      	beq.n	800be80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be6e:	4b13      	ldr	r3, [pc, #76]	; (800bebc <prvProcessTimerOrBlockTask+0x90>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <prvProcessTimerOrBlockTask+0x50>
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <prvProcessTimerOrBlockTask+0x52>
 800be7c:	2300      	movs	r3, #0
 800be7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be80:	4b0f      	ldr	r3, [pc, #60]	; (800bec0 <prvProcessTimerOrBlockTask+0x94>)
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	4619      	mov	r1, r3
 800be8e:	f7fe fea3 	bl	800abd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be92:	f7ff f919 	bl	800b0c8 <xTaskResumeAll>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be9c:	4b09      	ldr	r3, [pc, #36]	; (800bec4 <prvProcessTimerOrBlockTask+0x98>)
 800be9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	f3bf 8f6f 	isb	sy
}
 800beac:	e001      	b.n	800beb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800beae:	f7ff f90b 	bl	800b0c8 <xTaskResumeAll>
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	240048c8 	.word	0x240048c8
 800bec0:	240048cc 	.word	0x240048cc
 800bec4:	e000ed04 	.word	0xe000ed04

0800bec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bed0:	4b0e      	ldr	r3, [pc, #56]	; (800bf0c <prvGetNextExpireTime+0x44>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <prvGetNextExpireTime+0x16>
 800beda:	2201      	movs	r2, #1
 800bedc:	e000      	b.n	800bee0 <prvGetNextExpireTime+0x18>
 800bede:	2200      	movs	r2, #0
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d105      	bne.n	800bef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800beec:	4b07      	ldr	r3, [pc, #28]	; (800bf0c <prvGetNextExpireTime+0x44>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60fb      	str	r3, [r7, #12]
 800bef6:	e001      	b.n	800befc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800befc:	68fb      	ldr	r3, [r7, #12]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	240048c4 	.word	0x240048c4

0800bf10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf18:	f7ff f972 	bl	800b200 <xTaskGetTickCount>
 800bf1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <prvSampleTimeNow+0x3c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d205      	bcs.n	800bf34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf28:	f000 f930 	bl	800c18c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	e002      	b.n	800bf3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf3a:	4a04      	ldr	r2, [pc, #16]	; (800bf4c <prvSampleTimeNow+0x3c>)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf40:	68fb      	ldr	r3, [r7, #12]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	240048d4 	.word	0x240048d4

0800bf50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
 800bf5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d812      	bhi.n	800bf9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	1ad2      	subs	r2, r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d302      	bcc.n	800bf8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	617b      	str	r3, [r7, #20]
 800bf88:	e01b      	b.n	800bfc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf8a:	4b10      	ldr	r3, [pc, #64]	; (800bfcc <prvInsertTimerInActiveList+0x7c>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3304      	adds	r3, #4
 800bf92:	4619      	mov	r1, r3
 800bf94:	4610      	mov	r0, r2
 800bf96:	f7fd fb94 	bl	80096c2 <vListInsert>
 800bf9a:	e012      	b.n	800bfc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d206      	bcs.n	800bfb2 <prvInsertTimerInActiveList+0x62>
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d302      	bcc.n	800bfb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfac:	2301      	movs	r3, #1
 800bfae:	617b      	str	r3, [r7, #20]
 800bfb0:	e007      	b.n	800bfc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfb2:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <prvInsertTimerInActiveList+0x80>)
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	4619      	mov	r1, r3
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	f7fd fb80 	bl	80096c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfc2:	697b      	ldr	r3, [r7, #20]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	240048c8 	.word	0x240048c8
 800bfd0:	240048c4 	.word	0x240048c4

0800bfd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08e      	sub	sp, #56	; 0x38
 800bfd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfda:	e0c6      	b.n	800c16a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	da17      	bge.n	800c012 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfe2:	1d3b      	adds	r3, r7, #4
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d109      	bne.n	800c002 <prvProcessReceivedCommands+0x2e>
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	61fb      	str	r3, [r7, #28]
 800c000:	e7fe      	b.n	800c000 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c008:	6850      	ldr	r0, [r2, #4]
 800c00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00c:	6892      	ldr	r2, [r2, #8]
 800c00e:	4611      	mov	r1, r2
 800c010:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f2c0 80a7 	blt.w	800c168 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d004      	beq.n	800c030 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c028:	3304      	adds	r3, #4
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fd fb82 	bl	8009734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c030:	463b      	mov	r3, r7
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff ff6c 	bl	800bf10 <prvSampleTimeNow>
 800c038:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	f200 8094 	bhi.w	800c16a <prvProcessReceivedCommands+0x196>
 800c042:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <prvProcessReceivedCommands+0x74>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c071 	.word	0x0800c071
 800c04c:	0800c071 	.word	0x0800c071
 800c050:	0800c071 	.word	0x0800c071
 800c054:	0800c0e3 	.word	0x0800c0e3
 800c058:	0800c0f7 	.word	0x0800c0f7
 800c05c:	0800c13f 	.word	0x0800c13f
 800c060:	0800c071 	.word	0x0800c071
 800c064:	0800c071 	.word	0x0800c071
 800c068:	0800c0e3 	.word	0x0800c0e3
 800c06c:	0800c0f7 	.word	0x0800c0f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	18d1      	adds	r1, r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c090:	f7ff ff5e 	bl	800bf50 <prvInsertTimerInActiveList>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d067      	beq.n	800c16a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d05c      	beq.n	800c16a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	441a      	add	r2, r3
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0c2:	f7ff fe09 	bl	800bcd8 <xTimerGenericCommand>
 800c0c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d14d      	bne.n	800c16a <prvProcessReceivedCommands+0x196>
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	61bb      	str	r3, [r7, #24]
 800c0e0:	e7fe      	b.n	800c0e0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0f4:	e039      	b.n	800c16a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0fc:	f043 0301 	orr.w	r3, r3, #1
 800c100:	b2da      	uxtb	r2, r3
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d109      	bne.n	800c12a <prvProcessReceivedCommands+0x156>
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	e7fe      	b.n	800c128 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	699a      	ldr	r2, [r3, #24]
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	18d1      	adds	r1, r2, r3
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c138:	f7ff ff0a 	bl	800bf50 <prvInsertTimerInActiveList>
					break;
 800c13c:	e015      	b.n	800c16a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c144:	f003 0302 	and.w	r3, r3, #2
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c14e:	f7fd f953 	bl	80093f8 <vPortFree>
 800c152:	e00a      	b.n	800c16a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c15a:	f023 0301 	bic.w	r3, r3, #1
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c166:	e000      	b.n	800c16a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c168:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c16a:	4b07      	ldr	r3, [pc, #28]	; (800c188 <prvProcessReceivedCommands+0x1b4>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	1d39      	adds	r1, r7, #4
 800c170:	2200      	movs	r2, #0
 800c172:	4618      	mov	r0, r3
 800c174:	f7fe f932 	bl	800a3dc <xQueueReceive>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f47f af2e 	bne.w	800bfdc <prvProcessReceivedCommands+0x8>
	}
}
 800c180:	bf00      	nop
 800c182:	3730      	adds	r7, #48	; 0x30
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	240048cc 	.word	0x240048cc

0800c18c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c192:	e047      	b.n	800c224 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c194:	4b2d      	ldr	r3, [pc, #180]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c19e:	4b2b      	ldr	r3, [pc, #172]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fd fac1 	bl	8009734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d02d      	beq.n	800c224 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d90e      	bls.n	800c1f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1e6:	4b19      	ldr	r3, [pc, #100]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	f7fd fa66 	bl	80096c2 <vListInsert>
 800c1f6:	e015      	b.n	800c224 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	2100      	movs	r1, #0
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7ff fd68 	bl	800bcd8 <xTimerGenericCommand>
 800c208:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <prvSwitchTimerLists+0x98>
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	603b      	str	r3, [r7, #0]
 800c222:	e7fe      	b.n	800c222 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c224:	4b09      	ldr	r3, [pc, #36]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1b2      	bne.n	800c194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c22e:	4b07      	ldr	r3, [pc, #28]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c234:	4b06      	ldr	r3, [pc, #24]	; (800c250 <prvSwitchTimerLists+0xc4>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a04      	ldr	r2, [pc, #16]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c23a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c23c:	4a04      	ldr	r2, [pc, #16]	; (800c250 <prvSwitchTimerLists+0xc4>)
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	6013      	str	r3, [r2, #0]
}
 800c242:	bf00      	nop
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	240048c4 	.word	0x240048c4
 800c250:	240048c8 	.word	0x240048c8

0800c254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c25a:	f7fd fbbf 	bl	80099dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c25e:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d120      	bne.n	800c2a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c266:	4814      	ldr	r0, [pc, #80]	; (800c2b8 <prvCheckForValidListAndQueue+0x64>)
 800c268:	f7fd f9da 	bl	8009620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c26c:	4813      	ldr	r0, [pc, #76]	; (800c2bc <prvCheckForValidListAndQueue+0x68>)
 800c26e:	f7fd f9d7 	bl	8009620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c272:	4b13      	ldr	r3, [pc, #76]	; (800c2c0 <prvCheckForValidListAndQueue+0x6c>)
 800c274:	4a10      	ldr	r2, [pc, #64]	; (800c2b8 <prvCheckForValidListAndQueue+0x64>)
 800c276:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c278:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <prvCheckForValidListAndQueue+0x70>)
 800c27a:	4a10      	ldr	r2, [pc, #64]	; (800c2bc <prvCheckForValidListAndQueue+0x68>)
 800c27c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c27e:	2300      	movs	r3, #0
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <prvCheckForValidListAndQueue+0x74>)
 800c284:	4a11      	ldr	r2, [pc, #68]	; (800c2cc <prvCheckForValidListAndQueue+0x78>)
 800c286:	2110      	movs	r1, #16
 800c288:	200a      	movs	r0, #10
 800c28a:	f7fd fd29 	bl	8009ce0 <xQueueGenericCreateStatic>
 800c28e:	4602      	mov	r2, r0
 800c290:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c292:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c294:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d005      	beq.n	800c2a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	490b      	ldr	r1, [pc, #44]	; (800c2d0 <prvCheckForValidListAndQueue+0x7c>)
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe fc46 	bl	800ab34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2a8:	f7fd fbc6 	bl	8009a38 <vPortExitCritical>
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	240048cc 	.word	0x240048cc
 800c2b8:	2400489c 	.word	0x2400489c
 800c2bc:	240048b0 	.word	0x240048b0
 800c2c0:	240048c4 	.word	0x240048c4
 800c2c4:	240048c8 	.word	0x240048c8
 800c2c8:	24004978 	.word	0x24004978
 800c2cc:	240048d8 	.word	0x240048d8
 800c2d0:	08017b7c 	.word	0x08017b7c

0800c2d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	021b      	lsls	r3, r3, #8
 800c2e2:	b21a      	sxth	r2, r3
 800c2e4:	88fb      	ldrh	r3, [r7, #6]
 800c2e6:	0a1b      	lsrs	r3, r3, #8
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	b21b      	sxth	r3, r3
 800c2f0:	b29b      	uxth	r3, r3
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c2fe:	b480      	push	{r7}
 800c300:	b083      	sub	sp, #12
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	061a      	lsls	r2, r3, #24
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	021b      	lsls	r3, r3, #8
 800c30e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c312:	431a      	orrs	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	0a1b      	lsrs	r3, r3, #8
 800c318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	0e1b      	lsrs	r3, r3, #24
 800c322:	4313      	orrs	r3, r2
}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c338:	4915      	ldr	r1, [pc, #84]	; (800c390 <etharp_free_entry+0x60>)
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4613      	mov	r3, r2
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	440b      	add	r3, r1
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d013      	beq.n	800c374 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c34c:	4910      	ldr	r1, [pc, #64]	; (800c390 <etharp_free_entry+0x60>)
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	4613      	mov	r3, r2
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	4413      	add	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	440b      	add	r3, r1
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f003 ff4f 	bl	8010200 <pbuf_free>
    arp_table[i].q = NULL;
 800c362:	490b      	ldr	r1, [pc, #44]	; (800c390 <etharp_free_entry+0x60>)
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4613      	mov	r3, r2
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	4413      	add	r3, r2
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	440b      	add	r3, r1
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c374:	4906      	ldr	r1, [pc, #24]	; (800c390 <etharp_free_entry+0x60>)
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	4413      	add	r3, r2
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	440b      	add	r3, r1
 800c382:	3314      	adds	r3, #20
 800c384:	2200      	movs	r2, #0
 800c386:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	240049c8 	.word	0x240049c8

0800c394 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c39a:	2300      	movs	r3, #0
 800c39c:	607b      	str	r3, [r7, #4]
 800c39e:	e096      	b.n	800c4ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c3a0:	494f      	ldr	r1, [pc, #316]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	440b      	add	r3, r1
 800c3ae:	3314      	adds	r3, #20
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 8086 	beq.w	800c4c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c3bc:	4948      	ldr	r1, [pc, #288]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	4413      	add	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	440b      	add	r3, r1
 800c3ca:	3312      	adds	r3, #18
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	b298      	uxth	r0, r3
 800c3d2:	4943      	ldr	r1, [pc, #268]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	440b      	add	r3, r1
 800c3e0:	3312      	adds	r3, #18
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c3e6:	493e      	ldr	r1, [pc, #248]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	005b      	lsls	r3, r3, #1
 800c3ee:	4413      	add	r3, r2
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	440b      	add	r3, r1
 800c3f4:	3312      	adds	r3, #18
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c3fc:	d215      	bcs.n	800c42a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c3fe:	4938      	ldr	r1, [pc, #224]	; (800c4e0 <etharp_tmr+0x14c>)
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	4613      	mov	r3, r2
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	4413      	add	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	440b      	add	r3, r1
 800c40c:	3314      	adds	r3, #20
 800c40e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c410:	2b01      	cmp	r3, #1
 800c412:	d10e      	bne.n	800c432 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c414:	4932      	ldr	r1, [pc, #200]	; (800c4e0 <etharp_tmr+0x14c>)
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	4613      	mov	r3, r2
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	4413      	add	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	440b      	add	r3, r1
 800c422:	3312      	adds	r3, #18
 800c424:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c426:	2b04      	cmp	r3, #4
 800c428:	d903      	bls.n	800c432 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff ff80 	bl	800c330 <etharp_free_entry>
 800c430:	e04a      	b.n	800c4c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c432:	492b      	ldr	r1, [pc, #172]	; (800c4e0 <etharp_tmr+0x14c>)
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	4613      	mov	r3, r2
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	4413      	add	r3, r2
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	440b      	add	r3, r1
 800c440:	3314      	adds	r3, #20
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b03      	cmp	r3, #3
 800c446:	d10a      	bne.n	800c45e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c448:	4925      	ldr	r1, [pc, #148]	; (800c4e0 <etharp_tmr+0x14c>)
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	4613      	mov	r3, r2
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	4413      	add	r3, r2
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	440b      	add	r3, r1
 800c456:	3314      	adds	r3, #20
 800c458:	2204      	movs	r2, #4
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	e034      	b.n	800c4c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c45e:	4920      	ldr	r1, [pc, #128]	; (800c4e0 <etharp_tmr+0x14c>)
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	4613      	mov	r3, r2
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	4413      	add	r3, r2
 800c468:	00db      	lsls	r3, r3, #3
 800c46a:	440b      	add	r3, r1
 800c46c:	3314      	adds	r3, #20
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b04      	cmp	r3, #4
 800c472:	d10a      	bne.n	800c48a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c474:	491a      	ldr	r1, [pc, #104]	; (800c4e0 <etharp_tmr+0x14c>)
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	4613      	mov	r3, r2
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	4413      	add	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	440b      	add	r3, r1
 800c482:	3314      	adds	r3, #20
 800c484:	2202      	movs	r2, #2
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	e01e      	b.n	800c4c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c48a:	4915      	ldr	r1, [pc, #84]	; (800c4e0 <etharp_tmr+0x14c>)
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	4613      	mov	r3, r2
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	4413      	add	r3, r2
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	440b      	add	r3, r1
 800c498:	3314      	adds	r3, #20
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d113      	bne.n	800c4c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c4a0:	490f      	ldr	r1, [pc, #60]	; (800c4e0 <etharp_tmr+0x14c>)
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	4413      	add	r3, r2
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	440b      	add	r3, r1
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	4a08      	ldr	r2, [pc, #32]	; (800c4e0 <etharp_tmr+0x14c>)
 800c4be:	4413      	add	r3, r2
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f000 fe6e 	bl	800d1a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	607b      	str	r3, [r7, #4]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b09      	cmp	r3, #9
 800c4d2:	f77f af65 	ble.w	800c3a0 <etharp_tmr+0xc>
      }
    }
  }
}
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	240049c8 	.word	0x240049c8

0800c4e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c4f2:	230a      	movs	r3, #10
 800c4f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c4f6:	230a      	movs	r3, #10
 800c4f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c502:	230a      	movs	r3, #10
 800c504:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	83bb      	strh	r3, [r7, #28]
 800c50a:	2300      	movs	r3, #0
 800c50c:	837b      	strh	r3, [r7, #26]
 800c50e:	2300      	movs	r3, #0
 800c510:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c512:	2300      	movs	r3, #0
 800c514:	843b      	strh	r3, [r7, #32]
 800c516:	e0ae      	b.n	800c676 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c51c:	49a6      	ldr	r1, [pc, #664]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c51e:	4613      	mov	r3, r2
 800c520:	005b      	lsls	r3, r3, #1
 800c522:	4413      	add	r3, r2
 800c524:	00db      	lsls	r3, r3, #3
 800c526:	440b      	add	r3, r1
 800c528:	3314      	adds	r3, #20
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c52e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c532:	2b0a      	cmp	r3, #10
 800c534:	d105      	bne.n	800c542 <etharp_find_entry+0x5e>
 800c536:	7dfb      	ldrb	r3, [r7, #23]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d102      	bne.n	800c542 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c53c:	8c3b      	ldrh	r3, [r7, #32]
 800c53e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c540:	e095      	b.n	800c66e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c542:	7dfb      	ldrb	r3, [r7, #23]
 800c544:	2b00      	cmp	r3, #0
 800c546:	f000 8092 	beq.w	800c66e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d009      	beq.n	800c564 <etharp_find_entry+0x80>
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d806      	bhi.n	800c564 <etharp_find_entry+0x80>
 800c556:	4b99      	ldr	r3, [pc, #612]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c558:	f44f 7292 	mov.w	r2, #292	; 0x124
 800c55c:	4998      	ldr	r1, [pc, #608]	; (800c7c0 <etharp_find_entry+0x2dc>)
 800c55e:	4899      	ldr	r0, [pc, #612]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c560:	f00a fb8c 	bl	8016c7c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d020      	beq.n	800c5ac <etharp_find_entry+0xc8>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6819      	ldr	r1, [r3, #0]
 800c56e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c572:	4891      	ldr	r0, [pc, #580]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c574:	4613      	mov	r3, r2
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	4413      	add	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	4403      	add	r3, r0
 800c57e:	3304      	adds	r3, #4
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4299      	cmp	r1, r3
 800c584:	d112      	bne.n	800c5ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00c      	beq.n	800c5a6 <etharp_find_entry+0xc2>
 800c58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c590:	4989      	ldr	r1, [pc, #548]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	440b      	add	r3, r1
 800c59c:	3308      	adds	r3, #8
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d102      	bne.n	800c5ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c5a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5aa:	e100      	b.n	800c7ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c5ac:	7dfb      	ldrb	r3, [r7, #23]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d140      	bne.n	800c634 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c5b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5b6:	4980      	ldr	r1, [pc, #512]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	4413      	add	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	440b      	add	r3, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d01a      	beq.n	800c5fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c5c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5cc:	497a      	ldr	r1, [pc, #488]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	4413      	add	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3312      	adds	r3, #18
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	8bba      	ldrh	r2, [r7, #28]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d845      	bhi.n	800c66e <etharp_find_entry+0x18a>
            old_queue = i;
 800c5e2:	8c3b      	ldrh	r3, [r7, #32]
 800c5e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c5e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5ea:	4973      	ldr	r1, [pc, #460]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	4413      	add	r3, r2
 800c5f2:	00db      	lsls	r3, r3, #3
 800c5f4:	440b      	add	r3, r1
 800c5f6:	3312      	adds	r3, #18
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	83bb      	strh	r3, [r7, #28]
 800c5fc:	e037      	b.n	800c66e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c5fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c602:	496d      	ldr	r1, [pc, #436]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	440b      	add	r3, r1
 800c60e:	3312      	adds	r3, #18
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	8b7a      	ldrh	r2, [r7, #26]
 800c614:	429a      	cmp	r2, r3
 800c616:	d82a      	bhi.n	800c66e <etharp_find_entry+0x18a>
            old_pending = i;
 800c618:	8c3b      	ldrh	r3, [r7, #32]
 800c61a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c61c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c620:	4965      	ldr	r1, [pc, #404]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c622:	4613      	mov	r3, r2
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	4413      	add	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	440b      	add	r3, r1
 800c62c:	3312      	adds	r3, #18
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	837b      	strh	r3, [r7, #26]
 800c632:	e01c      	b.n	800c66e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c634:	7dfb      	ldrb	r3, [r7, #23]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d919      	bls.n	800c66e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c63a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c63e:	495e      	ldr	r1, [pc, #376]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c640:	4613      	mov	r3, r2
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	440b      	add	r3, r1
 800c64a:	3312      	adds	r3, #18
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	8b3a      	ldrh	r2, [r7, #24]
 800c650:	429a      	cmp	r2, r3
 800c652:	d80c      	bhi.n	800c66e <etharp_find_entry+0x18a>
            old_stable = i;
 800c654:	8c3b      	ldrh	r3, [r7, #32]
 800c656:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c658:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c65c:	4956      	ldr	r1, [pc, #344]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c65e:	4613      	mov	r3, r2
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	4413      	add	r3, r2
 800c664:	00db      	lsls	r3, r3, #3
 800c666:	440b      	add	r3, r1
 800c668:	3312      	adds	r3, #18
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c66e:	8c3b      	ldrh	r3, [r7, #32]
 800c670:	3301      	adds	r3, #1
 800c672:	b29b      	uxth	r3, r3
 800c674:	843b      	strh	r3, [r7, #32]
 800c676:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c67a:	2b09      	cmp	r3, #9
 800c67c:	f77f af4c 	ble.w	800c518 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c680:	7afb      	ldrb	r3, [r7, #11]
 800c682:	f003 0302 	and.w	r3, r3, #2
 800c686:	2b00      	cmp	r3, #0
 800c688:	d108      	bne.n	800c69c <etharp_find_entry+0x1b8>
 800c68a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c68e:	2b0a      	cmp	r3, #10
 800c690:	d107      	bne.n	800c6a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c692:	7afb      	ldrb	r3, [r7, #11]
 800c694:	f003 0301 	and.w	r3, r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d102      	bne.n	800c6a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c69c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6a0:	e085      	b.n	800c7ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c6a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6a6:	2b09      	cmp	r3, #9
 800c6a8:	dc02      	bgt.n	800c6b0 <etharp_find_entry+0x1cc>
    i = empty;
 800c6aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6ac:	843b      	strh	r3, [r7, #32]
 800c6ae:	e039      	b.n	800c724 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c6b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c6b4:	2b09      	cmp	r3, #9
 800c6b6:	dc14      	bgt.n	800c6e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c6b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c6bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6c0:	493d      	ldr	r1, [pc, #244]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	440b      	add	r3, r1
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d018      	beq.n	800c704 <etharp_find_entry+0x220>
 800c6d2:	4b3a      	ldr	r3, [pc, #232]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c6d4:	f240 126d 	movw	r2, #365	; 0x16d
 800c6d8:	493b      	ldr	r1, [pc, #236]	; (800c7c8 <etharp_find_entry+0x2e4>)
 800c6da:	483a      	ldr	r0, [pc, #232]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c6dc:	f00a face 	bl	8016c7c <iprintf>
 800c6e0:	e010      	b.n	800c704 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c6e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c6e6:	2b09      	cmp	r3, #9
 800c6e8:	dc02      	bgt.n	800c6f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c6ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6ec:	843b      	strh	r3, [r7, #32]
 800c6ee:	e009      	b.n	800c704 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c6f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c6f4:	2b09      	cmp	r3, #9
 800c6f6:	dc02      	bgt.n	800c6fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c6f8:	8bfb      	ldrh	r3, [r7, #30]
 800c6fa:	843b      	strh	r3, [r7, #32]
 800c6fc:	e002      	b.n	800c704 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c6fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c702:	e054      	b.n	800c7ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c704:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c708:	2b09      	cmp	r3, #9
 800c70a:	dd06      	ble.n	800c71a <etharp_find_entry+0x236>
 800c70c:	4b2b      	ldr	r3, [pc, #172]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c70e:	f240 127f 	movw	r2, #383	; 0x17f
 800c712:	492e      	ldr	r1, [pc, #184]	; (800c7cc <etharp_find_entry+0x2e8>)
 800c714:	482b      	ldr	r0, [pc, #172]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c716:	f00a fab1 	bl	8016c7c <iprintf>
    etharp_free_entry(i);
 800c71a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff fe06 	bl	800c330 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c724:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c728:	2b09      	cmp	r3, #9
 800c72a:	dd06      	ble.n	800c73a <etharp_find_entry+0x256>
 800c72c:	4b23      	ldr	r3, [pc, #140]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c72e:	f240 1283 	movw	r2, #387	; 0x183
 800c732:	4926      	ldr	r1, [pc, #152]	; (800c7cc <etharp_find_entry+0x2e8>)
 800c734:	4823      	ldr	r0, [pc, #140]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c736:	f00a faa1 	bl	8016c7c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c73a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c73e:	491e      	ldr	r1, [pc, #120]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c740:	4613      	mov	r3, r2
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	4413      	add	r3, r2
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	440b      	add	r3, r1
 800c74a:	3314      	adds	r3, #20
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d006      	beq.n	800c760 <etharp_find_entry+0x27c>
 800c752:	4b1a      	ldr	r3, [pc, #104]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c754:	f240 1285 	movw	r2, #389	; 0x185
 800c758:	491d      	ldr	r1, [pc, #116]	; (800c7d0 <etharp_find_entry+0x2ec>)
 800c75a:	481a      	ldr	r0, [pc, #104]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c75c:	f00a fa8e 	bl	8016c7c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00b      	beq.n	800c77e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6819      	ldr	r1, [r3, #0]
 800c76e:	4812      	ldr	r0, [pc, #72]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c770:	4613      	mov	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4413      	add	r3, r2
 800c776:	00db      	lsls	r3, r3, #3
 800c778:	4403      	add	r3, r0
 800c77a:	3304      	adds	r3, #4
 800c77c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c77e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c782:	490d      	ldr	r1, [pc, #52]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	3312      	adds	r3, #18
 800c790:	2200      	movs	r2, #0
 800c792:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c798:	4907      	ldr	r1, [pc, #28]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c7aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3728      	adds	r7, #40	; 0x28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	240049c8 	.word	0x240049c8
 800c7bc:	08017b84 	.word	0x08017b84
 800c7c0:	08017bf0 	.word	0x08017bf0
 800c7c4:	08017c30 	.word	0x08017c30
 800c7c8:	08017c58 	.word	0x08017c58
 800c7cc:	08017c70 	.word	0x08017c70
 800c7d0:	08017c84 	.word	0x08017c84

0800c7d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af02      	add	r7, sp, #8
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
 800c7e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7e8:	2b06      	cmp	r3, #6
 800c7ea:	d006      	beq.n	800c7fa <etharp_update_arp_entry+0x26>
 800c7ec:	4b48      	ldr	r3, [pc, #288]	; (800c910 <etharp_update_arp_entry+0x13c>)
 800c7ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c7f2:	4948      	ldr	r1, [pc, #288]	; (800c914 <etharp_update_arp_entry+0x140>)
 800c7f4:	4848      	ldr	r0, [pc, #288]	; (800c918 <etharp_update_arp_entry+0x144>)
 800c7f6:	f00a fa41 	bl	8016c7c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d012      	beq.n	800c826 <etharp_update_arp_entry+0x52>
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68f9      	ldr	r1, [r7, #12]
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 facc 	bl	800ddac <ip4_addr_isbroadcast_u32>
 800c814:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c816:	2b00      	cmp	r3, #0
 800c818:	d105      	bne.n	800c826 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c822:	2be0      	cmp	r3, #224	; 0xe0
 800c824:	d102      	bne.n	800c82c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c826:	f06f 030f 	mvn.w	r3, #15
 800c82a:	e06c      	b.n	800c906 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	4619      	mov	r1, r3
 800c832:	68b8      	ldr	r0, [r7, #8]
 800c834:	f7ff fe56 	bl	800c4e4 <etharp_find_entry>
 800c838:	4603      	mov	r3, r0
 800c83a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c83c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c840:	2b00      	cmp	r3, #0
 800c842:	da02      	bge.n	800c84a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c844:	8afb      	ldrh	r3, [r7, #22]
 800c846:	b25b      	sxtb	r3, r3
 800c848:	e05d      	b.n	800c906 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c84a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c84e:	4933      	ldr	r1, [pc, #204]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c850:	4613      	mov	r3, r2
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	4413      	add	r3, r2
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	440b      	add	r3, r1
 800c85a:	3314      	adds	r3, #20
 800c85c:	2202      	movs	r2, #2
 800c85e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c860:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c864:	492d      	ldr	r1, [pc, #180]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c866:	4613      	mov	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	4413      	add	r3, r2
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	440b      	add	r3, r1
 800c870:	3308      	adds	r3, #8
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c876:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	3308      	adds	r3, #8
 800c884:	4a25      	ldr	r2, [pc, #148]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c886:	4413      	add	r3, r2
 800c888:	3304      	adds	r3, #4
 800c88a:	2206      	movs	r2, #6
 800c88c:	6879      	ldr	r1, [r7, #4]
 800c88e:	4618      	mov	r0, r3
 800c890:	f00a f9e1 	bl	8016c56 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c894:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c898:	4920      	ldr	r1, [pc, #128]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c89a:	4613      	mov	r3, r2
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	4413      	add	r3, r2
 800c8a0:	00db      	lsls	r3, r3, #3
 800c8a2:	440b      	add	r3, r1
 800c8a4:	3312      	adds	r3, #18
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c8aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8ae:	491b      	ldr	r1, [pc, #108]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	4413      	add	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	440b      	add	r3, r1
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d021      	beq.n	800c904 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c8c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8c4:	4915      	ldr	r1, [pc, #84]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	440b      	add	r3, r1
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c8d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8d8:	4910      	ldr	r1, [pc, #64]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c8da:	4613      	mov	r3, r2
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	4413      	add	r3, r2
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	440b      	add	r3, r1
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c8ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6939      	ldr	r1, [r7, #16]
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f000 fcf3 	bl	800d2e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c8fe:	6938      	ldr	r0, [r7, #16]
 800c900:	f003 fc7e 	bl	8010200 <pbuf_free>
  }
  return ERR_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	08017b84 	.word	0x08017b84
 800c914:	08017cb0 	.word	0x08017cb0
 800c918:	08017c30 	.word	0x08017c30
 800c91c:	240049c8 	.word	0x240049c8

0800c920 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c928:	2300      	movs	r3, #0
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	e01e      	b.n	800c96c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c92e:	4913      	ldr	r1, [pc, #76]	; (800c97c <etharp_cleanup_netif+0x5c>)
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	4613      	mov	r3, r2
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	4413      	add	r3, r2
 800c938:	00db      	lsls	r3, r3, #3
 800c93a:	440b      	add	r3, r1
 800c93c:	3314      	adds	r3, #20
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c942:	7afb      	ldrb	r3, [r7, #11]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00e      	beq.n	800c966 <etharp_cleanup_netif+0x46>
 800c948:	490c      	ldr	r1, [pc, #48]	; (800c97c <etharp_cleanup_netif+0x5c>)
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	4613      	mov	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4413      	add	r3, r2
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	440b      	add	r3, r1
 800c956:	3308      	adds	r3, #8
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d102      	bne.n	800c966 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff fce5 	bl	800c330 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b09      	cmp	r3, #9
 800c970:	dddd      	ble.n	800c92e <etharp_cleanup_netif+0xe>
    }
  }
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	240049c8 	.word	0x240049c8

0800c980 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c980:	b5b0      	push	{r4, r5, r7, lr}
 800c982:	b08a      	sub	sp, #40	; 0x28
 800c984:	af04      	add	r7, sp, #16
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d107      	bne.n	800c9a0 <etharp_input+0x20>
 800c990:	4b3d      	ldr	r3, [pc, #244]	; (800ca88 <etharp_input+0x108>)
 800c992:	f240 228a 	movw	r2, #650	; 0x28a
 800c996:	493d      	ldr	r1, [pc, #244]	; (800ca8c <etharp_input+0x10c>)
 800c998:	483d      	ldr	r0, [pc, #244]	; (800ca90 <etharp_input+0x110>)
 800c99a:	f00a f96f 	bl	8016c7c <iprintf>
 800c99e:	e06f      	b.n	800ca80 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	881b      	ldrh	r3, [r3, #0]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b0:	d10c      	bne.n	800c9cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9b6:	2b06      	cmp	r3, #6
 800c9b8:	d108      	bne.n	800c9cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d104      	bne.n	800c9cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	885b      	ldrh	r3, [r3, #2]
 800c9c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9c8:	2b08      	cmp	r3, #8
 800c9ca:	d003      	beq.n	800c9d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f003 fc17 	bl	8010200 <pbuf_free>
    return;
 800c9d2:	e055      	b.n	800ca80 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	330e      	adds	r3, #14
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	3318      	adds	r3, #24
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d102      	bne.n	800c9f4 <etharp_input+0x74>
    for_us = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75fb      	strb	r3, [r7, #23]
 800c9f2:	e009      	b.n	800ca08 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	bf0c      	ite	eq
 800ca00:	2301      	moveq	r3, #1
 800ca02:	2300      	movne	r3, #0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f103 0208 	add.w	r2, r3, #8
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <etharp_input+0x98>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e000      	b.n	800ca1a <etharp_input+0x9a>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	f107 010c 	add.w	r1, r7, #12
 800ca1e:	6838      	ldr	r0, [r7, #0]
 800ca20:	f7ff fed8 	bl	800c7d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	88db      	ldrh	r3, [r3, #6]
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca2e:	d003      	beq.n	800ca38 <etharp_input+0xb8>
 800ca30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca34:	d01e      	beq.n	800ca74 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ca36:	e020      	b.n	800ca7a <etharp_input+0xfa>
      if (for_us) {
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d01c      	beq.n	800ca78 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ca58:	2102      	movs	r1, #2
 800ca5a:	9103      	str	r1, [sp, #12]
 800ca5c:	f107 010c 	add.w	r1, r7, #12
 800ca60:	9102      	str	r1, [sp, #8]
 800ca62:	9201      	str	r2, [sp, #4]
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	462b      	mov	r3, r5
 800ca68:	4622      	mov	r2, r4
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	6838      	ldr	r0, [r7, #0]
 800ca6e:	f000 faeb 	bl	800d048 <etharp_raw>
      break;
 800ca72:	e001      	b.n	800ca78 <etharp_input+0xf8>
      break;
 800ca74:	bf00      	nop
 800ca76:	e000      	b.n	800ca7a <etharp_input+0xfa>
      break;
 800ca78:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f003 fbc0 	bl	8010200 <pbuf_free>
}
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bdb0      	pop	{r4, r5, r7, pc}
 800ca86:	bf00      	nop
 800ca88:	08017b84 	.word	0x08017b84
 800ca8c:	08017d08 	.word	0x08017d08
 800ca90:	08017c30 	.word	0x08017c30

0800ca94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af02      	add	r7, sp, #8
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800caa2:	79fa      	ldrb	r2, [r7, #7]
 800caa4:	4944      	ldr	r1, [pc, #272]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800caa6:	4613      	mov	r3, r2
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	4413      	add	r3, r2
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	440b      	add	r3, r1
 800cab0:	3314      	adds	r3, #20
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d806      	bhi.n	800cac6 <etharp_output_to_arp_index+0x32>
 800cab8:	4b40      	ldr	r3, [pc, #256]	; (800cbbc <etharp_output_to_arp_index+0x128>)
 800caba:	f240 22ef 	movw	r2, #751	; 0x2ef
 800cabe:	4940      	ldr	r1, [pc, #256]	; (800cbc0 <etharp_output_to_arp_index+0x12c>)
 800cac0:	4840      	ldr	r0, [pc, #256]	; (800cbc4 <etharp_output_to_arp_index+0x130>)
 800cac2:	f00a f8db 	bl	8016c7c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cac6:	79fa      	ldrb	r2, [r7, #7]
 800cac8:	493b      	ldr	r1, [pc, #236]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800caca:	4613      	mov	r3, r2
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	4413      	add	r3, r2
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	440b      	add	r3, r1
 800cad4:	3314      	adds	r3, #20
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d153      	bne.n	800cb84 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cadc:	79fa      	ldrb	r2, [r7, #7]
 800cade:	4936      	ldr	r1, [pc, #216]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cae0:	4613      	mov	r3, r2
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	4413      	add	r3, r2
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	440b      	add	r3, r1
 800caea:	3312      	adds	r3, #18
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800caf2:	d919      	bls.n	800cb28 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800caf4:	79fa      	ldrb	r2, [r7, #7]
 800caf6:	4613      	mov	r3, r2
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	4413      	add	r3, r2
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	4a2e      	ldr	r2, [pc, #184]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb00:	4413      	add	r3, r2
 800cb02:	3304      	adds	r3, #4
 800cb04:	4619      	mov	r1, r3
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 fb4c 	bl	800d1a4 <etharp_request>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d138      	bne.n	800cb84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb12:	79fa      	ldrb	r2, [r7, #7]
 800cb14:	4928      	ldr	r1, [pc, #160]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb16:	4613      	mov	r3, r2
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	4413      	add	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	440b      	add	r3, r1
 800cb20:	3314      	adds	r3, #20
 800cb22:	2203      	movs	r2, #3
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	e02d      	b.n	800cb84 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cb28:	79fa      	ldrb	r2, [r7, #7]
 800cb2a:	4923      	ldr	r1, [pc, #140]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	4413      	add	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	440b      	add	r3, r1
 800cb36:	3312      	adds	r3, #18
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cb3e:	d321      	bcc.n	800cb84 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cb40:	79fa      	ldrb	r2, [r7, #7]
 800cb42:	4613      	mov	r3, r2
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	4413      	add	r3, r2
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	4a1b      	ldr	r2, [pc, #108]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb4c:	4413      	add	r3, r2
 800cb4e:	1d19      	adds	r1, r3, #4
 800cb50:	79fa      	ldrb	r2, [r7, #7]
 800cb52:	4613      	mov	r3, r2
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	4413      	add	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	4a16      	ldr	r2, [pc, #88]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb5e:	4413      	add	r3, r2
 800cb60:	3304      	adds	r3, #4
 800cb62:	461a      	mov	r2, r3
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 fafb 	bl	800d160 <etharp_request_dst>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d109      	bne.n	800cb84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb70:	79fa      	ldrb	r2, [r7, #7]
 800cb72:	4911      	ldr	r1, [pc, #68]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb74:	4613      	mov	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	440b      	add	r3, r1
 800cb7e:	3314      	adds	r3, #20
 800cb80:	2203      	movs	r2, #3
 800cb82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cb8a:	79fa      	ldrb	r2, [r7, #7]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	3308      	adds	r3, #8
 800cb96:	4a08      	ldr	r2, [pc, #32]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb98:	4413      	add	r3, r2
 800cb9a:	1d1a      	adds	r2, r3, #4
 800cb9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	4613      	mov	r3, r2
 800cba4:	460a      	mov	r2, r1
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f000 fb9b 	bl	800d2e4 <ethernet_output>
 800cbae:	4603      	mov	r3, r0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	240049c8 	.word	0x240049c8
 800cbbc:	08017b84 	.word	0x08017b84
 800cbc0:	08017d28 	.word	0x08017d28
 800cbc4:	08017c30 	.word	0x08017c30

0800cbc8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	; 0x28
 800cbcc:	af02      	add	r7, sp, #8
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <etharp_output+0x24>
 800cbde:	4b73      	ldr	r3, [pc, #460]	; (800cdac <etharp_output+0x1e4>)
 800cbe0:	f240 321e 	movw	r2, #798	; 0x31e
 800cbe4:	4972      	ldr	r1, [pc, #456]	; (800cdb0 <etharp_output+0x1e8>)
 800cbe6:	4873      	ldr	r0, [pc, #460]	; (800cdb4 <etharp_output+0x1ec>)
 800cbe8:	f00a f848 	bl	8016c7c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <etharp_output+0x38>
 800cbf2:	4b6e      	ldr	r3, [pc, #440]	; (800cdac <etharp_output+0x1e4>)
 800cbf4:	f240 321f 	movw	r2, #799	; 0x31f
 800cbf8:	496f      	ldr	r1, [pc, #444]	; (800cdb8 <etharp_output+0x1f0>)
 800cbfa:	486e      	ldr	r0, [pc, #440]	; (800cdb4 <etharp_output+0x1ec>)
 800cbfc:	f00a f83e 	bl	8016c7c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d106      	bne.n	800cc14 <etharp_output+0x4c>
 800cc06:	4b69      	ldr	r3, [pc, #420]	; (800cdac <etharp_output+0x1e4>)
 800cc08:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc0c:	496b      	ldr	r1, [pc, #428]	; (800cdbc <etharp_output+0x1f4>)
 800cc0e:	4869      	ldr	r0, [pc, #420]	; (800cdb4 <etharp_output+0x1ec>)
 800cc10:	f00a f834 	bl	8016c7c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68f9      	ldr	r1, [r7, #12]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 f8c6 	bl	800ddac <ip4_addr_isbroadcast_u32>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cc26:	4b66      	ldr	r3, [pc, #408]	; (800cdc0 <etharp_output+0x1f8>)
 800cc28:	61fb      	str	r3, [r7, #28]
 800cc2a:	e0af      	b.n	800cd8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc34:	2be0      	cmp	r3, #224	; 0xe0
 800cc36:	d118      	bne.n	800cc6a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cc40:	235e      	movs	r3, #94	; 0x5e
 800cc42:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3301      	adds	r3, #1
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3302      	adds	r3, #2
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3303      	adds	r3, #3
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cc62:	f107 0310 	add.w	r3, r7, #16
 800cc66:	61fb      	str	r3, [r7, #28]
 800cc68:	e090      	b.n	800cd8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3304      	adds	r3, #4
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	405a      	eors	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d012      	beq.n	800cca8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc88:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00b      	beq.n	800cca8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	330c      	adds	r3, #12
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	330c      	adds	r3, #12
 800cc9e:	61bb      	str	r3, [r7, #24]
 800cca0:	e002      	b.n	800cca8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cca2:	f06f 0303 	mvn.w	r3, #3
 800cca6:	e07d      	b.n	800cda4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cca8:	4b46      	ldr	r3, [pc, #280]	; (800cdc4 <etharp_output+0x1fc>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	4619      	mov	r1, r3
 800ccae:	4a46      	ldr	r2, [pc, #280]	; (800cdc8 <etharp_output+0x200>)
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	440b      	add	r3, r1
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	4413      	add	r3, r2
 800ccba:	3314      	adds	r3, #20
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d925      	bls.n	800cd0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ccc2:	4b40      	ldr	r3, [pc, #256]	; (800cdc4 <etharp_output+0x1fc>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4a3f      	ldr	r2, [pc, #252]	; (800cdc8 <etharp_output+0x200>)
 800ccca:	460b      	mov	r3, r1
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	440b      	add	r3, r1
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	4413      	add	r3, r2
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d117      	bne.n	800cd0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	4b38      	ldr	r3, [pc, #224]	; (800cdc4 <etharp_output+0x1fc>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	4618      	mov	r0, r3
 800cce8:	4937      	ldr	r1, [pc, #220]	; (800cdc8 <etharp_output+0x200>)
 800ccea:	4603      	mov	r3, r0
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4403      	add	r3, r0
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d108      	bne.n	800cd0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ccfc:	4b31      	ldr	r3, [pc, #196]	; (800cdc4 <etharp_output+0x1fc>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	68b9      	ldr	r1, [r7, #8]
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f7ff fec5 	bl	800ca94 <etharp_output_to_arp_index>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	e04a      	b.n	800cda4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
 800cd12:	e031      	b.n	800cd78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd14:	7dfa      	ldrb	r2, [r7, #23]
 800cd16:	492c      	ldr	r1, [pc, #176]	; (800cdc8 <etharp_output+0x200>)
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	3314      	adds	r3, #20
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d923      	bls.n	800cd72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cd2a:	7dfa      	ldrb	r2, [r7, #23]
 800cd2c:	4926      	ldr	r1, [pc, #152]	; (800cdc8 <etharp_output+0x200>)
 800cd2e:	4613      	mov	r3, r2
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	440b      	add	r3, r1
 800cd38:	3308      	adds	r3, #8
 800cd3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d117      	bne.n	800cd72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	6819      	ldr	r1, [r3, #0]
 800cd46:	7dfa      	ldrb	r2, [r7, #23]
 800cd48:	481f      	ldr	r0, [pc, #124]	; (800cdc8 <etharp_output+0x200>)
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	4403      	add	r3, r0
 800cd54:	3304      	adds	r3, #4
 800cd56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	d10a      	bne.n	800cd72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cd5c:	4a19      	ldr	r2, [pc, #100]	; (800cdc4 <etharp_output+0x1fc>)
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	461a      	mov	r2, r3
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f7ff fe93 	bl	800ca94 <etharp_output_to_arp_index>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	e018      	b.n	800cda4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	3301      	adds	r3, #1
 800cd76:	75fb      	strb	r3, [r7, #23]
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
 800cd7a:	2b09      	cmp	r3, #9
 800cd7c:	d9ca      	bls.n	800cd14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	69b9      	ldr	r1, [r7, #24]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f000 f822 	bl	800cdcc <etharp_query>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	e00b      	b.n	800cda4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cd92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f000 faa1 	bl	800d2e4 <ethernet_output>
 800cda2:	4603      	mov	r3, r0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3720      	adds	r7, #32
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	08017b84 	.word	0x08017b84
 800cdb0:	08017d08 	.word	0x08017d08
 800cdb4:	08017c30 	.word	0x08017c30
 800cdb8:	08017d58 	.word	0x08017d58
 800cdbc:	08017cf8 	.word	0x08017cf8
 800cdc0:	0801a95c 	.word	0x0801a95c
 800cdc4:	24004ab8 	.word	0x24004ab8
 800cdc8:	240049c8 	.word	0x240049c8

0800cdcc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08c      	sub	sp, #48	; 0x30
 800cdd0:	af02      	add	r7, sp, #8
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3326      	adds	r3, #38	; 0x26
 800cddc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cdde:	23ff      	movs	r3, #255	; 0xff
 800cde0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68f9      	ldr	r1, [r7, #12]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 ffdc 	bl	800ddac <ip4_addr_isbroadcast_u32>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10c      	bne.n	800ce14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce02:	2be0      	cmp	r3, #224	; 0xe0
 800ce04:	d006      	beq.n	800ce14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d102      	bne.n	800ce1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce14:	f06f 030f 	mvn.w	r3, #15
 800ce18:	e102      	b.n	800d020 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	68b8      	ldr	r0, [r7, #8]
 800ce20:	f7ff fb60 	bl	800c4e4 <etharp_find_entry>
 800ce24:	4603      	mov	r3, r0
 800ce26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ce28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	da02      	bge.n	800ce36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ce30:	8a7b      	ldrh	r3, [r7, #18]
 800ce32:	b25b      	sxtb	r3, r3
 800ce34:	e0f4      	b.n	800d020 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ce36:	8a7b      	ldrh	r3, [r7, #18]
 800ce38:	2b7e      	cmp	r3, #126	; 0x7e
 800ce3a:	d906      	bls.n	800ce4a <etharp_query+0x7e>
 800ce3c:	4b7a      	ldr	r3, [pc, #488]	; (800d028 <etharp_query+0x25c>)
 800ce3e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ce42:	497a      	ldr	r1, [pc, #488]	; (800d02c <etharp_query+0x260>)
 800ce44:	487a      	ldr	r0, [pc, #488]	; (800d030 <etharp_query+0x264>)
 800ce46:	f009 ff19 	bl	8016c7c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ce4a:	8a7b      	ldrh	r3, [r7, #18]
 800ce4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce4e:	7c7a      	ldrb	r2, [r7, #17]
 800ce50:	4978      	ldr	r1, [pc, #480]	; (800d034 <etharp_query+0x268>)
 800ce52:	4613      	mov	r3, r2
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	4413      	add	r3, r2
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	440b      	add	r3, r1
 800ce5c:	3314      	adds	r3, #20
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d115      	bne.n	800ce90 <etharp_query+0xc4>
    is_new_entry = 1;
 800ce64:	2301      	movs	r3, #1
 800ce66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ce68:	7c7a      	ldrb	r2, [r7, #17]
 800ce6a:	4972      	ldr	r1, [pc, #456]	; (800d034 <etharp_query+0x268>)
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	4413      	add	r3, r2
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	440b      	add	r3, r1
 800ce76:	3314      	adds	r3, #20
 800ce78:	2201      	movs	r2, #1
 800ce7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ce7c:	7c7a      	ldrb	r2, [r7, #17]
 800ce7e:	496d      	ldr	r1, [pc, #436]	; (800d034 <etharp_query+0x268>)
 800ce80:	4613      	mov	r3, r2
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	4413      	add	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	440b      	add	r3, r1
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ce90:	7c7a      	ldrb	r2, [r7, #17]
 800ce92:	4968      	ldr	r1, [pc, #416]	; (800d034 <etharp_query+0x268>)
 800ce94:	4613      	mov	r3, r2
 800ce96:	005b      	lsls	r3, r3, #1
 800ce98:	4413      	add	r3, r2
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	440b      	add	r3, r1
 800ce9e:	3314      	adds	r3, #20
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d011      	beq.n	800ceca <etharp_query+0xfe>
 800cea6:	7c7a      	ldrb	r2, [r7, #17]
 800cea8:	4962      	ldr	r1, [pc, #392]	; (800d034 <etharp_query+0x268>)
 800ceaa:	4613      	mov	r3, r2
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	4413      	add	r3, r2
 800ceb0:	00db      	lsls	r3, r3, #3
 800ceb2:	440b      	add	r3, r1
 800ceb4:	3314      	adds	r3, #20
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d806      	bhi.n	800ceca <etharp_query+0xfe>
 800cebc:	4b5a      	ldr	r3, [pc, #360]	; (800d028 <etharp_query+0x25c>)
 800cebe:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cec2:	495d      	ldr	r1, [pc, #372]	; (800d038 <etharp_query+0x26c>)
 800cec4:	485a      	ldr	r0, [pc, #360]	; (800d030 <etharp_query+0x264>)
 800cec6:	f009 fed9 	bl	8016c7c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ceca:	6a3b      	ldr	r3, [r7, #32]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <etharp_query+0x10a>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10c      	bne.n	800cef0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ced6:	68b9      	ldr	r1, [r7, #8]
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f963 	bl	800d1a4 <etharp_request>
 800cede:	4603      	mov	r3, r0
 800cee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d102      	bne.n	800cef0 <etharp_query+0x124>
      return result;
 800ceea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ceee:	e097      	b.n	800d020 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <etharp_query+0x138>
 800cef6:	4b4c      	ldr	r3, [pc, #304]	; (800d028 <etharp_query+0x25c>)
 800cef8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cefc:	494f      	ldr	r1, [pc, #316]	; (800d03c <etharp_query+0x270>)
 800cefe:	484c      	ldr	r0, [pc, #304]	; (800d030 <etharp_query+0x264>)
 800cf00:	f009 febc 	bl	8016c7c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cf04:	7c7a      	ldrb	r2, [r7, #17]
 800cf06:	494b      	ldr	r1, [pc, #300]	; (800d034 <etharp_query+0x268>)
 800cf08:	4613      	mov	r3, r2
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	440b      	add	r3, r1
 800cf12:	3314      	adds	r3, #20
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d918      	bls.n	800cf4c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cf1a:	4a49      	ldr	r2, [pc, #292]	; (800d040 <etharp_query+0x274>)
 800cf1c:	7c7b      	ldrb	r3, [r7, #17]
 800cf1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf20:	7c7a      	ldrb	r2, [r7, #17]
 800cf22:	4613      	mov	r3, r2
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	4413      	add	r3, r2
 800cf28:	00db      	lsls	r3, r3, #3
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	4a41      	ldr	r2, [pc, #260]	; (800d034 <etharp_query+0x268>)
 800cf2e:	4413      	add	r3, r2
 800cf30:	1d1a      	adds	r2, r3, #4
 800cf32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	6879      	ldr	r1, [r7, #4]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 f9d0 	bl	800d2e4 <ethernet_output>
 800cf44:	4603      	mov	r3, r0
 800cf46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf4a:	e067      	b.n	800d01c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cf4c:	7c7a      	ldrb	r2, [r7, #17]
 800cf4e:	4939      	ldr	r1, [pc, #228]	; (800d034 <etharp_query+0x268>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	4413      	add	r3, r2
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	440b      	add	r3, r1
 800cf5a:	3314      	adds	r3, #20
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d15c      	bne.n	800d01c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cf6a:	e01c      	b.n	800cfa6 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	895a      	ldrh	r2, [r3, #10]
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	891b      	ldrh	r3, [r3, #8]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d10a      	bne.n	800cf8e <etharp_query+0x1c2>
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d006      	beq.n	800cf8e <etharp_query+0x1c2>
 800cf80:	4b29      	ldr	r3, [pc, #164]	; (800d028 <etharp_query+0x25c>)
 800cf82:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cf86:	492f      	ldr	r1, [pc, #188]	; (800d044 <etharp_query+0x278>)
 800cf88:	4829      	ldr	r0, [pc, #164]	; (800d030 <etharp_query+0x264>)
 800cf8a:	f009 fe77 	bl	8016c7c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	7b1b      	ldrb	r3, [r3, #12]
 800cf92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <etharp_query+0x1d4>
        copy_needed = 1;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	61bb      	str	r3, [r7, #24]
        break;
 800cf9e:	e005      	b.n	800cfac <etharp_query+0x1e0>
      }
      p = p->next;
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1df      	bne.n	800cf6c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d007      	beq.n	800cfc2 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cfb8:	200e      	movs	r0, #14
 800cfba:	f003 fb99 	bl	80106f0 <pbuf_clone>
 800cfbe:	61f8      	str	r0, [r7, #28]
 800cfc0:	e004      	b.n	800cfcc <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cfc6:	69f8      	ldr	r0, [r7, #28]
 800cfc8:	f003 f9c0 	bl	801034c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d021      	beq.n	800d016 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cfd2:	7c7a      	ldrb	r2, [r7, #17]
 800cfd4:	4917      	ldr	r1, [pc, #92]	; (800d034 <etharp_query+0x268>)
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	4413      	add	r3, r2
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	440b      	add	r3, r1
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00a      	beq.n	800cffc <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cfe6:	7c7a      	ldrb	r2, [r7, #17]
 800cfe8:	4912      	ldr	r1, [pc, #72]	; (800d034 <etharp_query+0x268>)
 800cfea:	4613      	mov	r3, r2
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	4413      	add	r3, r2
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	440b      	add	r3, r1
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f003 f902 	bl	8010200 <pbuf_free>
      }
      arp_table[i].q = p;
 800cffc:	7c7a      	ldrb	r2, [r7, #17]
 800cffe:	490d      	ldr	r1, [pc, #52]	; (800d034 <etharp_query+0x268>)
 800d000:	4613      	mov	r3, r2
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	4413      	add	r3, r2
 800d006:	00db      	lsls	r3, r3, #3
 800d008:	440b      	add	r3, r1
 800d00a:	69fa      	ldr	r2, [r7, #28]
 800d00c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d014:	e002      	b.n	800d01c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d016:	23ff      	movs	r3, #255	; 0xff
 800d018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d01c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d020:	4618      	mov	r0, r3
 800d022:	3728      	adds	r7, #40	; 0x28
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	08017b84 	.word	0x08017b84
 800d02c:	08017d64 	.word	0x08017d64
 800d030:	08017c30 	.word	0x08017c30
 800d034:	240049c8 	.word	0x240049c8
 800d038:	08017d74 	.word	0x08017d74
 800d03c:	08017d58 	.word	0x08017d58
 800d040:	24004ab8 	.word	0x24004ab8
 800d044:	08017d9c 	.word	0x08017d9c

0800d048 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08a      	sub	sp, #40	; 0x28
 800d04c:	af02      	add	r7, sp, #8
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d106      	bne.n	800d06e <etharp_raw+0x26>
 800d060:	4b3a      	ldr	r3, [pc, #232]	; (800d14c <etharp_raw+0x104>)
 800d062:	f240 4257 	movw	r2, #1111	; 0x457
 800d066:	493a      	ldr	r1, [pc, #232]	; (800d150 <etharp_raw+0x108>)
 800d068:	483a      	ldr	r0, [pc, #232]	; (800d154 <etharp_raw+0x10c>)
 800d06a:	f009 fe07 	bl	8016c7c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d06e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d072:	211c      	movs	r1, #28
 800d074:	200e      	movs	r0, #14
 800d076:	f002 fde3 	bl	800fc40 <pbuf_alloc>
 800d07a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d102      	bne.n	800d088 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d086:	e05d      	b.n	800d144 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	895b      	ldrh	r3, [r3, #10]
 800d08c:	2b1b      	cmp	r3, #27
 800d08e:	d806      	bhi.n	800d09e <etharp_raw+0x56>
 800d090:	4b2e      	ldr	r3, [pc, #184]	; (800d14c <etharp_raw+0x104>)
 800d092:	f240 4263 	movw	r2, #1123	; 0x463
 800d096:	4930      	ldr	r1, [pc, #192]	; (800d158 <etharp_raw+0x110>)
 800d098:	482e      	ldr	r0, [pc, #184]	; (800d154 <etharp_raw+0x10c>)
 800d09a:	f009 fdef 	bl	8016c7c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d0a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff f914 	bl	800c2d4 <lwip_htons>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0ba:	2b06      	cmp	r3, #6
 800d0bc:	d006      	beq.n	800d0cc <etharp_raw+0x84>
 800d0be:	4b23      	ldr	r3, [pc, #140]	; (800d14c <etharp_raw+0x104>)
 800d0c0:	f240 426a 	movw	r2, #1130	; 0x46a
 800d0c4:	4925      	ldr	r1, [pc, #148]	; (800d15c <etharp_raw+0x114>)
 800d0c6:	4823      	ldr	r0, [pc, #140]	; (800d154 <etharp_raw+0x10c>)
 800d0c8:	f009 fdd8 	bl	8016c7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	2206      	movs	r2, #6
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f009 fdbe 	bl	8016c56 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	3312      	adds	r3, #18
 800d0de:	2206      	movs	r2, #6
 800d0e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f009 fdb7 	bl	8016c56 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	330e      	adds	r3, #14
 800d0ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ee:	6812      	ldr	r2, [r2, #0]
 800d0f0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f8:	6812      	ldr	r2, [r2, #0]
 800d0fa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2200      	movs	r2, #0
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	f042 0201 	orr.w	r2, r2, #1
 800d108:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f042 0208 	orr.w	r2, r2, #8
 800d112:	709a      	strb	r2, [r3, #2]
 800d114:	2200      	movs	r2, #0
 800d116:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2206      	movs	r2, #6
 800d11c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2204      	movs	r2, #4
 800d122:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d124:	f640 0306 	movw	r3, #2054	; 0x806
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	69b9      	ldr	r1, [r7, #24]
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f000 f8d7 	bl	800d2e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d136:	69b8      	ldr	r0, [r7, #24]
 800d138:	f003 f862 	bl	8010200 <pbuf_free>
  p = NULL;
 800d13c:	2300      	movs	r3, #0
 800d13e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d140:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3720      	adds	r7, #32
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	08017b84 	.word	0x08017b84
 800d150:	08017d08 	.word	0x08017d08
 800d154:	08017c30 	.word	0x08017c30
 800d158:	08017db8 	.word	0x08017db8
 800d15c:	08017dec 	.word	0x08017dec

0800d160 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af04      	add	r7, sp, #16
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d17c:	2201      	movs	r2, #1
 800d17e:	9203      	str	r2, [sp, #12]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	9202      	str	r2, [sp, #8]
 800d184:	4a06      	ldr	r2, [pc, #24]	; (800d1a0 <etharp_request_dst+0x40>)
 800d186:	9201      	str	r2, [sp, #4]
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	4603      	mov	r3, r0
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff ff5a 	bl	800d048 <etharp_raw>
 800d194:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	0801a964 	.word	0x0801a964

0800d1a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d1ae:	4a05      	ldr	r2, [pc, #20]	; (800d1c4 <etharp_request+0x20>)
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff ffd4 	bl	800d160 <etharp_request_dst>
 800d1b8:	4603      	mov	r3, r0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0801a95c 	.word	0x0801a95c

0800d1c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d1d2:	230e      	movs	r3, #14
 800d1d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	895b      	ldrh	r3, [r3, #10]
 800d1da:	2b0e      	cmp	r3, #14
 800d1dc:	d96e      	bls.n	800d2bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7bdb      	ldrb	r3, [r3, #15]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d106      	bne.n	800d1f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	7b1a      	ldrb	r2, [r3, #12]
 800d1fe:	7b5b      	ldrb	r3, [r3, #13]
 800d200:	021b      	lsls	r3, r3, #8
 800d202:	4313      	orrs	r3, r2
 800d204:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d023      	beq.n	800d25a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d10f      	bne.n	800d23a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	785b      	ldrb	r3, [r3, #1]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d11b      	bne.n	800d25a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d226:	2b5e      	cmp	r3, #94	; 0x5e
 800d228:	d117      	bne.n	800d25a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	7b5b      	ldrb	r3, [r3, #13]
 800d22e:	f043 0310 	orr.w	r3, r3, #16
 800d232:	b2da      	uxtb	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	735a      	strb	r2, [r3, #13]
 800d238:	e00f      	b.n	800d25a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2206      	movs	r2, #6
 800d23e:	4928      	ldr	r1, [pc, #160]	; (800d2e0 <ethernet_input+0x118>)
 800d240:	4618      	mov	r0, r3
 800d242:	f009 fcf9 	bl	8016c38 <memcmp>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d106      	bne.n	800d25a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	7b5b      	ldrb	r3, [r3, #13]
 800d250:	f043 0308 	orr.w	r3, r3, #8
 800d254:	b2da      	uxtb	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d25a:	89fb      	ldrh	r3, [r7, #14]
 800d25c:	2b08      	cmp	r3, #8
 800d25e:	d003      	beq.n	800d268 <ethernet_input+0xa0>
 800d260:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d264:	d014      	beq.n	800d290 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d266:	e032      	b.n	800d2ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d26e:	f003 0308 	and.w	r3, r3, #8
 800d272:	2b00      	cmp	r3, #0
 800d274:	d024      	beq.n	800d2c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d276:	8afb      	ldrh	r3, [r7, #22]
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f002 ff3a 	bl	80100f4 <pbuf_remove_header>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d11e      	bne.n	800d2c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fb95 	bl	800d9b8 <ip4_input>
      break;
 800d28e:	e013      	b.n	800d2b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d296:	f003 0308 	and.w	r3, r3, #8
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d014      	beq.n	800d2c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d29e:	8afb      	ldrh	r3, [r7, #22]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f002 ff26 	bl	80100f4 <pbuf_remove_header>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10e      	bne.n	800d2cc <ethernet_input+0x104>
        etharp_input(p, netif);
 800d2ae:	6839      	ldr	r1, [r7, #0]
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7ff fb65 	bl	800c980 <etharp_input>
      break;
 800d2b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e00c      	b.n	800d2d6 <ethernet_input+0x10e>
    goto free_and_return;
 800d2bc:	bf00      	nop
 800d2be:	e006      	b.n	800d2ce <ethernet_input+0x106>
        goto free_and_return;
 800d2c0:	bf00      	nop
 800d2c2:	e004      	b.n	800d2ce <ethernet_input+0x106>
        goto free_and_return;
 800d2c4:	bf00      	nop
 800d2c6:	e002      	b.n	800d2ce <ethernet_input+0x106>
        goto free_and_return;
 800d2c8:	bf00      	nop
 800d2ca:	e000      	b.n	800d2ce <ethernet_input+0x106>
        goto free_and_return;
 800d2cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f002 ff96 	bl	8010200 <pbuf_free>
  return ERR_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	0801a95c 	.word	0x0801a95c

0800d2e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d2f2:	8c3b      	ldrh	r3, [r7, #32]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe ffed 	bl	800c2d4 <lwip_htons>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d2fe:	210e      	movs	r1, #14
 800d300:	68b8      	ldr	r0, [r7, #8]
 800d302:	f002 fee7 	bl	80100d4 <pbuf_add_header>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d125      	bne.n	800d358 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	8afa      	ldrh	r2, [r7, #22]
 800d316:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	2206      	movs	r2, #6
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	4618      	mov	r0, r3
 800d320:	f009 fc99 	bl	8016c56 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	3306      	adds	r3, #6
 800d328:	2206      	movs	r2, #6
 800d32a:	6879      	ldr	r1, [r7, #4]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f009 fc92 	bl	8016c56 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d338:	2b06      	cmp	r3, #6
 800d33a:	d006      	beq.n	800d34a <ethernet_output+0x66>
 800d33c:	4b0a      	ldr	r3, [pc, #40]	; (800d368 <ethernet_output+0x84>)
 800d33e:	f240 1233 	movw	r2, #307	; 0x133
 800d342:	490a      	ldr	r1, [pc, #40]	; (800d36c <ethernet_output+0x88>)
 800d344:	480a      	ldr	r0, [pc, #40]	; (800d370 <ethernet_output+0x8c>)
 800d346:	f009 fc99 	bl	8016c7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	4798      	blx	r3
 800d354:	4603      	mov	r3, r0
 800d356:	e002      	b.n	800d35e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d358:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d35a:	f06f 0301 	mvn.w	r3, #1
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	08017e30 	.word	0x08017e30
 800d36c:	08017e98 	.word	0x08017e98
 800d370:	08017ecc 	.word	0x08017ecc

0800d374 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b08e      	sub	sp, #56	; 0x38
 800d378:	af04      	add	r7, sp, #16
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d37e:	4b87      	ldr	r3, [pc, #540]	; (800d59c <icmp_input+0x228>)
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	f003 030f 	and.w	r3, r3, #15
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	b2db      	uxtb	r3, r3
 800d392:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d396:	2b13      	cmp	r3, #19
 800d398:	f240 80e8 	bls.w	800d56c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	895b      	ldrh	r3, [r3, #10]
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	f240 80e5 	bls.w	800d570 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d3b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 80d2 	beq.w	800d55e <icmp_input+0x1ea>
 800d3ba:	2b08      	cmp	r3, #8
 800d3bc:	f040 80d2 	bne.w	800d564 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d3c0:	4b77      	ldr	r3, [pc, #476]	; (800d5a0 <icmp_input+0x22c>)
 800d3c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d3c4:	4b75      	ldr	r3, [pc, #468]	; (800d59c <icmp_input+0x228>)
 800d3c6:	695b      	ldr	r3, [r3, #20]
 800d3c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3cc:	2be0      	cmp	r3, #224	; 0xe0
 800d3ce:	f000 80d6 	beq.w	800d57e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d3d2:	4b72      	ldr	r3, [pc, #456]	; (800d59c <icmp_input+0x228>)
 800d3d4:	695a      	ldr	r2, [r3, #20]
 800d3d6:	4b71      	ldr	r3, [pc, #452]	; (800d59c <icmp_input+0x228>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f000 fce5 	bl	800ddac <ip4_addr_isbroadcast_u32>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f040 80cc 	bne.w	800d582 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	891b      	ldrh	r3, [r3, #8]
 800d3ee:	2b07      	cmp	r3, #7
 800d3f0:	f240 80c0 	bls.w	800d574 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f9e0 	bl	800d7ba <inet_chksum_pbuf>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d003      	beq.n	800d408 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f002 fefd 	bl	8010200 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800d406:	e0c5      	b.n	800d594 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d40a:	330e      	adds	r3, #14
 800d40c:	4619      	mov	r1, r3
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f002 fe60 	bl	80100d4 <pbuf_add_header>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d04b      	beq.n	800d4b2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	891a      	ldrh	r2, [r3, #8]
 800d41e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d420:	4413      	add	r3, r2
 800d422:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	891b      	ldrh	r3, [r3, #8]
 800d428:	8b7a      	ldrh	r2, [r7, #26]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	f0c0 80ab 	bcc.w	800d586 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d430:	8b7b      	ldrh	r3, [r7, #26]
 800d432:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d436:	4619      	mov	r1, r3
 800d438:	200e      	movs	r0, #14
 800d43a:	f002 fc01 	bl	800fc40 <pbuf_alloc>
 800d43e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 80a1 	beq.w	800d58a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	895b      	ldrh	r3, [r3, #10]
 800d44c:	461a      	mov	r2, r3
 800d44e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d450:	3308      	adds	r3, #8
 800d452:	429a      	cmp	r2, r3
 800d454:	d203      	bcs.n	800d45e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d456:	6978      	ldr	r0, [r7, #20]
 800d458:	f002 fed2 	bl	8010200 <pbuf_free>
          goto icmperr;
 800d45c:	e096      	b.n	800d58c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d466:	4618      	mov	r0, r3
 800d468:	f009 fbf5 	bl	8016c56 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d46c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d46e:	4619      	mov	r1, r3
 800d470:	6978      	ldr	r0, [r7, #20]
 800d472:	f002 fe3f 	bl	80100f4 <pbuf_remove_header>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d009      	beq.n	800d490 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d47c:	4b49      	ldr	r3, [pc, #292]	; (800d5a4 <icmp_input+0x230>)
 800d47e:	22b6      	movs	r2, #182	; 0xb6
 800d480:	4949      	ldr	r1, [pc, #292]	; (800d5a8 <icmp_input+0x234>)
 800d482:	484a      	ldr	r0, [pc, #296]	; (800d5ac <icmp_input+0x238>)
 800d484:	f009 fbfa 	bl	8016c7c <iprintf>
          pbuf_free(r);
 800d488:	6978      	ldr	r0, [r7, #20]
 800d48a:	f002 feb9 	bl	8010200 <pbuf_free>
          goto icmperr;
 800d48e:	e07d      	b.n	800d58c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d490:	6879      	ldr	r1, [r7, #4]
 800d492:	6978      	ldr	r0, [r7, #20]
 800d494:	f002 ffe8 	bl	8010468 <pbuf_copy>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d49e:	6978      	ldr	r0, [r7, #20]
 800d4a0:	f002 feae 	bl	8010200 <pbuf_free>
          goto icmperr;
 800d4a4:	e072      	b.n	800d58c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f002 feaa 	bl	8010200 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	607b      	str	r3, [r7, #4]
 800d4b0:	e00f      	b.n	800d4d2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d4b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4b4:	330e      	adds	r3, #14
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f002 fe1b 	bl	80100f4 <pbuf_remove_header>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d006      	beq.n	800d4d2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d4c4:	4b37      	ldr	r3, [pc, #220]	; (800d5a4 <icmp_input+0x230>)
 800d4c6:	22c7      	movs	r2, #199	; 0xc7
 800d4c8:	4939      	ldr	r1, [pc, #228]	; (800d5b0 <icmp_input+0x23c>)
 800d4ca:	4838      	ldr	r0, [pc, #224]	; (800d5ac <icmp_input+0x238>)
 800d4cc:	f009 fbd6 	bl	8016c7c <iprintf>
          goto icmperr;
 800d4d0:	e05c      	b.n	800d58c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f002 fdf9 	bl	80100d4 <pbuf_add_header>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d13c      	bne.n	800d562 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d4f6:	4b29      	ldr	r3, [pc, #164]	; (800d59c <icmp_input+0x228>)
 800d4f8:	691a      	ldr	r2, [r3, #16]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	2200      	movs	r2, #0
 800d502:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	885b      	ldrh	r3, [r3, #2]
 800d508:	b29b      	uxth	r3, r3
 800d50a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d50e:	4293      	cmp	r3, r2
 800d510:	d907      	bls.n	800d522 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	885b      	ldrh	r3, [r3, #2]
 800d516:	b29b      	uxth	r3, r3
 800d518:	3309      	adds	r3, #9
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	805a      	strh	r2, [r3, #2]
 800d520:	e006      	b.n	800d530 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	885b      	ldrh	r3, [r3, #2]
 800d526:	b29b      	uxth	r3, r3
 800d528:	3308      	adds	r3, #8
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	22ff      	movs	r2, #255	; 0xff
 800d534:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	729a      	strb	r2, [r3, #10]
 800d53c:	2200      	movs	r2, #0
 800d53e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	9302      	str	r3, [sp, #8]
 800d544:	2301      	movs	r3, #1
 800d546:	9301      	str	r3, [sp, #4]
 800d548:	2300      	movs	r3, #0
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	23ff      	movs	r3, #255	; 0xff
 800d54e:	2200      	movs	r2, #0
 800d550:	69f9      	ldr	r1, [r7, #28]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fb52 	bl	800dbfc <ip4_output_if>
 800d558:	4603      	mov	r3, r0
 800d55a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d55c:	e001      	b.n	800d562 <icmp_input+0x1ee>
      break;
 800d55e:	bf00      	nop
 800d560:	e000      	b.n	800d564 <icmp_input+0x1f0>
      break;
 800d562:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f002 fe4b 	bl	8010200 <pbuf_free>
  return;
 800d56a:	e013      	b.n	800d594 <icmp_input+0x220>
    goto lenerr;
 800d56c:	bf00      	nop
 800d56e:	e002      	b.n	800d576 <icmp_input+0x202>
    goto lenerr;
 800d570:	bf00      	nop
 800d572:	e000      	b.n	800d576 <icmp_input+0x202>
        goto lenerr;
 800d574:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f002 fe42 	bl	8010200 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d57c:	e00a      	b.n	800d594 <icmp_input+0x220>
        goto icmperr;
 800d57e:	bf00      	nop
 800d580:	e004      	b.n	800d58c <icmp_input+0x218>
        goto icmperr;
 800d582:	bf00      	nop
 800d584:	e002      	b.n	800d58c <icmp_input+0x218>
          goto icmperr;
 800d586:	bf00      	nop
 800d588:	e000      	b.n	800d58c <icmp_input+0x218>
          goto icmperr;
 800d58a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f002 fe37 	bl	8010200 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d592:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d594:	3728      	adds	r7, #40	; 0x28
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	24005288 	.word	0x24005288
 800d5a0:	2400529c 	.word	0x2400529c
 800d5a4:	08017ef4 	.word	0x08017ef4
 800d5a8:	08017f5c 	.word	0x08017f5c
 800d5ac:	08017f94 	.word	0x08017f94
 800d5b0:	08017fbc 	.word	0x08017fbc

0800d5b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	2103      	movs	r1, #3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f814 	bl	800d5f4 <icmp_send_response>
}
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	210b      	movs	r1, #11
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f804 	bl	800d5f4 <icmp_send_response>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08c      	sub	sp, #48	; 0x30
 800d5f8:	af04      	add	r7, sp, #16
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
 800d600:	4613      	mov	r3, r2
 800d602:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d604:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d608:	2124      	movs	r1, #36	; 0x24
 800d60a:	2022      	movs	r0, #34	; 0x22
 800d60c:	f002 fb18 	bl	800fc40 <pbuf_alloc>
 800d610:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d056      	beq.n	800d6c6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	895b      	ldrh	r3, [r3, #10]
 800d61c:	2b23      	cmp	r3, #35	; 0x23
 800d61e:	d806      	bhi.n	800d62e <icmp_send_response+0x3a>
 800d620:	4b2b      	ldr	r3, [pc, #172]	; (800d6d0 <icmp_send_response+0xdc>)
 800d622:	f240 1269 	movw	r2, #361	; 0x169
 800d626:	492b      	ldr	r1, [pc, #172]	; (800d6d4 <icmp_send_response+0xe0>)
 800d628:	482b      	ldr	r0, [pc, #172]	; (800d6d8 <icmp_send_response+0xe4>)
 800d62a:	f009 fb27 	bl	8016c7c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	78fa      	ldrb	r2, [r7, #3]
 800d63e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	78ba      	ldrb	r2, [r7, #2]
 800d644:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2200      	movs	r2, #0
 800d64a:	711a      	strb	r2, [r3, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	2200      	movs	r2, #0
 800d654:	719a      	strb	r2, [r3, #6]
 800d656:	2200      	movs	r2, #0
 800d658:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	f103 0008 	add.w	r0, r3, #8
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	221c      	movs	r2, #28
 800d668:	4619      	mov	r1, r3
 800d66a:	f009 faf4 	bl	8016c56 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d674:	f107 030c 	add.w	r3, r7, #12
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 f903 	bl	800d884 <ip4_route>
 800d67e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d01b      	beq.n	800d6be <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2200      	movs	r2, #0
 800d68a:	709a      	strb	r2, [r3, #2]
 800d68c:	2200      	movs	r2, #0
 800d68e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	895b      	ldrh	r3, [r3, #10]
 800d694:	4619      	mov	r1, r3
 800d696:	6978      	ldr	r0, [r7, #20]
 800d698:	f000 f87d 	bl	800d796 <inet_chksum>
 800d69c:	4603      	mov	r3, r0
 800d69e:	461a      	mov	r2, r3
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d6a4:	f107 020c 	add.w	r2, r7, #12
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	9302      	str	r3, [sp, #8]
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	9301      	str	r3, [sp, #4]
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	23ff      	movs	r3, #255	; 0xff
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	69f8      	ldr	r0, [r7, #28]
 800d6ba:	f000 fa9f 	bl	800dbfc <ip4_output_if>
  }
  pbuf_free(q);
 800d6be:	69f8      	ldr	r0, [r7, #28]
 800d6c0:	f002 fd9e 	bl	8010200 <pbuf_free>
 800d6c4:	e000      	b.n	800d6c8 <icmp_send_response+0xd4>
    return;
 800d6c6:	bf00      	nop
}
 800d6c8:	3720      	adds	r7, #32
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	08017ef4 	.word	0x08017ef4
 800d6d4:	08017ff0 	.word	0x08017ff0
 800d6d8:	08017f94 	.word	0x08017f94

0800d6dc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b089      	sub	sp, #36	; 0x24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00d      	beq.n	800d71c <lwip_standard_chksum+0x40>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	dd0a      	ble.n	800d71c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	1c53      	adds	r3, r2, #1
 800d70a:	61fb      	str	r3, [r7, #28]
 800d70c:	f107 030e 	add.w	r3, r7, #14
 800d710:	3301      	adds	r3, #1
 800d712:	7812      	ldrb	r2, [r2, #0]
 800d714:	701a      	strb	r2, [r3, #0]
    len--;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	3b01      	subs	r3, #1
 800d71a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d720:	e00a      	b.n	800d738 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	1c9a      	adds	r2, r3, #2
 800d726:	61ba      	str	r2, [r7, #24]
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	461a      	mov	r2, r3
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	4413      	add	r3, r2
 800d730:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	3b02      	subs	r3, #2
 800d736:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	dcf1      	bgt.n	800d722 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	dd04      	ble.n	800d74e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d744:	f107 030e 	add.w	r3, r7, #14
 800d748:	69ba      	ldr	r2, [r7, #24]
 800d74a:	7812      	ldrb	r2, [r2, #0]
 800d74c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d74e:	89fb      	ldrh	r3, [r7, #14]
 800d750:	461a      	mov	r2, r3
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	4413      	add	r3, r2
 800d756:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	0c1a      	lsrs	r2, r3, #16
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	b29b      	uxth	r3, r3
 800d760:	4413      	add	r3, r2
 800d762:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	0c1a      	lsrs	r2, r3, #16
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	4413      	add	r3, r2
 800d76e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d007      	beq.n	800d786 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	0a1b      	lsrs	r3, r3, #8
 800d780:	b2db      	uxtb	r3, r3
 800d782:	4313      	orrs	r3, r2
 800d784:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	b29b      	uxth	r3, r3
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3724      	adds	r7, #36	; 0x24
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr

0800d796 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d7a2:	887b      	ldrh	r3, [r7, #2]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff ff98 	bl	800d6dc <lwip_standard_chksum>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	43db      	mvns	r3, r3
 800d7b0:	b29b      	uxth	r3, r3
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b086      	sub	sp, #24
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	e02b      	b.n	800d828 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	685a      	ldr	r2, [r3, #4]
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	895b      	ldrh	r3, [r3, #10]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	4610      	mov	r0, r2
 800d7dc:	f7ff ff7e 	bl	800d6dc <lwip_standard_chksum>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	4413      	add	r3, r2
 800d7e8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	0c1a      	lsrs	r2, r3, #16
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	4413      	add	r3, r2
 800d7f4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	895b      	ldrh	r3, [r3, #10]
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00e      	beq.n	800d822 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	bf0c      	ite	eq
 800d80a:	2301      	moveq	r3, #1
 800d80c:	2300      	movne	r3, #0
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	021b      	lsls	r3, r3, #8
 800d816:	b29a      	uxth	r2, r3
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	0a1b      	lsrs	r3, r3, #8
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	4313      	orrs	r3, r2
 800d820:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	613b      	str	r3, [r7, #16]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1d0      	bne.n	800d7d0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d007      	beq.n	800d844 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	021b      	lsls	r3, r3, #8
 800d838:	b29a      	uxth	r2, r3
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	0a1b      	lsrs	r3, r3, #8
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	4313      	orrs	r3, r2
 800d842:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	b29b      	uxth	r3, r3
 800d848:	43db      	mvns	r3, r3
 800d84a:	b29b      	uxth	r3, r3
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d85e:	f002 ffef 	bl	8010840 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d862:	f001 f9e3 	bl	800ec2c <mem_init>
  memp_init();
 800d866:	f001 fd47 	bl	800f2f8 <memp_init>
  pbuf_init();
  netif_init();
 800d86a:	f001 fe53 	bl	800f514 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d86e:	f008 fcd5 	bl	801621c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d872:	f003 f861 	bl	8010938 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d876:	f008 fc19 	bl	80160ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d88c:	4b33      	ldr	r3, [pc, #204]	; (800d95c <ip4_route+0xd8>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e036      	b.n	800d902 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d02b      	beq.n	800d8fc <ip4_route+0x78>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8aa:	089b      	lsrs	r3, r3, #2
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d022      	beq.n	800d8fc <ip4_route+0x78>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d01d      	beq.n	800d8fc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	405a      	eors	r2, r3
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	e038      	b.n	800d94e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8e2:	f003 0302 	and.w	r3, r3, #2
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d108      	bne.n	800d8fc <ip4_route+0x78>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	330c      	adds	r3, #12
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d101      	bne.n	800d8fc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	e028      	b.n	800d94e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	60fb      	str	r3, [r7, #12]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1c5      	bne.n	800d894 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d908:	4b15      	ldr	r3, [pc, #84]	; (800d960 <ip4_route+0xdc>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d01a      	beq.n	800d946 <ip4_route+0xc2>
 800d910:	4b13      	ldr	r3, [pc, #76]	; (800d960 <ip4_route+0xdc>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d918:	f003 0301 	and.w	r3, r3, #1
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d012      	beq.n	800d946 <ip4_route+0xc2>
 800d920:	4b0f      	ldr	r3, [pc, #60]	; (800d960 <ip4_route+0xdc>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d928:	f003 0304 	and.w	r3, r3, #4
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00a      	beq.n	800d946 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d930:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <ip4_route+0xdc>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	3304      	adds	r3, #4
 800d936:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d004      	beq.n	800d946 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b7f      	cmp	r3, #127	; 0x7f
 800d944:	d101      	bne.n	800d94a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d946:	2300      	movs	r3, #0
 800d948:	e001      	b.n	800d94e <ip4_route+0xca>
  }

  return netif_default;
 800d94a:	4b05      	ldr	r3, [pc, #20]	; (800d960 <ip4_route+0xdc>)
 800d94c:	681b      	ldr	r3, [r3, #0]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3714      	adds	r7, #20
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	24008338 	.word	0x24008338
 800d960:	2400833c 	.word	0x2400833c

0800d964 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	b2db      	uxtb	r3, r3
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d016      	beq.n	800d9aa <ip4_input_accept+0x46>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	3304      	adds	r3, #4
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d986:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <ip4_input_accept+0x50>)
 800d988:	695a      	ldr	r2, [r3, #20]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3304      	adds	r3, #4
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	429a      	cmp	r2, r3
 800d992:	d008      	beq.n	800d9a6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d994:	4b07      	ldr	r3, [pc, #28]	; (800d9b4 <ip4_input_accept+0x50>)
 800d996:	695b      	ldr	r3, [r3, #20]
 800d998:	6879      	ldr	r1, [r7, #4]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 fa06 	bl	800ddac <ip4_addr_isbroadcast_u32>
 800d9a0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e000      	b.n	800d9ac <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	24005288 	.word	0x24005288

0800d9b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b086      	sub	sp, #24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	091b      	lsrs	r3, r3, #4
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b04      	cmp	r3, #4
 800d9d2:	d004      	beq.n	800d9de <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f002 fc13 	bl	8010200 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e105      	b.n	800dbea <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	f003 030f 	and.w	r3, r3, #15
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	885b      	ldrh	r3, [r3, #2]
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fe fc6d 	bl	800c2d4 <lwip_htons>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	891b      	ldrh	r3, [r3, #8]
 800da02:	89ba      	ldrh	r2, [r7, #12]
 800da04:	429a      	cmp	r2, r3
 800da06:	d204      	bcs.n	800da12 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800da08:	89bb      	ldrh	r3, [r7, #12]
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f002 fa71 	bl	800fef4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	895b      	ldrh	r3, [r3, #10]
 800da16:	89fa      	ldrh	r2, [r7, #14]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d807      	bhi.n	800da2c <ip4_input+0x74>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	891b      	ldrh	r3, [r3, #8]
 800da20:	89ba      	ldrh	r2, [r7, #12]
 800da22:	429a      	cmp	r2, r3
 800da24:	d802      	bhi.n	800da2c <ip4_input+0x74>
 800da26:	89fb      	ldrh	r3, [r7, #14]
 800da28:	2b13      	cmp	r3, #19
 800da2a:	d804      	bhi.n	800da36 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f002 fbe7 	bl	8010200 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	e0d9      	b.n	800dbea <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	4a6e      	ldr	r2, [pc, #440]	; (800dbf4 <ip4_input+0x23c>)
 800da3c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	4a6c      	ldr	r2, [pc, #432]	; (800dbf4 <ip4_input+0x23c>)
 800da44:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da46:	4b6b      	ldr	r3, [pc, #428]	; (800dbf4 <ip4_input+0x23c>)
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da4e:	2be0      	cmp	r3, #224	; 0xe0
 800da50:	d112      	bne.n	800da78 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da58:	f003 0301 	and.w	r3, r3, #1
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d007      	beq.n	800da72 <ip4_input+0xba>
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	3304      	adds	r3, #4
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <ip4_input+0xba>
      netif = inp;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	613b      	str	r3, [r7, #16]
 800da70:	e02a      	b.n	800dac8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800da72:	2300      	movs	r3, #0
 800da74:	613b      	str	r3, [r7, #16]
 800da76:	e027      	b.n	800dac8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800da78:	6838      	ldr	r0, [r7, #0]
 800da7a:	f7ff ff73 	bl	800d964 <ip4_input_accept>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <ip4_input+0xd2>
      netif = inp;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	613b      	str	r3, [r7, #16]
 800da88:	e01e      	b.n	800dac8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800da8e:	4b59      	ldr	r3, [pc, #356]	; (800dbf4 <ip4_input+0x23c>)
 800da90:	695b      	ldr	r3, [r3, #20]
 800da92:	b2db      	uxtb	r3, r3
 800da94:	2b7f      	cmp	r3, #127	; 0x7f
 800da96:	d017      	beq.n	800dac8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800da98:	4b57      	ldr	r3, [pc, #348]	; (800dbf8 <ip4_input+0x240>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	613b      	str	r3, [r7, #16]
 800da9e:	e00e      	b.n	800dabe <ip4_input+0x106>
          if (netif == inp) {
 800daa0:	693a      	ldr	r2, [r7, #16]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d006      	beq.n	800dab6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800daa8:	6938      	ldr	r0, [r7, #16]
 800daaa:	f7ff ff5b 	bl	800d964 <ip4_input_accept>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d108      	bne.n	800dac6 <ip4_input+0x10e>
 800dab4:	e000      	b.n	800dab8 <ip4_input+0x100>
            continue;
 800dab6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	613b      	str	r3, [r7, #16]
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1ed      	bne.n	800daa0 <ip4_input+0xe8>
 800dac4:	e000      	b.n	800dac8 <ip4_input+0x110>
            break;
 800dac6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dac8:	4b4a      	ldr	r3, [pc, #296]	; (800dbf4 <ip4_input+0x23c>)
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 f96c 	bl	800ddac <ip4_addr_isbroadcast_u32>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d105      	bne.n	800dae6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dada:	4b46      	ldr	r3, [pc, #280]	; (800dbf4 <ip4_input+0x23c>)
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dae2:	2be0      	cmp	r3, #224	; 0xe0
 800dae4:	d104      	bne.n	800daf0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f002 fb8a 	bl	8010200 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800daec:	2300      	movs	r3, #0
 800daee:	e07c      	b.n	800dbea <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d104      	bne.n	800db00 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f002 fb82 	bl	8010200 <pbuf_free>
    return ERR_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	e074      	b.n	800dbea <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	88db      	ldrh	r3, [r3, #6]
 800db04:	b29b      	uxth	r3, r3
 800db06:	461a      	mov	r2, r3
 800db08:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800db0c:	4013      	ands	r3, r2
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00b      	beq.n	800db2a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fc90 	bl	800e438 <ip4_reass>
 800db18:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d101      	bne.n	800db24 <ip4_input+0x16c>
      return ERR_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	e062      	b.n	800dbea <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800db2a:	4a32      	ldr	r2, [pc, #200]	; (800dbf4 <ip4_input+0x23c>)
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800db30:	4a30      	ldr	r2, [pc, #192]	; (800dbf4 <ip4_input+0x23c>)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800db36:	4a2f      	ldr	r2, [pc, #188]	; (800dbf4 <ip4_input+0x23c>)
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	f003 030f 	and.w	r3, r3, #15
 800db44:	b2db      	uxtb	r3, r3
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	4b29      	ldr	r3, [pc, #164]	; (800dbf4 <ip4_input+0x23c>)
 800db4e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800db50:	89fb      	ldrh	r3, [r7, #14]
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f002 facd 	bl	80100f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	7a5b      	ldrb	r3, [r3, #9]
 800db5e:	2b06      	cmp	r3, #6
 800db60:	d009      	beq.n	800db76 <ip4_input+0x1be>
 800db62:	2b11      	cmp	r3, #17
 800db64:	d002      	beq.n	800db6c <ip4_input+0x1b4>
 800db66:	2b01      	cmp	r3, #1
 800db68:	d00a      	beq.n	800db80 <ip4_input+0x1c8>
 800db6a:	e00e      	b.n	800db8a <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800db6c:	6839      	ldr	r1, [r7, #0]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f008 fc02 	bl	8016378 <udp_input>
        break;
 800db74:	e026      	b.n	800dbc4 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800db76:	6839      	ldr	r1, [r7, #0]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f004 fa6b 	bl	8012054 <tcp_input>
        break;
 800db7e:	e021      	b.n	800dbc4 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7ff fbf6 	bl	800d374 <icmp_input>
        break;
 800db88:	e01c      	b.n	800dbc4 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800db8a:	4b1a      	ldr	r3, [pc, #104]	; (800dbf4 <ip4_input+0x23c>)
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	6939      	ldr	r1, [r7, #16]
 800db90:	4618      	mov	r0, r3
 800db92:	f000 f90b 	bl	800ddac <ip4_addr_isbroadcast_u32>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10f      	bne.n	800dbbc <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db9c:	4b15      	ldr	r3, [pc, #84]	; (800dbf4 <ip4_input+0x23c>)
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dba4:	2be0      	cmp	r3, #224	; 0xe0
 800dba6:	d009      	beq.n	800dbbc <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dba8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f002 fb13 	bl	80101da <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dbb4:	2102      	movs	r1, #2
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fcfc 	bl	800d5b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f002 fb1f 	bl	8010200 <pbuf_free>
        break;
 800dbc2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dbc4:	4b0b      	ldr	r3, [pc, #44]	; (800dbf4 <ip4_input+0x23c>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dbca:	4b0a      	ldr	r3, [pc, #40]	; (800dbf4 <ip4_input+0x23c>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dbd0:	4b08      	ldr	r3, [pc, #32]	; (800dbf4 <ip4_input+0x23c>)
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dbd6:	4b07      	ldr	r3, [pc, #28]	; (800dbf4 <ip4_input+0x23c>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <ip4_input+0x23c>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dbe2:	4b04      	ldr	r3, [pc, #16]	; (800dbf4 <ip4_input+0x23c>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	24005288 	.word	0x24005288
 800dbf8:	24008338 	.word	0x24008338

0800dbfc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08a      	sub	sp, #40	; 0x28
 800dc00:	af04      	add	r7, sp, #16
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d009      	beq.n	800dc28 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d003      	beq.n	800dc22 <ip4_output_if+0x26>
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d102      	bne.n	800dc28 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	3304      	adds	r3, #4
 800dc26:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dc28:	78fa      	ldrb	r2, [r7, #3]
 800dc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2c:	9302      	str	r3, [sp, #8]
 800dc2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	6979      	ldr	r1, [r7, #20]
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f000 f805 	bl	800dc50 <ip4_output_if_src>
 800dc46:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
 800dc5c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	7b9b      	ldrb	r3, [r3, #14]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d006      	beq.n	800dc74 <ip4_output_if_src+0x24>
 800dc66:	4b4b      	ldr	r3, [pc, #300]	; (800dd94 <ip4_output_if_src+0x144>)
 800dc68:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dc6c:	494a      	ldr	r1, [pc, #296]	; (800dd98 <ip4_output_if_src+0x148>)
 800dc6e:	484b      	ldr	r0, [pc, #300]	; (800dd9c <ip4_output_if_src+0x14c>)
 800dc70:	f009 f804 	bl	8016c7c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d060      	beq.n	800dd3c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dc7a:	2314      	movs	r3, #20
 800dc7c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dc7e:	2114      	movs	r1, #20
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f002 fa27 	bl	80100d4 <pbuf_add_header>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dc8c:	f06f 0301 	mvn.w	r3, #1
 800dc90:	e07c      	b.n	800dd8c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	895b      	ldrh	r3, [r3, #10]
 800dc9c:	2b13      	cmp	r3, #19
 800dc9e:	d806      	bhi.n	800dcae <ip4_output_if_src+0x5e>
 800dca0:	4b3c      	ldr	r3, [pc, #240]	; (800dd94 <ip4_output_if_src+0x144>)
 800dca2:	f240 3289 	movw	r2, #905	; 0x389
 800dca6:	493e      	ldr	r1, [pc, #248]	; (800dda0 <ip4_output_if_src+0x150>)
 800dca8:	483c      	ldr	r0, [pc, #240]	; (800dd9c <ip4_output_if_src+0x14c>)
 800dcaa:	f008 ffe7 	bl	8016c7c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	78fa      	ldrb	r2, [r7, #3]
 800dcb2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dcba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dcc4:	8b7b      	ldrh	r3, [r7, #26]
 800dcc6:	089b      	lsrs	r3, r3, #2
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dcdc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	891b      	ldrh	r3, [r3, #8]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe faf6 	bl	800c2d4 <lwip_htons>
 800dce8:	4603      	mov	r3, r0
 800dcea:	461a      	mov	r2, r3
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	719a      	strb	r2, [r3, #6]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dcfa:	4b2a      	ldr	r3, [pc, #168]	; (800dda4 <ip4_output_if_src+0x154>)
 800dcfc:	881b      	ldrh	r3, [r3, #0]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe fae8 	bl	800c2d4 <lwip_htons>
 800dd04:	4603      	mov	r3, r0
 800dd06:	461a      	mov	r2, r3
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dd0c:	4b25      	ldr	r3, [pc, #148]	; (800dda4 <ip4_output_if_src+0x154>)
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	3301      	adds	r3, #1
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	4b23      	ldr	r3, [pc, #140]	; (800dda4 <ip4_output_if_src+0x154>)
 800dd16:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d104      	bne.n	800dd28 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dd1e:	4b22      	ldr	r3, [pc, #136]	; (800dda8 <ip4_output_if_src+0x158>)
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	60da      	str	r2, [r3, #12]
 800dd26:	e003      	b.n	800dd30 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	2200      	movs	r2, #0
 800dd34:	729a      	strb	r2, [r3, #10]
 800dd36:	2200      	movs	r2, #0
 800dd38:	72da      	strb	r2, [r3, #11]
 800dd3a:	e00f      	b.n	800dd5c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	895b      	ldrh	r3, [r3, #10]
 800dd40:	2b13      	cmp	r3, #19
 800dd42:	d802      	bhi.n	800dd4a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd44:	f06f 0301 	mvn.w	r3, #1
 800dd48:	e020      	b.n	800dd8c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dd56:	f107 0314 	add.w	r3, r7, #20
 800dd5a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00c      	beq.n	800dd7e <ip4_output_if_src+0x12e>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	891a      	ldrh	r2, [r3, #8]
 800dd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d906      	bls.n	800dd7e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f000 fd4b 	bl	800e810 <ip4_frag>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	e006      	b.n	800dd8c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	68f9      	ldr	r1, [r7, #12]
 800dd86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd88:	4798      	blx	r3
 800dd8a:	4603      	mov	r3, r0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3720      	adds	r7, #32
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	0801801c 	.word	0x0801801c
 800dd98:	08018084 	.word	0x08018084
 800dd9c:	08018090 	.word	0x08018090
 800dda0:	080180b8 	.word	0x080180b8
 800dda4:	24004aba 	.word	0x24004aba
 800dda8:	0801a96c 	.word	0x0801a96c

0800ddac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b085      	sub	sp, #20
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddc0:	d002      	beq.n	800ddc8 <ip4_addr_isbroadcast_u32+0x1c>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d101      	bne.n	800ddcc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e02a      	b.n	800de22 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddd2:	f003 0302 	and.w	r3, r3, #2
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	e021      	b.n	800de22 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	3304      	adds	r3, #4
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d101      	bne.n	800ddee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	e019      	b.n	800de22 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	405a      	eors	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4013      	ands	r3, r2
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10d      	bne.n	800de20 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	3308      	adds	r3, #8
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	43da      	mvns	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	3308      	adds	r3, #8
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de18:	429a      	cmp	r2, r3
 800de1a:	d101      	bne.n	800de20 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800de1c:	2301      	movs	r3, #1
 800de1e:	e000      	b.n	800de22 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800de20:	2300      	movs	r3, #0
  }
}
 800de22:	4618      	mov	r0, r3
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
	...

0800de30 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800de36:	2300      	movs	r3, #0
 800de38:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800de3a:	4b12      	ldr	r3, [pc, #72]	; (800de84 <ip_reass_tmr+0x54>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800de40:	e018      	b.n	800de74 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	7fdb      	ldrb	r3, [r3, #31]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00b      	beq.n	800de62 <ip_reass_tmr+0x32>
      r->timer--;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	7fdb      	ldrb	r3, [r3, #31]
 800de4e:	3b01      	subs	r3, #1
 800de50:	b2da      	uxtb	r2, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	e008      	b.n	800de74 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800de6c:	68b9      	ldr	r1, [r7, #8]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 f80a 	bl	800de88 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1e3      	bne.n	800de42 <ip_reass_tmr+0x12>
    }
  }
}
 800de7a:	bf00      	nop
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	24004abc 	.word	0x24004abc

0800de88 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800de92:	2300      	movs	r3, #0
 800de94:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d105      	bne.n	800deaa <ip_reass_free_complete_datagram+0x22>
 800de9e:	4b45      	ldr	r3, [pc, #276]	; (800dfb4 <ip_reass_free_complete_datagram+0x12c>)
 800dea0:	22ab      	movs	r2, #171	; 0xab
 800dea2:	4945      	ldr	r1, [pc, #276]	; (800dfb8 <ip_reass_free_complete_datagram+0x130>)
 800dea4:	4845      	ldr	r0, [pc, #276]	; (800dfbc <ip_reass_free_complete_datagram+0x134>)
 800dea6:	f008 fee9 	bl	8016c7c <iprintf>
  if (prev != NULL) {
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00a      	beq.n	800dec6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d005      	beq.n	800dec6 <ip_reass_free_complete_datagram+0x3e>
 800deba:	4b3e      	ldr	r3, [pc, #248]	; (800dfb4 <ip_reass_free_complete_datagram+0x12c>)
 800debc:	22ad      	movs	r2, #173	; 0xad
 800debe:	4940      	ldr	r1, [pc, #256]	; (800dfc0 <ip_reass_free_complete_datagram+0x138>)
 800dec0:	483e      	ldr	r0, [pc, #248]	; (800dfbc <ip_reass_free_complete_datagram+0x134>)
 800dec2:	f008 fedb 	bl	8016c7c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	889b      	ldrh	r3, [r3, #4]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d12a      	bne.n	800df2e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	6858      	ldr	r0, [r3, #4]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	3308      	adds	r3, #8
 800deee:	2214      	movs	r2, #20
 800def0:	4619      	mov	r1, r3
 800def2:	f008 feb0 	bl	8016c56 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800def6:	2101      	movs	r1, #1
 800def8:	69b8      	ldr	r0, [r7, #24]
 800defa:	f7ff fb6b 	bl	800d5d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800defe:	69b8      	ldr	r0, [r7, #24]
 800df00:	f002 fa0c 	bl	801031c <pbuf_clen>
 800df04:	4603      	mov	r3, r0
 800df06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df08:	8bfa      	ldrh	r2, [r7, #30]
 800df0a:	8a7b      	ldrh	r3, [r7, #18]
 800df0c:	4413      	add	r3, r2
 800df0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df12:	db05      	blt.n	800df20 <ip_reass_free_complete_datagram+0x98>
 800df14:	4b27      	ldr	r3, [pc, #156]	; (800dfb4 <ip_reass_free_complete_datagram+0x12c>)
 800df16:	22bc      	movs	r2, #188	; 0xbc
 800df18:	492a      	ldr	r1, [pc, #168]	; (800dfc4 <ip_reass_free_complete_datagram+0x13c>)
 800df1a:	4828      	ldr	r0, [pc, #160]	; (800dfbc <ip_reass_free_complete_datagram+0x134>)
 800df1c:	f008 feae 	bl	8016c7c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800df20:	8bfa      	ldrh	r2, [r7, #30]
 800df22:	8a7b      	ldrh	r3, [r7, #18]
 800df24:	4413      	add	r3, r2
 800df26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800df28:	69b8      	ldr	r0, [r7, #24]
 800df2a:	f002 f969 	bl	8010200 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800df34:	e01f      	b.n	800df76 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f002 f9e8 	bl	801031c <pbuf_clen>
 800df4c:	4603      	mov	r3, r0
 800df4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df50:	8bfa      	ldrh	r2, [r7, #30]
 800df52:	8a7b      	ldrh	r3, [r7, #18]
 800df54:	4413      	add	r3, r2
 800df56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df5a:	db05      	blt.n	800df68 <ip_reass_free_complete_datagram+0xe0>
 800df5c:	4b15      	ldr	r3, [pc, #84]	; (800dfb4 <ip_reass_free_complete_datagram+0x12c>)
 800df5e:	22cc      	movs	r2, #204	; 0xcc
 800df60:	4918      	ldr	r1, [pc, #96]	; (800dfc4 <ip_reass_free_complete_datagram+0x13c>)
 800df62:	4816      	ldr	r0, [pc, #88]	; (800dfbc <ip_reass_free_complete_datagram+0x134>)
 800df64:	f008 fe8a 	bl	8016c7c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800df68:	8bfa      	ldrh	r2, [r7, #30]
 800df6a:	8a7b      	ldrh	r3, [r7, #18]
 800df6c:	4413      	add	r3, r2
 800df6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f002 f945 	bl	8010200 <pbuf_free>
  while (p != NULL) {
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1dc      	bne.n	800df36 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800df7c:	6839      	ldr	r1, [r7, #0]
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 f8c2 	bl	800e108 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800df84:	4b10      	ldr	r3, [pc, #64]	; (800dfc8 <ip_reass_free_complete_datagram+0x140>)
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	8bfa      	ldrh	r2, [r7, #30]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d905      	bls.n	800df9a <ip_reass_free_complete_datagram+0x112>
 800df8e:	4b09      	ldr	r3, [pc, #36]	; (800dfb4 <ip_reass_free_complete_datagram+0x12c>)
 800df90:	22d2      	movs	r2, #210	; 0xd2
 800df92:	490e      	ldr	r1, [pc, #56]	; (800dfcc <ip_reass_free_complete_datagram+0x144>)
 800df94:	4809      	ldr	r0, [pc, #36]	; (800dfbc <ip_reass_free_complete_datagram+0x134>)
 800df96:	f008 fe71 	bl	8016c7c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800df9a:	4b0b      	ldr	r3, [pc, #44]	; (800dfc8 <ip_reass_free_complete_datagram+0x140>)
 800df9c:	881a      	ldrh	r2, [r3, #0]
 800df9e:	8bfb      	ldrh	r3, [r7, #30]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	4b08      	ldr	r3, [pc, #32]	; (800dfc8 <ip_reass_free_complete_datagram+0x140>)
 800dfa6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dfa8:	8bfb      	ldrh	r3, [r7, #30]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3720      	adds	r7, #32
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	080180e8 	.word	0x080180e8
 800dfb8:	08018154 	.word	0x08018154
 800dfbc:	08018160 	.word	0x08018160
 800dfc0:	08018188 	.word	0x08018188
 800dfc4:	0801819c 	.word	0x0801819c
 800dfc8:	24004ac0 	.word	0x24004ac0
 800dfcc:	080181bc 	.word	0x080181bc

0800dfd0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08a      	sub	sp, #40	; 0x28
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dfee:	4b28      	ldr	r3, [pc, #160]	; (800e090 <ip_reass_remove_oldest_datagram+0xc0>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dff4:	e030      	b.n	800e058 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	695a      	ldr	r2, [r3, #20]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d10c      	bne.n	800e01c <ip_reass_remove_oldest_datagram+0x4c>
 800e002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e004:	699a      	ldr	r2, [r3, #24]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d106      	bne.n	800e01c <ip_reass_remove_oldest_datagram+0x4c>
 800e00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e010:	899a      	ldrh	r2, [r3, #12]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	889b      	ldrh	r3, [r3, #4]
 800e016:	b29b      	uxth	r3, r3
 800e018:	429a      	cmp	r2, r3
 800e01a:	d014      	beq.n	800e046 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	3301      	adds	r3, #1
 800e020:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e022:	6a3b      	ldr	r3, [r7, #32]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d104      	bne.n	800e032 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	61bb      	str	r3, [r7, #24]
 800e030:	e009      	b.n	800e046 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	7fda      	ldrb	r2, [r3, #31]
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	7fdb      	ldrb	r3, [r3, #31]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d803      	bhi.n	800e046 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1cb      	bne.n	800dff6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d008      	beq.n	800e076 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e064:	69b9      	ldr	r1, [r7, #24]
 800e066:	6a38      	ldr	r0, [r7, #32]
 800e068:	f7ff ff0e 	bl	800de88 <ip_reass_free_complete_datagram>
 800e06c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	4413      	add	r3, r2
 800e074:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	da02      	bge.n	800e084 <ip_reass_remove_oldest_datagram+0xb4>
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2b01      	cmp	r3, #1
 800e082:	dcac      	bgt.n	800dfde <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e084:	697b      	ldr	r3, [r7, #20]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3728      	adds	r7, #40	; 0x28
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	24004abc 	.word	0x24004abc

0800e094 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e09e:	2004      	movs	r0, #4
 800e0a0:	f001 f998 	bl	800f3d4 <memp_malloc>
 800e0a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d110      	bne.n	800e0ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e0ac:	6839      	ldr	r1, [r7, #0]
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff ff8e 	bl	800dfd0 <ip_reass_remove_oldest_datagram>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	dc03      	bgt.n	800e0c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e0bc:	2004      	movs	r0, #4
 800e0be:	f001 f989 	bl	800f3d4 <memp_malloc>
 800e0c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e016      	b.n	800e0fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e0ce:	2220      	movs	r2, #32
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f008 fdca 	bl	8016c6c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	220f      	movs	r2, #15
 800e0dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e0de:	4b09      	ldr	r3, [pc, #36]	; (800e104 <ip_reass_enqueue_new_datagram+0x70>)
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e0e6:	4a07      	ldr	r2, [pc, #28]	; (800e104 <ip_reass_enqueue_new_datagram+0x70>)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	3308      	adds	r3, #8
 800e0f0:	2214      	movs	r2, #20
 800e0f2:	6879      	ldr	r1, [r7, #4]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f008 fdae 	bl	8016c56 <memcpy>
  return ipr;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	24004abc 	.word	0x24004abc

0800e108 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e112:	4b10      	ldr	r3, [pc, #64]	; (800e154 <ip_reass_dequeue_datagram+0x4c>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d104      	bne.n	800e126 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a0c      	ldr	r2, [pc, #48]	; (800e154 <ip_reass_dequeue_datagram+0x4c>)
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	e00d      	b.n	800e142 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <ip_reass_dequeue_datagram+0x32>
 800e12c:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <ip_reass_dequeue_datagram+0x50>)
 800e12e:	f240 1245 	movw	r2, #325	; 0x145
 800e132:	490a      	ldr	r1, [pc, #40]	; (800e15c <ip_reass_dequeue_datagram+0x54>)
 800e134:	480a      	ldr	r0, [pc, #40]	; (800e160 <ip_reass_dequeue_datagram+0x58>)
 800e136:	f008 fda1 	bl	8016c7c <iprintf>
    prev->next = ipr->next;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e142:	6879      	ldr	r1, [r7, #4]
 800e144:	2004      	movs	r0, #4
 800e146:	f001 f9bb 	bl	800f4c0 <memp_free>
}
 800e14a:	bf00      	nop
 800e14c:	3708      	adds	r7, #8
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	24004abc 	.word	0x24004abc
 800e158:	080180e8 	.word	0x080180e8
 800e15c:	080181e0 	.word	0x080181e0
 800e160:	08018160 	.word	0x08018160

0800e164 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08c      	sub	sp, #48	; 0x30
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e170:	2300      	movs	r3, #0
 800e172:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e174:	2301      	movs	r3, #1
 800e176:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	885b      	ldrh	r3, [r3, #2]
 800e182:	b29b      	uxth	r3, r3
 800e184:	4618      	mov	r0, r3
 800e186:	f7fe f8a5 	bl	800c2d4 <lwip_htons>
 800e18a:	4603      	mov	r3, r0
 800e18c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	f003 030f 	and.w	r3, r3, #15
 800e196:	b2db      	uxtb	r3, r3
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e19c:	7e7b      	ldrb	r3, [r7, #25]
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	8b7a      	ldrh	r2, [r7, #26]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d202      	bcs.n	800e1ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1aa:	e135      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e1ac:	7e7b      	ldrb	r3, [r7, #25]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	8b7a      	ldrh	r2, [r7, #26]
 800e1b2:	1ad3      	subs	r3, r2, r3
 800e1b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	88db      	ldrh	r3, [r3, #6]
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fe f889 	bl	800c2d4 <lwip_htons>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	00db      	lsls	r3, r3, #3
 800e1cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	701a      	strb	r2, [r3, #0]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	705a      	strb	r2, [r3, #1]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	709a      	strb	r2, [r3, #2]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	8afa      	ldrh	r2, [r7, #22]
 800e1ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e1ec:	8afa      	ldrh	r2, [r7, #22]
 800e1ee:	8b7b      	ldrh	r3, [r7, #26]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	88db      	ldrh	r3, [r3, #6]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	8afa      	ldrh	r2, [r7, #22]
 800e200:	429a      	cmp	r2, r3
 800e202:	d902      	bls.n	800e20a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e208:	e106      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	627b      	str	r3, [r7, #36]	; 0x24
 800e210:	e068      	b.n	800e2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	889b      	ldrh	r3, [r3, #4]
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	889b      	ldrh	r3, [r3, #4]
 800e222:	b29b      	uxth	r3, r3
 800e224:	429a      	cmp	r2, r3
 800e226:	d235      	bcs.n	800e294 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e22c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	2b00      	cmp	r3, #0
 800e232:	d020      	beq.n	800e276 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	889b      	ldrh	r3, [r3, #4]
 800e238:	b29a      	uxth	r2, r3
 800e23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23c:	88db      	ldrh	r3, [r3, #6]
 800e23e:	b29b      	uxth	r3, r3
 800e240:	429a      	cmp	r2, r3
 800e242:	d307      	bcc.n	800e254 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e246:	88db      	ldrh	r3, [r3, #6]
 800e248:	b29a      	uxth	r2, r3
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	889b      	ldrh	r3, [r3, #4]
 800e24e:	b29b      	uxth	r3, r3
 800e250:	429a      	cmp	r2, r3
 800e252:	d902      	bls.n	800e25a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e258:	e0de      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	88db      	ldrh	r3, [r3, #6]
 800e264:	b29a      	uxth	r2, r3
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	889b      	ldrh	r3, [r3, #4]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d03d      	beq.n	800e2ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e270:	2300      	movs	r3, #0
 800e272:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e274:	e03a      	b.n	800e2ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	88db      	ldrh	r3, [r3, #6]
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	889b      	ldrh	r3, [r3, #4]
 800e280:	b29b      	uxth	r3, r3
 800e282:	429a      	cmp	r2, r3
 800e284:	d902      	bls.n	800e28c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e28a:	e0c5      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	605a      	str	r2, [r3, #4]
      break;
 800e292:	e02b      	b.n	800e2ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	889b      	ldrh	r3, [r3, #4]
 800e298:	b29a      	uxth	r2, r3
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	889b      	ldrh	r3, [r3, #4]
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d102      	bne.n	800e2aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2a8:	e0b6      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ac:	889b      	ldrh	r3, [r3, #4]
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	88db      	ldrh	r3, [r3, #6]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d202      	bcs.n	800e2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2be:	e0ab      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d009      	beq.n	800e2da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c8:	88db      	ldrh	r3, [r3, #6]
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	889b      	ldrh	r3, [r3, #4]
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d001      	beq.n	800e2da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d193      	bne.n	800e212 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e2ea:	e000      	b.n	800e2ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e2ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d12d      	bne.n	800e350 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d01c      	beq.n	800e334 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fc:	88db      	ldrh	r3, [r3, #6]
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	889b      	ldrh	r3, [r3, #4]
 800e304:	b29b      	uxth	r3, r3
 800e306:	429a      	cmp	r2, r3
 800e308:	d906      	bls.n	800e318 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e30a:	4b45      	ldr	r3, [pc, #276]	; (800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e30c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e310:	4944      	ldr	r1, [pc, #272]	; (800e424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e312:	4845      	ldr	r0, [pc, #276]	; (800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e314:	f008 fcb2 	bl	8016c7c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	88db      	ldrh	r3, [r3, #6]
 800e322:	b29a      	uxth	r2, r3
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	889b      	ldrh	r3, [r3, #4]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d010      	beq.n	800e350 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	623b      	str	r3, [r7, #32]
 800e332:	e00d      	b.n	800e350 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d006      	beq.n	800e34a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e33c:	4b38      	ldr	r3, [pc, #224]	; (800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e33e:	f240 12bf 	movw	r2, #447	; 0x1bf
 800e342:	493a      	ldr	r1, [pc, #232]	; (800e42c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e344:	4838      	ldr	r0, [pc, #224]	; (800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e346:	f008 fc99 	bl	8016c7c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d105      	bne.n	800e362 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	7f9b      	ldrb	r3, [r3, #30]
 800e35a:	f003 0301 	and.w	r3, r3, #1
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d059      	beq.n	800e416 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d04f      	beq.n	800e408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d006      	beq.n	800e37e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	889b      	ldrh	r3, [r3, #4]
 800e378:	b29b      	uxth	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d002      	beq.n	800e384 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	623b      	str	r3, [r7, #32]
 800e382:	e041      	b.n	800e408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e386:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e38e:	e012      	b.n	800e3b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e398:	88db      	ldrh	r3, [r3, #6]
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39e:	889b      	ldrh	r3, [r3, #4]
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d002      	beq.n	800e3ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	623b      	str	r3, [r7, #32]
            break;
 800e3aa:	e007      	b.n	800e3bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1e9      	bne.n	800e390 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e3bc:	6a3b      	ldr	r3, [r7, #32]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d022      	beq.n	800e408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d106      	bne.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e3ca:	4b15      	ldr	r3, [pc, #84]	; (800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3cc:	f240 12df 	movw	r2, #479	; 0x1df
 800e3d0:	4917      	ldr	r1, [pc, #92]	; (800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e3d2:	4815      	ldr	r0, [pc, #84]	; (800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3d4:	f008 fc52 	bl	8016c7c <iprintf>
          LWIP_ASSERT("sanity check",
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d106      	bne.n	800e3f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e3e4:	4b0e      	ldr	r3, [pc, #56]	; (800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e3ea:	4911      	ldr	r1, [pc, #68]	; (800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e3ec:	480e      	ldr	r0, [pc, #56]	; (800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3ee:	f008 fc45 	bl	8016c7c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d006      	beq.n	800e408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e3fa:	4b09      	ldr	r3, [pc, #36]	; (800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3fc:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e400:	490c      	ldr	r1, [pc, #48]	; (800e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e402:	4809      	ldr	r0, [pc, #36]	; (800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e404:	f008 fc3a 	bl	8016c7c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e408:	6a3b      	ldr	r3, [r7, #32]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	bf14      	ite	ne
 800e40e:	2301      	movne	r3, #1
 800e410:	2300      	moveq	r3, #0
 800e412:	b2db      	uxtb	r3, r3
 800e414:	e000      	b.n	800e418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3730      	adds	r7, #48	; 0x30
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	080180e8 	.word	0x080180e8
 800e424:	080181fc 	.word	0x080181fc
 800e428:	08018160 	.word	0x08018160
 800e42c:	0801821c 	.word	0x0801821c
 800e430:	08018254 	.word	0x08018254
 800e434:	08018264 	.word	0x08018264

0800e438 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08e      	sub	sp, #56	; 0x38
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	f003 030f 	and.w	r3, r3, #15
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b14      	cmp	r3, #20
 800e456:	f040 8167 	bne.w	800e728 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45c:	88db      	ldrh	r3, [r3, #6]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	4618      	mov	r0, r3
 800e462:	f7fd ff37 	bl	800c2d4 <lwip_htons>
 800e466:	4603      	mov	r3, r0
 800e468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	00db      	lsls	r3, r3, #3
 800e470:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	885b      	ldrh	r3, [r3, #2]
 800e476:	b29b      	uxth	r3, r3
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fd ff2b 	bl	800c2d4 <lwip_htons>
 800e47e:	4603      	mov	r3, r0
 800e480:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	f003 030f 	and.w	r3, r3, #15
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e496:	b29b      	uxth	r3, r3
 800e498:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e49a:	429a      	cmp	r2, r3
 800e49c:	f0c0 8146 	bcc.w	800e72c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e4a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 ff35 	bl	801031c <pbuf_clen>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e4b6:	4ba3      	ldr	r3, [pc, #652]	; (800e744 <ip4_reass+0x30c>)
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	8c3b      	ldrh	r3, [r7, #32]
 800e4be:	4413      	add	r3, r2
 800e4c0:	2b0a      	cmp	r3, #10
 800e4c2:	dd10      	ble.n	800e4e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e4c4:	8c3b      	ldrh	r3, [r7, #32]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ca:	f7ff fd81 	bl	800dfd0 <ip_reass_remove_oldest_datagram>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f000 812d 	beq.w	800e730 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e4d6:	4b9b      	ldr	r3, [pc, #620]	; (800e744 <ip4_reass+0x30c>)
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	8c3b      	ldrh	r3, [r7, #32]
 800e4de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e4e0:	2b0a      	cmp	r3, #10
 800e4e2:	f300 8125 	bgt.w	800e730 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e4e6:	4b98      	ldr	r3, [pc, #608]	; (800e748 <ip4_reass+0x310>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ec:	e015      	b.n	800e51a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	695a      	ldr	r2, [r3, #20]
 800e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d10c      	bne.n	800e514 <ip4_reass+0xdc>
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	699a      	ldr	r2, [r3, #24]
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	691b      	ldr	r3, [r3, #16]
 800e502:	429a      	cmp	r2, r3
 800e504:	d106      	bne.n	800e514 <ip4_reass+0xdc>
 800e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e508:	899a      	ldrh	r2, [r3, #12]
 800e50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50c:	889b      	ldrh	r3, [r3, #4]
 800e50e:	b29b      	uxth	r3, r3
 800e510:	429a      	cmp	r2, r3
 800e512:	d006      	beq.n	800e522 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	633b      	str	r3, [r7, #48]	; 0x30
 800e51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1e6      	bne.n	800e4ee <ip4_reass+0xb6>
 800e520:	e000      	b.n	800e524 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e522:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e526:	2b00      	cmp	r3, #0
 800e528:	d109      	bne.n	800e53e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e52a:	8c3b      	ldrh	r3, [r7, #32]
 800e52c:	4619      	mov	r1, r3
 800e52e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e530:	f7ff fdb0 	bl	800e094 <ip_reass_enqueue_new_datagram>
 800e534:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d11c      	bne.n	800e576 <ip4_reass+0x13e>
      goto nullreturn;
 800e53c:	e0f9      	b.n	800e732 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e540:	88db      	ldrh	r3, [r3, #6]
 800e542:	b29b      	uxth	r3, r3
 800e544:	4618      	mov	r0, r3
 800e546:	f7fd fec5 	bl	800c2d4 <lwip_htons>
 800e54a:	4603      	mov	r3, r0
 800e54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e550:	2b00      	cmp	r3, #0
 800e552:	d110      	bne.n	800e576 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e556:	89db      	ldrh	r3, [r3, #14]
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fd febb 	bl	800c2d4 <lwip_htons>
 800e55e:	4603      	mov	r3, r0
 800e560:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e564:	2b00      	cmp	r3, #0
 800e566:	d006      	beq.n	800e576 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56a:	3308      	adds	r3, #8
 800e56c:	2214      	movs	r2, #20
 800e56e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e570:	4618      	mov	r0, r3
 800e572:	f008 fb70 	bl	8016c56 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e578:	88db      	ldrh	r3, [r3, #6]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	f003 0320 	and.w	r3, r3, #32
 800e580:	2b00      	cmp	r3, #0
 800e582:	bf0c      	ite	eq
 800e584:	2301      	moveq	r3, #1
 800e586:	2300      	movne	r3, #0
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00e      	beq.n	800e5b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e592:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e596:	4413      	add	r3, r2
 800e598:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e59a:	8b7a      	ldrh	r2, [r7, #26]
 800e59c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	f0c0 80a0 	bcc.w	800e6e4 <ip4_reass+0x2ac>
 800e5a4:	8b7b      	ldrh	r3, [r7, #26]
 800e5a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	f200 809a 	bhi.w	800e6e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e5b0:	69fa      	ldr	r2, [r7, #28]
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5b6:	f7ff fdd5 	bl	800e164 <ip_reass_chain_frag_into_datagram_and_validate>
 800e5ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5c2:	f000 8091 	beq.w	800e6e8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e5c6:	4b5f      	ldr	r3, [pc, #380]	; (800e744 <ip4_reass+0x30c>)
 800e5c8:	881a      	ldrh	r2, [r3, #0]
 800e5ca:	8c3b      	ldrh	r3, [r7, #32]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	4b5c      	ldr	r3, [pc, #368]	; (800e744 <ip4_reass+0x30c>)
 800e5d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00d      	beq.n	800e5f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e5da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5de:	4413      	add	r3, r2
 800e5e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	8a7a      	ldrh	r2, [r7, #18]
 800e5e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ea:	7f9b      	ldrb	r3, [r3, #30]
 800e5ec:	f043 0301 	orr.w	r3, r3, #1
 800e5f0:	b2da      	uxtb	r2, r3
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d171      	bne.n	800e6e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fe:	8b9b      	ldrh	r3, [r3, #28]
 800e600:	3314      	adds	r3, #20
 800e602:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	3308      	adds	r3, #8
 800e61a:	2214      	movs	r2, #20
 800e61c:	4619      	mov	r1, r3
 800e61e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e620:	f008 fb19 	bl	8016c56 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e624:	8a3b      	ldrh	r3, [r7, #16]
 800e626:	4618      	mov	r0, r3
 800e628:	f7fd fe54 	bl	800c2d4 <lwip_htons>
 800e62c:	4603      	mov	r3, r0
 800e62e:	461a      	mov	r2, r3
 800e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e632:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e636:	2200      	movs	r2, #0
 800e638:	719a      	strb	r2, [r3, #6]
 800e63a:	2200      	movs	r2, #0
 800e63c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e640:	2200      	movs	r2, #0
 800e642:	729a      	strb	r2, [r3, #10]
 800e644:	2200      	movs	r2, #0
 800e646:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e64e:	e00d      	b.n	800e66c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e656:	2114      	movs	r1, #20
 800e658:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e65a:	f001 fd4b 	bl	80100f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e65e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f001 fe9b 	bl	801039c <pbuf_cat>
      r = iprh->next_pbuf;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1ee      	bne.n	800e650 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e672:	4b35      	ldr	r3, [pc, #212]	; (800e748 <ip4_reass+0x310>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e678:	429a      	cmp	r2, r3
 800e67a:	d102      	bne.n	800e682 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e67c:	2300      	movs	r3, #0
 800e67e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e680:	e010      	b.n	800e6a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e682:	4b31      	ldr	r3, [pc, #196]	; (800e748 <ip4_reass+0x310>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e688:	e007      	b.n	800e69a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e690:	429a      	cmp	r2, r3
 800e692:	d006      	beq.n	800e6a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1f4      	bne.n	800e68a <ip4_reass+0x252>
 800e6a0:	e000      	b.n	800e6a4 <ip4_reass+0x26c>
          break;
 800e6a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e6a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6a8:	f7ff fd2e 	bl	800e108 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f001 fe35 	bl	801031c <pbuf_clen>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e6b6:	4b23      	ldr	r3, [pc, #140]	; (800e744 <ip4_reass+0x30c>)
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	8c3a      	ldrh	r2, [r7, #32]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d906      	bls.n	800e6ce <ip4_reass+0x296>
 800e6c0:	4b22      	ldr	r3, [pc, #136]	; (800e74c <ip4_reass+0x314>)
 800e6c2:	f240 229b 	movw	r2, #667	; 0x29b
 800e6c6:	4922      	ldr	r1, [pc, #136]	; (800e750 <ip4_reass+0x318>)
 800e6c8:	4822      	ldr	r0, [pc, #136]	; (800e754 <ip4_reass+0x31c>)
 800e6ca:	f008 fad7 	bl	8016c7c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e6ce:	4b1d      	ldr	r3, [pc, #116]	; (800e744 <ip4_reass+0x30c>)
 800e6d0:	881a      	ldrh	r2, [r3, #0]
 800e6d2:	8c3b      	ldrh	r3, [r7, #32]
 800e6d4:	1ad3      	subs	r3, r2, r3
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	4b1a      	ldr	r3, [pc, #104]	; (800e744 <ip4_reass+0x30c>)
 800e6da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	e02c      	b.n	800e73a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	e02a      	b.n	800e73a <ip4_reass+0x302>

nullreturn_ipr:
 800e6e4:	bf00      	nop
 800e6e6:	e000      	b.n	800e6ea <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e6e8:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d106      	bne.n	800e6fe <ip4_reass+0x2c6>
 800e6f0:	4b16      	ldr	r3, [pc, #88]	; (800e74c <ip4_reass+0x314>)
 800e6f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e6f6:	4918      	ldr	r1, [pc, #96]	; (800e758 <ip4_reass+0x320>)
 800e6f8:	4816      	ldr	r0, [pc, #88]	; (800e754 <ip4_reass+0x31c>)
 800e6fa:	f008 fabf 	bl	8016c7c <iprintf>
  if (ipr->p == NULL) {
 800e6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d114      	bne.n	800e730 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e706:	4b10      	ldr	r3, [pc, #64]	; (800e748 <ip4_reass+0x310>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d006      	beq.n	800e71e <ip4_reass+0x2e6>
 800e710:	4b0e      	ldr	r3, [pc, #56]	; (800e74c <ip4_reass+0x314>)
 800e712:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e716:	4911      	ldr	r1, [pc, #68]	; (800e75c <ip4_reass+0x324>)
 800e718:	480e      	ldr	r0, [pc, #56]	; (800e754 <ip4_reass+0x31c>)
 800e71a:	f008 faaf 	bl	8016c7c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e71e:	2100      	movs	r1, #0
 800e720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e722:	f7ff fcf1 	bl	800e108 <ip_reass_dequeue_datagram>
 800e726:	e004      	b.n	800e732 <ip4_reass+0x2fa>
    goto nullreturn;
 800e728:	bf00      	nop
 800e72a:	e002      	b.n	800e732 <ip4_reass+0x2fa>
    goto nullreturn;
 800e72c:	bf00      	nop
 800e72e:	e000      	b.n	800e732 <ip4_reass+0x2fa>
  }

nullreturn:
 800e730:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f001 fd64 	bl	8010200 <pbuf_free>
  return NULL;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3738      	adds	r7, #56	; 0x38
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	24004ac0 	.word	0x24004ac0
 800e748:	24004abc 	.word	0x24004abc
 800e74c:	080180e8 	.word	0x080180e8
 800e750:	08018288 	.word	0x08018288
 800e754:	08018160 	.word	0x08018160
 800e758:	080182a4 	.word	0x080182a4
 800e75c:	080182b0 	.word	0x080182b0

0800e760 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e764:	2005      	movs	r0, #5
 800e766:	f000 fe35 	bl	800f3d4 <memp_malloc>
 800e76a:	4603      	mov	r3, r0
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e77e:	4b07      	ldr	r3, [pc, #28]	; (800e79c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e780:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e784:	4906      	ldr	r1, [pc, #24]	; (800e7a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e786:	4807      	ldr	r0, [pc, #28]	; (800e7a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e788:	f008 fa78 	bl	8016c7c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e78c:	6879      	ldr	r1, [r7, #4]
 800e78e:	2005      	movs	r0, #5
 800e790:	f000 fe96 	bl	800f4c0 <memp_free>
}
 800e794:	bf00      	nop
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	080180e8 	.word	0x080180e8
 800e7a0:	080182d0 	.word	0x080182d0
 800e7a4:	08018160 	.word	0x08018160

0800e7a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <ipfrag_free_pbuf_custom+0x20>
 800e7ba:	4b11      	ldr	r3, [pc, #68]	; (800e800 <ipfrag_free_pbuf_custom+0x58>)
 800e7bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e7c0:	4910      	ldr	r1, [pc, #64]	; (800e804 <ipfrag_free_pbuf_custom+0x5c>)
 800e7c2:	4811      	ldr	r0, [pc, #68]	; (800e808 <ipfrag_free_pbuf_custom+0x60>)
 800e7c4:	f008 fa5a 	bl	8016c7c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d006      	beq.n	800e7de <ipfrag_free_pbuf_custom+0x36>
 800e7d0:	4b0b      	ldr	r3, [pc, #44]	; (800e800 <ipfrag_free_pbuf_custom+0x58>)
 800e7d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e7d6:	490d      	ldr	r1, [pc, #52]	; (800e80c <ipfrag_free_pbuf_custom+0x64>)
 800e7d8:	480b      	ldr	r0, [pc, #44]	; (800e808 <ipfrag_free_pbuf_custom+0x60>)
 800e7da:	f008 fa4f 	bl	8016c7c <iprintf>
  if (pcr->original != NULL) {
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d004      	beq.n	800e7f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	695b      	ldr	r3, [r3, #20]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f001 fd08 	bl	8010200 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f7ff ffbd 	bl	800e770 <ip_frag_free_pbuf_custom_ref>
}
 800e7f6:	bf00      	nop
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	080180e8 	.word	0x080180e8
 800e804:	080182dc 	.word	0x080182dc
 800e808:	08018160 	.word	0x08018160
 800e80c:	080182e8 	.word	0x080182e8

0800e810 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b094      	sub	sp, #80	; 0x50
 800e814:	af02      	add	r7, sp, #8
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e826:	3b14      	subs	r3, #20
 800e828:	2b00      	cmp	r3, #0
 800e82a:	da00      	bge.n	800e82e <ip4_frag+0x1e>
 800e82c:	3307      	adds	r3, #7
 800e82e:	10db      	asrs	r3, r3, #3
 800e830:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e832:	2314      	movs	r3, #20
 800e834:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e83e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	f003 030f 	and.w	r3, r3, #15
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b14      	cmp	r3, #20
 800e850:	d002      	beq.n	800e858 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e852:	f06f 0305 	mvn.w	r3, #5
 800e856:	e10f      	b.n	800ea78 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	895b      	ldrh	r3, [r3, #10]
 800e85c:	2b13      	cmp	r3, #19
 800e85e:	d809      	bhi.n	800e874 <ip4_frag+0x64>
 800e860:	4b87      	ldr	r3, [pc, #540]	; (800ea80 <ip4_frag+0x270>)
 800e862:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e866:	4987      	ldr	r1, [pc, #540]	; (800ea84 <ip4_frag+0x274>)
 800e868:	4887      	ldr	r0, [pc, #540]	; (800ea88 <ip4_frag+0x278>)
 800e86a:	f008 fa07 	bl	8016c7c <iprintf>
 800e86e:	f06f 0305 	mvn.w	r3, #5
 800e872:	e101      	b.n	800ea78 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e876:	88db      	ldrh	r3, [r3, #6]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fd fd2a 	bl	800c2d4 <lwip_htons>
 800e880:	4603      	mov	r3, r0
 800e882:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e884:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e886:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e88a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e88e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e894:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	891b      	ldrh	r3, [r3, #8]
 800e89a:	3b14      	subs	r3, #20
 800e89c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e8a0:	e0e0      	b.n	800ea64 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e8a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e8a4:	00db      	lsls	r3, r3, #3
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	bf28      	it	cs
 800e8b0:	4613      	movcs	r3, r2
 800e8b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e8b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e8b8:	2114      	movs	r1, #20
 800e8ba:	200e      	movs	r0, #14
 800e8bc:	f001 f9c0 	bl	800fc40 <pbuf_alloc>
 800e8c0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	f000 80d4 	beq.w	800ea72 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	895b      	ldrh	r3, [r3, #10]
 800e8ce:	2b13      	cmp	r3, #19
 800e8d0:	d806      	bhi.n	800e8e0 <ip4_frag+0xd0>
 800e8d2:	4b6b      	ldr	r3, [pc, #428]	; (800ea80 <ip4_frag+0x270>)
 800e8d4:	f240 3225 	movw	r2, #805	; 0x325
 800e8d8:	496c      	ldr	r1, [pc, #432]	; (800ea8c <ip4_frag+0x27c>)
 800e8da:	486b      	ldr	r0, [pc, #428]	; (800ea88 <ip4_frag+0x278>)
 800e8dc:	f008 f9ce 	bl	8016c7c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	2214      	movs	r2, #20
 800e8e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f008 f9b4 	bl	8016c56 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e8f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e8fa:	e064      	b.n	800e9c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	895a      	ldrh	r2, [r3, #10]
 800e900:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	895b      	ldrh	r3, [r3, #10]
 800e90a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d906      	bls.n	800e91e <ip4_frag+0x10e>
 800e910:	4b5b      	ldr	r3, [pc, #364]	; (800ea80 <ip4_frag+0x270>)
 800e912:	f240 322d 	movw	r2, #813	; 0x32d
 800e916:	495e      	ldr	r1, [pc, #376]	; (800ea90 <ip4_frag+0x280>)
 800e918:	485b      	ldr	r0, [pc, #364]	; (800ea88 <ip4_frag+0x278>)
 800e91a:	f008 f9af 	bl	8016c7c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e91e:	8bfa      	ldrh	r2, [r7, #30]
 800e920:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e924:	4293      	cmp	r3, r2
 800e926:	bf28      	it	cs
 800e928:	4613      	movcs	r3, r2
 800e92a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e92e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e932:	2b00      	cmp	r3, #0
 800e934:	d105      	bne.n	800e942 <ip4_frag+0x132>
        poff = 0;
 800e936:	2300      	movs	r3, #0
 800e938:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]
        continue;
 800e940:	e041      	b.n	800e9c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e942:	f7ff ff0d 	bl	800e760 <ip_frag_alloc_pbuf_custom_ref>
 800e946:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d103      	bne.n	800e956 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e94e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e950:	f001 fc56 	bl	8010200 <pbuf_free>
        goto memerr;
 800e954:	e08e      	b.n	800ea74 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e956:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e95c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e95e:	4413      	add	r3, r2
 800e960:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e964:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e968:	9201      	str	r2, [sp, #4]
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	4603      	mov	r3, r0
 800e96e:	2241      	movs	r2, #65	; 0x41
 800e970:	2000      	movs	r0, #0
 800e972:	f001 fa8b 	bl	800fe8c <pbuf_alloced_custom>
 800e976:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d106      	bne.n	800e98c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e97e:	69b8      	ldr	r0, [r7, #24]
 800e980:	f7ff fef6 	bl	800e770 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e986:	f001 fc3b 	bl	8010200 <pbuf_free>
        goto memerr;
 800e98a:	e073      	b.n	800ea74 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f001 fcdd 	bl	801034c <pbuf_ref>
      pcr->original = p;
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	4a3e      	ldr	r2, [pc, #248]	; (800ea94 <ip4_frag+0x284>)
 800e99c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e99e:	6979      	ldr	r1, [r7, #20]
 800e9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9a2:	f001 fcfb 	bl	801039c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e9a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e9aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e9b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <ip4_frag+0x1b6>
        poff = 0;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e9c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d196      	bne.n	800e8fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e9ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e9d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e9d4:	4413      	add	r3, r2
 800e9d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e9d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9e0:	3b14      	subs	r3, #20
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	bfd4      	ite	le
 800e9e6:	2301      	movle	r3, #1
 800e9e8:	2300      	movgt	r3, #0
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e9ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e9f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d002      	beq.n	800ea04 <ip4_frag+0x1f4>
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d003      	beq.n	800ea0c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ea04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ea0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ea0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fd fc60 	bl	800c2d4 <lwip_htons>
 800ea14:	4603      	mov	r3, r0
 800ea16:	461a      	mov	r2, r3
 800ea18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ea1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea1e:	3314      	adds	r3, #20
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fd fc56 	bl	800c2d4 <lwip_htons>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ea30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea32:	2200      	movs	r2, #0
 800ea34:	729a      	strb	r2, [r3, #10]
 800ea36:	2200      	movs	r2, #0
 800ea38:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	695b      	ldr	r3, [r3, #20]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea42:	68b8      	ldr	r0, [r7, #8]
 800ea44:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ea46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea48:	f001 fbda 	bl	8010200 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ea4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ea58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ea5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ea5e:	4413      	add	r3, r2
 800ea60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ea64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f47f af1a 	bne.w	800e8a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	e002      	b.n	800ea78 <ip4_frag+0x268>
      goto memerr;
 800ea72:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ea74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3748      	adds	r7, #72	; 0x48
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	080180e8 	.word	0x080180e8
 800ea84:	080182f4 	.word	0x080182f4
 800ea88:	08018160 	.word	0x08018160
 800ea8c:	08018310 	.word	0x08018310
 800ea90:	08018330 	.word	0x08018330
 800ea94:	0800e7a9 	.word	0x0800e7a9

0800ea98 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800eaa2:	4b05      	ldr	r3, [pc, #20]	; (800eab8 <ptr_to_mem+0x20>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	88fb      	ldrh	r3, [r7, #6]
 800eaa8:	4413      	add	r3, r2
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop
 800eab8:	24004ac4 	.word	0x24004ac4

0800eabc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a05      	ldr	r2, [pc, #20]	; (800eadc <mem_to_ptr+0x20>)
 800eac8:	6812      	ldr	r2, [r2, #0]
 800eaca:	1a9b      	subs	r3, r3, r2
 800eacc:	b29b      	uxth	r3, r3
}
 800eace:	4618      	mov	r0, r3
 800ead0:	370c      	adds	r7, #12
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	24004ac4 	.word	0x24004ac4

0800eae0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eae0:	b590      	push	{r4, r7, lr}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eae8:	4b47      	ldr	r3, [pc, #284]	; (800ec08 <plug_holes+0x128>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d206      	bcs.n	800eb00 <plug_holes+0x20>
 800eaf2:	4b46      	ldr	r3, [pc, #280]	; (800ec0c <plug_holes+0x12c>)
 800eaf4:	f240 12df 	movw	r2, #479	; 0x1df
 800eaf8:	4945      	ldr	r1, [pc, #276]	; (800ec10 <plug_holes+0x130>)
 800eafa:	4846      	ldr	r0, [pc, #280]	; (800ec14 <plug_holes+0x134>)
 800eafc:	f008 f8be 	bl	8016c7c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eb00:	4b45      	ldr	r3, [pc, #276]	; (800ec18 <plug_holes+0x138>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d306      	bcc.n	800eb18 <plug_holes+0x38>
 800eb0a:	4b40      	ldr	r3, [pc, #256]	; (800ec0c <plug_holes+0x12c>)
 800eb0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eb10:	4942      	ldr	r1, [pc, #264]	; (800ec1c <plug_holes+0x13c>)
 800eb12:	4840      	ldr	r0, [pc, #256]	; (800ec14 <plug_holes+0x134>)
 800eb14:	f008 f8b2 	bl	8016c7c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	791b      	ldrb	r3, [r3, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d006      	beq.n	800eb2e <plug_holes+0x4e>
 800eb20:	4b3a      	ldr	r3, [pc, #232]	; (800ec0c <plug_holes+0x12c>)
 800eb22:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eb26:	493e      	ldr	r1, [pc, #248]	; (800ec20 <plug_holes+0x140>)
 800eb28:	483a      	ldr	r0, [pc, #232]	; (800ec14 <plug_holes+0x134>)
 800eb2a:	f008 f8a7 	bl	8016c7c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	881b      	ldrh	r3, [r3, #0]
 800eb32:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d906      	bls.n	800eb48 <plug_holes+0x68>
 800eb3a:	4b34      	ldr	r3, [pc, #208]	; (800ec0c <plug_holes+0x12c>)
 800eb3c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800eb40:	4938      	ldr	r1, [pc, #224]	; (800ec24 <plug_holes+0x144>)
 800eb42:	4834      	ldr	r0, [pc, #208]	; (800ec14 <plug_holes+0x134>)
 800eb44:	f008 f89a 	bl	8016c7c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	881b      	ldrh	r3, [r3, #0]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff ffa3 	bl	800ea98 <ptr_to_mem>
 800eb52:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d025      	beq.n	800eba8 <plug_holes+0xc8>
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	791b      	ldrb	r3, [r3, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d121      	bne.n	800eba8 <plug_holes+0xc8>
 800eb64:	4b2c      	ldr	r3, [pc, #176]	; (800ec18 <plug_holes+0x138>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d01c      	beq.n	800eba8 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800eb6e:	4b2e      	ldr	r3, [pc, #184]	; (800ec28 <plug_holes+0x148>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d102      	bne.n	800eb7e <plug_holes+0x9e>
      lfree = mem;
 800eb78:	4a2b      	ldr	r2, [pc, #172]	; (800ec28 <plug_holes+0x148>)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	881a      	ldrh	r2, [r3, #0]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d00a      	beq.n	800eba8 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff ff7e 	bl	800ea98 <ptr_to_mem>
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff ff8c 	bl	800eabc <mem_to_ptr>
 800eba4:	4603      	mov	r3, r0
 800eba6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	885b      	ldrh	r3, [r3, #2]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7ff ff73 	bl	800ea98 <ptr_to_mem>
 800ebb2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d020      	beq.n	800ebfe <plug_holes+0x11e>
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	791b      	ldrb	r3, [r3, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d11c      	bne.n	800ebfe <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ebc4:	4b18      	ldr	r3, [pc, #96]	; (800ec28 <plug_holes+0x148>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d102      	bne.n	800ebd4 <plug_holes+0xf4>
      lfree = pmem;
 800ebce:	4a16      	ldr	r2, [pc, #88]	; (800ec28 <plug_holes+0x148>)
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	881a      	ldrh	r2, [r3, #0]
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	881b      	ldrh	r3, [r3, #0]
 800ebe0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d00a      	beq.n	800ebfe <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	881b      	ldrh	r3, [r3, #0]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7ff ff53 	bl	800ea98 <ptr_to_mem>
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	68b8      	ldr	r0, [r7, #8]
 800ebf6:	f7ff ff61 	bl	800eabc <mem_to_ptr>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ebfe:	bf00      	nop
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd90      	pop	{r4, r7, pc}
 800ec06:	bf00      	nop
 800ec08:	24004ac4 	.word	0x24004ac4
 800ec0c:	08018340 	.word	0x08018340
 800ec10:	080183a4 	.word	0x080183a4
 800ec14:	080183bc 	.word	0x080183bc
 800ec18:	24004ac8 	.word	0x24004ac8
 800ec1c:	080183e4 	.word	0x080183e4
 800ec20:	08018400 	.word	0x08018400
 800ec24:	0801841c 	.word	0x0801841c
 800ec28:	24004ad0 	.word	0x24004ad0

0800ec2c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ec32:	4b1d      	ldr	r3, [pc, #116]	; (800eca8 <mem_init+0x7c>)
 800ec34:	4a1d      	ldr	r2, [pc, #116]	; (800ecac <mem_init+0x80>)
 800ec36:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ec38:	4b1b      	ldr	r3, [pc, #108]	; (800eca8 <mem_init+0x7c>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ec44:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ec52:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800ec56:	f7ff ff1f 	bl	800ea98 <ptr_to_mem>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	4b14      	ldr	r3, [pc, #80]	; (800ecb0 <mem_init+0x84>)
 800ec5e:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ec60:	4b13      	ldr	r3, [pc, #76]	; (800ecb0 <mem_init+0x84>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2201      	movs	r2, #1
 800ec66:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ec68:	4b11      	ldr	r3, [pc, #68]	; (800ecb0 <mem_init+0x84>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ec70:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ec72:	4b0f      	ldr	r3, [pc, #60]	; (800ecb0 <mem_init+0x84>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ec7a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ec7c:	4b0a      	ldr	r3, [pc, #40]	; (800eca8 <mem_init+0x7c>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a0c      	ldr	r2, [pc, #48]	; (800ecb4 <mem_init+0x88>)
 800ec82:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ec84:	480c      	ldr	r0, [pc, #48]	; (800ecb8 <mem_init+0x8c>)
 800ec86:	f001 fde7 	bl	8010858 <sys_mutex_new>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d006      	beq.n	800ec9e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ec90:	4b0a      	ldr	r3, [pc, #40]	; (800ecbc <mem_init+0x90>)
 800ec92:	f240 221f 	movw	r2, #543	; 0x21f
 800ec96:	490a      	ldr	r1, [pc, #40]	; (800ecc0 <mem_init+0x94>)
 800ec98:	480a      	ldr	r0, [pc, #40]	; (800ecc4 <mem_init+0x98>)
 800ec9a:	f007 ffef 	bl	8016c7c <iprintf>
  }
}
 800ec9e:	bf00      	nop
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	24004ac4 	.word	0x24004ac4
 800ecac:	30044000 	.word	0x30044000
 800ecb0:	24004ac8 	.word	0x24004ac8
 800ecb4:	24004ad0 	.word	0x24004ad0
 800ecb8:	24004acc 	.word	0x24004acc
 800ecbc:	08018340 	.word	0x08018340
 800ecc0:	08018448 	.word	0x08018448
 800ecc4:	080183bc 	.word	0x080183bc

0800ecc8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff fef3 	bl	800eabc <mem_to_ptr>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	881b      	ldrh	r3, [r3, #0]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7ff feda 	bl	800ea98 <ptr_to_mem>
 800ece4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	885b      	ldrh	r3, [r3, #2]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff fed4 	bl	800ea98 <ptr_to_mem>
 800ecf0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d819      	bhi.n	800ed32 <mem_link_valid+0x6a>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	885b      	ldrh	r3, [r3, #2]
 800ed02:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d813      	bhi.n	800ed32 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ed0e:	8afa      	ldrh	r2, [r7, #22]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d004      	beq.n	800ed1e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	8afa      	ldrh	r2, [r7, #22]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d109      	bne.n	800ed32 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed1e:	4b08      	ldr	r3, [pc, #32]	; (800ed40 <mem_link_valid+0x78>)
 800ed20:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed22:	693a      	ldr	r2, [r7, #16]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d006      	beq.n	800ed36 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	885b      	ldrh	r3, [r3, #2]
 800ed2c:	8afa      	ldrh	r2, [r7, #22]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d001      	beq.n	800ed36 <mem_link_valid+0x6e>
    return 0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	e000      	b.n	800ed38 <mem_link_valid+0x70>
  }
  return 1;
 800ed36:	2301      	movs	r3, #1
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3718      	adds	r7, #24
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	24004ac8 	.word	0x24004ac8

0800ed44 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d070      	beq.n	800ee34 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f003 0303 	and.w	r3, r3, #3
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00d      	beq.n	800ed78 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ed5c:	4b37      	ldr	r3, [pc, #220]	; (800ee3c <mem_free+0xf8>)
 800ed5e:	f240 2273 	movw	r2, #627	; 0x273
 800ed62:	4937      	ldr	r1, [pc, #220]	; (800ee40 <mem_free+0xfc>)
 800ed64:	4837      	ldr	r0, [pc, #220]	; (800ee44 <mem_free+0x100>)
 800ed66:	f007 ff89 	bl	8016c7c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ed6a:	f001 fdc7 	bl	80108fc <sys_arch_protect>
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	68f8      	ldr	r0, [r7, #12]
 800ed72:	f001 fdd1 	bl	8010918 <sys_arch_unprotect>
    return;
 800ed76:	e05e      	b.n	800ee36 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3b08      	subs	r3, #8
 800ed7c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ed7e:	4b32      	ldr	r3, [pc, #200]	; (800ee48 <mem_free+0x104>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	69fa      	ldr	r2, [r7, #28]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d306      	bcc.n	800ed96 <mem_free+0x52>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f103 020c 	add.w	r2, r3, #12
 800ed8e:	4b2f      	ldr	r3, [pc, #188]	; (800ee4c <mem_free+0x108>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d90d      	bls.n	800edb2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ed96:	4b29      	ldr	r3, [pc, #164]	; (800ee3c <mem_free+0xf8>)
 800ed98:	f240 227f 	movw	r2, #639	; 0x27f
 800ed9c:	492c      	ldr	r1, [pc, #176]	; (800ee50 <mem_free+0x10c>)
 800ed9e:	4829      	ldr	r0, [pc, #164]	; (800ee44 <mem_free+0x100>)
 800eda0:	f007 ff6c 	bl	8016c7c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800eda4:	f001 fdaa 	bl	80108fc <sys_arch_protect>
 800eda8:	6138      	str	r0, [r7, #16]
 800edaa:	6938      	ldr	r0, [r7, #16]
 800edac:	f001 fdb4 	bl	8010918 <sys_arch_unprotect>
    return;
 800edb0:	e041      	b.n	800ee36 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800edb2:	4828      	ldr	r0, [pc, #160]	; (800ee54 <mem_free+0x110>)
 800edb4:	f001 fd66 	bl	8010884 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	791b      	ldrb	r3, [r3, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d110      	bne.n	800ede2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800edc0:	4b1e      	ldr	r3, [pc, #120]	; (800ee3c <mem_free+0xf8>)
 800edc2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800edc6:	4924      	ldr	r1, [pc, #144]	; (800ee58 <mem_free+0x114>)
 800edc8:	481e      	ldr	r0, [pc, #120]	; (800ee44 <mem_free+0x100>)
 800edca:	f007 ff57 	bl	8016c7c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800edce:	4821      	ldr	r0, [pc, #132]	; (800ee54 <mem_free+0x110>)
 800edd0:	f001 fd67 	bl	80108a2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800edd4:	f001 fd92 	bl	80108fc <sys_arch_protect>
 800edd8:	6178      	str	r0, [r7, #20]
 800edda:	6978      	ldr	r0, [r7, #20]
 800eddc:	f001 fd9c 	bl	8010918 <sys_arch_unprotect>
    return;
 800ede0:	e029      	b.n	800ee36 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ede2:	69f8      	ldr	r0, [r7, #28]
 800ede4:	f7ff ff70 	bl	800ecc8 <mem_link_valid>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d110      	bne.n	800ee10 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800edee:	4b13      	ldr	r3, [pc, #76]	; (800ee3c <mem_free+0xf8>)
 800edf0:	f240 2295 	movw	r2, #661	; 0x295
 800edf4:	4919      	ldr	r1, [pc, #100]	; (800ee5c <mem_free+0x118>)
 800edf6:	4813      	ldr	r0, [pc, #76]	; (800ee44 <mem_free+0x100>)
 800edf8:	f007 ff40 	bl	8016c7c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800edfc:	4815      	ldr	r0, [pc, #84]	; (800ee54 <mem_free+0x110>)
 800edfe:	f001 fd50 	bl	80108a2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee02:	f001 fd7b 	bl	80108fc <sys_arch_protect>
 800ee06:	61b8      	str	r0, [r7, #24]
 800ee08:	69b8      	ldr	r0, [r7, #24]
 800ee0a:	f001 fd85 	bl	8010918 <sys_arch_unprotect>
    return;
 800ee0e:	e012      	b.n	800ee36 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	2200      	movs	r2, #0
 800ee14:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ee16:	4b12      	ldr	r3, [pc, #72]	; (800ee60 <mem_free+0x11c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d202      	bcs.n	800ee26 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ee20:	4a0f      	ldr	r2, [pc, #60]	; (800ee60 <mem_free+0x11c>)
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ee26:	69f8      	ldr	r0, [r7, #28]
 800ee28:	f7ff fe5a 	bl	800eae0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ee2c:	4809      	ldr	r0, [pc, #36]	; (800ee54 <mem_free+0x110>)
 800ee2e:	f001 fd38 	bl	80108a2 <sys_mutex_unlock>
 800ee32:	e000      	b.n	800ee36 <mem_free+0xf2>
    return;
 800ee34:	bf00      	nop
}
 800ee36:	3720      	adds	r7, #32
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	08018340 	.word	0x08018340
 800ee40:	08018464 	.word	0x08018464
 800ee44:	080183bc 	.word	0x080183bc
 800ee48:	24004ac4 	.word	0x24004ac4
 800ee4c:	24004ac8 	.word	0x24004ac8
 800ee50:	08018488 	.word	0x08018488
 800ee54:	24004acc 	.word	0x24004acc
 800ee58:	080184a4 	.word	0x080184a4
 800ee5c:	080184cc 	.word	0x080184cc
 800ee60:	24004ad0 	.word	0x24004ad0

0800ee64 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b088      	sub	sp, #32
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ee70:	887b      	ldrh	r3, [r7, #2]
 800ee72:	3303      	adds	r3, #3
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	f023 0303 	bic.w	r3, r3, #3
 800ee7a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ee7c:	8bfb      	ldrh	r3, [r7, #30]
 800ee7e:	2b0b      	cmp	r3, #11
 800ee80:	d801      	bhi.n	800ee86 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ee82:	230c      	movs	r3, #12
 800ee84:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ee86:	8bfb      	ldrh	r3, [r7, #30]
 800ee88:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d803      	bhi.n	800ee98 <mem_trim+0x34>
 800ee90:	8bfa      	ldrh	r2, [r7, #30]
 800ee92:	887b      	ldrh	r3, [r7, #2]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d201      	bcs.n	800ee9c <mem_trim+0x38>
    return NULL;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e0dc      	b.n	800f056 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ee9c:	4b70      	ldr	r3, [pc, #448]	; (800f060 <mem_trim+0x1fc>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d304      	bcc.n	800eeb0 <mem_trim+0x4c>
 800eea6:	4b6f      	ldr	r3, [pc, #444]	; (800f064 <mem_trim+0x200>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d306      	bcc.n	800eebe <mem_trim+0x5a>
 800eeb0:	4b6d      	ldr	r3, [pc, #436]	; (800f068 <mem_trim+0x204>)
 800eeb2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800eeb6:	496d      	ldr	r1, [pc, #436]	; (800f06c <mem_trim+0x208>)
 800eeb8:	486d      	ldr	r0, [pc, #436]	; (800f070 <mem_trim+0x20c>)
 800eeba:	f007 fedf 	bl	8016c7c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800eebe:	4b68      	ldr	r3, [pc, #416]	; (800f060 <mem_trim+0x1fc>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d304      	bcc.n	800eed2 <mem_trim+0x6e>
 800eec8:	4b66      	ldr	r3, [pc, #408]	; (800f064 <mem_trim+0x200>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d307      	bcc.n	800eee2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800eed2:	f001 fd13 	bl	80108fc <sys_arch_protect>
 800eed6:	60b8      	str	r0, [r7, #8]
 800eed8:	68b8      	ldr	r0, [r7, #8]
 800eeda:	f001 fd1d 	bl	8010918 <sys_arch_unprotect>
    return rmem;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	e0b9      	b.n	800f056 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3b08      	subs	r3, #8
 800eee6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800eee8:	69b8      	ldr	r0, [r7, #24]
 800eeea:	f7ff fde7 	bl	800eabc <mem_to_ptr>
 800eeee:	4603      	mov	r3, r0
 800eef0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	881a      	ldrh	r2, [r3, #0]
 800eef6:	8afb      	ldrh	r3, [r7, #22]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	3b08      	subs	r3, #8
 800eefe:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ef00:	8bfa      	ldrh	r2, [r7, #30]
 800ef02:	8abb      	ldrh	r3, [r7, #20]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d906      	bls.n	800ef16 <mem_trim+0xb2>
 800ef08:	4b57      	ldr	r3, [pc, #348]	; (800f068 <mem_trim+0x204>)
 800ef0a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ef0e:	4959      	ldr	r1, [pc, #356]	; (800f074 <mem_trim+0x210>)
 800ef10:	4857      	ldr	r0, [pc, #348]	; (800f070 <mem_trim+0x20c>)
 800ef12:	f007 feb3 	bl	8016c7c <iprintf>
  if (newsize > size) {
 800ef16:	8bfa      	ldrh	r2, [r7, #30]
 800ef18:	8abb      	ldrh	r3, [r7, #20]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d901      	bls.n	800ef22 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e099      	b.n	800f056 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800ef22:	8bfa      	ldrh	r2, [r7, #30]
 800ef24:	8abb      	ldrh	r3, [r7, #20]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d101      	bne.n	800ef2e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	e093      	b.n	800f056 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ef2e:	4852      	ldr	r0, [pc, #328]	; (800f078 <mem_trim+0x214>)
 800ef30:	f001 fca8 	bl	8010884 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff fdad 	bl	800ea98 <ptr_to_mem>
 800ef3e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	791b      	ldrb	r3, [r3, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d141      	bne.n	800efcc <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d106      	bne.n	800ef62 <mem_trim+0xfe>
 800ef54:	4b44      	ldr	r3, [pc, #272]	; (800f068 <mem_trim+0x204>)
 800ef56:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ef5a:	4948      	ldr	r1, [pc, #288]	; (800f07c <mem_trim+0x218>)
 800ef5c:	4844      	ldr	r0, [pc, #272]	; (800f070 <mem_trim+0x20c>)
 800ef5e:	f007 fe8d 	bl	8016c7c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ef68:	8afa      	ldrh	r2, [r7, #22]
 800ef6a:	8bfb      	ldrh	r3, [r7, #30]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	3308      	adds	r3, #8
 800ef72:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ef74:	4b42      	ldr	r3, [pc, #264]	; (800f080 <mem_trim+0x21c>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d106      	bne.n	800ef8c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800ef7e:	89fb      	ldrh	r3, [r7, #14]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff fd89 	bl	800ea98 <ptr_to_mem>
 800ef86:	4602      	mov	r2, r0
 800ef88:	4b3d      	ldr	r3, [pc, #244]	; (800f080 <mem_trim+0x21c>)
 800ef8a:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ef8c:	89fb      	ldrh	r3, [r7, #14]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff fd82 	bl	800ea98 <ptr_to_mem>
 800ef94:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	89ba      	ldrh	r2, [r7, #12]
 800efa0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	8afa      	ldrh	r2, [r7, #22]
 800efa6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	89fa      	ldrh	r2, [r7, #14]
 800efac:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d049      	beq.n	800f04e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7ff fd6a 	bl	800ea98 <ptr_to_mem>
 800efc4:	4602      	mov	r2, r0
 800efc6:	89fb      	ldrh	r3, [r7, #14]
 800efc8:	8053      	strh	r3, [r2, #2]
 800efca:	e040      	b.n	800f04e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800efcc:	8bfb      	ldrh	r3, [r7, #30]
 800efce:	f103 0214 	add.w	r2, r3, #20
 800efd2:	8abb      	ldrh	r3, [r7, #20]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d83a      	bhi.n	800f04e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800efd8:	8afa      	ldrh	r2, [r7, #22]
 800efda:	8bfb      	ldrh	r3, [r7, #30]
 800efdc:	4413      	add	r3, r2
 800efde:	b29b      	uxth	r3, r3
 800efe0:	3308      	adds	r3, #8
 800efe2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800efec:	4293      	cmp	r3, r2
 800efee:	d106      	bne.n	800effe <mem_trim+0x19a>
 800eff0:	4b1d      	ldr	r3, [pc, #116]	; (800f068 <mem_trim+0x204>)
 800eff2:	f240 3216 	movw	r2, #790	; 0x316
 800eff6:	4921      	ldr	r1, [pc, #132]	; (800f07c <mem_trim+0x218>)
 800eff8:	481d      	ldr	r0, [pc, #116]	; (800f070 <mem_trim+0x20c>)
 800effa:	f007 fe3f 	bl	8016c7c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800effe:	89fb      	ldrh	r3, [r7, #14]
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff fd49 	bl	800ea98 <ptr_to_mem>
 800f006:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f008:	4b1d      	ldr	r3, [pc, #116]	; (800f080 <mem_trim+0x21c>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	693a      	ldr	r2, [r7, #16]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d202      	bcs.n	800f018 <mem_trim+0x1b4>
      lfree = mem2;
 800f012:	4a1b      	ldr	r2, [pc, #108]	; (800f080 <mem_trim+0x21c>)
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	2200      	movs	r2, #0
 800f01c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	881a      	ldrh	r2, [r3, #0]
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	8afa      	ldrh	r2, [r7, #22]
 800f02a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	89fa      	ldrh	r2, [r7, #14]
 800f030:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d007      	beq.n	800f04e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff fd28 	bl	800ea98 <ptr_to_mem>
 800f048:	4602      	mov	r2, r0
 800f04a:	89fb      	ldrh	r3, [r7, #14]
 800f04c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f04e:	480a      	ldr	r0, [pc, #40]	; (800f078 <mem_trim+0x214>)
 800f050:	f001 fc27 	bl	80108a2 <sys_mutex_unlock>
  return rmem;
 800f054:	687b      	ldr	r3, [r7, #4]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3720      	adds	r7, #32
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	24004ac4 	.word	0x24004ac4
 800f064:	24004ac8 	.word	0x24004ac8
 800f068:	08018340 	.word	0x08018340
 800f06c:	08018500 	.word	0x08018500
 800f070:	080183bc 	.word	0x080183bc
 800f074:	08018518 	.word	0x08018518
 800f078:	24004acc 	.word	0x24004acc
 800f07c:	08018538 	.word	0x08018538
 800f080:	24004ad0 	.word	0x24004ad0

0800f084 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f08e:	88fb      	ldrh	r3, [r7, #6]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d101      	bne.n	800f098 <mem_malloc+0x14>
    return NULL;
 800f094:	2300      	movs	r3, #0
 800f096:	e0e6      	b.n	800f266 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f098:	88fb      	ldrh	r3, [r7, #6]
 800f09a:	3303      	adds	r3, #3
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	f023 0303 	bic.w	r3, r3, #3
 800f0a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f0a4:	8bbb      	ldrh	r3, [r7, #28]
 800f0a6:	2b0b      	cmp	r3, #11
 800f0a8:	d801      	bhi.n	800f0ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f0aa:	230c      	movs	r3, #12
 800f0ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f0ae:	8bbb      	ldrh	r3, [r7, #28]
 800f0b0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d803      	bhi.n	800f0c0 <mem_malloc+0x3c>
 800f0b8:	8bba      	ldrh	r2, [r7, #28]
 800f0ba:	88fb      	ldrh	r3, [r7, #6]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d201      	bcs.n	800f0c4 <mem_malloc+0x40>
    return NULL;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	e0d0      	b.n	800f266 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f0c4:	486a      	ldr	r0, [pc, #424]	; (800f270 <mem_malloc+0x1ec>)
 800f0c6:	f001 fbdd 	bl	8010884 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f0ca:	4b6a      	ldr	r3, [pc, #424]	; (800f274 <mem_malloc+0x1f0>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7ff fcf4 	bl	800eabc <mem_to_ptr>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	83fb      	strh	r3, [r7, #30]
 800f0d8:	e0b9      	b.n	800f24e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f0da:	8bfb      	ldrh	r3, [r7, #30]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7ff fcdb 	bl	800ea98 <ptr_to_mem>
 800f0e2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	791b      	ldrb	r3, [r3, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f040 80a9 	bne.w	800f240 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	881b      	ldrh	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	8bfb      	ldrh	r3, [r7, #30]
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	f1a3 0208 	sub.w	r2, r3, #8
 800f0fc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f0fe:	429a      	cmp	r2, r3
 800f100:	f0c0 809e 	bcc.w	800f240 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	881b      	ldrh	r3, [r3, #0]
 800f108:	461a      	mov	r2, r3
 800f10a:	8bfb      	ldrh	r3, [r7, #30]
 800f10c:	1ad3      	subs	r3, r2, r3
 800f10e:	f1a3 0208 	sub.w	r2, r3, #8
 800f112:	8bbb      	ldrh	r3, [r7, #28]
 800f114:	3314      	adds	r3, #20
 800f116:	429a      	cmp	r2, r3
 800f118:	d335      	bcc.n	800f186 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f11a:	8bfa      	ldrh	r2, [r7, #30]
 800f11c:	8bbb      	ldrh	r3, [r7, #28]
 800f11e:	4413      	add	r3, r2
 800f120:	b29b      	uxth	r3, r3
 800f122:	3308      	adds	r3, #8
 800f124:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f126:	8a7b      	ldrh	r3, [r7, #18]
 800f128:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d106      	bne.n	800f13e <mem_malloc+0xba>
 800f130:	4b51      	ldr	r3, [pc, #324]	; (800f278 <mem_malloc+0x1f4>)
 800f132:	f240 3287 	movw	r2, #903	; 0x387
 800f136:	4951      	ldr	r1, [pc, #324]	; (800f27c <mem_malloc+0x1f8>)
 800f138:	4851      	ldr	r0, [pc, #324]	; (800f280 <mem_malloc+0x1fc>)
 800f13a:	f007 fd9f 	bl	8016c7c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f13e:	8a7b      	ldrh	r3, [r7, #18]
 800f140:	4618      	mov	r0, r3
 800f142:	f7ff fca9 	bl	800ea98 <ptr_to_mem>
 800f146:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	881a      	ldrh	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	8bfa      	ldrh	r2, [r7, #30]
 800f15a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	8a7a      	ldrh	r2, [r7, #18]
 800f160:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2201      	movs	r2, #1
 800f166:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	881b      	ldrh	r3, [r3, #0]
 800f16c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f170:	4293      	cmp	r3, r2
 800f172:	d00b      	beq.n	800f18c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	881b      	ldrh	r3, [r3, #0]
 800f178:	4618      	mov	r0, r3
 800f17a:	f7ff fc8d 	bl	800ea98 <ptr_to_mem>
 800f17e:	4602      	mov	r2, r0
 800f180:	8a7b      	ldrh	r3, [r7, #18]
 800f182:	8053      	strh	r3, [r2, #2]
 800f184:	e002      	b.n	800f18c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	2201      	movs	r2, #1
 800f18a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f18c:	4b39      	ldr	r3, [pc, #228]	; (800f274 <mem_malloc+0x1f0>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	697a      	ldr	r2, [r7, #20]
 800f192:	429a      	cmp	r2, r3
 800f194:	d127      	bne.n	800f1e6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800f196:	4b37      	ldr	r3, [pc, #220]	; (800f274 <mem_malloc+0x1f0>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f19c:	e005      	b.n	800f1aa <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	881b      	ldrh	r3, [r3, #0]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff fc78 	bl	800ea98 <ptr_to_mem>
 800f1a8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	791b      	ldrb	r3, [r3, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d004      	beq.n	800f1bc <mem_malloc+0x138>
 800f1b2:	4b34      	ldr	r3, [pc, #208]	; (800f284 <mem_malloc+0x200>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	69ba      	ldr	r2, [r7, #24]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d1f0      	bne.n	800f19e <mem_malloc+0x11a>
          }
          lfree = cur;
 800f1bc:	4a2d      	ldr	r2, [pc, #180]	; (800f274 <mem_malloc+0x1f0>)
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f1c2:	4b2c      	ldr	r3, [pc, #176]	; (800f274 <mem_malloc+0x1f0>)
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	4b2f      	ldr	r3, [pc, #188]	; (800f284 <mem_malloc+0x200>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d00b      	beq.n	800f1e6 <mem_malloc+0x162>
 800f1ce:	4b29      	ldr	r3, [pc, #164]	; (800f274 <mem_malloc+0x1f0>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	791b      	ldrb	r3, [r3, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <mem_malloc+0x162>
 800f1d8:	4b27      	ldr	r3, [pc, #156]	; (800f278 <mem_malloc+0x1f4>)
 800f1da:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f1de:	492a      	ldr	r1, [pc, #168]	; (800f288 <mem_malloc+0x204>)
 800f1e0:	4827      	ldr	r0, [pc, #156]	; (800f280 <mem_malloc+0x1fc>)
 800f1e2:	f007 fd4b 	bl	8016c7c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f1e6:	4822      	ldr	r0, [pc, #136]	; (800f270 <mem_malloc+0x1ec>)
 800f1e8:	f001 fb5b 	bl	80108a2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f1ec:	8bba      	ldrh	r2, [r7, #28]
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	3308      	adds	r3, #8
 800f1f4:	4a23      	ldr	r2, [pc, #140]	; (800f284 <mem_malloc+0x200>)
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d906      	bls.n	800f20a <mem_malloc+0x186>
 800f1fc:	4b1e      	ldr	r3, [pc, #120]	; (800f278 <mem_malloc+0x1f4>)
 800f1fe:	f240 32ba 	movw	r2, #954	; 0x3ba
 800f202:	4922      	ldr	r1, [pc, #136]	; (800f28c <mem_malloc+0x208>)
 800f204:	481e      	ldr	r0, [pc, #120]	; (800f280 <mem_malloc+0x1fc>)
 800f206:	f007 fd39 	bl	8016c7c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	f003 0303 	and.w	r3, r3, #3
 800f210:	2b00      	cmp	r3, #0
 800f212:	d006      	beq.n	800f222 <mem_malloc+0x19e>
 800f214:	4b18      	ldr	r3, [pc, #96]	; (800f278 <mem_malloc+0x1f4>)
 800f216:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800f21a:	491d      	ldr	r1, [pc, #116]	; (800f290 <mem_malloc+0x20c>)
 800f21c:	4818      	ldr	r0, [pc, #96]	; (800f280 <mem_malloc+0x1fc>)
 800f21e:	f007 fd2d 	bl	8016c7c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f003 0303 	and.w	r3, r3, #3
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d006      	beq.n	800f23a <mem_malloc+0x1b6>
 800f22c:	4b12      	ldr	r3, [pc, #72]	; (800f278 <mem_malloc+0x1f4>)
 800f22e:	f240 32be 	movw	r2, #958	; 0x3be
 800f232:	4918      	ldr	r1, [pc, #96]	; (800f294 <mem_malloc+0x210>)
 800f234:	4812      	ldr	r0, [pc, #72]	; (800f280 <mem_malloc+0x1fc>)
 800f236:	f007 fd21 	bl	8016c7c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	3308      	adds	r3, #8
 800f23e:	e012      	b.n	800f266 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800f240:	8bfb      	ldrh	r3, [r7, #30]
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff fc28 	bl	800ea98 <ptr_to_mem>
 800f248:	4603      	mov	r3, r0
 800f24a:	881b      	ldrh	r3, [r3, #0]
 800f24c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f24e:	8bfa      	ldrh	r2, [r7, #30]
 800f250:	8bb9      	ldrh	r1, [r7, #28]
 800f252:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800f256:	1a5b      	subs	r3, r3, r1
 800f258:	429a      	cmp	r2, r3
 800f25a:	f4ff af3e 	bcc.w	800f0da <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f25e:	4804      	ldr	r0, [pc, #16]	; (800f270 <mem_malloc+0x1ec>)
 800f260:	f001 fb1f 	bl	80108a2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3720      	adds	r7, #32
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	24004acc 	.word	0x24004acc
 800f274:	24004ad0 	.word	0x24004ad0
 800f278:	08018340 	.word	0x08018340
 800f27c:	08018538 	.word	0x08018538
 800f280:	080183bc 	.word	0x080183bc
 800f284:	24004ac8 	.word	0x24004ac8
 800f288:	0801854c 	.word	0x0801854c
 800f28c:	08018568 	.word	0x08018568
 800f290:	08018598 	.word	0x08018598
 800f294:	080185c8 	.word	0x080185c8

0800f298 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	3303      	adds	r3, #3
 800f2ae:	f023 0303 	bic.w	r3, r3, #3
 800f2b2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	60fb      	str	r3, [r7, #12]
 800f2b8:	e011      	b.n	800f2de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	68ba      	ldr	r2, [r7, #8]
 800f2ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	60fb      	str	r3, [r7, #12]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	885b      	ldrh	r3, [r3, #2]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	dbe7      	blt.n	800f2ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f2ea:	bf00      	nop
 800f2ec:	3714      	adds	r7, #20
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
	...

0800f2f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f2fe:	2300      	movs	r3, #0
 800f300:	80fb      	strh	r3, [r7, #6]
 800f302:	e009      	b.n	800f318 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f304:	88fb      	ldrh	r3, [r7, #6]
 800f306:	4a08      	ldr	r2, [pc, #32]	; (800f328 <memp_init+0x30>)
 800f308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7ff ffc3 	bl	800f298 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f312:	88fb      	ldrh	r3, [r7, #6]
 800f314:	3301      	adds	r3, #1
 800f316:	80fb      	strh	r3, [r7, #6]
 800f318:	88fb      	ldrh	r3, [r7, #6]
 800f31a:	2b0c      	cmp	r3, #12
 800f31c:	d9f2      	bls.n	800f304 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f31e:	bf00      	nop
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	0801aa0c 	.word	0x0801aa0c

0800f32c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f334:	f001 fae2 	bl	80108fc <sys_arch_protect>
 800f338:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d015      	beq.n	800f374 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	6812      	ldr	r2, [r2, #0]
 800f350:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	f003 0303 	and.w	r3, r3, #3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d006      	beq.n	800f36a <do_memp_malloc_pool+0x3e>
 800f35c:	4b09      	ldr	r3, [pc, #36]	; (800f384 <do_memp_malloc_pool+0x58>)
 800f35e:	f240 1219 	movw	r2, #281	; 0x119
 800f362:	4909      	ldr	r1, [pc, #36]	; (800f388 <do_memp_malloc_pool+0x5c>)
 800f364:	4809      	ldr	r0, [pc, #36]	; (800f38c <do_memp_malloc_pool+0x60>)
 800f366:	f007 fc89 	bl	8016c7c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f001 fad4 	bl	8010918 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	e003      	b.n	800f37c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f001 facf 	bl	8010918 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	080185ec 	.word	0x080185ec
 800f388:	08018650 	.word	0x08018650
 800f38c:	08018674 	.word	0x08018674

0800f390 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d106      	bne.n	800f3ac <memp_malloc_pool+0x1c>
 800f39e:	4b0a      	ldr	r3, [pc, #40]	; (800f3c8 <memp_malloc_pool+0x38>)
 800f3a0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f3a4:	4909      	ldr	r1, [pc, #36]	; (800f3cc <memp_malloc_pool+0x3c>)
 800f3a6:	480a      	ldr	r0, [pc, #40]	; (800f3d0 <memp_malloc_pool+0x40>)
 800f3a8:	f007 fc68 	bl	8016c7c <iprintf>
  if (desc == NULL) {
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <memp_malloc_pool+0x26>
    return NULL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e003      	b.n	800f3be <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7ff ffb8 	bl	800f32c <do_memp_malloc_pool>
 800f3bc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	080185ec 	.word	0x080185ec
 800f3cc:	0801869c 	.word	0x0801869c
 800f3d0:	08018674 	.word	0x08018674

0800f3d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f3de:	79fb      	ldrb	r3, [r7, #7]
 800f3e0:	2b0c      	cmp	r3, #12
 800f3e2:	d908      	bls.n	800f3f6 <memp_malloc+0x22>
 800f3e4:	4b0a      	ldr	r3, [pc, #40]	; (800f410 <memp_malloc+0x3c>)
 800f3e6:	f240 1257 	movw	r2, #343	; 0x157
 800f3ea:	490a      	ldr	r1, [pc, #40]	; (800f414 <memp_malloc+0x40>)
 800f3ec:	480a      	ldr	r0, [pc, #40]	; (800f418 <memp_malloc+0x44>)
 800f3ee:	f007 fc45 	bl	8016c7c <iprintf>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	e008      	b.n	800f408 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	4a08      	ldr	r2, [pc, #32]	; (800f41c <memp_malloc+0x48>)
 800f3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7ff ff94 	bl	800f32c <do_memp_malloc_pool>
 800f404:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f406:	68fb      	ldr	r3, [r7, #12]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	080185ec 	.word	0x080185ec
 800f414:	080186b0 	.word	0x080186b0
 800f418:	08018674 	.word	0x08018674
 800f41c:	0801aa0c 	.word	0x0801aa0c

0800f420 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	f003 0303 	and.w	r3, r3, #3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d006      	beq.n	800f442 <do_memp_free_pool+0x22>
 800f434:	4b0d      	ldr	r3, [pc, #52]	; (800f46c <do_memp_free_pool+0x4c>)
 800f436:	f240 126d 	movw	r2, #365	; 0x16d
 800f43a:	490d      	ldr	r1, [pc, #52]	; (800f470 <do_memp_free_pool+0x50>)
 800f43c:	480d      	ldr	r0, [pc, #52]	; (800f474 <do_memp_free_pool+0x54>)
 800f43e:	f007 fc1d 	bl	8016c7c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f446:	f001 fa59 	bl	80108fc <sys_arch_protect>
 800f44a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f45e:	68b8      	ldr	r0, [r7, #8]
 800f460:	f001 fa5a 	bl	8010918 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f464:	bf00      	nop
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	080185ec 	.word	0x080185ec
 800f470:	080186d0 	.word	0x080186d0
 800f474:	08018674 	.word	0x08018674

0800f478 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d106      	bne.n	800f496 <memp_free_pool+0x1e>
 800f488:	4b0a      	ldr	r3, [pc, #40]	; (800f4b4 <memp_free_pool+0x3c>)
 800f48a:	f240 1295 	movw	r2, #405	; 0x195
 800f48e:	490a      	ldr	r1, [pc, #40]	; (800f4b8 <memp_free_pool+0x40>)
 800f490:	480a      	ldr	r0, [pc, #40]	; (800f4bc <memp_free_pool+0x44>)
 800f492:	f007 fbf3 	bl	8016c7c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d007      	beq.n	800f4ac <memp_free_pool+0x34>
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d004      	beq.n	800f4ac <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f7ff ffbb 	bl	800f420 <do_memp_free_pool>
 800f4aa:	e000      	b.n	800f4ae <memp_free_pool+0x36>
    return;
 800f4ac:	bf00      	nop
}
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	080185ec 	.word	0x080185ec
 800f4b8:	0801869c 	.word	0x0801869c
 800f4bc:	08018674 	.word	0x08018674

0800f4c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	6039      	str	r1, [r7, #0]
 800f4ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f4cc:	79fb      	ldrb	r3, [r7, #7]
 800f4ce:	2b0c      	cmp	r3, #12
 800f4d0:	d907      	bls.n	800f4e2 <memp_free+0x22>
 800f4d2:	4b0c      	ldr	r3, [pc, #48]	; (800f504 <memp_free+0x44>)
 800f4d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f4d8:	490b      	ldr	r1, [pc, #44]	; (800f508 <memp_free+0x48>)
 800f4da:	480c      	ldr	r0, [pc, #48]	; (800f50c <memp_free+0x4c>)
 800f4dc:	f007 fbce 	bl	8016c7c <iprintf>
 800f4e0:	e00c      	b.n	800f4fc <memp_free+0x3c>

  if (mem == NULL) {
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d008      	beq.n	800f4fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	4a09      	ldr	r2, [pc, #36]	; (800f510 <memp_free+0x50>)
 800f4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f0:	6839      	ldr	r1, [r7, #0]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff ff94 	bl	800f420 <do_memp_free_pool>
 800f4f8:	e000      	b.n	800f4fc <memp_free+0x3c>
    return;
 800f4fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	080185ec 	.word	0x080185ec
 800f508:	080186f0 	.word	0x080186f0
 800f50c:	08018674 	.word	0x08018674
 800f510:	0801aa0c 	.word	0x0801aa0c

0800f514 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f514:	b480      	push	{r7}
 800f516:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f518:	bf00      	nop
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr
	...

0800f524 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b086      	sub	sp, #24
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
 800f530:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d108      	bne.n	800f54a <netif_add+0x26>
 800f538:	4b57      	ldr	r3, [pc, #348]	; (800f698 <netif_add+0x174>)
 800f53a:	f240 1227 	movw	r2, #295	; 0x127
 800f53e:	4957      	ldr	r1, [pc, #348]	; (800f69c <netif_add+0x178>)
 800f540:	4857      	ldr	r0, [pc, #348]	; (800f6a0 <netif_add+0x17c>)
 800f542:	f007 fb9b 	bl	8016c7c <iprintf>
 800f546:	2300      	movs	r3, #0
 800f548:	e0a2      	b.n	800f690 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d108      	bne.n	800f562 <netif_add+0x3e>
 800f550:	4b51      	ldr	r3, [pc, #324]	; (800f698 <netif_add+0x174>)
 800f552:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f556:	4953      	ldr	r1, [pc, #332]	; (800f6a4 <netif_add+0x180>)
 800f558:	4851      	ldr	r0, [pc, #324]	; (800f6a0 <netif_add+0x17c>)
 800f55a:	f007 fb8f 	bl	8016c7c <iprintf>
 800f55e:	2300      	movs	r3, #0
 800f560:	e096      	b.n	800f690 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d101      	bne.n	800f56c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f568:	4b4f      	ldr	r3, [pc, #316]	; (800f6a8 <netif_add+0x184>)
 800f56a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d101      	bne.n	800f576 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f572:	4b4d      	ldr	r3, [pc, #308]	; (800f6a8 <netif_add+0x184>)
 800f574:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d101      	bne.n	800f580 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f57c:	4b4a      	ldr	r3, [pc, #296]	; (800f6a8 <netif_add+0x184>)
 800f57e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2200      	movs	r2, #0
 800f584:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2200      	movs	r2, #0
 800f58a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2200      	movs	r2, #0
 800f590:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	4a45      	ldr	r2, [pc, #276]	; (800f6ac <netif_add+0x188>)
 800f596:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2200      	movs	r2, #0
 800f59c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a3a      	ldr	r2, [r7, #32]
 800f5b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f5b2:	4b3f      	ldr	r3, [pc, #252]	; (800f6b0 <netif_add+0x18c>)
 800f5b4:	781a      	ldrb	r2, [r3, #0]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	68b9      	ldr	r1, [r7, #8]
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f000 f913 	bl	800f7f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	4798      	blx	r3
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <netif_add+0xba>
    return NULL;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	e058      	b.n	800f690 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5e4:	2bff      	cmp	r3, #255	; 0xff
 800f5e6:	d103      	bne.n	800f5f0 <netif_add+0xcc>
        netif->num = 0;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f5f4:	4b2f      	ldr	r3, [pc, #188]	; (800f6b4 <netif_add+0x190>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	617b      	str	r3, [r7, #20]
 800f5fa:	e02b      	b.n	800f654 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f5fc:	697a      	ldr	r2, [r7, #20]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	429a      	cmp	r2, r3
 800f602:	d106      	bne.n	800f612 <netif_add+0xee>
 800f604:	4b24      	ldr	r3, [pc, #144]	; (800f698 <netif_add+0x174>)
 800f606:	f240 128b 	movw	r2, #395	; 0x18b
 800f60a:	492b      	ldr	r1, [pc, #172]	; (800f6b8 <netif_add+0x194>)
 800f60c:	4824      	ldr	r0, [pc, #144]	; (800f6a0 <netif_add+0x17c>)
 800f60e:	f007 fb35 	bl	8016c7c <iprintf>
        num_netifs++;
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	3301      	adds	r3, #1
 800f616:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	2bff      	cmp	r3, #255	; 0xff
 800f61c:	dd06      	ble.n	800f62c <netif_add+0x108>
 800f61e:	4b1e      	ldr	r3, [pc, #120]	; (800f698 <netif_add+0x174>)
 800f620:	f240 128d 	movw	r2, #397	; 0x18d
 800f624:	4925      	ldr	r1, [pc, #148]	; (800f6bc <netif_add+0x198>)
 800f626:	481e      	ldr	r0, [pc, #120]	; (800f6a0 <netif_add+0x17c>)
 800f628:	f007 fb28 	bl	8016c7c <iprintf>
        if (netif2->num == netif->num) {
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f638:	429a      	cmp	r2, r3
 800f63a:	d108      	bne.n	800f64e <netif_add+0x12a>
          netif->num++;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f642:	3301      	adds	r3, #1
 800f644:	b2da      	uxtb	r2, r3
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f64c:	e005      	b.n	800f65a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	617b      	str	r3, [r7, #20]
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1d0      	bne.n	800f5fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1be      	bne.n	800f5de <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f666:	2bfe      	cmp	r3, #254	; 0xfe
 800f668:	d103      	bne.n	800f672 <netif_add+0x14e>
    netif_num = 0;
 800f66a:	4b11      	ldr	r3, [pc, #68]	; (800f6b0 <netif_add+0x18c>)
 800f66c:	2200      	movs	r2, #0
 800f66e:	701a      	strb	r2, [r3, #0]
 800f670:	e006      	b.n	800f680 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f678:	3301      	adds	r3, #1
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	4b0c      	ldr	r3, [pc, #48]	; (800f6b0 <netif_add+0x18c>)
 800f67e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f680:	4b0c      	ldr	r3, [pc, #48]	; (800f6b4 <netif_add+0x190>)
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f688:	4a0a      	ldr	r2, [pc, #40]	; (800f6b4 <netif_add+0x190>)
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f68e:	68fb      	ldr	r3, [r7, #12]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3718      	adds	r7, #24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	0801870c 	.word	0x0801870c
 800f69c:	080187d0 	.word	0x080187d0
 800f6a0:	0801878c 	.word	0x0801878c
 800f6a4:	080187ec 	.word	0x080187ec
 800f6a8:	0801a96c 	.word	0x0801a96c
 800f6ac:	0800facf 	.word	0x0800facf
 800f6b0:	24004b08 	.word	0x24004b08
 800f6b4:	24008338 	.word	0x24008338
 800f6b8:	08018810 	.word	0x08018810
 800f6bc:	08018824 	.word	0x08018824

0800f6c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f002 fc6f 	bl	8011fb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f6d2:	6839      	ldr	r1, [r7, #0]
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f007 fa5b 	bl	8016b90 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f6da:	bf00      	nop
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
	...

0800f6e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d106      	bne.n	800f704 <netif_do_set_ipaddr+0x20>
 800f6f6:	4b1d      	ldr	r3, [pc, #116]	; (800f76c <netif_do_set_ipaddr+0x88>)
 800f6f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f6fc:	491c      	ldr	r1, [pc, #112]	; (800f770 <netif_do_set_ipaddr+0x8c>)
 800f6fe:	481d      	ldr	r0, [pc, #116]	; (800f774 <netif_do_set_ipaddr+0x90>)
 800f700:	f007 fabc 	bl	8016c7c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d106      	bne.n	800f718 <netif_do_set_ipaddr+0x34>
 800f70a:	4b18      	ldr	r3, [pc, #96]	; (800f76c <netif_do_set_ipaddr+0x88>)
 800f70c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f710:	4917      	ldr	r1, [pc, #92]	; (800f770 <netif_do_set_ipaddr+0x8c>)
 800f712:	4818      	ldr	r0, [pc, #96]	; (800f774 <netif_do_set_ipaddr+0x90>)
 800f714:	f007 fab2 	bl	8016c7c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	3304      	adds	r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	429a      	cmp	r2, r3
 800f724:	d01c      	beq.n	800f760 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	3304      	adds	r3, #4
 800f730:	681a      	ldr	r2, [r3, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f736:	f107 0314 	add.w	r3, r7, #20
 800f73a:	4619      	mov	r1, r3
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7ff ffbf 	bl	800f6c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d002      	beq.n	800f74e <netif_do_set_ipaddr+0x6a>
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	e000      	b.n	800f750 <netif_do_set_ipaddr+0x6c>
 800f74e:	2300      	movs	r3, #0
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f754:	2101      	movs	r1, #1
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f000 f8d2 	bl	800f900 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f75c:	2301      	movs	r3, #1
 800f75e:	e000      	b.n	800f762 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3718      	adds	r7, #24
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	0801870c 	.word	0x0801870c
 800f770:	08018854 	.word	0x08018854
 800f774:	0801878c 	.word	0x0801878c

0800f778 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	3308      	adds	r3, #8
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d00a      	beq.n	800f7a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d002      	beq.n	800f79e <netif_do_set_netmask+0x26>
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	e000      	b.n	800f7a0 <netif_do_set_netmask+0x28>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e000      	b.n	800f7aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3714      	adds	r7, #20
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b085      	sub	sp, #20
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	60f8      	str	r0, [r7, #12]
 800f7be:	60b9      	str	r1, [r7, #8]
 800f7c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	330c      	adds	r3, #12
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d00a      	beq.n	800f7e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d002      	beq.n	800f7dc <netif_do_set_gw+0x26>
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	e000      	b.n	800f7de <netif_do_set_gw+0x28>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e000      	b.n	800f7e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f7e6:	2300      	movs	r3, #0
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3714      	adds	r7, #20
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b088      	sub	sp, #32
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	607a      	str	r2, [r7, #4]
 800f800:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f802:	2300      	movs	r3, #0
 800f804:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f806:	2300      	movs	r3, #0
 800f808:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d101      	bne.n	800f814 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f810:	4b1c      	ldr	r3, [pc, #112]	; (800f884 <netif_set_addr+0x90>)
 800f812:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d101      	bne.n	800f81e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f81a:	4b1a      	ldr	r3, [pc, #104]	; (800f884 <netif_set_addr+0x90>)
 800f81c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f824:	4b17      	ldr	r3, [pc, #92]	; (800f884 <netif_set_addr+0x90>)
 800f826:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d003      	beq.n	800f836 <netif_set_addr+0x42>
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <netif_set_addr+0x46>
 800f836:	2301      	movs	r3, #1
 800f838:	e000      	b.n	800f83c <netif_set_addr+0x48>
 800f83a:	2300      	movs	r3, #0
 800f83c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d006      	beq.n	800f852 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f844:	f107 0310 	add.w	r3, r7, #16
 800f848:	461a      	mov	r2, r3
 800f84a:	68b9      	ldr	r1, [r7, #8]
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f7ff ff49 	bl	800f6e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f852:	69fa      	ldr	r2, [r7, #28]
 800f854:	6879      	ldr	r1, [r7, #4]
 800f856:	68f8      	ldr	r0, [r7, #12]
 800f858:	f7ff ff8e 	bl	800f778 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f85c:	69ba      	ldr	r2, [r7, #24]
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7ff ffa8 	bl	800f7b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d106      	bne.n	800f87a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f86c:	f107 0310 	add.w	r3, r7, #16
 800f870:	461a      	mov	r2, r3
 800f872:	68b9      	ldr	r1, [r7, #8]
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f7ff ff35 	bl	800f6e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f87a:	bf00      	nop
 800f87c:	3720      	adds	r7, #32
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	0801a96c 	.word	0x0801a96c

0800f888 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f890:	4a04      	ldr	r2, [pc, #16]	; (800f8a4 <netif_set_default+0x1c>)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f896:	bf00      	nop
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	2400833c 	.word	0x2400833c

0800f8a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d107      	bne.n	800f8c6 <netif_set_up+0x1e>
 800f8b6:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <netif_set_up+0x4c>)
 800f8b8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f8bc:	490e      	ldr	r1, [pc, #56]	; (800f8f8 <netif_set_up+0x50>)
 800f8be:	480f      	ldr	r0, [pc, #60]	; (800f8fc <netif_set_up+0x54>)
 800f8c0:	f007 f9dc 	bl	8016c7c <iprintf>
 800f8c4:	e013      	b.n	800f8ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8cc:	f003 0301 	and.w	r3, r3, #1
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10c      	bne.n	800f8ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8da:	f043 0301 	orr.w	r3, r3, #1
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f8e6:	2103      	movs	r1, #3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 f809 	bl	800f900 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	0801870c 	.word	0x0801870c
 800f8f8:	080188c4 	.word	0x080188c4
 800f8fc:	0801878c 	.word	0x0801878c

0800f900 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	460b      	mov	r3, r1
 800f90a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d106      	bne.n	800f920 <netif_issue_reports+0x20>
 800f912:	4b18      	ldr	r3, [pc, #96]	; (800f974 <netif_issue_reports+0x74>)
 800f914:	f240 326d 	movw	r2, #877	; 0x36d
 800f918:	4917      	ldr	r1, [pc, #92]	; (800f978 <netif_issue_reports+0x78>)
 800f91a:	4818      	ldr	r0, [pc, #96]	; (800f97c <netif_issue_reports+0x7c>)
 800f91c:	f007 f9ae 	bl	8016c7c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f926:	f003 0304 	and.w	r3, r3, #4
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d01e      	beq.n	800f96c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f934:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d017      	beq.n	800f96c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f93c:	78fb      	ldrb	r3, [r7, #3]
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	2b00      	cmp	r3, #0
 800f944:	d013      	beq.n	800f96e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3304      	adds	r3, #4
 800f94a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00e      	beq.n	800f96e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f956:	f003 0308 	and.w	r3, r3, #8
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d007      	beq.n	800f96e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	3304      	adds	r3, #4
 800f962:	4619      	mov	r1, r3
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7fd fc1d 	bl	800d1a4 <etharp_request>
 800f96a:	e000      	b.n	800f96e <netif_issue_reports+0x6e>
    return;
 800f96c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	0801870c 	.word	0x0801870c
 800f978:	080188e0 	.word	0x080188e0
 800f97c:	0801878c 	.word	0x0801878c

0800f980 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d107      	bne.n	800f99e <netif_set_down+0x1e>
 800f98e:	4b12      	ldr	r3, [pc, #72]	; (800f9d8 <netif_set_down+0x58>)
 800f990:	f240 329b 	movw	r2, #923	; 0x39b
 800f994:	4911      	ldr	r1, [pc, #68]	; (800f9dc <netif_set_down+0x5c>)
 800f996:	4812      	ldr	r0, [pc, #72]	; (800f9e0 <netif_set_down+0x60>)
 800f998:	f007 f970 	bl	8016c7c <iprintf>
 800f99c:	e019      	b.n	800f9d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9a4:	f003 0301 	and.w	r3, r3, #1
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d012      	beq.n	800f9d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9b2:	f023 0301 	bic.w	r3, r3, #1
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9c4:	f003 0308 	and.w	r3, r3, #8
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7fc ffa7 	bl	800c920 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	0801870c 	.word	0x0801870c
 800f9dc:	08018904 	.word	0x08018904
 800f9e0:	0801878c 	.word	0x0801878c

0800f9e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d107      	bne.n	800fa02 <netif_set_link_up+0x1e>
 800f9f2:	4b13      	ldr	r3, [pc, #76]	; (800fa40 <netif_set_link_up+0x5c>)
 800f9f4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f9f8:	4912      	ldr	r1, [pc, #72]	; (800fa44 <netif_set_link_up+0x60>)
 800f9fa:	4813      	ldr	r0, [pc, #76]	; (800fa48 <netif_set_link_up+0x64>)
 800f9fc:	f007 f93e 	bl	8016c7c <iprintf>
 800fa00:	e01b      	b.n	800fa3a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa08:	f003 0304 	and.w	r3, r3, #4
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d114      	bne.n	800fa3a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa16:	f043 0304 	orr.w	r3, r3, #4
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fa22:	2103      	movs	r1, #3
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f7ff ff6b 	bl	800f900 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	69db      	ldr	r3, [r3, #28]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d003      	beq.n	800fa3a <netif_set_link_up+0x56>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	69db      	ldr	r3, [r3, #28]
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	0801870c 	.word	0x0801870c
 800fa44:	08018924 	.word	0x08018924
 800fa48:	0801878c 	.word	0x0801878c

0800fa4c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d107      	bne.n	800fa6a <netif_set_link_down+0x1e>
 800fa5a:	4b11      	ldr	r3, [pc, #68]	; (800faa0 <netif_set_link_down+0x54>)
 800fa5c:	f240 4206 	movw	r2, #1030	; 0x406
 800fa60:	4910      	ldr	r1, [pc, #64]	; (800faa4 <netif_set_link_down+0x58>)
 800fa62:	4811      	ldr	r0, [pc, #68]	; (800faa8 <netif_set_link_down+0x5c>)
 800fa64:	f007 f90a 	bl	8016c7c <iprintf>
 800fa68:	e017      	b.n	800fa9a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa70:	f003 0304 	and.w	r3, r3, #4
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d010      	beq.n	800fa9a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa7e:	f023 0304 	bic.w	r3, r3, #4
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d003      	beq.n	800fa9a <netif_set_link_down+0x4e>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	69db      	ldr	r3, [r3, #28]
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	0801870c 	.word	0x0801870c
 800faa4:	08018948 	.word	0x08018948
 800faa8:	0801878c 	.word	0x0801878c

0800faac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	61da      	str	r2, [r3, #28]
  }
}
 800fac2:	bf00      	nop
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800face:	b480      	push	{r7}
 800fad0:	b085      	sub	sp, #20
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	60f8      	str	r0, [r7, #12]
 800fad6:	60b9      	str	r1, [r7, #8]
 800fad8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fada:	f06f 030b 	mvn.w	r3, #11
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
	...

0800faec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800faec:	b480      	push	{r7}
 800faee:	b085      	sub	sp, #20
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800faf6:	79fb      	ldrb	r3, [r7, #7]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d013      	beq.n	800fb24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fafc:	4b0d      	ldr	r3, [pc, #52]	; (800fb34 <netif_get_by_index+0x48>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	60fb      	str	r3, [r7, #12]
 800fb02:	e00c      	b.n	800fb1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	79fa      	ldrb	r2, [r7, #7]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d101      	bne.n	800fb18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	e006      	b.n	800fb26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	60fb      	str	r3, [r7, #12]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1ef      	bne.n	800fb04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3714      	adds	r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	24008338 	.word	0x24008338

0800fb38 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fb3e:	f000 fedd 	bl	80108fc <sys_arch_protect>
 800fb42:	6038      	str	r0, [r7, #0]
 800fb44:	4b0d      	ldr	r3, [pc, #52]	; (800fb7c <pbuf_free_ooseq+0x44>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	701a      	strb	r2, [r3, #0]
 800fb4a:	6838      	ldr	r0, [r7, #0]
 800fb4c:	f000 fee4 	bl	8010918 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fb50:	4b0b      	ldr	r3, [pc, #44]	; (800fb80 <pbuf_free_ooseq+0x48>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	607b      	str	r3, [r7, #4]
 800fb56:	e00a      	b.n	800fb6e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d003      	beq.n	800fb68 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f002 fa63 	bl	801202c <tcp_free_ooseq>
      return;
 800fb66:	e005      	b.n	800fb74 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	607b      	str	r3, [r7, #4]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1f1      	bne.n	800fb58 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	24008340 	.word	0x24008340
 800fb80:	24008350 	.word	0x24008350

0800fb84 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fb8c:	f7ff ffd4 	bl	800fb38 <pbuf_free_ooseq>
}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fb9e:	f000 fead 	bl	80108fc <sys_arch_protect>
 800fba2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fba4:	4b0f      	ldr	r3, [pc, #60]	; (800fbe4 <pbuf_pool_is_empty+0x4c>)
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fbaa:	4b0e      	ldr	r3, [pc, #56]	; (800fbe4 <pbuf_pool_is_empty+0x4c>)
 800fbac:	2201      	movs	r2, #1
 800fbae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 feb1 	bl	8010918 <sys_arch_unprotect>

  if (!queued) {
 800fbb6:	78fb      	ldrb	r3, [r7, #3]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10f      	bne.n	800fbdc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	480a      	ldr	r0, [pc, #40]	; (800fbe8 <pbuf_pool_is_empty+0x50>)
 800fbc0:	f006 f906 	bl	8015dd0 <tcpip_try_callback>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d008      	beq.n	800fbdc <pbuf_pool_is_empty+0x44>
 800fbca:	f000 fe97 	bl	80108fc <sys_arch_protect>
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	4b04      	ldr	r3, [pc, #16]	; (800fbe4 <pbuf_pool_is_empty+0x4c>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	701a      	strb	r2, [r3, #0]
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 fe9e 	bl	8010918 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fbdc:	bf00      	nop
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	24008340 	.word	0x24008340
 800fbe8:	0800fb85 	.word	0x0800fb85

0800fbec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	4611      	mov	r1, r2
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	460b      	mov	r3, r1
 800fbfc:	80fb      	strh	r3, [r7, #6]
 800fbfe:	4613      	mov	r3, r2
 800fc00:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	88fa      	ldrh	r2, [r7, #6]
 800fc12:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	88ba      	ldrh	r2, [r7, #4]
 800fc18:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fc1a:	8b3b      	ldrh	r3, [r7, #24]
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	7f3a      	ldrb	r2, [r7, #28]
 800fc26:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	73da      	strb	r2, [r3, #15]
}
 800fc34:	bf00      	nop
 800fc36:	3714      	adds	r7, #20
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b08c      	sub	sp, #48	; 0x30
 800fc44:	af02      	add	r7, sp, #8
 800fc46:	4603      	mov	r3, r0
 800fc48:	71fb      	strb	r3, [r7, #7]
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	80bb      	strh	r3, [r7, #4]
 800fc4e:	4613      	mov	r3, r2
 800fc50:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fc52:	79fb      	ldrb	r3, [r7, #7]
 800fc54:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fc56:	887b      	ldrh	r3, [r7, #2]
 800fc58:	2b41      	cmp	r3, #65	; 0x41
 800fc5a:	d00b      	beq.n	800fc74 <pbuf_alloc+0x34>
 800fc5c:	2b41      	cmp	r3, #65	; 0x41
 800fc5e:	dc02      	bgt.n	800fc66 <pbuf_alloc+0x26>
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d007      	beq.n	800fc74 <pbuf_alloc+0x34>
 800fc64:	e0c2      	b.n	800fdec <pbuf_alloc+0x1ac>
 800fc66:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fc6a:	d00b      	beq.n	800fc84 <pbuf_alloc+0x44>
 800fc6c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fc70:	d070      	beq.n	800fd54 <pbuf_alloc+0x114>
 800fc72:	e0bb      	b.n	800fdec <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fc74:	887a      	ldrh	r2, [r7, #2]
 800fc76:	88bb      	ldrh	r3, [r7, #4]
 800fc78:	4619      	mov	r1, r3
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	f000 f8d2 	bl	800fe24 <pbuf_alloc_reference>
 800fc80:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fc82:	e0bd      	b.n	800fe00 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fc84:	2300      	movs	r3, #0
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fc8c:	88bb      	ldrh	r3, [r7, #4]
 800fc8e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fc90:	200c      	movs	r0, #12
 800fc92:	f7ff fb9f 	bl	800f3d4 <memp_malloc>
 800fc96:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d109      	bne.n	800fcb2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800fc9e:	f7ff ff7b 	bl	800fb98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <pbuf_alloc+0x6e>
            pbuf_free(p);
 800fca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcaa:	f000 faa9 	bl	8010200 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e0a7      	b.n	800fe02 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fcb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcb4:	3303      	adds	r3, #3
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	f023 0303 	bic.w	r3, r3, #3
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	8b7a      	ldrh	r2, [r7, #26]
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	bf28      	it	cs
 800fcca:	4613      	movcs	r3, r2
 800fccc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fcce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcd0:	3310      	adds	r3, #16
 800fcd2:	693a      	ldr	r2, [r7, #16]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	3303      	adds	r3, #3
 800fcd8:	f023 0303 	bic.w	r3, r3, #3
 800fcdc:	4618      	mov	r0, r3
 800fcde:	89f9      	ldrh	r1, [r7, #14]
 800fce0:	8b7a      	ldrh	r2, [r7, #26]
 800fce2:	2300      	movs	r3, #0
 800fce4:	9301      	str	r3, [sp, #4]
 800fce6:	887b      	ldrh	r3, [r7, #2]
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	460b      	mov	r3, r1
 800fcec:	4601      	mov	r1, r0
 800fcee:	6938      	ldr	r0, [r7, #16]
 800fcf0:	f7ff ff7c 	bl	800fbec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	f003 0303 	and.w	r3, r3, #3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d006      	beq.n	800fd0e <pbuf_alloc+0xce>
 800fd00:	4b42      	ldr	r3, [pc, #264]	; (800fe0c <pbuf_alloc+0x1cc>)
 800fd02:	f240 1201 	movw	r2, #257	; 0x101
 800fd06:	4942      	ldr	r1, [pc, #264]	; (800fe10 <pbuf_alloc+0x1d0>)
 800fd08:	4842      	ldr	r0, [pc, #264]	; (800fe14 <pbuf_alloc+0x1d4>)
 800fd0a:	f006 ffb7 	bl	8016c7c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fd0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd10:	3303      	adds	r3, #3
 800fd12:	f023 0303 	bic.w	r3, r3, #3
 800fd16:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fd1a:	d106      	bne.n	800fd2a <pbuf_alloc+0xea>
 800fd1c:	4b3b      	ldr	r3, [pc, #236]	; (800fe0c <pbuf_alloc+0x1cc>)
 800fd1e:	f240 1203 	movw	r2, #259	; 0x103
 800fd22:	493d      	ldr	r1, [pc, #244]	; (800fe18 <pbuf_alloc+0x1d8>)
 800fd24:	483b      	ldr	r0, [pc, #236]	; (800fe14 <pbuf_alloc+0x1d4>)
 800fd26:	f006 ffa9 	bl	8016c7c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d102      	bne.n	800fd36 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	627b      	str	r3, [r7, #36]	; 0x24
 800fd34:	e002      	b.n	800fd3c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fd40:	8b7a      	ldrh	r2, [r7, #26]
 800fd42:	89fb      	ldrh	r3, [r7, #14]
 800fd44:	1ad3      	subs	r3, r2, r3
 800fd46:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fd4c:	8b7b      	ldrh	r3, [r7, #26]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d19e      	bne.n	800fc90 <pbuf_alloc+0x50>
      break;
 800fd52:	e055      	b.n	800fe00 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fd54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd56:	3303      	adds	r3, #3
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	f023 0303 	bic.w	r3, r3, #3
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	88bb      	ldrh	r3, [r7, #4]
 800fd62:	3303      	adds	r3, #3
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	f023 0303 	bic.w	r3, r3, #3
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	4413      	add	r3, r2
 800fd6e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fd70:	8b3b      	ldrh	r3, [r7, #24]
 800fd72:	3310      	adds	r3, #16
 800fd74:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fd76:	8b3a      	ldrh	r2, [r7, #24]
 800fd78:	88bb      	ldrh	r3, [r7, #4]
 800fd7a:	3303      	adds	r3, #3
 800fd7c:	f023 0303 	bic.w	r3, r3, #3
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d306      	bcc.n	800fd92 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fd84:	8afa      	ldrh	r2, [r7, #22]
 800fd86:	88bb      	ldrh	r3, [r7, #4]
 800fd88:	3303      	adds	r3, #3
 800fd8a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d201      	bcs.n	800fd96 <pbuf_alloc+0x156>
        return NULL;
 800fd92:	2300      	movs	r3, #0
 800fd94:	e035      	b.n	800fe02 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fd96:	8afb      	ldrh	r3, [r7, #22]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7ff f973 	bl	800f084 <mem_malloc>
 800fd9e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d101      	bne.n	800fdaa <pbuf_alloc+0x16a>
        return NULL;
 800fda6:	2300      	movs	r3, #0
 800fda8:	e02b      	b.n	800fe02 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fdaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdac:	3310      	adds	r3, #16
 800fdae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdb0:	4413      	add	r3, r2
 800fdb2:	3303      	adds	r3, #3
 800fdb4:	f023 0303 	bic.w	r3, r3, #3
 800fdb8:	4618      	mov	r0, r3
 800fdba:	88b9      	ldrh	r1, [r7, #4]
 800fdbc:	88ba      	ldrh	r2, [r7, #4]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	887b      	ldrh	r3, [r7, #2]
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	4601      	mov	r1, r0
 800fdca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdcc:	f7ff ff0e 	bl	800fbec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	f003 0303 	and.w	r3, r3, #3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d010      	beq.n	800fdfe <pbuf_alloc+0x1be>
 800fddc:	4b0b      	ldr	r3, [pc, #44]	; (800fe0c <pbuf_alloc+0x1cc>)
 800fdde:	f240 1223 	movw	r2, #291	; 0x123
 800fde2:	490e      	ldr	r1, [pc, #56]	; (800fe1c <pbuf_alloc+0x1dc>)
 800fde4:	480b      	ldr	r0, [pc, #44]	; (800fe14 <pbuf_alloc+0x1d4>)
 800fde6:	f006 ff49 	bl	8016c7c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fdea:	e008      	b.n	800fdfe <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fdec:	4b07      	ldr	r3, [pc, #28]	; (800fe0c <pbuf_alloc+0x1cc>)
 800fdee:	f240 1227 	movw	r2, #295	; 0x127
 800fdf2:	490b      	ldr	r1, [pc, #44]	; (800fe20 <pbuf_alloc+0x1e0>)
 800fdf4:	4807      	ldr	r0, [pc, #28]	; (800fe14 <pbuf_alloc+0x1d4>)
 800fdf6:	f006 ff41 	bl	8016c7c <iprintf>
      return NULL;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	e001      	b.n	800fe02 <pbuf_alloc+0x1c2>
      break;
 800fdfe:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fe00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3728      	adds	r7, #40	; 0x28
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	0801896c 	.word	0x0801896c
 800fe10:	080189d0 	.word	0x080189d0
 800fe14:	08018a00 	.word	0x08018a00
 800fe18:	08018a28 	.word	0x08018a28
 800fe1c:	08018a5c 	.word	0x08018a5c
 800fe20:	08018a88 	.word	0x08018a88

0800fe24 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b086      	sub	sp, #24
 800fe28:	af02      	add	r7, sp, #8
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	807b      	strh	r3, [r7, #2]
 800fe30:	4613      	mov	r3, r2
 800fe32:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fe34:	883b      	ldrh	r3, [r7, #0]
 800fe36:	2b41      	cmp	r3, #65	; 0x41
 800fe38:	d009      	beq.n	800fe4e <pbuf_alloc_reference+0x2a>
 800fe3a:	883b      	ldrh	r3, [r7, #0]
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d006      	beq.n	800fe4e <pbuf_alloc_reference+0x2a>
 800fe40:	4b0f      	ldr	r3, [pc, #60]	; (800fe80 <pbuf_alloc_reference+0x5c>)
 800fe42:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fe46:	490f      	ldr	r1, [pc, #60]	; (800fe84 <pbuf_alloc_reference+0x60>)
 800fe48:	480f      	ldr	r0, [pc, #60]	; (800fe88 <pbuf_alloc_reference+0x64>)
 800fe4a:	f006 ff17 	bl	8016c7c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fe4e:	200b      	movs	r0, #11
 800fe50:	f7ff fac0 	bl	800f3d4 <memp_malloc>
 800fe54:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d101      	bne.n	800fe60 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	e00b      	b.n	800fe78 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fe60:	8879      	ldrh	r1, [r7, #2]
 800fe62:	887a      	ldrh	r2, [r7, #2]
 800fe64:	2300      	movs	r3, #0
 800fe66:	9301      	str	r3, [sp, #4]
 800fe68:	883b      	ldrh	r3, [r7, #0]
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f7ff febb 	bl	800fbec <pbuf_init_alloced_pbuf>
  return p;
 800fe76:	68fb      	ldr	r3, [r7, #12]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3710      	adds	r7, #16
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	0801896c 	.word	0x0801896c
 800fe84:	08018aa4 	.word	0x08018aa4
 800fe88:	08018a00 	.word	0x08018a00

0800fe8c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af02      	add	r7, sp, #8
 800fe92:	607b      	str	r3, [r7, #4]
 800fe94:	4603      	mov	r3, r0
 800fe96:	73fb      	strb	r3, [r7, #15]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	81bb      	strh	r3, [r7, #12]
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fea0:	7bfb      	ldrb	r3, [r7, #15]
 800fea2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fea4:	8a7b      	ldrh	r3, [r7, #18]
 800fea6:	3303      	adds	r3, #3
 800fea8:	f023 0203 	bic.w	r2, r3, #3
 800feac:	89bb      	ldrh	r3, [r7, #12]
 800feae:	441a      	add	r2, r3
 800feb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d901      	bls.n	800feba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800feb6:	2300      	movs	r3, #0
 800feb8:	e018      	b.n	800feec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d007      	beq.n	800fed0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fec0:	8a7b      	ldrh	r3, [r7, #18]
 800fec2:	3303      	adds	r3, #3
 800fec4:	f023 0303 	bic.w	r3, r3, #3
 800fec8:	6a3a      	ldr	r2, [r7, #32]
 800feca:	4413      	add	r3, r2
 800fecc:	617b      	str	r3, [r7, #20]
 800fece:	e001      	b.n	800fed4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fed0:	2300      	movs	r3, #0
 800fed2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	89b9      	ldrh	r1, [r7, #12]
 800fed8:	89ba      	ldrh	r2, [r7, #12]
 800feda:	2302      	movs	r3, #2
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	897b      	ldrh	r3, [r7, #10]
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	460b      	mov	r3, r1
 800fee4:	6979      	ldr	r1, [r7, #20]
 800fee6:	f7ff fe81 	bl	800fbec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800feea:	687b      	ldr	r3, [r7, #4]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	460b      	mov	r3, r1
 800fefe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d106      	bne.n	800ff14 <pbuf_realloc+0x20>
 800ff06:	4b3a      	ldr	r3, [pc, #232]	; (800fff0 <pbuf_realloc+0xfc>)
 800ff08:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ff0c:	4939      	ldr	r1, [pc, #228]	; (800fff4 <pbuf_realloc+0x100>)
 800ff0e:	483a      	ldr	r0, [pc, #232]	; (800fff8 <pbuf_realloc+0x104>)
 800ff10:	f006 feb4 	bl	8016c7c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	891b      	ldrh	r3, [r3, #8]
 800ff18:	887a      	ldrh	r2, [r7, #2]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d264      	bcs.n	800ffe8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	891a      	ldrh	r2, [r3, #8]
 800ff22:	887b      	ldrh	r3, [r7, #2]
 800ff24:	1ad3      	subs	r3, r2, r3
 800ff26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ff28:	887b      	ldrh	r3, [r7, #2]
 800ff2a:	817b      	strh	r3, [r7, #10]
  q = p;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ff30:	e018      	b.n	800ff64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	895b      	ldrh	r3, [r3, #10]
 800ff36:	897a      	ldrh	r2, [r7, #10]
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	891a      	ldrh	r2, [r3, #8]
 800ff40:	893b      	ldrh	r3, [r7, #8]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <pbuf_realloc+0x70>
 800ff56:	4b26      	ldr	r3, [pc, #152]	; (800fff0 <pbuf_realloc+0xfc>)
 800ff58:	f240 12af 	movw	r2, #431	; 0x1af
 800ff5c:	4927      	ldr	r1, [pc, #156]	; (800fffc <pbuf_realloc+0x108>)
 800ff5e:	4826      	ldr	r0, [pc, #152]	; (800fff8 <pbuf_realloc+0x104>)
 800ff60:	f006 fe8c 	bl	8016c7c <iprintf>
  while (rem_len > q->len) {
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	895b      	ldrh	r3, [r3, #10]
 800ff68:	897a      	ldrh	r2, [r7, #10]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d8e1      	bhi.n	800ff32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	7b1b      	ldrb	r3, [r3, #12]
 800ff72:	f003 030f 	and.w	r3, r3, #15
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d122      	bne.n	800ffc0 <pbuf_realloc+0xcc>
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	895b      	ldrh	r3, [r3, #10]
 800ff7e:	897a      	ldrh	r2, [r7, #10]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d01d      	beq.n	800ffc0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	7b5b      	ldrb	r3, [r3, #13]
 800ff88:	f003 0302 	and.w	r3, r3, #2
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d117      	bne.n	800ffc0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	461a      	mov	r2, r3
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	897b      	ldrh	r3, [r7, #10]
 800ff9e:	4413      	add	r3, r2
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f7fe ff5d 	bl	800ee64 <mem_trim>
 800ffaa:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d106      	bne.n	800ffc0 <pbuf_realloc+0xcc>
 800ffb2:	4b0f      	ldr	r3, [pc, #60]	; (800fff0 <pbuf_realloc+0xfc>)
 800ffb4:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ffb8:	4911      	ldr	r1, [pc, #68]	; (8010000 <pbuf_realloc+0x10c>)
 800ffba:	480f      	ldr	r0, [pc, #60]	; (800fff8 <pbuf_realloc+0x104>)
 800ffbc:	f006 fe5e 	bl	8016c7c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	897a      	ldrh	r2, [r7, #10]
 800ffc4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	895a      	ldrh	r2, [r3, #10]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d004      	beq.n	800ffe0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 f910 	bl	8010200 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	e000      	b.n	800ffea <pbuf_realloc+0xf6>
    return;
 800ffe8:	bf00      	nop

}
 800ffea:	3710      	adds	r7, #16
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	0801896c 	.word	0x0801896c
 800fff4:	08018ab8 	.word	0x08018ab8
 800fff8:	08018a00 	.word	0x08018a00
 800fffc:	08018ad0 	.word	0x08018ad0
 8010000:	08018ae8 	.word	0x08018ae8

08010004 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b086      	sub	sp, #24
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	4613      	mov	r3, r2
 8010010:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d106      	bne.n	8010026 <pbuf_add_header_impl+0x22>
 8010018:	4b2b      	ldr	r3, [pc, #172]	; (80100c8 <pbuf_add_header_impl+0xc4>)
 801001a:	f240 12df 	movw	r2, #479	; 0x1df
 801001e:	492b      	ldr	r1, [pc, #172]	; (80100cc <pbuf_add_header_impl+0xc8>)
 8010020:	482b      	ldr	r0, [pc, #172]	; (80100d0 <pbuf_add_header_impl+0xcc>)
 8010022:	f006 fe2b 	bl	8016c7c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d003      	beq.n	8010034 <pbuf_add_header_impl+0x30>
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010032:	d301      	bcc.n	8010038 <pbuf_add_header_impl+0x34>
    return 1;
 8010034:	2301      	movs	r3, #1
 8010036:	e043      	b.n	80100c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d101      	bne.n	8010042 <pbuf_add_header_impl+0x3e>
    return 0;
 801003e:	2300      	movs	r3, #0
 8010040:	e03e      	b.n	80100c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	891a      	ldrh	r2, [r3, #8]
 801004a:	8a7b      	ldrh	r3, [r7, #18]
 801004c:	4413      	add	r3, r2
 801004e:	b29b      	uxth	r3, r3
 8010050:	8a7a      	ldrh	r2, [r7, #18]
 8010052:	429a      	cmp	r2, r3
 8010054:	d901      	bls.n	801005a <pbuf_add_header_impl+0x56>
    return 1;
 8010056:	2301      	movs	r3, #1
 8010058:	e032      	b.n	80100c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	7b1b      	ldrb	r3, [r3, #12]
 801005e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010060:	8a3b      	ldrh	r3, [r7, #16]
 8010062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00c      	beq.n	8010084 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	685a      	ldr	r2, [r3, #4]
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	425b      	negs	r3, r3
 8010072:	4413      	add	r3, r2
 8010074:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3310      	adds	r3, #16
 801007a:	697a      	ldr	r2, [r7, #20]
 801007c:	429a      	cmp	r2, r3
 801007e:	d20d      	bcs.n	801009c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010080:	2301      	movs	r3, #1
 8010082:	e01d      	b.n	80100c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010084:	79fb      	ldrb	r3, [r7, #7]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d006      	beq.n	8010098 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	685a      	ldr	r2, [r3, #4]
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	425b      	negs	r3, r3
 8010092:	4413      	add	r3, r2
 8010094:	617b      	str	r3, [r7, #20]
 8010096:	e001      	b.n	801009c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010098:	2301      	movs	r3, #1
 801009a:	e011      	b.n	80100c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	697a      	ldr	r2, [r7, #20]
 80100a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	895a      	ldrh	r2, [r3, #10]
 80100a6:	8a7b      	ldrh	r3, [r7, #18]
 80100a8:	4413      	add	r3, r2
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	891a      	ldrh	r2, [r3, #8]
 80100b4:	8a7b      	ldrh	r3, [r7, #18]
 80100b6:	4413      	add	r3, r2
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	811a      	strh	r2, [r3, #8]


  return 0;
 80100be:	2300      	movs	r3, #0
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3718      	adds	r7, #24
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	0801896c 	.word	0x0801896c
 80100cc:	08018b04 	.word	0x08018b04
 80100d0:	08018a00 	.word	0x08018a00

080100d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80100de:	2200      	movs	r2, #0
 80100e0:	6839      	ldr	r1, [r7, #0]
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7ff ff8e 	bl	8010004 <pbuf_add_header_impl>
 80100e8:	4603      	mov	r3, r0
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
	...

080100f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d106      	bne.n	8010112 <pbuf_remove_header+0x1e>
 8010104:	4b20      	ldr	r3, [pc, #128]	; (8010188 <pbuf_remove_header+0x94>)
 8010106:	f240 224b 	movw	r2, #587	; 0x24b
 801010a:	4920      	ldr	r1, [pc, #128]	; (801018c <pbuf_remove_header+0x98>)
 801010c:	4820      	ldr	r0, [pc, #128]	; (8010190 <pbuf_remove_header+0x9c>)
 801010e:	f006 fdb5 	bl	8016c7c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d003      	beq.n	8010120 <pbuf_remove_header+0x2c>
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801011e:	d301      	bcc.n	8010124 <pbuf_remove_header+0x30>
    return 1;
 8010120:	2301      	movs	r3, #1
 8010122:	e02c      	b.n	801017e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d101      	bne.n	801012e <pbuf_remove_header+0x3a>
    return 0;
 801012a:	2300      	movs	r3, #0
 801012c:	e027      	b.n	801017e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	895b      	ldrh	r3, [r3, #10]
 8010136:	89fa      	ldrh	r2, [r7, #14]
 8010138:	429a      	cmp	r2, r3
 801013a:	d908      	bls.n	801014e <pbuf_remove_header+0x5a>
 801013c:	4b12      	ldr	r3, [pc, #72]	; (8010188 <pbuf_remove_header+0x94>)
 801013e:	f240 2255 	movw	r2, #597	; 0x255
 8010142:	4914      	ldr	r1, [pc, #80]	; (8010194 <pbuf_remove_header+0xa0>)
 8010144:	4812      	ldr	r0, [pc, #72]	; (8010190 <pbuf_remove_header+0x9c>)
 8010146:	f006 fd99 	bl	8016c7c <iprintf>
 801014a:	2301      	movs	r3, #1
 801014c:	e017      	b.n	801017e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	685a      	ldr	r2, [r3, #4]
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	441a      	add	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	895a      	ldrh	r2, [r3, #10]
 8010164:	89fb      	ldrh	r3, [r7, #14]
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	b29a      	uxth	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	891a      	ldrh	r2, [r3, #8]
 8010172:	89fb      	ldrh	r3, [r7, #14]
 8010174:	1ad3      	subs	r3, r2, r3
 8010176:	b29a      	uxth	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801017c:	2300      	movs	r3, #0
}
 801017e:	4618      	mov	r0, r3
 8010180:	3710      	adds	r7, #16
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	0801896c 	.word	0x0801896c
 801018c:	08018b04 	.word	0x08018b04
 8010190:	08018a00 	.word	0x08018a00
 8010194:	08018b10 	.word	0x08018b10

08010198 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	807b      	strh	r3, [r7, #2]
 80101a4:	4613      	mov	r3, r2
 80101a6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80101a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	da08      	bge.n	80101c2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80101b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101b4:	425b      	negs	r3, r3
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff ff9b 	bl	80100f4 <pbuf_remove_header>
 80101be:	4603      	mov	r3, r0
 80101c0:	e007      	b.n	80101d2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80101c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101c6:	787a      	ldrb	r2, [r7, #1]
 80101c8:	4619      	mov	r1, r3
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7ff ff1a 	bl	8010004 <pbuf_add_header_impl>
 80101d0:	4603      	mov	r3, r0
  }
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b082      	sub	sp, #8
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	460b      	mov	r3, r1
 80101e4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80101e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101ea:	2201      	movs	r2, #1
 80101ec:	4619      	mov	r1, r3
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7ff ffd2 	bl	8010198 <pbuf_header_impl>
 80101f4:	4603      	mov	r3, r0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b088      	sub	sp, #32
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10b      	bne.n	8010226 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d106      	bne.n	8010222 <pbuf_free+0x22>
 8010214:	4b3b      	ldr	r3, [pc, #236]	; (8010304 <pbuf_free+0x104>)
 8010216:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801021a:	493b      	ldr	r1, [pc, #236]	; (8010308 <pbuf_free+0x108>)
 801021c:	483b      	ldr	r0, [pc, #236]	; (801030c <pbuf_free+0x10c>)
 801021e:	f006 fd2d 	bl	8016c7c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010222:	2300      	movs	r3, #0
 8010224:	e069      	b.n	80102fa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801022a:	e062      	b.n	80102f2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801022c:	f000 fb66 	bl	80108fc <sys_arch_protect>
 8010230:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	7b9b      	ldrb	r3, [r3, #14]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d106      	bne.n	8010248 <pbuf_free+0x48>
 801023a:	4b32      	ldr	r3, [pc, #200]	; (8010304 <pbuf_free+0x104>)
 801023c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010240:	4933      	ldr	r1, [pc, #204]	; (8010310 <pbuf_free+0x110>)
 8010242:	4832      	ldr	r0, [pc, #200]	; (801030c <pbuf_free+0x10c>)
 8010244:	f006 fd1a 	bl	8016c7c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	7b9b      	ldrb	r3, [r3, #14]
 801024c:	3b01      	subs	r3, #1
 801024e:	b2da      	uxtb	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	739a      	strb	r2, [r3, #14]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	7b9b      	ldrb	r3, [r3, #14]
 8010258:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801025a:	69b8      	ldr	r0, [r7, #24]
 801025c:	f000 fb5c 	bl	8010918 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d143      	bne.n	80102ee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	7b1b      	ldrb	r3, [r3, #12]
 8010270:	f003 030f 	and.w	r3, r3, #15
 8010274:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	7b5b      	ldrb	r3, [r3, #13]
 801027a:	f003 0302 	and.w	r3, r3, #2
 801027e:	2b00      	cmp	r3, #0
 8010280:	d011      	beq.n	80102a6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	691b      	ldr	r3, [r3, #16]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d106      	bne.n	801029c <pbuf_free+0x9c>
 801028e:	4b1d      	ldr	r3, [pc, #116]	; (8010304 <pbuf_free+0x104>)
 8010290:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010294:	491f      	ldr	r1, [pc, #124]	; (8010314 <pbuf_free+0x114>)
 8010296:	481d      	ldr	r0, [pc, #116]	; (801030c <pbuf_free+0x10c>)
 8010298:	f006 fcf0 	bl	8016c7c <iprintf>
        pc->custom_free_function(p);
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	691b      	ldr	r3, [r3, #16]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	4798      	blx	r3
 80102a4:	e01d      	b.n	80102e2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
 80102a8:	2b02      	cmp	r3, #2
 80102aa:	d104      	bne.n	80102b6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80102ac:	6879      	ldr	r1, [r7, #4]
 80102ae:	200c      	movs	r0, #12
 80102b0:	f7ff f906 	bl	800f4c0 <memp_free>
 80102b4:	e015      	b.n	80102e2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80102b6:	7bfb      	ldrb	r3, [r7, #15]
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d104      	bne.n	80102c6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80102bc:	6879      	ldr	r1, [r7, #4]
 80102be:	200b      	movs	r0, #11
 80102c0:	f7ff f8fe 	bl	800f4c0 <memp_free>
 80102c4:	e00d      	b.n	80102e2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80102c6:	7bfb      	ldrb	r3, [r7, #15]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d103      	bne.n	80102d4 <pbuf_free+0xd4>
          mem_free(p);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7fe fd39 	bl	800ed44 <mem_free>
 80102d2:	e006      	b.n	80102e2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80102d4:	4b0b      	ldr	r3, [pc, #44]	; (8010304 <pbuf_free+0x104>)
 80102d6:	f240 320f 	movw	r2, #783	; 0x30f
 80102da:	490f      	ldr	r1, [pc, #60]	; (8010318 <pbuf_free+0x118>)
 80102dc:	480b      	ldr	r0, [pc, #44]	; (801030c <pbuf_free+0x10c>)
 80102de:	f006 fccd 	bl	8016c7c <iprintf>
        }
      }
      count++;
 80102e2:	7ffb      	ldrb	r3, [r7, #31]
 80102e4:	3301      	adds	r3, #1
 80102e6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	607b      	str	r3, [r7, #4]
 80102ec:	e001      	b.n	80102f2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80102ee:	2300      	movs	r3, #0
 80102f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d199      	bne.n	801022c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80102f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3720      	adds	r7, #32
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	0801896c 	.word	0x0801896c
 8010308:	08018b04 	.word	0x08018b04
 801030c:	08018a00 	.word	0x08018a00
 8010310:	08018b30 	.word	0x08018b30
 8010314:	08018b48 	.word	0x08018b48
 8010318:	08018b6c 	.word	0x08018b6c

0801031c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010324:	2300      	movs	r3, #0
 8010326:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010328:	e005      	b.n	8010336 <pbuf_clen+0x1a>
    ++len;
 801032a:	89fb      	ldrh	r3, [r7, #14]
 801032c:	3301      	adds	r3, #1
 801032e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1f6      	bne.n	801032a <pbuf_clen+0xe>
  }
  return len;
 801033c:	89fb      	ldrh	r3, [r7, #14]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3714      	adds	r7, #20
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr
	...

0801034c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d016      	beq.n	8010388 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801035a:	f000 facf 	bl	80108fc <sys_arch_protect>
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	7b9b      	ldrb	r3, [r3, #14]
 8010364:	3301      	adds	r3, #1
 8010366:	b2da      	uxtb	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	739a      	strb	r2, [r3, #14]
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 fad3 	bl	8010918 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	7b9b      	ldrb	r3, [r3, #14]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <pbuf_ref+0x3c>
 801037a:	4b05      	ldr	r3, [pc, #20]	; (8010390 <pbuf_ref+0x44>)
 801037c:	f240 3242 	movw	r2, #834	; 0x342
 8010380:	4904      	ldr	r1, [pc, #16]	; (8010394 <pbuf_ref+0x48>)
 8010382:	4805      	ldr	r0, [pc, #20]	; (8010398 <pbuf_ref+0x4c>)
 8010384:	f006 fc7a 	bl	8016c7c <iprintf>
  }
}
 8010388:	bf00      	nop
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	0801896c 	.word	0x0801896c
 8010394:	08018b80 	.word	0x08018b80
 8010398:	08018a00 	.word	0x08018a00

0801039c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d002      	beq.n	80103b2 <pbuf_cat+0x16>
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d107      	bne.n	80103c2 <pbuf_cat+0x26>
 80103b2:	4b20      	ldr	r3, [pc, #128]	; (8010434 <pbuf_cat+0x98>)
 80103b4:	f240 325a 	movw	r2, #858	; 0x35a
 80103b8:	491f      	ldr	r1, [pc, #124]	; (8010438 <pbuf_cat+0x9c>)
 80103ba:	4820      	ldr	r0, [pc, #128]	; (801043c <pbuf_cat+0xa0>)
 80103bc:	f006 fc5e 	bl	8016c7c <iprintf>
 80103c0:	e034      	b.n	801042c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	60fb      	str	r3, [r7, #12]
 80103c6:	e00a      	b.n	80103de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	891a      	ldrh	r2, [r3, #8]
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	891b      	ldrh	r3, [r3, #8]
 80103d0:	4413      	add	r3, r2
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d1f0      	bne.n	80103c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	891a      	ldrh	r2, [r3, #8]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	895b      	ldrh	r3, [r3, #10]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d006      	beq.n	8010400 <pbuf_cat+0x64>
 80103f2:	4b10      	ldr	r3, [pc, #64]	; (8010434 <pbuf_cat+0x98>)
 80103f4:	f240 3262 	movw	r2, #866	; 0x362
 80103f8:	4911      	ldr	r1, [pc, #68]	; (8010440 <pbuf_cat+0xa4>)
 80103fa:	4810      	ldr	r0, [pc, #64]	; (801043c <pbuf_cat+0xa0>)
 80103fc:	f006 fc3e 	bl	8016c7c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d006      	beq.n	8010416 <pbuf_cat+0x7a>
 8010408:	4b0a      	ldr	r3, [pc, #40]	; (8010434 <pbuf_cat+0x98>)
 801040a:	f240 3263 	movw	r2, #867	; 0x363
 801040e:	490d      	ldr	r1, [pc, #52]	; (8010444 <pbuf_cat+0xa8>)
 8010410:	480a      	ldr	r0, [pc, #40]	; (801043c <pbuf_cat+0xa0>)
 8010412:	f006 fc33 	bl	8016c7c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	891a      	ldrh	r2, [r3, #8]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	891b      	ldrh	r3, [r3, #8]
 801041e:	4413      	add	r3, r2
 8010420:	b29a      	uxth	r2, r3
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	683a      	ldr	r2, [r7, #0]
 801042a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	0801896c 	.word	0x0801896c
 8010438:	08018b94 	.word	0x08018b94
 801043c:	08018a00 	.word	0x08018a00
 8010440:	08018bcc 	.word	0x08018bcc
 8010444:	08018bfc 	.word	0x08018bfc

08010448 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010452:	6839      	ldr	r1, [r7, #0]
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff ffa1 	bl	801039c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801045a:	6838      	ldr	r0, [r7, #0]
 801045c:	f7ff ff76 	bl	801034c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010472:	2300      	movs	r3, #0
 8010474:	617b      	str	r3, [r7, #20]
 8010476:	2300      	movs	r3, #0
 8010478:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d008      	beq.n	8010492 <pbuf_copy+0x2a>
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d005      	beq.n	8010492 <pbuf_copy+0x2a>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	891a      	ldrh	r2, [r3, #8]
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	891b      	ldrh	r3, [r3, #8]
 801048e:	429a      	cmp	r2, r3
 8010490:	d209      	bcs.n	80104a6 <pbuf_copy+0x3e>
 8010492:	4b57      	ldr	r3, [pc, #348]	; (80105f0 <pbuf_copy+0x188>)
 8010494:	f240 32ca 	movw	r2, #970	; 0x3ca
 8010498:	4956      	ldr	r1, [pc, #344]	; (80105f4 <pbuf_copy+0x18c>)
 801049a:	4857      	ldr	r0, [pc, #348]	; (80105f8 <pbuf_copy+0x190>)
 801049c:	f006 fbee 	bl	8016c7c <iprintf>
 80104a0:	f06f 030f 	mvn.w	r3, #15
 80104a4:	e09f      	b.n	80105e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	895b      	ldrh	r3, [r3, #10]
 80104aa:	461a      	mov	r2, r3
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	1ad2      	subs	r2, r2, r3
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	895b      	ldrh	r3, [r3, #10]
 80104b4:	4619      	mov	r1, r3
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	1acb      	subs	r3, r1, r3
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d306      	bcc.n	80104cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	895b      	ldrh	r3, [r3, #10]
 80104c2:	461a      	mov	r2, r3
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	60fb      	str	r3, [r7, #12]
 80104ca:	e005      	b.n	80104d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	895b      	ldrh	r3, [r3, #10]
 80104d0:	461a      	mov	r2, r3
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	685a      	ldr	r2, [r3, #4]
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	18d0      	adds	r0, r2, r3
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	685a      	ldr	r2, [r3, #4]
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	4413      	add	r3, r2
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	4619      	mov	r1, r3
 80104ec:	f006 fbb3 	bl	8016c56 <memcpy>
    offset_to += len;
 80104f0:	697a      	ldr	r2, [r7, #20]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	4413      	add	r3, r2
 80104f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80104f8:	693a      	ldr	r2, [r7, #16]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	4413      	add	r3, r2
 80104fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	895b      	ldrh	r3, [r3, #10]
 8010504:	461a      	mov	r2, r3
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	4293      	cmp	r3, r2
 801050a:	d906      	bls.n	801051a <pbuf_copy+0xb2>
 801050c:	4b38      	ldr	r3, [pc, #224]	; (80105f0 <pbuf_copy+0x188>)
 801050e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010512:	493a      	ldr	r1, [pc, #232]	; (80105fc <pbuf_copy+0x194>)
 8010514:	4838      	ldr	r0, [pc, #224]	; (80105f8 <pbuf_copy+0x190>)
 8010516:	f006 fbb1 	bl	8016c7c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	895b      	ldrh	r3, [r3, #10]
 801051e:	461a      	mov	r2, r3
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	4293      	cmp	r3, r2
 8010524:	d906      	bls.n	8010534 <pbuf_copy+0xcc>
 8010526:	4b32      	ldr	r3, [pc, #200]	; (80105f0 <pbuf_copy+0x188>)
 8010528:	f240 32da 	movw	r2, #986	; 0x3da
 801052c:	4934      	ldr	r1, [pc, #208]	; (8010600 <pbuf_copy+0x198>)
 801052e:	4832      	ldr	r0, [pc, #200]	; (80105f8 <pbuf_copy+0x190>)
 8010530:	f006 fba4 	bl	8016c7c <iprintf>
    if (offset_from >= p_from->len) {
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	895b      	ldrh	r3, [r3, #10]
 8010538:	461a      	mov	r2, r3
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	4293      	cmp	r3, r2
 801053e:	d304      	bcc.n	801054a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010540:	2300      	movs	r3, #0
 8010542:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	895b      	ldrh	r3, [r3, #10]
 801054e:	461a      	mov	r2, r3
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	4293      	cmp	r3, r2
 8010554:	d114      	bne.n	8010580 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d10c      	bne.n	8010580 <pbuf_copy+0x118>
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d009      	beq.n	8010580 <pbuf_copy+0x118>
 801056c:	4b20      	ldr	r3, [pc, #128]	; (80105f0 <pbuf_copy+0x188>)
 801056e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010572:	4924      	ldr	r1, [pc, #144]	; (8010604 <pbuf_copy+0x19c>)
 8010574:	4820      	ldr	r0, [pc, #128]	; (80105f8 <pbuf_copy+0x190>)
 8010576:	f006 fb81 	bl	8016c7c <iprintf>
 801057a:	f06f 030f 	mvn.w	r3, #15
 801057e:	e032      	b.n	80105e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d013      	beq.n	80105ae <pbuf_copy+0x146>
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	895a      	ldrh	r2, [r3, #10]
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	891b      	ldrh	r3, [r3, #8]
 801058e:	429a      	cmp	r2, r3
 8010590:	d10d      	bne.n	80105ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d009      	beq.n	80105ae <pbuf_copy+0x146>
 801059a:	4b15      	ldr	r3, [pc, #84]	; (80105f0 <pbuf_copy+0x188>)
 801059c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80105a0:	4919      	ldr	r1, [pc, #100]	; (8010608 <pbuf_copy+0x1a0>)
 80105a2:	4815      	ldr	r0, [pc, #84]	; (80105f8 <pbuf_copy+0x190>)
 80105a4:	f006 fb6a 	bl	8016c7c <iprintf>
 80105a8:	f06f 0305 	mvn.w	r3, #5
 80105ac:	e01b      	b.n	80105e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d013      	beq.n	80105dc <pbuf_copy+0x174>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	895a      	ldrh	r2, [r3, #10]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	891b      	ldrh	r3, [r3, #8]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d10d      	bne.n	80105dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d009      	beq.n	80105dc <pbuf_copy+0x174>
 80105c8:	4b09      	ldr	r3, [pc, #36]	; (80105f0 <pbuf_copy+0x188>)
 80105ca:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80105ce:	490e      	ldr	r1, [pc, #56]	; (8010608 <pbuf_copy+0x1a0>)
 80105d0:	4809      	ldr	r0, [pc, #36]	; (80105f8 <pbuf_copy+0x190>)
 80105d2:	f006 fb53 	bl	8016c7c <iprintf>
 80105d6:	f06f 0305 	mvn.w	r3, #5
 80105da:	e004      	b.n	80105e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	f47f af61 	bne.w	80104a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	0801896c 	.word	0x0801896c
 80105f4:	08018c48 	.word	0x08018c48
 80105f8:	08018a00 	.word	0x08018a00
 80105fc:	08018c78 	.word	0x08018c78
 8010600:	08018c90 	.word	0x08018c90
 8010604:	08018cac 	.word	0x08018cac
 8010608:	08018cbc 	.word	0x08018cbc

0801060c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b088      	sub	sp, #32
 8010610:	af00      	add	r7, sp, #0
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	4611      	mov	r1, r2
 8010618:	461a      	mov	r2, r3
 801061a:	460b      	mov	r3, r1
 801061c:	80fb      	strh	r3, [r7, #6]
 801061e:	4613      	mov	r3, r2
 8010620:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010622:	2300      	movs	r3, #0
 8010624:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010626:	2300      	movs	r3, #0
 8010628:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d108      	bne.n	8010642 <pbuf_copy_partial+0x36>
 8010630:	4b2b      	ldr	r3, [pc, #172]	; (80106e0 <pbuf_copy_partial+0xd4>)
 8010632:	f240 420a 	movw	r2, #1034	; 0x40a
 8010636:	492b      	ldr	r1, [pc, #172]	; (80106e4 <pbuf_copy_partial+0xd8>)
 8010638:	482b      	ldr	r0, [pc, #172]	; (80106e8 <pbuf_copy_partial+0xdc>)
 801063a:	f006 fb1f 	bl	8016c7c <iprintf>
 801063e:	2300      	movs	r3, #0
 8010640:	e04a      	b.n	80106d8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d108      	bne.n	801065a <pbuf_copy_partial+0x4e>
 8010648:	4b25      	ldr	r3, [pc, #148]	; (80106e0 <pbuf_copy_partial+0xd4>)
 801064a:	f240 420b 	movw	r2, #1035	; 0x40b
 801064e:	4927      	ldr	r1, [pc, #156]	; (80106ec <pbuf_copy_partial+0xe0>)
 8010650:	4825      	ldr	r0, [pc, #148]	; (80106e8 <pbuf_copy_partial+0xdc>)
 8010652:	f006 fb13 	bl	8016c7c <iprintf>
 8010656:	2300      	movs	r3, #0
 8010658:	e03e      	b.n	80106d8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	61fb      	str	r3, [r7, #28]
 801065e:	e034      	b.n	80106ca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010660:	88bb      	ldrh	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00a      	beq.n	801067c <pbuf_copy_partial+0x70>
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	895b      	ldrh	r3, [r3, #10]
 801066a:	88ba      	ldrh	r2, [r7, #4]
 801066c:	429a      	cmp	r2, r3
 801066e:	d305      	bcc.n	801067c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	895b      	ldrh	r3, [r3, #10]
 8010674:	88ba      	ldrh	r2, [r7, #4]
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	80bb      	strh	r3, [r7, #4]
 801067a:	e023      	b.n	80106c4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	895a      	ldrh	r2, [r3, #10]
 8010680:	88bb      	ldrh	r3, [r7, #4]
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010686:	8b3a      	ldrh	r2, [r7, #24]
 8010688:	88fb      	ldrh	r3, [r7, #6]
 801068a:	429a      	cmp	r2, r3
 801068c:	d901      	bls.n	8010692 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801068e:	88fb      	ldrh	r3, [r7, #6]
 8010690:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010692:	8b7b      	ldrh	r3, [r7, #26]
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	18d0      	adds	r0, r2, r3
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	685a      	ldr	r2, [r3, #4]
 801069c:	88bb      	ldrh	r3, [r7, #4]
 801069e:	4413      	add	r3, r2
 80106a0:	8b3a      	ldrh	r2, [r7, #24]
 80106a2:	4619      	mov	r1, r3
 80106a4:	f006 fad7 	bl	8016c56 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80106a8:	8afa      	ldrh	r2, [r7, #22]
 80106aa:	8b3b      	ldrh	r3, [r7, #24]
 80106ac:	4413      	add	r3, r2
 80106ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80106b0:	8b7a      	ldrh	r2, [r7, #26]
 80106b2:	8b3b      	ldrh	r3, [r7, #24]
 80106b4:	4413      	add	r3, r2
 80106b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80106b8:	88fa      	ldrh	r2, [r7, #6]
 80106ba:	8b3b      	ldrh	r3, [r7, #24]
 80106bc:	1ad3      	subs	r3, r2, r3
 80106be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	61fb      	str	r3, [r7, #28]
 80106ca:	88fb      	ldrh	r3, [r7, #6]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d002      	beq.n	80106d6 <pbuf_copy_partial+0xca>
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1c4      	bne.n	8010660 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80106d6:	8afb      	ldrh	r3, [r7, #22]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3720      	adds	r7, #32
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	0801896c 	.word	0x0801896c
 80106e4:	08018ce8 	.word	0x08018ce8
 80106e8:	08018a00 	.word	0x08018a00
 80106ec:	08018d08 	.word	0x08018d08

080106f0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	4603      	mov	r3, r0
 80106f8:	603a      	str	r2, [r7, #0]
 80106fa:	71fb      	strb	r3, [r7, #7]
 80106fc:	460b      	mov	r3, r1
 80106fe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	8919      	ldrh	r1, [r3, #8]
 8010704:	88ba      	ldrh	r2, [r7, #4]
 8010706:	79fb      	ldrb	r3, [r7, #7]
 8010708:	4618      	mov	r0, r3
 801070a:	f7ff fa99 	bl	800fc40 <pbuf_alloc>
 801070e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d101      	bne.n	801071a <pbuf_clone+0x2a>
    return NULL;
 8010716:	2300      	movs	r3, #0
 8010718:	e011      	b.n	801073e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801071a:	6839      	ldr	r1, [r7, #0]
 801071c:	68f8      	ldr	r0, [r7, #12]
 801071e:	f7ff fea3 	bl	8010468 <pbuf_copy>
 8010722:	4603      	mov	r3, r0
 8010724:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010726:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d006      	beq.n	801073c <pbuf_clone+0x4c>
 801072e:	4b06      	ldr	r3, [pc, #24]	; (8010748 <pbuf_clone+0x58>)
 8010730:	f240 5224 	movw	r2, #1316	; 0x524
 8010734:	4905      	ldr	r1, [pc, #20]	; (801074c <pbuf_clone+0x5c>)
 8010736:	4806      	ldr	r0, [pc, #24]	; (8010750 <pbuf_clone+0x60>)
 8010738:	f006 faa0 	bl	8016c7c <iprintf>
  return q;
 801073c:	68fb      	ldr	r3, [r7, #12]
}
 801073e:	4618      	mov	r0, r3
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	0801896c 	.word	0x0801896c
 801074c:	08018e14 	.word	0x08018e14
 8010750:	08018a00 	.word	0x08018a00

08010754 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	2200      	movs	r2, #0
 8010762:	2104      	movs	r1, #4
 8010764:	4618      	mov	r0, r3
 8010766:	f7f8 fbe5 	bl	8008f34 <osMessageQueueNew>
 801076a:	4602      	mov	r2, r0
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d102      	bne.n	801077e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8010778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801077c:	e000      	b.n	8010780 <sys_mbox_new+0x2c>

  return ERR_OK;
 801077e:	2300      	movs	r3, #0
}
 8010780:	4618      	mov	r0, r3
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6818      	ldr	r0, [r3, #0]
 8010796:	4639      	mov	r1, r7
 8010798:	2300      	movs	r3, #0
 801079a:	2200      	movs	r2, #0
 801079c:	f7f8 fc50 	bl	8009040 <osMessageQueuePut>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d102      	bne.n	80107ac <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80107a6:	2300      	movs	r3, #0
 80107a8:	73fb      	strb	r3, [r7, #15]
 80107aa:	e001      	b.n	80107b0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80107ac:	23ff      	movs	r3, #255	; 0xff
 80107ae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80107b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b086      	sub	sp, #24
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80107c8:	f7f8 f86c 	bl	80088a4 <osKernelGetTickCount>
 80107cc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d013      	beq.n	80107fc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6818      	ldr	r0, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2200      	movs	r2, #0
 80107dc:	68b9      	ldr	r1, [r7, #8]
 80107de:	f7f8 fca3 	bl	8009128 <osMessageQueueGet>
 80107e2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d105      	bne.n	80107f6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80107ea:	f7f8 f85b 	bl	80088a4 <osKernelGetTickCount>
 80107ee:	4602      	mov	r2, r0
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	e00f      	b.n	8010816 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80107f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107fa:	e00c      	b.n	8010816 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6818      	ldr	r0, [r3, #0]
 8010800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010804:	2200      	movs	r2, #0
 8010806:	68b9      	ldr	r1, [r7, #8]
 8010808:	f7f8 fc8e 	bl	8009128 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801080c:	f7f8 f84a 	bl	80088a4 <osKernelGetTickCount>
 8010810:	4602      	mov	r2, r0
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8010816:	4618      	mov	r0, r3
 8010818:	3718      	adds	r7, #24
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801081e:	b480      	push	{r7}
 8010820:	b083      	sub	sp, #12
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d101      	bne.n	8010832 <sys_mbox_valid+0x14>
    return 0;
 801082e:	2300      	movs	r3, #0
 8010830:	e000      	b.n	8010834 <sys_mbox_valid+0x16>
  else
    return 1;
 8010832:	2301      	movs	r3, #1
}
 8010834:	4618      	mov	r0, r3
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8010844:	2000      	movs	r0, #0
 8010846:	f7f8 f929 	bl	8008a9c <osMutexNew>
 801084a:	4602      	mov	r2, r0
 801084c:	4b01      	ldr	r3, [pc, #4]	; (8010854 <sys_init+0x14>)
 801084e:	601a      	str	r2, [r3, #0]
#endif
}
 8010850:	bf00      	nop
 8010852:	bd80      	pop	{r7, pc}
 8010854:	24008348 	.word	0x24008348

08010858 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8010860:	2000      	movs	r0, #0
 8010862:	f7f8 f91b 	bl	8008a9c <osMutexNew>
 8010866:	4602      	mov	r2, r0
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010878:	e000      	b.n	801087c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010894:	4618      	mov	r0, r3
 8010896:	f7f8 f99b 	bl	8008bd0 <osMutexAcquire>
#endif
}
 801089a:	bf00      	nop
 801089c:	3708      	adds	r7, #8
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b082      	sub	sp, #8
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7f8 f9ec 	bl	8008c8c <osMutexRelease>
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b08e      	sub	sp, #56	; 0x38
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]
 80108c8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80108ca:	f107 0314 	add.w	r3, r7, #20
 80108ce:	2224      	movs	r2, #36	; 0x24
 80108d0:	2100      	movs	r1, #0
 80108d2:	4618      	mov	r0, r3
 80108d4:	f006 f9ca 	bl	8016c6c <memset>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	617b      	str	r3, [r7, #20]
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	62bb      	str	r3, [r7, #40]	; 0x28
 80108e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80108e4:	f107 0314 	add.w	r3, r7, #20
 80108e8:	461a      	mov	r2, r3
 80108ea:	6879      	ldr	r1, [r7, #4]
 80108ec:	68b8      	ldr	r0, [r7, #8]
 80108ee:	f7f8 f801 	bl	80088f4 <osThreadNew>
 80108f2:	4603      	mov	r3, r0
#endif
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3738      	adds	r7, #56	; 0x38
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8010900:	4b04      	ldr	r3, [pc, #16]	; (8010914 <sys_arch_protect+0x18>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010908:	4618      	mov	r0, r3
 801090a:	f7f8 f961 	bl	8008bd0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801090e:	2301      	movs	r3, #1
}
 8010910:	4618      	mov	r0, r3
 8010912:	bd80      	pop	{r7, pc}
 8010914:	24008348 	.word	0x24008348

08010918 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010920:	4b04      	ldr	r3, [pc, #16]	; (8010934 <sys_arch_unprotect+0x1c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4618      	mov	r0, r3
 8010926:	f7f8 f9b1 	bl	8008c8c <osMutexRelease>
}
 801092a:	bf00      	nop
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	24008348 	.word	0x24008348

08010938 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801093c:	f006 f9b6 	bl	8016cac <rand>
 8010940:	4603      	mov	r3, r0
 8010942:	b29b      	uxth	r3, r3
 8010944:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010948:	b29b      	uxth	r3, r3
 801094a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801094e:	b29a      	uxth	r2, r3
 8010950:	4b01      	ldr	r3, [pc, #4]	; (8010958 <tcp_init+0x20>)
 8010952:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010954:	bf00      	nop
 8010956:	bd80      	pop	{r7, pc}
 8010958:	24000028 	.word	0x24000028

0801095c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	7d1b      	ldrb	r3, [r3, #20]
 8010968:	2b01      	cmp	r3, #1
 801096a:	d105      	bne.n	8010978 <tcp_free+0x1c>
 801096c:	4b06      	ldr	r3, [pc, #24]	; (8010988 <tcp_free+0x2c>)
 801096e:	22d4      	movs	r2, #212	; 0xd4
 8010970:	4906      	ldr	r1, [pc, #24]	; (801098c <tcp_free+0x30>)
 8010972:	4807      	ldr	r0, [pc, #28]	; (8010990 <tcp_free+0x34>)
 8010974:	f006 f982 	bl	8016c7c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010978:	6879      	ldr	r1, [r7, #4]
 801097a:	2001      	movs	r0, #1
 801097c:	f7fe fda0 	bl	800f4c0 <memp_free>
}
 8010980:	bf00      	nop
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	08018ea0 	.word	0x08018ea0
 801098c:	08018f04 	.word	0x08018f04
 8010990:	08018f18 	.word	0x08018f18

08010994 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	7d1b      	ldrb	r3, [r3, #20]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d105      	bne.n	80109b0 <tcp_free_listen+0x1c>
 80109a4:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <tcp_free_listen+0x2c>)
 80109a6:	22df      	movs	r2, #223	; 0xdf
 80109a8:	4906      	ldr	r1, [pc, #24]	; (80109c4 <tcp_free_listen+0x30>)
 80109aa:	4807      	ldr	r0, [pc, #28]	; (80109c8 <tcp_free_listen+0x34>)
 80109ac:	f006 f966 	bl	8016c7c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80109b0:	6879      	ldr	r1, [r7, #4]
 80109b2:	2002      	movs	r0, #2
 80109b4:	f7fe fd84 	bl	800f4c0 <memp_free>
}
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	08018ea0 	.word	0x08018ea0
 80109c4:	08018f40 	.word	0x08018f40
 80109c8:	08018f18 	.word	0x08018f18

080109cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80109d0:	f000 fe98 	bl	8011704 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80109d4:	4b07      	ldr	r3, [pc, #28]	; (80109f4 <tcp_tmr+0x28>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	3301      	adds	r3, #1
 80109da:	b2da      	uxtb	r2, r3
 80109dc:	4b05      	ldr	r3, [pc, #20]	; (80109f4 <tcp_tmr+0x28>)
 80109de:	701a      	strb	r2, [r3, #0]
 80109e0:	4b04      	ldr	r3, [pc, #16]	; (80109f4 <tcp_tmr+0x28>)
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	f003 0301 	and.w	r3, r3, #1
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80109ec:	f000 fb4c 	bl	8011088 <tcp_slowtmr>
  }
}
 80109f0:	bf00      	nop
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	24004b09 	.word	0x24004b09

080109f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d105      	bne.n	8010a14 <tcp_remove_listener+0x1c>
 8010a08:	4b0d      	ldr	r3, [pc, #52]	; (8010a40 <tcp_remove_listener+0x48>)
 8010a0a:	22ff      	movs	r2, #255	; 0xff
 8010a0c:	490d      	ldr	r1, [pc, #52]	; (8010a44 <tcp_remove_listener+0x4c>)
 8010a0e:	480e      	ldr	r0, [pc, #56]	; (8010a48 <tcp_remove_listener+0x50>)
 8010a10:	f006 f934 	bl	8016c7c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	60fb      	str	r3, [r7, #12]
 8010a18:	e00a      	b.n	8010a30 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a1e:	683a      	ldr	r2, [r7, #0]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d102      	bne.n	8010a2a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2200      	movs	r2, #0
 8010a28:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	60fb      	str	r3, [r7, #12]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1f1      	bne.n	8010a1a <tcp_remove_listener+0x22>
    }
  }
}
 8010a36:	bf00      	nop
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	08018ea0 	.word	0x08018ea0
 8010a44:	08018f5c 	.word	0x08018f5c
 8010a48:	08018f18 	.word	0x08018f18

08010a4c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d106      	bne.n	8010a68 <tcp_listen_closed+0x1c>
 8010a5a:	4b14      	ldr	r3, [pc, #80]	; (8010aac <tcp_listen_closed+0x60>)
 8010a5c:	f240 1211 	movw	r2, #273	; 0x111
 8010a60:	4913      	ldr	r1, [pc, #76]	; (8010ab0 <tcp_listen_closed+0x64>)
 8010a62:	4814      	ldr	r0, [pc, #80]	; (8010ab4 <tcp_listen_closed+0x68>)
 8010a64:	f006 f90a 	bl	8016c7c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	7d1b      	ldrb	r3, [r3, #20]
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	d006      	beq.n	8010a7e <tcp_listen_closed+0x32>
 8010a70:	4b0e      	ldr	r3, [pc, #56]	; (8010aac <tcp_listen_closed+0x60>)
 8010a72:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010a76:	4910      	ldr	r1, [pc, #64]	; (8010ab8 <tcp_listen_closed+0x6c>)
 8010a78:	480e      	ldr	r0, [pc, #56]	; (8010ab4 <tcp_listen_closed+0x68>)
 8010a7a:	f006 f8ff 	bl	8016c7c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010a7e:	2301      	movs	r3, #1
 8010a80:	60fb      	str	r3, [r7, #12]
 8010a82:	e00b      	b.n	8010a9c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010a84:	4a0d      	ldr	r2, [pc, #52]	; (8010abc <tcp_listen_closed+0x70>)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	6879      	ldr	r1, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7ff ffb1 	bl	80109f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	60fb      	str	r3, [r7, #12]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2b03      	cmp	r3, #3
 8010aa0:	d9f0      	bls.n	8010a84 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010aa2:	bf00      	nop
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	08018ea0 	.word	0x08018ea0
 8010ab0:	08018f84 	.word	0x08018f84
 8010ab4:	08018f18 	.word	0x08018f18
 8010ab8:	08018f90 	.word	0x08018f90
 8010abc:	0801aa58 	.word	0x0801aa58

08010ac0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010ac0:	b5b0      	push	{r4, r5, r7, lr}
 8010ac2:	b088      	sub	sp, #32
 8010ac4:	af04      	add	r7, sp, #16
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	460b      	mov	r3, r1
 8010aca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <tcp_close_shutdown+0x20>
 8010ad2:	4b61      	ldr	r3, [pc, #388]	; (8010c58 <tcp_close_shutdown+0x198>)
 8010ad4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010ad8:	4960      	ldr	r1, [pc, #384]	; (8010c5c <tcp_close_shutdown+0x19c>)
 8010ada:	4861      	ldr	r0, [pc, #388]	; (8010c60 <tcp_close_shutdown+0x1a0>)
 8010adc:	f006 f8ce 	bl	8016c7c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010ae0:	78fb      	ldrb	r3, [r7, #3]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d066      	beq.n	8010bb4 <tcp_close_shutdown+0xf4>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	7d1b      	ldrb	r3, [r3, #20]
 8010aea:	2b04      	cmp	r3, #4
 8010aec:	d003      	beq.n	8010af6 <tcp_close_shutdown+0x36>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	7d1b      	ldrb	r3, [r3, #20]
 8010af2:	2b07      	cmp	r3, #7
 8010af4:	d15e      	bne.n	8010bb4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d104      	bne.n	8010b08 <tcp_close_shutdown+0x48>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010b06:	d055      	beq.n	8010bb4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	8b5b      	ldrh	r3, [r3, #26]
 8010b0c:	f003 0310 	and.w	r3, r3, #16
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d106      	bne.n	8010b22 <tcp_close_shutdown+0x62>
 8010b14:	4b50      	ldr	r3, [pc, #320]	; (8010c58 <tcp_close_shutdown+0x198>)
 8010b16:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010b1a:	4952      	ldr	r1, [pc, #328]	; (8010c64 <tcp_close_shutdown+0x1a4>)
 8010b1c:	4850      	ldr	r0, [pc, #320]	; (8010c60 <tcp_close_shutdown+0x1a0>)
 8010b1e:	f006 f8ad 	bl	8016c7c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010b2a:	687d      	ldr	r5, [r7, #4]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	3304      	adds	r3, #4
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	8ad2      	ldrh	r2, [r2, #22]
 8010b34:	6879      	ldr	r1, [r7, #4]
 8010b36:	8b09      	ldrh	r1, [r1, #24]
 8010b38:	9102      	str	r1, [sp, #8]
 8010b3a:	9201      	str	r2, [sp, #4]
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	462b      	mov	r3, r5
 8010b40:	4622      	mov	r2, r4
 8010b42:	4601      	mov	r1, r0
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f004 fe91 	bl	801586c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f001 f8ba 	bl	8011cc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010b50:	4b45      	ldr	r3, [pc, #276]	; (8010c68 <tcp_close_shutdown+0x1a8>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d105      	bne.n	8010b66 <tcp_close_shutdown+0xa6>
 8010b5a:	4b43      	ldr	r3, [pc, #268]	; (8010c68 <tcp_close_shutdown+0x1a8>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	4a41      	ldr	r2, [pc, #260]	; (8010c68 <tcp_close_shutdown+0x1a8>)
 8010b62:	6013      	str	r3, [r2, #0]
 8010b64:	e013      	b.n	8010b8e <tcp_close_shutdown+0xce>
 8010b66:	4b40      	ldr	r3, [pc, #256]	; (8010c68 <tcp_close_shutdown+0x1a8>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	e00c      	b.n	8010b88 <tcp_close_shutdown+0xc8>
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d104      	bne.n	8010b82 <tcp_close_shutdown+0xc2>
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	68da      	ldr	r2, [r3, #12]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	60da      	str	r2, [r3, #12]
 8010b80:	e005      	b.n	8010b8e <tcp_close_shutdown+0xce>
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	60fb      	str	r3, [r7, #12]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1ef      	bne.n	8010b6e <tcp_close_shutdown+0xae>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	60da      	str	r2, [r3, #12]
 8010b94:	4b35      	ldr	r3, [pc, #212]	; (8010c6c <tcp_close_shutdown+0x1ac>)
 8010b96:	2201      	movs	r2, #1
 8010b98:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010b9a:	4b35      	ldr	r3, [pc, #212]	; (8010c70 <tcp_close_shutdown+0x1b0>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d102      	bne.n	8010baa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010ba4:	f003 fd4c 	bl	8014640 <tcp_trigger_input_pcb_close>
 8010ba8:	e002      	b.n	8010bb0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f7ff fed6 	bl	801095c <tcp_free>
      }
      return ERR_OK;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	e04d      	b.n	8010c50 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	7d1b      	ldrb	r3, [r3, #20]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d02d      	beq.n	8010c18 <tcp_close_shutdown+0x158>
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d036      	beq.n	8010c2e <tcp_close_shutdown+0x16e>
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d13f      	bne.n	8010c44 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	8adb      	ldrh	r3, [r3, #22]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d021      	beq.n	8010c10 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010bcc:	4b29      	ldr	r3, [pc, #164]	; (8010c74 <tcp_close_shutdown+0x1b4>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d105      	bne.n	8010be2 <tcp_close_shutdown+0x122>
 8010bd6:	4b27      	ldr	r3, [pc, #156]	; (8010c74 <tcp_close_shutdown+0x1b4>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	4a25      	ldr	r2, [pc, #148]	; (8010c74 <tcp_close_shutdown+0x1b4>)
 8010bde:	6013      	str	r3, [r2, #0]
 8010be0:	e013      	b.n	8010c0a <tcp_close_shutdown+0x14a>
 8010be2:	4b24      	ldr	r3, [pc, #144]	; (8010c74 <tcp_close_shutdown+0x1b4>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	60bb      	str	r3, [r7, #8]
 8010be8:	e00c      	b.n	8010c04 <tcp_close_shutdown+0x144>
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d104      	bne.n	8010bfe <tcp_close_shutdown+0x13e>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	68da      	ldr	r2, [r3, #12]
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	60da      	str	r2, [r3, #12]
 8010bfc:	e005      	b.n	8010c0a <tcp_close_shutdown+0x14a>
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	60bb      	str	r3, [r7, #8]
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1ef      	bne.n	8010bea <tcp_close_shutdown+0x12a>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7ff fea3 	bl	801095c <tcp_free>
      break;
 8010c16:	e01a      	b.n	8010c4e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff ff17 	bl	8010a4c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010c1e:	6879      	ldr	r1, [r7, #4]
 8010c20:	4815      	ldr	r0, [pc, #84]	; (8010c78 <tcp_close_shutdown+0x1b8>)
 8010c22:	f001 f89f 	bl	8011d64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff feb4 	bl	8010994 <tcp_free_listen>
      break;
 8010c2c:	e00f      	b.n	8010c4e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010c2e:	6879      	ldr	r1, [r7, #4]
 8010c30:	480d      	ldr	r0, [pc, #52]	; (8010c68 <tcp_close_shutdown+0x1a8>)
 8010c32:	f001 f897 	bl	8011d64 <tcp_pcb_remove>
 8010c36:	4b0d      	ldr	r3, [pc, #52]	; (8010c6c <tcp_close_shutdown+0x1ac>)
 8010c38:	2201      	movs	r2, #1
 8010c3a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7ff fe8d 	bl	801095c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010c42:	e004      	b.n	8010c4e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 f819 	bl	8010c7c <tcp_close_shutdown_fin>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	e000      	b.n	8010c50 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bdb0      	pop	{r4, r5, r7, pc}
 8010c58:	08018ea0 	.word	0x08018ea0
 8010c5c:	08018fa8 	.word	0x08018fa8
 8010c60:	08018f18 	.word	0x08018f18
 8010c64:	08018fc8 	.word	0x08018fc8
 8010c68:	24008350 	.word	0x24008350
 8010c6c:	2400834c 	.word	0x2400834c
 8010c70:	24008364 	.word	0x24008364
 8010c74:	2400835c 	.word	0x2400835c
 8010c78:	24008358 	.word	0x24008358

08010c7c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <tcp_close_shutdown_fin+0x1c>
 8010c8a:	4b2c      	ldr	r3, [pc, #176]	; (8010d3c <tcp_close_shutdown_fin+0xc0>)
 8010c8c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010c90:	492b      	ldr	r1, [pc, #172]	; (8010d40 <tcp_close_shutdown_fin+0xc4>)
 8010c92:	482c      	ldr	r0, [pc, #176]	; (8010d44 <tcp_close_shutdown_fin+0xc8>)
 8010c94:	f005 fff2 	bl	8016c7c <iprintf>

  switch (pcb->state) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7d1b      	ldrb	r3, [r3, #20]
 8010c9c:	2b04      	cmp	r3, #4
 8010c9e:	d010      	beq.n	8010cc2 <tcp_close_shutdown_fin+0x46>
 8010ca0:	2b07      	cmp	r3, #7
 8010ca2:	d01b      	beq.n	8010cdc <tcp_close_shutdown_fin+0x60>
 8010ca4:	2b03      	cmp	r3, #3
 8010ca6:	d126      	bne.n	8010cf6 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f003 fedb 	bl	8014a64 <tcp_send_fin>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d11f      	bne.n	8010cfa <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2205      	movs	r2, #5
 8010cbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010cc0:	e01b      	b.n	8010cfa <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f003 fece 	bl	8014a64 <tcp_send_fin>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d114      	bne.n	8010cfe <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2205      	movs	r2, #5
 8010cd8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010cda:	e010      	b.n	8010cfe <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f003 fec1 	bl	8014a64 <tcp_send_fin>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d109      	bne.n	8010d02 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2209      	movs	r2, #9
 8010cf2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010cf4:	e005      	b.n	8010d02 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	e01c      	b.n	8010d34 <tcp_close_shutdown_fin+0xb8>
      break;
 8010cfa:	bf00      	nop
 8010cfc:	e002      	b.n	8010d04 <tcp_close_shutdown_fin+0x88>
      break;
 8010cfe:	bf00      	nop
 8010d00:	e000      	b.n	8010d04 <tcp_close_shutdown_fin+0x88>
      break;
 8010d02:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d103      	bne.n	8010d14 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f003 ffe7 	bl	8014ce0 <tcp_output>
 8010d12:	e00d      	b.n	8010d30 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d1c:	d108      	bne.n	8010d30 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	8b5b      	ldrh	r3, [r3, #26]
 8010d22:	f043 0308 	orr.w	r3, r3, #8
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	e001      	b.n	8010d34 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8010d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3710      	adds	r7, #16
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	08018ea0 	.word	0x08018ea0
 8010d40:	08018f84 	.word	0x08018f84
 8010d44:	08018f18 	.word	0x08018f18

08010d48 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d109      	bne.n	8010d6a <tcp_close+0x22>
 8010d56:	4b0f      	ldr	r3, [pc, #60]	; (8010d94 <tcp_close+0x4c>)
 8010d58:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010d5c:	490e      	ldr	r1, [pc, #56]	; (8010d98 <tcp_close+0x50>)
 8010d5e:	480f      	ldr	r0, [pc, #60]	; (8010d9c <tcp_close+0x54>)
 8010d60:	f005 ff8c 	bl	8016c7c <iprintf>
 8010d64:	f06f 030f 	mvn.w	r3, #15
 8010d68:	e00f      	b.n	8010d8a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	7d1b      	ldrb	r3, [r3, #20]
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d006      	beq.n	8010d80 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	8b5b      	ldrh	r3, [r3, #26]
 8010d76:	f043 0310 	orr.w	r3, r3, #16
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010d80:	2101      	movs	r1, #1
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f7ff fe9c 	bl	8010ac0 <tcp_close_shutdown>
 8010d88:	4603      	mov	r3, r0
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	08018ea0 	.word	0x08018ea0
 8010d98:	08018fe4 	.word	0x08018fe4
 8010d9c:	08018f18 	.word	0x08018f18

08010da0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b08e      	sub	sp, #56	; 0x38
 8010da4:	af04      	add	r7, sp, #16
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d107      	bne.n	8010dc0 <tcp_abandon+0x20>
 8010db0:	4b52      	ldr	r3, [pc, #328]	; (8010efc <tcp_abandon+0x15c>)
 8010db2:	f240 223d 	movw	r2, #573	; 0x23d
 8010db6:	4952      	ldr	r1, [pc, #328]	; (8010f00 <tcp_abandon+0x160>)
 8010db8:	4852      	ldr	r0, [pc, #328]	; (8010f04 <tcp_abandon+0x164>)
 8010dba:	f005 ff5f 	bl	8016c7c <iprintf>
 8010dbe:	e099      	b.n	8010ef4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	7d1b      	ldrb	r3, [r3, #20]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d106      	bne.n	8010dd6 <tcp_abandon+0x36>
 8010dc8:	4b4c      	ldr	r3, [pc, #304]	; (8010efc <tcp_abandon+0x15c>)
 8010dca:	f240 2241 	movw	r2, #577	; 0x241
 8010dce:	494e      	ldr	r1, [pc, #312]	; (8010f08 <tcp_abandon+0x168>)
 8010dd0:	484c      	ldr	r0, [pc, #304]	; (8010f04 <tcp_abandon+0x164>)
 8010dd2:	f005 ff53 	bl	8016c7c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	7d1b      	ldrb	r3, [r3, #20]
 8010dda:	2b0a      	cmp	r3, #10
 8010ddc:	d107      	bne.n	8010dee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	484a      	ldr	r0, [pc, #296]	; (8010f0c <tcp_abandon+0x16c>)
 8010de2:	f000 ffbf 	bl	8011d64 <tcp_pcb_remove>
    tcp_free(pcb);
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f7ff fdb8 	bl	801095c <tcp_free>
 8010dec:	e082      	b.n	8010ef4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dfa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e00:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e08:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	691b      	ldr	r3, [r3, #16]
 8010e0e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	7d1b      	ldrb	r3, [r3, #20]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d126      	bne.n	8010e66 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	8adb      	ldrh	r3, [r3, #22]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d02e      	beq.n	8010e7e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010e20:	4b3b      	ldr	r3, [pc, #236]	; (8010f10 <tcp_abandon+0x170>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	687a      	ldr	r2, [r7, #4]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d105      	bne.n	8010e36 <tcp_abandon+0x96>
 8010e2a:	4b39      	ldr	r3, [pc, #228]	; (8010f10 <tcp_abandon+0x170>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	4a37      	ldr	r2, [pc, #220]	; (8010f10 <tcp_abandon+0x170>)
 8010e32:	6013      	str	r3, [r2, #0]
 8010e34:	e013      	b.n	8010e5e <tcp_abandon+0xbe>
 8010e36:	4b36      	ldr	r3, [pc, #216]	; (8010f10 <tcp_abandon+0x170>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	61fb      	str	r3, [r7, #28]
 8010e3c:	e00c      	b.n	8010e58 <tcp_abandon+0xb8>
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	68db      	ldr	r3, [r3, #12]
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d104      	bne.n	8010e52 <tcp_abandon+0xb2>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	68da      	ldr	r2, [r3, #12]
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	60da      	str	r2, [r3, #12]
 8010e50:	e005      	b.n	8010e5e <tcp_abandon+0xbe>
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	61fb      	str	r3, [r7, #28]
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d1ef      	bne.n	8010e3e <tcp_abandon+0x9e>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	60da      	str	r2, [r3, #12]
 8010e64:	e00b      	b.n	8010e7e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	8adb      	ldrh	r3, [r3, #22]
 8010e6e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010e70:	6879      	ldr	r1, [r7, #4]
 8010e72:	4828      	ldr	r0, [pc, #160]	; (8010f14 <tcp_abandon+0x174>)
 8010e74:	f000 ff76 	bl	8011d64 <tcp_pcb_remove>
 8010e78:	4b27      	ldr	r3, [pc, #156]	; (8010f18 <tcp_abandon+0x178>)
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d004      	beq.n	8010e90 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f000 fd1a 	bl	80118c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d004      	beq.n	8010ea2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f000 fd11 	bl	80118c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d004      	beq.n	8010eb4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f000 fd08 	bl	80118c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00e      	beq.n	8010ed8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010eba:	6879      	ldr	r1, [r7, #4]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3304      	adds	r3, #4
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	8b12      	ldrh	r2, [r2, #24]
 8010ec4:	9202      	str	r2, [sp, #8]
 8010ec6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ec8:	9201      	str	r2, [sp, #4]
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	69b9      	ldr	r1, [r7, #24]
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f004 fcca 	bl	801586c <tcp_rst>
    }
    last_state = pcb->state;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	7d1b      	ldrb	r3, [r3, #20]
 8010edc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7ff fd3c 	bl	801095c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d004      	beq.n	8010ef4 <tcp_abandon+0x154>
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	f06f 010c 	mvn.w	r1, #12
 8010ef0:	68f8      	ldr	r0, [r7, #12]
 8010ef2:	4798      	blx	r3
  }
}
 8010ef4:	3728      	adds	r7, #40	; 0x28
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	08018ea0 	.word	0x08018ea0
 8010f00:	08019018 	.word	0x08019018
 8010f04:	08018f18 	.word	0x08018f18
 8010f08:	08019034 	.word	0x08019034
 8010f0c:	24008360 	.word	0x24008360
 8010f10:	2400835c 	.word	0x2400835c
 8010f14:	24008350 	.word	0x24008350
 8010f18:	2400834c 	.word	0x2400834c

08010f1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010f24:	2101      	movs	r1, #1
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f7ff ff3a 	bl	8010da0 <tcp_abandon>
}
 8010f2c:	bf00      	nop
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d106      	bne.n	8010f50 <tcp_update_rcv_ann_wnd+0x1c>
 8010f42:	4b25      	ldr	r3, [pc, #148]	; (8010fd8 <tcp_update_rcv_ann_wnd+0xa4>)
 8010f44:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010f48:	4924      	ldr	r1, [pc, #144]	; (8010fdc <tcp_update_rcv_ann_wnd+0xa8>)
 8010f4a:	4825      	ldr	r0, [pc, #148]	; (8010fe0 <tcp_update_rcv_ann_wnd+0xac>)
 8010f4c:	f005 fe96 	bl	8016c7c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010f58:	4413      	add	r3, r2
 8010f5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010f64:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010f68:	bf28      	it	cs
 8010f6a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010f6e:	b292      	uxth	r2, r2
 8010f70:	4413      	add	r3, r2
 8010f72:	68fa      	ldr	r2, [r7, #12]
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	db08      	blt.n	8010f8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f86:	68fa      	ldr	r2, [r7, #12]
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	e020      	b.n	8010fce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f94:	1ad3      	subs	r3, r2, r3
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	dd03      	ble.n	8010fa2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010fa0:	e014      	b.n	8010fcc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fb4:	d306      	bcc.n	8010fc4 <tcp_update_rcv_ann_wnd+0x90>
 8010fb6:	4b08      	ldr	r3, [pc, #32]	; (8010fd8 <tcp_update_rcv_ann_wnd+0xa4>)
 8010fb8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010fbc:	4909      	ldr	r1, [pc, #36]	; (8010fe4 <tcp_update_rcv_ann_wnd+0xb0>)
 8010fbe:	4808      	ldr	r0, [pc, #32]	; (8010fe0 <tcp_update_rcv_ann_wnd+0xac>)
 8010fc0:	f005 fe5c 	bl	8016c7c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	b29a      	uxth	r2, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010fcc:	2300      	movs	r3, #0
  }
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3710      	adds	r7, #16
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	08018ea0 	.word	0x08018ea0
 8010fdc:	08019130 	.word	0x08019130
 8010fe0:	08018f18 	.word	0x08018f18
 8010fe4:	08019154 	.word	0x08019154

08010fe8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d107      	bne.n	801100a <tcp_recved+0x22>
 8010ffa:	4b1f      	ldr	r3, [pc, #124]	; (8011078 <tcp_recved+0x90>)
 8010ffc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011000:	491e      	ldr	r1, [pc, #120]	; (801107c <tcp_recved+0x94>)
 8011002:	481f      	ldr	r0, [pc, #124]	; (8011080 <tcp_recved+0x98>)
 8011004:	f005 fe3a 	bl	8016c7c <iprintf>
 8011008:	e032      	b.n	8011070 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	7d1b      	ldrb	r3, [r3, #20]
 801100e:	2b01      	cmp	r3, #1
 8011010:	d106      	bne.n	8011020 <tcp_recved+0x38>
 8011012:	4b19      	ldr	r3, [pc, #100]	; (8011078 <tcp_recved+0x90>)
 8011014:	f240 32d3 	movw	r2, #979	; 0x3d3
 8011018:	491a      	ldr	r1, [pc, #104]	; (8011084 <tcp_recved+0x9c>)
 801101a:	4819      	ldr	r0, [pc, #100]	; (8011080 <tcp_recved+0x98>)
 801101c:	f005 fe2e 	bl	8016c7c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011024:	887b      	ldrh	r3, [r7, #2]
 8011026:	4413      	add	r3, r2
 8011028:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801102a:	89fb      	ldrh	r3, [r7, #14]
 801102c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011030:	d804      	bhi.n	801103c <tcp_recved+0x54>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011036:	89fa      	ldrh	r2, [r7, #14]
 8011038:	429a      	cmp	r2, r3
 801103a:	d204      	bcs.n	8011046 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011042:	851a      	strh	r2, [r3, #40]	; 0x28
 8011044:	e002      	b.n	801104c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	89fa      	ldrh	r2, [r7, #14]
 801104a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7ff ff71 	bl	8010f34 <tcp_update_rcv_ann_wnd>
 8011052:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801105a:	d309      	bcc.n	8011070 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	8b5b      	ldrh	r3, [r3, #26]
 8011060:	f043 0302 	orr.w	r3, r3, #2
 8011064:	b29a      	uxth	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f003 fe38 	bl	8014ce0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	08018ea0 	.word	0x08018ea0
 801107c:	08019170 	.word	0x08019170
 8011080:	08018f18 	.word	0x08018f18
 8011084:	08019188 	.word	0x08019188

08011088 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011088:	b5b0      	push	{r4, r5, r7, lr}
 801108a:	b090      	sub	sp, #64	; 0x40
 801108c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801108e:	2300      	movs	r3, #0
 8011090:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011094:	4b94      	ldr	r3, [pc, #592]	; (80112e8 <tcp_slowtmr+0x260>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	3301      	adds	r3, #1
 801109a:	4a93      	ldr	r2, [pc, #588]	; (80112e8 <tcp_slowtmr+0x260>)
 801109c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801109e:	4b93      	ldr	r3, [pc, #588]	; (80112ec <tcp_slowtmr+0x264>)
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	3301      	adds	r3, #1
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	4b91      	ldr	r3, [pc, #580]	; (80112ec <tcp_slowtmr+0x264>)
 80110a8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80110aa:	2300      	movs	r3, #0
 80110ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80110ae:	4b90      	ldr	r3, [pc, #576]	; (80112f0 <tcp_slowtmr+0x268>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80110b4:	e29d      	b.n	80115f2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80110b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b8:	7d1b      	ldrb	r3, [r3, #20]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d106      	bne.n	80110cc <tcp_slowtmr+0x44>
 80110be:	4b8d      	ldr	r3, [pc, #564]	; (80112f4 <tcp_slowtmr+0x26c>)
 80110c0:	f240 42be 	movw	r2, #1214	; 0x4be
 80110c4:	498c      	ldr	r1, [pc, #560]	; (80112f8 <tcp_slowtmr+0x270>)
 80110c6:	488d      	ldr	r0, [pc, #564]	; (80112fc <tcp_slowtmr+0x274>)
 80110c8:	f005 fdd8 	bl	8016c7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80110cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ce:	7d1b      	ldrb	r3, [r3, #20]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d106      	bne.n	80110e2 <tcp_slowtmr+0x5a>
 80110d4:	4b87      	ldr	r3, [pc, #540]	; (80112f4 <tcp_slowtmr+0x26c>)
 80110d6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80110da:	4989      	ldr	r1, [pc, #548]	; (8011300 <tcp_slowtmr+0x278>)
 80110dc:	4887      	ldr	r0, [pc, #540]	; (80112fc <tcp_slowtmr+0x274>)
 80110de:	f005 fdcd 	bl	8016c7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80110e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e4:	7d1b      	ldrb	r3, [r3, #20]
 80110e6:	2b0a      	cmp	r3, #10
 80110e8:	d106      	bne.n	80110f8 <tcp_slowtmr+0x70>
 80110ea:	4b82      	ldr	r3, [pc, #520]	; (80112f4 <tcp_slowtmr+0x26c>)
 80110ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80110f0:	4984      	ldr	r1, [pc, #528]	; (8011304 <tcp_slowtmr+0x27c>)
 80110f2:	4882      	ldr	r0, [pc, #520]	; (80112fc <tcp_slowtmr+0x274>)
 80110f4:	f005 fdc2 	bl	8016c7c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80110f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fa:	7f9a      	ldrb	r2, [r3, #30]
 80110fc:	4b7b      	ldr	r3, [pc, #492]	; (80112ec <tcp_slowtmr+0x264>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	429a      	cmp	r2, r3
 8011102:	d105      	bne.n	8011110 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011106:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801110e:	e270      	b.n	80115f2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011110:	4b76      	ldr	r3, [pc, #472]	; (80112ec <tcp_slowtmr+0x264>)
 8011112:	781a      	ldrb	r2, [r3, #0]
 8011114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011116:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011118:	2300      	movs	r3, #0
 801111a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801111e:	2300      	movs	r3, #0
 8011120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011126:	7d1b      	ldrb	r3, [r3, #20]
 8011128:	2b02      	cmp	r3, #2
 801112a:	d10a      	bne.n	8011142 <tcp_slowtmr+0xba>
 801112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011132:	2b05      	cmp	r3, #5
 8011134:	d905      	bls.n	8011142 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801113a:	3301      	adds	r3, #1
 801113c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011140:	e11e      	b.n	8011380 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011148:	2b0b      	cmp	r3, #11
 801114a:	d905      	bls.n	8011158 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801114c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011150:	3301      	adds	r3, #1
 8011152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011156:	e113      	b.n	8011380 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801115e:	2b00      	cmp	r3, #0
 8011160:	d075      	beq.n	801124e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011166:	2b00      	cmp	r3, #0
 8011168:	d006      	beq.n	8011178 <tcp_slowtmr+0xf0>
 801116a:	4b62      	ldr	r3, [pc, #392]	; (80112f4 <tcp_slowtmr+0x26c>)
 801116c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011170:	4965      	ldr	r1, [pc, #404]	; (8011308 <tcp_slowtmr+0x280>)
 8011172:	4862      	ldr	r0, [pc, #392]	; (80112fc <tcp_slowtmr+0x274>)
 8011174:	f005 fd82 	bl	8016c7c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d106      	bne.n	801118e <tcp_slowtmr+0x106>
 8011180:	4b5c      	ldr	r3, [pc, #368]	; (80112f4 <tcp_slowtmr+0x26c>)
 8011182:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011186:	4961      	ldr	r1, [pc, #388]	; (801130c <tcp_slowtmr+0x284>)
 8011188:	485c      	ldr	r0, [pc, #368]	; (80112fc <tcp_slowtmr+0x274>)
 801118a:	f005 fd77 	bl	8016c7c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011190:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011194:	2b0b      	cmp	r3, #11
 8011196:	d905      	bls.n	80111a4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801119c:	3301      	adds	r3, #1
 801119e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111a2:	e0ed      	b.n	8011380 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80111a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80111aa:	3b01      	subs	r3, #1
 80111ac:	4a58      	ldr	r2, [pc, #352]	; (8011310 <tcp_slowtmr+0x288>)
 80111ae:	5cd3      	ldrb	r3, [r2, r3]
 80111b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80111b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80111b8:	7c7a      	ldrb	r2, [r7, #17]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d907      	bls.n	80111ce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80111be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80111c4:	3301      	adds	r3, #1
 80111c6:	b2da      	uxtb	r2, r3
 80111c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80111ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80111d4:	7c7a      	ldrb	r2, [r7, #17]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	f200 80d2 	bhi.w	8011380 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80111dc:	2301      	movs	r3, #1
 80111de:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d108      	bne.n	80111fc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80111ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111ec:	f004 fc32 	bl	8015a54 <tcp_zero_window_probe>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d014      	beq.n	8011220 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80111f6:	2300      	movs	r3, #0
 80111f8:	623b      	str	r3, [r7, #32]
 80111fa:	e011      	b.n	8011220 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80111fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011202:	4619      	mov	r1, r3
 8011204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011206:	f003 fae5 	bl	80147d4 <tcp_split_unsent_seg>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d107      	bne.n	8011220 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011212:	f003 fd65 	bl	8014ce0 <tcp_output>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d101      	bne.n	8011220 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801121c:	2300      	movs	r3, #0
 801121e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011220:	6a3b      	ldr	r3, [r7, #32]
 8011222:	2b00      	cmp	r3, #0
 8011224:	f000 80ac 	beq.w	8011380 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122a:	2200      	movs	r2, #0
 801122c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011236:	2b06      	cmp	r3, #6
 8011238:	f200 80a2 	bhi.w	8011380 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011242:	3301      	adds	r3, #1
 8011244:	b2da      	uxtb	r2, r3
 8011246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011248:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801124c:	e098      	b.n	8011380 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011250:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011254:	2b00      	cmp	r3, #0
 8011256:	db0f      	blt.n	8011278 <tcp_slowtmr+0x1f0>
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801125e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011262:	4293      	cmp	r3, r2
 8011264:	d008      	beq.n	8011278 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801126c:	b29b      	uxth	r3, r3
 801126e:	3301      	adds	r3, #1
 8011270:	b29b      	uxth	r3, r3
 8011272:	b21a      	sxth	r2, r3
 8011274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011276:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011280:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011284:	429a      	cmp	r2, r3
 8011286:	db7b      	blt.n	8011380 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801128a:	f004 f821 	bl	80152d0 <tcp_rexmit_rto_prepare>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d007      	beq.n	80112a4 <tcp_slowtmr+0x21c>
 8011294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011298:	2b00      	cmp	r3, #0
 801129a:	d171      	bne.n	8011380 <tcp_slowtmr+0x2f8>
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d06d      	beq.n	8011380 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	7d1b      	ldrb	r3, [r3, #20]
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d03a      	beq.n	8011322 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112b2:	2b0c      	cmp	r3, #12
 80112b4:	bf28      	it	cs
 80112b6:	230c      	movcs	r3, #12
 80112b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80112ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112c0:	10db      	asrs	r3, r3, #3
 80112c2:	b21b      	sxth	r3, r3
 80112c4:	461a      	mov	r2, r3
 80112c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80112cc:	4413      	add	r3, r2
 80112ce:	7efa      	ldrb	r2, [r7, #27]
 80112d0:	4910      	ldr	r1, [pc, #64]	; (8011314 <tcp_slowtmr+0x28c>)
 80112d2:	5c8a      	ldrb	r2, [r1, r2]
 80112d4:	4093      	lsls	r3, r2
 80112d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80112de:	4293      	cmp	r3, r2
 80112e0:	dc1a      	bgt.n	8011318 <tcp_slowtmr+0x290>
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	b21a      	sxth	r2, r3
 80112e6:	e019      	b.n	801131c <tcp_slowtmr+0x294>
 80112e8:	24008354 	.word	0x24008354
 80112ec:	24004b0a 	.word	0x24004b0a
 80112f0:	24008350 	.word	0x24008350
 80112f4:	08018ea0 	.word	0x08018ea0
 80112f8:	08019218 	.word	0x08019218
 80112fc:	08018f18 	.word	0x08018f18
 8011300:	08019244 	.word	0x08019244
 8011304:	08019270 	.word	0x08019270
 8011308:	080192a0 	.word	0x080192a0
 801130c:	080192d4 	.word	0x080192d4
 8011310:	0801aa50 	.word	0x0801aa50
 8011314:	0801aa40 	.word	0x0801aa40
 8011318:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011324:	2200      	movs	r2, #0
 8011326:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011330:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011334:	4293      	cmp	r3, r2
 8011336:	bf28      	it	cs
 8011338:	4613      	movcs	r3, r2
 801133a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801133c:	8a7b      	ldrh	r3, [r7, #18]
 801133e:	085b      	lsrs	r3, r3, #1
 8011340:	b29a      	uxth	r2, r3
 8011342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011344:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011352:	005b      	lsls	r3, r3, #1
 8011354:	b29b      	uxth	r3, r3
 8011356:	429a      	cmp	r2, r3
 8011358:	d206      	bcs.n	8011368 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801135e:	005b      	lsls	r3, r3, #1
 8011360:	b29a      	uxth	r2, r3
 8011362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011364:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011374:	2200      	movs	r2, #0
 8011376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801137a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801137c:	f004 f818 	bl	80153b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011382:	7d1b      	ldrb	r3, [r3, #20]
 8011384:	2b06      	cmp	r3, #6
 8011386:	d111      	bne.n	80113ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138a:	8b5b      	ldrh	r3, [r3, #26]
 801138c:	f003 0310 	and.w	r3, r3, #16
 8011390:	2b00      	cmp	r3, #0
 8011392:	d00b      	beq.n	80113ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011394:	4b9c      	ldr	r3, [pc, #624]	; (8011608 <tcp_slowtmr+0x580>)
 8011396:	681a      	ldr	r2, [r3, #0]
 8011398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139a:	6a1b      	ldr	r3, [r3, #32]
 801139c:	1ad3      	subs	r3, r2, r3
 801139e:	2b28      	cmp	r3, #40	; 0x28
 80113a0:	d904      	bls.n	80113ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80113a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113a6:	3301      	adds	r3, #1
 80113a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80113ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ae:	7a5b      	ldrb	r3, [r3, #9]
 80113b0:	f003 0308 	and.w	r3, r3, #8
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d04a      	beq.n	801144e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80113b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80113bc:	2b04      	cmp	r3, #4
 80113be:	d003      	beq.n	80113c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80113c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80113c4:	2b07      	cmp	r3, #7
 80113c6:	d142      	bne.n	801144e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113c8:	4b8f      	ldr	r3, [pc, #572]	; (8011608 <tcp_slowtmr+0x580>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ce:	6a1b      	ldr	r3, [r3, #32]
 80113d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80113d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80113d8:	4b8c      	ldr	r3, [pc, #560]	; (801160c <tcp_slowtmr+0x584>)
 80113da:	440b      	add	r3, r1
 80113dc:	498c      	ldr	r1, [pc, #560]	; (8011610 <tcp_slowtmr+0x588>)
 80113de:	fba1 1303 	umull	r1, r3, r1, r3
 80113e2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d90a      	bls.n	80113fe <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80113e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113ec:	3301      	adds	r3, #1
 80113ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80113f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113f6:	3301      	adds	r3, #1
 80113f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80113fc:	e027      	b.n	801144e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113fe:	4b82      	ldr	r3, [pc, #520]	; (8011608 <tcp_slowtmr+0x580>)
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	6a1b      	ldr	r3, [r3, #32]
 8011406:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011410:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011414:	4618      	mov	r0, r3
 8011416:	4b7f      	ldr	r3, [pc, #508]	; (8011614 <tcp_slowtmr+0x58c>)
 8011418:	fb03 f300 	mul.w	r3, r3, r0
 801141c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801141e:	497c      	ldr	r1, [pc, #496]	; (8011610 <tcp_slowtmr+0x588>)
 8011420:	fba1 1303 	umull	r1, r3, r1, r3
 8011424:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011426:	429a      	cmp	r2, r3
 8011428:	d911      	bls.n	801144e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801142a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801142c:	f004 fad2 	bl	80159d4 <tcp_keepalive>
 8011430:	4603      	mov	r3, r0
 8011432:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011436:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801143a:	2b00      	cmp	r3, #0
 801143c:	d107      	bne.n	801144e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011440:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011444:	3301      	adds	r3, #1
 8011446:	b2da      	uxtb	r2, r3
 8011448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011452:	2b00      	cmp	r3, #0
 8011454:	d011      	beq.n	801147a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011456:	4b6c      	ldr	r3, [pc, #432]	; (8011608 <tcp_slowtmr+0x580>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145c:	6a1b      	ldr	r3, [r3, #32]
 801145e:	1ad2      	subs	r2, r2, r3
 8011460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011462:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011466:	4619      	mov	r1, r3
 8011468:	460b      	mov	r3, r1
 801146a:	005b      	lsls	r3, r3, #1
 801146c:	440b      	add	r3, r1
 801146e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011470:	429a      	cmp	r2, r3
 8011472:	d302      	bcc.n	801147a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011476:	f000 fdd9 	bl	801202c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147c:	7d1b      	ldrb	r3, [r3, #20]
 801147e:	2b03      	cmp	r3, #3
 8011480:	d10b      	bne.n	801149a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011482:	4b61      	ldr	r3, [pc, #388]	; (8011608 <tcp_slowtmr+0x580>)
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011488:	6a1b      	ldr	r3, [r3, #32]
 801148a:	1ad3      	subs	r3, r2, r3
 801148c:	2b28      	cmp	r3, #40	; 0x28
 801148e:	d904      	bls.n	801149a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011494:	3301      	adds	r3, #1
 8011496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149c:	7d1b      	ldrb	r3, [r3, #20]
 801149e:	2b09      	cmp	r3, #9
 80114a0:	d10b      	bne.n	80114ba <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80114a2:	4b59      	ldr	r3, [pc, #356]	; (8011608 <tcp_slowtmr+0x580>)
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a8:	6a1b      	ldr	r3, [r3, #32]
 80114aa:	1ad3      	subs	r3, r2, r3
 80114ac:	2bf0      	cmp	r3, #240	; 0xf0
 80114ae:	d904      	bls.n	80114ba <tcp_slowtmr+0x432>
        ++pcb_remove;
 80114b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114b4:	3301      	adds	r3, #1
 80114b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80114ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d060      	beq.n	8011584 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80114c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114c8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80114ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114cc:	f000 fbfa 	bl	8011cc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d010      	beq.n	80114f8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80114d6:	4b50      	ldr	r3, [pc, #320]	; (8011618 <tcp_slowtmr+0x590>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114dc:	429a      	cmp	r2, r3
 80114de:	d106      	bne.n	80114ee <tcp_slowtmr+0x466>
 80114e0:	4b4e      	ldr	r3, [pc, #312]	; (801161c <tcp_slowtmr+0x594>)
 80114e2:	f240 526d 	movw	r2, #1389	; 0x56d
 80114e6:	494e      	ldr	r1, [pc, #312]	; (8011620 <tcp_slowtmr+0x598>)
 80114e8:	484e      	ldr	r0, [pc, #312]	; (8011624 <tcp_slowtmr+0x59c>)
 80114ea:	f005 fbc7 	bl	8016c7c <iprintf>
        prev->next = pcb->next;
 80114ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f0:	68da      	ldr	r2, [r3, #12]
 80114f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f4:	60da      	str	r2, [r3, #12]
 80114f6:	e00f      	b.n	8011518 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80114f8:	4b47      	ldr	r3, [pc, #284]	; (8011618 <tcp_slowtmr+0x590>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114fe:	429a      	cmp	r2, r3
 8011500:	d006      	beq.n	8011510 <tcp_slowtmr+0x488>
 8011502:	4b46      	ldr	r3, [pc, #280]	; (801161c <tcp_slowtmr+0x594>)
 8011504:	f240 5271 	movw	r2, #1393	; 0x571
 8011508:	4947      	ldr	r1, [pc, #284]	; (8011628 <tcp_slowtmr+0x5a0>)
 801150a:	4846      	ldr	r0, [pc, #280]	; (8011624 <tcp_slowtmr+0x59c>)
 801150c:	f005 fbb6 	bl	8016c7c <iprintf>
        tcp_active_pcbs = pcb->next;
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	68db      	ldr	r3, [r3, #12]
 8011514:	4a40      	ldr	r2, [pc, #256]	; (8011618 <tcp_slowtmr+0x590>)
 8011516:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801151c:	2b00      	cmp	r3, #0
 801151e:	d013      	beq.n	8011548 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011522:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011526:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011528:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	3304      	adds	r3, #4
 801152e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011530:	8ad2      	ldrh	r2, [r2, #22]
 8011532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011534:	8b09      	ldrh	r1, [r1, #24]
 8011536:	9102      	str	r1, [sp, #8]
 8011538:	9201      	str	r2, [sp, #4]
 801153a:	9300      	str	r3, [sp, #0]
 801153c:	462b      	mov	r3, r5
 801153e:	4622      	mov	r2, r4
 8011540:	4601      	mov	r1, r0
 8011542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011544:	f004 f992 	bl	801586c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154a:	691b      	ldr	r3, [r3, #16]
 801154c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	7d1b      	ldrb	r3, [r3, #20]
 8011552:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011556:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801155e:	6838      	ldr	r0, [r7, #0]
 8011560:	f7ff f9fc 	bl	801095c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011564:	4b31      	ldr	r3, [pc, #196]	; (801162c <tcp_slowtmr+0x5a4>)
 8011566:	2200      	movs	r2, #0
 8011568:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d004      	beq.n	801157a <tcp_slowtmr+0x4f2>
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f06f 010c 	mvn.w	r1, #12
 8011576:	68b8      	ldr	r0, [r7, #8]
 8011578:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801157a:	4b2c      	ldr	r3, [pc, #176]	; (801162c <tcp_slowtmr+0x5a4>)
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d037      	beq.n	80115f2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011582:	e592      	b.n	80110aa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011586:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011590:	7f1b      	ldrb	r3, [r3, #28]
 8011592:	3301      	adds	r3, #1
 8011594:	b2da      	uxtb	r2, r3
 8011596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011598:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159c:	7f1a      	ldrb	r2, [r3, #28]
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	7f5b      	ldrb	r3, [r3, #29]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d325      	bcc.n	80115f2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	2200      	movs	r2, #0
 80115aa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80115ac:	4b1f      	ldr	r3, [pc, #124]	; (801162c <tcp_slowtmr+0x5a4>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00b      	beq.n	80115d4 <tcp_slowtmr+0x54c>
 80115bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115c4:	6912      	ldr	r2, [r2, #16]
 80115c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115c8:	4610      	mov	r0, r2
 80115ca:	4798      	blx	r3
 80115cc:	4603      	mov	r3, r0
 80115ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80115d2:	e002      	b.n	80115da <tcp_slowtmr+0x552>
 80115d4:	2300      	movs	r3, #0
 80115d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80115da:	4b14      	ldr	r3, [pc, #80]	; (801162c <tcp_slowtmr+0x5a4>)
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d000      	beq.n	80115e4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80115e2:	e562      	b.n	80110aa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80115e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d102      	bne.n	80115f2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80115ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115ee:	f003 fb77 	bl	8014ce0 <tcp_output>
  while (pcb != NULL) {
 80115f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f47f ad5e 	bne.w	80110b6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80115fe:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <tcp_slowtmr+0x5a8>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011604:	e069      	b.n	80116da <tcp_slowtmr+0x652>
 8011606:	bf00      	nop
 8011608:	24008354 	.word	0x24008354
 801160c:	000a4cb8 	.word	0x000a4cb8
 8011610:	10624dd3 	.word	0x10624dd3
 8011614:	000124f8 	.word	0x000124f8
 8011618:	24008350 	.word	0x24008350
 801161c:	08018ea0 	.word	0x08018ea0
 8011620:	0801930c 	.word	0x0801930c
 8011624:	08018f18 	.word	0x08018f18
 8011628:	08019338 	.word	0x08019338
 801162c:	2400834c 	.word	0x2400834c
 8011630:	24008360 	.word	0x24008360
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011636:	7d1b      	ldrb	r3, [r3, #20]
 8011638:	2b0a      	cmp	r3, #10
 801163a:	d006      	beq.n	801164a <tcp_slowtmr+0x5c2>
 801163c:	4b2a      	ldr	r3, [pc, #168]	; (80116e8 <tcp_slowtmr+0x660>)
 801163e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011642:	492a      	ldr	r1, [pc, #168]	; (80116ec <tcp_slowtmr+0x664>)
 8011644:	482a      	ldr	r0, [pc, #168]	; (80116f0 <tcp_slowtmr+0x668>)
 8011646:	f005 fb19 	bl	8016c7c <iprintf>
    pcb_remove = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011650:	4b28      	ldr	r3, [pc, #160]	; (80116f4 <tcp_slowtmr+0x66c>)
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011656:	6a1b      	ldr	r3, [r3, #32]
 8011658:	1ad3      	subs	r3, r2, r3
 801165a:	2bf0      	cmp	r3, #240	; 0xf0
 801165c:	d904      	bls.n	8011668 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801165e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011662:	3301      	adds	r3, #1
 8011664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801166c:	2b00      	cmp	r3, #0
 801166e:	d02f      	beq.n	80116d0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011672:	f000 fb27 	bl	8011cc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011678:	2b00      	cmp	r3, #0
 801167a:	d010      	beq.n	801169e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801167c:	4b1e      	ldr	r3, [pc, #120]	; (80116f8 <tcp_slowtmr+0x670>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011682:	429a      	cmp	r2, r3
 8011684:	d106      	bne.n	8011694 <tcp_slowtmr+0x60c>
 8011686:	4b18      	ldr	r3, [pc, #96]	; (80116e8 <tcp_slowtmr+0x660>)
 8011688:	f240 52af 	movw	r2, #1455	; 0x5af
 801168c:	491b      	ldr	r1, [pc, #108]	; (80116fc <tcp_slowtmr+0x674>)
 801168e:	4818      	ldr	r0, [pc, #96]	; (80116f0 <tcp_slowtmr+0x668>)
 8011690:	f005 faf4 	bl	8016c7c <iprintf>
        prev->next = pcb->next;
 8011694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011696:	68da      	ldr	r2, [r3, #12]
 8011698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169a:	60da      	str	r2, [r3, #12]
 801169c:	e00f      	b.n	80116be <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801169e:	4b16      	ldr	r3, [pc, #88]	; (80116f8 <tcp_slowtmr+0x670>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d006      	beq.n	80116b6 <tcp_slowtmr+0x62e>
 80116a8:	4b0f      	ldr	r3, [pc, #60]	; (80116e8 <tcp_slowtmr+0x660>)
 80116aa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80116ae:	4914      	ldr	r1, [pc, #80]	; (8011700 <tcp_slowtmr+0x678>)
 80116b0:	480f      	ldr	r0, [pc, #60]	; (80116f0 <tcp_slowtmr+0x668>)
 80116b2:	f005 fae3 	bl	8016c7c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80116b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	4a0f      	ldr	r2, [pc, #60]	; (80116f8 <tcp_slowtmr+0x670>)
 80116bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80116be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80116c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80116c8:	69f8      	ldr	r0, [r7, #28]
 80116ca:	f7ff f947 	bl	801095c <tcp_free>
 80116ce:	e004      	b.n	80116da <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80116d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80116d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d1a9      	bne.n	8011634 <tcp_slowtmr+0x5ac>
    }
  }
}
 80116e0:	bf00      	nop
 80116e2:	3730      	adds	r7, #48	; 0x30
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bdb0      	pop	{r4, r5, r7, pc}
 80116e8:	08018ea0 	.word	0x08018ea0
 80116ec:	08019364 	.word	0x08019364
 80116f0:	08018f18 	.word	0x08018f18
 80116f4:	24008354 	.word	0x24008354
 80116f8:	24008360 	.word	0x24008360
 80116fc:	08019394 	.word	0x08019394
 8011700:	080193bc 	.word	0x080193bc

08011704 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801170a:	4b2d      	ldr	r3, [pc, #180]	; (80117c0 <tcp_fasttmr+0xbc>)
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	3301      	adds	r3, #1
 8011710:	b2da      	uxtb	r2, r3
 8011712:	4b2b      	ldr	r3, [pc, #172]	; (80117c0 <tcp_fasttmr+0xbc>)
 8011714:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011716:	4b2b      	ldr	r3, [pc, #172]	; (80117c4 <tcp_fasttmr+0xc0>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801171c:	e048      	b.n	80117b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	7f9a      	ldrb	r2, [r3, #30]
 8011722:	4b27      	ldr	r3, [pc, #156]	; (80117c0 <tcp_fasttmr+0xbc>)
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	429a      	cmp	r2, r3
 8011728:	d03f      	beq.n	80117aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801172a:	4b25      	ldr	r3, [pc, #148]	; (80117c0 <tcp_fasttmr+0xbc>)
 801172c:	781a      	ldrb	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	8b5b      	ldrh	r3, [r3, #26]
 8011736:	f003 0301 	and.w	r3, r3, #1
 801173a:	2b00      	cmp	r3, #0
 801173c:	d010      	beq.n	8011760 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	8b5b      	ldrh	r3, [r3, #26]
 8011742:	f043 0302 	orr.w	r3, r3, #2
 8011746:	b29a      	uxth	r2, r3
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f003 fac7 	bl	8014ce0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	8b5b      	ldrh	r3, [r3, #26]
 8011756:	f023 0303 	bic.w	r3, r3, #3
 801175a:	b29a      	uxth	r2, r3
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	8b5b      	ldrh	r3, [r3, #26]
 8011764:	f003 0308 	and.w	r3, r3, #8
 8011768:	2b00      	cmp	r3, #0
 801176a:	d009      	beq.n	8011780 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	8b5b      	ldrh	r3, [r3, #26]
 8011770:	f023 0308 	bic.w	r3, r3, #8
 8011774:	b29a      	uxth	r2, r3
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f7ff fa7e 	bl	8010c7c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801178a:	2b00      	cmp	r3, #0
 801178c:	d00a      	beq.n	80117a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801178e:	4b0e      	ldr	r3, [pc, #56]	; (80117c8 <tcp_fasttmr+0xc4>)
 8011790:	2200      	movs	r2, #0
 8011792:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f000 f819 	bl	80117cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801179a:	4b0b      	ldr	r3, [pc, #44]	; (80117c8 <tcp_fasttmr+0xc4>)
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d000      	beq.n	80117a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80117a2:	e7b8      	b.n	8011716 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	607b      	str	r3, [r7, #4]
 80117a8:	e002      	b.n	80117b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1b3      	bne.n	801171e <tcp_fasttmr+0x1a>
    }
  }
}
 80117b6:	bf00      	nop
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	24004b0a 	.word	0x24004b0a
 80117c4:	24008350 	.word	0x24008350
 80117c8:	2400834c 	.word	0x2400834c

080117cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80117cc:	b590      	push	{r4, r7, lr}
 80117ce:	b085      	sub	sp, #20
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d109      	bne.n	80117ee <tcp_process_refused_data+0x22>
 80117da:	4b37      	ldr	r3, [pc, #220]	; (80118b8 <tcp_process_refused_data+0xec>)
 80117dc:	f240 6209 	movw	r2, #1545	; 0x609
 80117e0:	4936      	ldr	r1, [pc, #216]	; (80118bc <tcp_process_refused_data+0xf0>)
 80117e2:	4837      	ldr	r0, [pc, #220]	; (80118c0 <tcp_process_refused_data+0xf4>)
 80117e4:	f005 fa4a 	bl	8016c7c <iprintf>
 80117e8:	f06f 030f 	mvn.w	r3, #15
 80117ec:	e060      	b.n	80118b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117f2:	7b5b      	ldrb	r3, [r3, #13]
 80117f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00b      	beq.n	8011824 <tcp_process_refused_data+0x58>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6918      	ldr	r0, [r3, #16]
 8011816:	2300      	movs	r3, #0
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	6879      	ldr	r1, [r7, #4]
 801181c:	47a0      	blx	r4
 801181e:	4603      	mov	r3, r0
 8011820:	73fb      	strb	r3, [r7, #15]
 8011822:	e007      	b.n	8011834 <tcp_process_refused_data+0x68>
 8011824:	2300      	movs	r3, #0
 8011826:	68ba      	ldr	r2, [r7, #8]
 8011828:	6879      	ldr	r1, [r7, #4]
 801182a:	2000      	movs	r0, #0
 801182c:	f000 f8a2 	bl	8011974 <tcp_recv_null>
 8011830:	4603      	mov	r3, r0
 8011832:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d12a      	bne.n	8011892 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801183c:	7bbb      	ldrb	r3, [r7, #14]
 801183e:	f003 0320 	and.w	r3, r3, #32
 8011842:	2b00      	cmp	r3, #0
 8011844:	d033      	beq.n	80118ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801184a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801184e:	d005      	beq.n	801185c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011854:	3301      	adds	r3, #1
 8011856:	b29a      	uxth	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00b      	beq.n	801187e <tcp_process_refused_data+0xb2>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6918      	ldr	r0, [r3, #16]
 8011870:	2300      	movs	r3, #0
 8011872:	2200      	movs	r2, #0
 8011874:	6879      	ldr	r1, [r7, #4]
 8011876:	47a0      	blx	r4
 8011878:	4603      	mov	r3, r0
 801187a:	73fb      	strb	r3, [r7, #15]
 801187c:	e001      	b.n	8011882 <tcp_process_refused_data+0xb6>
 801187e:	2300      	movs	r3, #0
 8011880:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011886:	f113 0f0d 	cmn.w	r3, #13
 801188a:	d110      	bne.n	80118ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801188c:	f06f 030c 	mvn.w	r3, #12
 8011890:	e00e      	b.n	80118b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011896:	f113 0f0d 	cmn.w	r3, #13
 801189a:	d102      	bne.n	80118a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801189c:	f06f 030c 	mvn.w	r3, #12
 80118a0:	e006      	b.n	80118b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80118a8:	f06f 0304 	mvn.w	r3, #4
 80118ac:	e000      	b.n	80118b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80118ae:	2300      	movs	r3, #0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3714      	adds	r7, #20
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd90      	pop	{r4, r7, pc}
 80118b8:	08018ea0 	.word	0x08018ea0
 80118bc:	080193e4 	.word	0x080193e4
 80118c0:	08018f18 	.word	0x08018f18

080118c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80118cc:	e007      	b.n	80118de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 f809 	bl	80118ec <tcp_seg_free>
    seg = next;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1f4      	bne.n	80118ce <tcp_segs_free+0xa>
  }
}
 80118e4:	bf00      	nop
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d00c      	beq.n	8011914 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d004      	beq.n	801190c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	4618      	mov	r0, r3
 8011908:	f7fe fc7a 	bl	8010200 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801190c:	6879      	ldr	r1, [r7, #4]
 801190e:	2003      	movs	r0, #3
 8011910:	f7fd fdd6 	bl	800f4c0 <memp_free>
  }
}
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d106      	bne.n	8011938 <tcp_seg_copy+0x1c>
 801192a:	4b0f      	ldr	r3, [pc, #60]	; (8011968 <tcp_seg_copy+0x4c>)
 801192c:	f240 6282 	movw	r2, #1666	; 0x682
 8011930:	490e      	ldr	r1, [pc, #56]	; (801196c <tcp_seg_copy+0x50>)
 8011932:	480f      	ldr	r0, [pc, #60]	; (8011970 <tcp_seg_copy+0x54>)
 8011934:	f005 f9a2 	bl	8016c7c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011938:	2003      	movs	r0, #3
 801193a:	f7fd fd4b 	bl	800f3d4 <memp_malloc>
 801193e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d101      	bne.n	801194a <tcp_seg_copy+0x2e>
    return NULL;
 8011946:	2300      	movs	r3, #0
 8011948:	e00a      	b.n	8011960 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801194a:	2210      	movs	r2, #16
 801194c:	6879      	ldr	r1, [r7, #4]
 801194e:	68f8      	ldr	r0, [r7, #12]
 8011950:	f005 f981 	bl	8016c56 <memcpy>
  pbuf_ref(cseg->p);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	4618      	mov	r0, r3
 801195a:	f7fe fcf7 	bl	801034c <pbuf_ref>
  return cseg;
 801195e:	68fb      	ldr	r3, [r7, #12]
}
 8011960:	4618      	mov	r0, r3
 8011962:	3710      	adds	r7, #16
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	08018ea0 	.word	0x08018ea0
 801196c:	08019428 	.word	0x08019428
 8011970:	08018f18 	.word	0x08018f18

08011974 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
 801197a:	60f8      	str	r0, [r7, #12]
 801197c:	60b9      	str	r1, [r7, #8]
 801197e:	607a      	str	r2, [r7, #4]
 8011980:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d109      	bne.n	801199c <tcp_recv_null+0x28>
 8011988:	4b12      	ldr	r3, [pc, #72]	; (80119d4 <tcp_recv_null+0x60>)
 801198a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801198e:	4912      	ldr	r1, [pc, #72]	; (80119d8 <tcp_recv_null+0x64>)
 8011990:	4812      	ldr	r0, [pc, #72]	; (80119dc <tcp_recv_null+0x68>)
 8011992:	f005 f973 	bl	8016c7c <iprintf>
 8011996:	f06f 030f 	mvn.w	r3, #15
 801199a:	e016      	b.n	80119ca <tcp_recv_null+0x56>

  if (p != NULL) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d009      	beq.n	80119b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	891b      	ldrh	r3, [r3, #8]
 80119a6:	4619      	mov	r1, r3
 80119a8:	68b8      	ldr	r0, [r7, #8]
 80119aa:	f7ff fb1d 	bl	8010fe8 <tcp_recved>
    pbuf_free(p);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7fe fc26 	bl	8010200 <pbuf_free>
 80119b4:	e008      	b.n	80119c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80119b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d104      	bne.n	80119c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80119be:	68b8      	ldr	r0, [r7, #8]
 80119c0:	f7ff f9c2 	bl	8010d48 <tcp_close>
 80119c4:	4603      	mov	r3, r0
 80119c6:	e000      	b.n	80119ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	08018ea0 	.word	0x08018ea0
 80119d8:	08019444 	.word	0x08019444
 80119dc:	08018f18 	.word	0x08018f18

080119e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b086      	sub	sp, #24
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	4603      	mov	r3, r0
 80119e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80119ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	db01      	blt.n	80119f6 <tcp_kill_prio+0x16>
 80119f2:	79fb      	ldrb	r3, [r7, #7]
 80119f4:	e000      	b.n	80119f8 <tcp_kill_prio+0x18>
 80119f6:	237f      	movs	r3, #127	; 0x7f
 80119f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d034      	beq.n	8011a6a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011a00:	7afb      	ldrb	r3, [r7, #11]
 8011a02:	3b01      	subs	r3, #1
 8011a04:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011a06:	2300      	movs	r3, #0
 8011a08:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a0e:	4b19      	ldr	r3, [pc, #100]	; (8011a74 <tcp_kill_prio+0x94>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	617b      	str	r3, [r7, #20]
 8011a14:	e01f      	b.n	8011a56 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	7d5b      	ldrb	r3, [r3, #21]
 8011a1a:	7afa      	ldrb	r2, [r7, #11]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d80c      	bhi.n	8011a3a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011a24:	7afa      	ldrb	r2, [r7, #11]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d112      	bne.n	8011a50 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011a2a:	4b13      	ldr	r3, [pc, #76]	; (8011a78 <tcp_kill_prio+0x98>)
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	6a1b      	ldr	r3, [r3, #32]
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d80a      	bhi.n	8011a50 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011a3a:	4b0f      	ldr	r3, [pc, #60]	; (8011a78 <tcp_kill_prio+0x98>)
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	6a1b      	ldr	r3, [r3, #32]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	7d5b      	ldrb	r3, [r3, #21]
 8011a4e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	617b      	str	r3, [r7, #20]
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1dc      	bne.n	8011a16 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d004      	beq.n	8011a6c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011a62:	6938      	ldr	r0, [r7, #16]
 8011a64:	f7ff fa5a 	bl	8010f1c <tcp_abort>
 8011a68:	e000      	b.n	8011a6c <tcp_kill_prio+0x8c>
    return;
 8011a6a:	bf00      	nop
  }
}
 8011a6c:	3718      	adds	r7, #24
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	24008350 	.word	0x24008350
 8011a78:	24008354 	.word	0x24008354

08011a7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b086      	sub	sp, #24
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	4603      	mov	r3, r0
 8011a84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011a86:	79fb      	ldrb	r3, [r7, #7]
 8011a88:	2b08      	cmp	r3, #8
 8011a8a:	d009      	beq.n	8011aa0 <tcp_kill_state+0x24>
 8011a8c:	79fb      	ldrb	r3, [r7, #7]
 8011a8e:	2b09      	cmp	r3, #9
 8011a90:	d006      	beq.n	8011aa0 <tcp_kill_state+0x24>
 8011a92:	4b1a      	ldr	r3, [pc, #104]	; (8011afc <tcp_kill_state+0x80>)
 8011a94:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011a98:	4919      	ldr	r1, [pc, #100]	; (8011b00 <tcp_kill_state+0x84>)
 8011a9a:	481a      	ldr	r0, [pc, #104]	; (8011b04 <tcp_kill_state+0x88>)
 8011a9c:	f005 f8ee 	bl	8016c7c <iprintf>

  inactivity = 0;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011aa8:	4b17      	ldr	r3, [pc, #92]	; (8011b08 <tcp_kill_state+0x8c>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	617b      	str	r3, [r7, #20]
 8011aae:	e017      	b.n	8011ae0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	7d1b      	ldrb	r3, [r3, #20]
 8011ab4:	79fa      	ldrb	r2, [r7, #7]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d10f      	bne.n	8011ada <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011aba:	4b14      	ldr	r3, [pc, #80]	; (8011b0c <tcp_kill_state+0x90>)
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	6a1b      	ldr	r3, [r3, #32]
 8011ac2:	1ad3      	subs	r3, r2, r3
 8011ac4:	68fa      	ldr	r2, [r7, #12]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d807      	bhi.n	8011ada <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011aca:	4b10      	ldr	r3, [pc, #64]	; (8011b0c <tcp_kill_state+0x90>)
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	6a1b      	ldr	r3, [r3, #32]
 8011ad2:	1ad3      	subs	r3, r2, r3
 8011ad4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	617b      	str	r3, [r7, #20]
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d1e4      	bne.n	8011ab0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d003      	beq.n	8011af4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011aec:	2100      	movs	r1, #0
 8011aee:	6938      	ldr	r0, [r7, #16]
 8011af0:	f7ff f956 	bl	8010da0 <tcp_abandon>
  }
}
 8011af4:	bf00      	nop
 8011af6:	3718      	adds	r7, #24
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	08018ea0 	.word	0x08018ea0
 8011b00:	08019460 	.word	0x08019460
 8011b04:	08018f18 	.word	0x08018f18
 8011b08:	24008350 	.word	0x24008350
 8011b0c:	24008354 	.word	0x24008354

08011b10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b1e:	4b12      	ldr	r3, [pc, #72]	; (8011b68 <tcp_kill_timewait+0x58>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	60fb      	str	r3, [r7, #12]
 8011b24:	e012      	b.n	8011b4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b26:	4b11      	ldr	r3, [pc, #68]	; (8011b6c <tcp_kill_timewait+0x5c>)
 8011b28:	681a      	ldr	r2, [r3, #0]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6a1b      	ldr	r3, [r3, #32]
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d807      	bhi.n	8011b46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011b36:	4b0d      	ldr	r3, [pc, #52]	; (8011b6c <tcp_kill_timewait+0x5c>)
 8011b38:	681a      	ldr	r2, [r3, #0]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	6a1b      	ldr	r3, [r3, #32]
 8011b3e:	1ad3      	subs	r3, r2, r3
 8011b40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	60fb      	str	r3, [r7, #12]
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d1e9      	bne.n	8011b26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d002      	beq.n	8011b5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b58:	68b8      	ldr	r0, [r7, #8]
 8011b5a:	f7ff f9df 	bl	8010f1c <tcp_abort>
  }
}
 8011b5e:	bf00      	nop
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	24008360 	.word	0x24008360
 8011b6c:	24008354 	.word	0x24008354

08011b70 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011b76:	4b10      	ldr	r3, [pc, #64]	; (8011bb8 <tcp_handle_closepend+0x48>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011b7c:	e014      	b.n	8011ba8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	8b5b      	ldrh	r3, [r3, #26]
 8011b88:	f003 0308 	and.w	r3, r3, #8
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d009      	beq.n	8011ba4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	8b5b      	ldrh	r3, [r3, #26]
 8011b94:	f023 0308 	bic.w	r3, r3, #8
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7ff f86c 	bl	8010c7c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d1e7      	bne.n	8011b7e <tcp_handle_closepend+0xe>
  }
}
 8011bae:	bf00      	nop
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	24008350 	.word	0x24008350

08011bbc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bc6:	2001      	movs	r0, #1
 8011bc8:	f7fd fc04 	bl	800f3d4 <memp_malloc>
 8011bcc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d126      	bne.n	8011c22 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011bd4:	f7ff ffcc 	bl	8011b70 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011bd8:	f7ff ff9a 	bl	8011b10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bdc:	2001      	movs	r0, #1
 8011bde:	f7fd fbf9 	bl	800f3d4 <memp_malloc>
 8011be2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d11b      	bne.n	8011c22 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011bea:	2009      	movs	r0, #9
 8011bec:	f7ff ff46 	bl	8011a7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bf0:	2001      	movs	r0, #1
 8011bf2:	f7fd fbef 	bl	800f3d4 <memp_malloc>
 8011bf6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d111      	bne.n	8011c22 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011bfe:	2008      	movs	r0, #8
 8011c00:	f7ff ff3c 	bl	8011a7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c04:	2001      	movs	r0, #1
 8011c06:	f7fd fbe5 	bl	800f3d4 <memp_malloc>
 8011c0a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d107      	bne.n	8011c22 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011c12:	79fb      	ldrb	r3, [r7, #7]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7ff fee3 	bl	80119e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c1a:	2001      	movs	r0, #1
 8011c1c:	f7fd fbda 	bl	800f3d4 <memp_malloc>
 8011c20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d03f      	beq.n	8011ca8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011c28:	229c      	movs	r2, #156	; 0x9c
 8011c2a:	2100      	movs	r1, #0
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f005 f81d 	bl	8016c6c <memset>
    pcb->prio = prio;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	79fa      	ldrb	r2, [r7, #7]
 8011c36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011c3e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011c48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	22ff      	movs	r2, #255	; 0xff
 8011c56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011c5e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2206      	movs	r2, #6
 8011c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2206      	movs	r2, #6
 8011c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c74:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2201      	movs	r2, #1
 8011c7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011c7e:	4b0d      	ldr	r3, [pc, #52]	; (8011cb4 <tcp_alloc+0xf8>)
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011c86:	4b0c      	ldr	r3, [pc, #48]	; (8011cb8 <tcp_alloc+0xfc>)
 8011c88:	781a      	ldrb	r2, [r3, #0]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011c94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	4a08      	ldr	r2, [pc, #32]	; (8011cbc <tcp_alloc+0x100>)
 8011c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	4a07      	ldr	r2, [pc, #28]	; (8011cc0 <tcp_alloc+0x104>)
 8011ca4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	24008354 	.word	0x24008354
 8011cb8:	24004b0a 	.word	0x24004b0a
 8011cbc:	08011975 	.word	0x08011975
 8011cc0:	006ddd00 	.word	0x006ddd00

08011cc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d107      	bne.n	8011ce2 <tcp_pcb_purge+0x1e>
 8011cd2:	4b21      	ldr	r3, [pc, #132]	; (8011d58 <tcp_pcb_purge+0x94>)
 8011cd4:	f640 0251 	movw	r2, #2129	; 0x851
 8011cd8:	4920      	ldr	r1, [pc, #128]	; (8011d5c <tcp_pcb_purge+0x98>)
 8011cda:	4821      	ldr	r0, [pc, #132]	; (8011d60 <tcp_pcb_purge+0x9c>)
 8011cdc:	f004 ffce 	bl	8016c7c <iprintf>
 8011ce0:	e037      	b.n	8011d52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	7d1b      	ldrb	r3, [r3, #20]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d033      	beq.n	8011d52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011cee:	2b0a      	cmp	r3, #10
 8011cf0:	d02f      	beq.n	8011d52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d02b      	beq.n	8011d52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d007      	beq.n	8011d12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fe fa7a 	bl	8010200 <pbuf_free>
      pcb->refused_data = NULL;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d002      	beq.n	8011d20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 f986 	bl	801202c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7ff fdc9 	bl	80118c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7ff fdc4 	bl	80118c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	66da      	str	r2, [r3, #108]	; 0x6c
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	08018ea0 	.word	0x08018ea0
 8011d5c:	08019520 	.word	0x08019520
 8011d60:	08018f18 	.word	0x08018f18

08011d64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d106      	bne.n	8011d82 <tcp_pcb_remove+0x1e>
 8011d74:	4b3e      	ldr	r3, [pc, #248]	; (8011e70 <tcp_pcb_remove+0x10c>)
 8011d76:	f640 0283 	movw	r2, #2179	; 0x883
 8011d7a:	493e      	ldr	r1, [pc, #248]	; (8011e74 <tcp_pcb_remove+0x110>)
 8011d7c:	483e      	ldr	r0, [pc, #248]	; (8011e78 <tcp_pcb_remove+0x114>)
 8011d7e:	f004 ff7d 	bl	8016c7c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d106      	bne.n	8011d96 <tcp_pcb_remove+0x32>
 8011d88:	4b39      	ldr	r3, [pc, #228]	; (8011e70 <tcp_pcb_remove+0x10c>)
 8011d8a:	f640 0284 	movw	r2, #2180	; 0x884
 8011d8e:	493b      	ldr	r1, [pc, #236]	; (8011e7c <tcp_pcb_remove+0x118>)
 8011d90:	4839      	ldr	r0, [pc, #228]	; (8011e78 <tcp_pcb_remove+0x114>)
 8011d92:	f004 ff73 	bl	8016c7c <iprintf>

  TCP_RMV(pcblist, pcb);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	683a      	ldr	r2, [r7, #0]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d105      	bne.n	8011dac <tcp_pcb_remove+0x48>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68da      	ldr	r2, [r3, #12]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	601a      	str	r2, [r3, #0]
 8011daa:	e013      	b.n	8011dd4 <tcp_pcb_remove+0x70>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	60fb      	str	r3, [r7, #12]
 8011db2:	e00c      	b.n	8011dce <tcp_pcb_remove+0x6a>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	683a      	ldr	r2, [r7, #0]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d104      	bne.n	8011dc8 <tcp_pcb_remove+0x64>
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	68da      	ldr	r2, [r3, #12]
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	60da      	str	r2, [r3, #12]
 8011dc6:	e005      	b.n	8011dd4 <tcp_pcb_remove+0x70>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	60fb      	str	r3, [r7, #12]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d1ef      	bne.n	8011db4 <tcp_pcb_remove+0x50>
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011dda:	6838      	ldr	r0, [r7, #0]
 8011ddc:	f7ff ff72 	bl	8011cc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	7d1b      	ldrb	r3, [r3, #20]
 8011de4:	2b0a      	cmp	r3, #10
 8011de6:	d013      	beq.n	8011e10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d00f      	beq.n	8011e10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	8b5b      	ldrh	r3, [r3, #26]
 8011df4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d009      	beq.n	8011e10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	8b5b      	ldrh	r3, [r3, #26]
 8011e00:	f043 0302 	orr.w	r3, r3, #2
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e0a:	6838      	ldr	r0, [r7, #0]
 8011e0c:	f002 ff68 	bl	8014ce0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	7d1b      	ldrb	r3, [r3, #20]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d020      	beq.n	8011e5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d006      	beq.n	8011e2e <tcp_pcb_remove+0xca>
 8011e20:	4b13      	ldr	r3, [pc, #76]	; (8011e70 <tcp_pcb_remove+0x10c>)
 8011e22:	f640 0293 	movw	r2, #2195	; 0x893
 8011e26:	4916      	ldr	r1, [pc, #88]	; (8011e80 <tcp_pcb_remove+0x11c>)
 8011e28:	4813      	ldr	r0, [pc, #76]	; (8011e78 <tcp_pcb_remove+0x114>)
 8011e2a:	f004 ff27 	bl	8016c7c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d006      	beq.n	8011e44 <tcp_pcb_remove+0xe0>
 8011e36:	4b0e      	ldr	r3, [pc, #56]	; (8011e70 <tcp_pcb_remove+0x10c>)
 8011e38:	f640 0294 	movw	r2, #2196	; 0x894
 8011e3c:	4911      	ldr	r1, [pc, #68]	; (8011e84 <tcp_pcb_remove+0x120>)
 8011e3e:	480e      	ldr	r0, [pc, #56]	; (8011e78 <tcp_pcb_remove+0x114>)
 8011e40:	f004 ff1c 	bl	8016c7c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d006      	beq.n	8011e5a <tcp_pcb_remove+0xf6>
 8011e4c:	4b08      	ldr	r3, [pc, #32]	; (8011e70 <tcp_pcb_remove+0x10c>)
 8011e4e:	f640 0296 	movw	r2, #2198	; 0x896
 8011e52:	490d      	ldr	r1, [pc, #52]	; (8011e88 <tcp_pcb_remove+0x124>)
 8011e54:	4808      	ldr	r0, [pc, #32]	; (8011e78 <tcp_pcb_remove+0x114>)
 8011e56:	f004 ff11 	bl	8016c7c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	2200      	movs	r2, #0
 8011e64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011e66:	bf00      	nop
 8011e68:	3710      	adds	r7, #16
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	08018ea0 	.word	0x08018ea0
 8011e74:	0801953c 	.word	0x0801953c
 8011e78:	08018f18 	.word	0x08018f18
 8011e7c:	08019558 	.word	0x08019558
 8011e80:	08019578 	.word	0x08019578
 8011e84:	08019590 	.word	0x08019590
 8011e88:	080195ac 	.word	0x080195ac

08011e8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d106      	bne.n	8011ea8 <tcp_next_iss+0x1c>
 8011e9a:	4b0a      	ldr	r3, [pc, #40]	; (8011ec4 <tcp_next_iss+0x38>)
 8011e9c:	f640 02af 	movw	r2, #2223	; 0x8af
 8011ea0:	4909      	ldr	r1, [pc, #36]	; (8011ec8 <tcp_next_iss+0x3c>)
 8011ea2:	480a      	ldr	r0, [pc, #40]	; (8011ecc <tcp_next_iss+0x40>)
 8011ea4:	f004 feea 	bl	8016c7c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011ea8:	4b09      	ldr	r3, [pc, #36]	; (8011ed0 <tcp_next_iss+0x44>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	4b09      	ldr	r3, [pc, #36]	; (8011ed4 <tcp_next_iss+0x48>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	4a07      	ldr	r2, [pc, #28]	; (8011ed0 <tcp_next_iss+0x44>)
 8011eb4:	6013      	str	r3, [r2, #0]
  return iss;
 8011eb6:	4b06      	ldr	r3, [pc, #24]	; (8011ed0 <tcp_next_iss+0x44>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3708      	adds	r7, #8
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
 8011ec2:	bf00      	nop
 8011ec4:	08018ea0 	.word	0x08018ea0
 8011ec8:	080195c4 	.word	0x080195c4
 8011ecc:	08018f18 	.word	0x08018f18
 8011ed0:	2400002c 	.word	0x2400002c
 8011ed4:	24008354 	.word	0x24008354

08011ed8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b086      	sub	sp, #24
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
 8011ee4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d106      	bne.n	8011efa <tcp_eff_send_mss_netif+0x22>
 8011eec:	4b14      	ldr	r3, [pc, #80]	; (8011f40 <tcp_eff_send_mss_netif+0x68>)
 8011eee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011ef2:	4914      	ldr	r1, [pc, #80]	; (8011f44 <tcp_eff_send_mss_netif+0x6c>)
 8011ef4:	4814      	ldr	r0, [pc, #80]	; (8011f48 <tcp_eff_send_mss_netif+0x70>)
 8011ef6:	f004 fec1 	bl	8016c7c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d101      	bne.n	8011f04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011f00:	89fb      	ldrh	r3, [r7, #14]
 8011f02:	e019      	b.n	8011f38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011f08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011f0a:	8afb      	ldrh	r3, [r7, #22]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d012      	beq.n	8011f36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011f10:	2328      	movs	r3, #40	; 0x28
 8011f12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011f14:	8afa      	ldrh	r2, [r7, #22]
 8011f16:	8abb      	ldrh	r3, [r7, #20]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d904      	bls.n	8011f26 <tcp_eff_send_mss_netif+0x4e>
 8011f1c:	8afa      	ldrh	r2, [r7, #22]
 8011f1e:	8abb      	ldrh	r3, [r7, #20]
 8011f20:	1ad3      	subs	r3, r2, r3
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	e000      	b.n	8011f28 <tcp_eff_send_mss_netif+0x50>
 8011f26:	2300      	movs	r3, #0
 8011f28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011f2a:	8a7a      	ldrh	r2, [r7, #18]
 8011f2c:	89fb      	ldrh	r3, [r7, #14]
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	bf28      	it	cs
 8011f32:	4613      	movcs	r3, r2
 8011f34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011f36:	89fb      	ldrh	r3, [r7, #14]
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3718      	adds	r7, #24
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	08018ea0 	.word	0x08018ea0
 8011f44:	080195e0 	.word	0x080195e0
 8011f48:	08018f18 	.word	0x08018f18

08011f4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d119      	bne.n	8011f94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011f60:	4b10      	ldr	r3, [pc, #64]	; (8011fa4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011f62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011f66:	4910      	ldr	r1, [pc, #64]	; (8011fa8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011f68:	4810      	ldr	r0, [pc, #64]	; (8011fac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011f6a:	f004 fe87 	bl	8016c7c <iprintf>

  while (pcb != NULL) {
 8011f6e:	e011      	b.n	8011f94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d108      	bne.n	8011f8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	f7fe ffca 	bl	8010f1c <tcp_abort>
      pcb = next;
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	60fb      	str	r3, [r7, #12]
 8011f8c:	e002      	b.n	8011f94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	68db      	ldr	r3, [r3, #12]
 8011f92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d1ea      	bne.n	8011f70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011f9a:	bf00      	nop
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	08018ea0 	.word	0x08018ea0
 8011fa8:	08019608 	.word	0x08019608
 8011fac:	08018f18 	.word	0x08018f18

08011fb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d02a      	beq.n	8012016 <tcp_netif_ip_addr_changed+0x66>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d026      	beq.n	8012016 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011fc8:	4b15      	ldr	r3, [pc, #84]	; (8012020 <tcp_netif_ip_addr_changed+0x70>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4619      	mov	r1, r3
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f7ff ffbc 	bl	8011f4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011fd4:	4b13      	ldr	r3, [pc, #76]	; (8012024 <tcp_netif_ip_addr_changed+0x74>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4619      	mov	r1, r3
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff ffb6 	bl	8011f4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d017      	beq.n	8012016 <tcp_netif_ip_addr_changed+0x66>
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d013      	beq.n	8012016 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011fee:	4b0e      	ldr	r3, [pc, #56]	; (8012028 <tcp_netif_ip_addr_changed+0x78>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	60fb      	str	r3, [r7, #12]
 8011ff4:	e00c      	b.n	8012010 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d103      	bne.n	801200a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	60fb      	str	r3, [r7, #12]
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d1ef      	bne.n	8011ff6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012016:	bf00      	nop
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	24008350 	.word	0x24008350
 8012024:	2400835c 	.word	0x2400835c
 8012028:	24008358 	.word	0x24008358

0801202c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012038:	2b00      	cmp	r3, #0
 801203a:	d007      	beq.n	801204c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012040:	4618      	mov	r0, r3
 8012042:	f7ff fc3f 	bl	80118c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2200      	movs	r2, #0
 801204a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801204c:	bf00      	nop
 801204e:	3708      	adds	r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012054:	b590      	push	{r4, r7, lr}
 8012056:	b08d      	sub	sp, #52	; 0x34
 8012058:	af04      	add	r7, sp, #16
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d105      	bne.n	8012070 <tcp_input+0x1c>
 8012064:	4b9b      	ldr	r3, [pc, #620]	; (80122d4 <tcp_input+0x280>)
 8012066:	2283      	movs	r2, #131	; 0x83
 8012068:	499b      	ldr	r1, [pc, #620]	; (80122d8 <tcp_input+0x284>)
 801206a:	489c      	ldr	r0, [pc, #624]	; (80122dc <tcp_input+0x288>)
 801206c:	f004 fe06 	bl	8016c7c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	4a9a      	ldr	r2, [pc, #616]	; (80122e0 <tcp_input+0x28c>)
 8012076:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	895b      	ldrh	r3, [r3, #10]
 801207c:	2b13      	cmp	r3, #19
 801207e:	f240 83c4 	bls.w	801280a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012082:	4b98      	ldr	r3, [pc, #608]	; (80122e4 <tcp_input+0x290>)
 8012084:	695a      	ldr	r2, [r3, #20]
 8012086:	4b97      	ldr	r3, [pc, #604]	; (80122e4 <tcp_input+0x290>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	4619      	mov	r1, r3
 801208c:	4610      	mov	r0, r2
 801208e:	f7fb fe8d 	bl	800ddac <ip4_addr_isbroadcast_u32>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	f040 83ba 	bne.w	801280e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801209a:	4b92      	ldr	r3, [pc, #584]	; (80122e4 <tcp_input+0x290>)
 801209c:	695b      	ldr	r3, [r3, #20]
 801209e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80120a2:	2be0      	cmp	r3, #224	; 0xe0
 80120a4:	f000 83b3 	beq.w	801280e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80120a8:	4b8d      	ldr	r3, [pc, #564]	; (80122e0 <tcp_input+0x28c>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	899b      	ldrh	r3, [r3, #12]
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7fa f90f 	bl	800c2d4 <lwip_htons>
 80120b6:	4603      	mov	r3, r0
 80120b8:	0b1b      	lsrs	r3, r3, #12
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80120c2:	7cbb      	ldrb	r3, [r7, #18]
 80120c4:	2b13      	cmp	r3, #19
 80120c6:	f240 83a2 	bls.w	801280e <tcp_input+0x7ba>
 80120ca:	7cbb      	ldrb	r3, [r7, #18]
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	891b      	ldrh	r3, [r3, #8]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	f200 839b 	bhi.w	801280e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80120d8:	7cbb      	ldrb	r3, [r7, #18]
 80120da:	b29b      	uxth	r3, r3
 80120dc:	3b14      	subs	r3, #20
 80120de:	b29a      	uxth	r2, r3
 80120e0:	4b81      	ldr	r3, [pc, #516]	; (80122e8 <tcp_input+0x294>)
 80120e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80120e4:	4b81      	ldr	r3, [pc, #516]	; (80122ec <tcp_input+0x298>)
 80120e6:	2200      	movs	r2, #0
 80120e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	895a      	ldrh	r2, [r3, #10]
 80120ee:	7cbb      	ldrb	r3, [r7, #18]
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d309      	bcc.n	801210a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80120f6:	4b7c      	ldr	r3, [pc, #496]	; (80122e8 <tcp_input+0x294>)
 80120f8:	881a      	ldrh	r2, [r3, #0]
 80120fa:	4b7d      	ldr	r3, [pc, #500]	; (80122f0 <tcp_input+0x29c>)
 80120fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80120fe:	7cbb      	ldrb	r3, [r7, #18]
 8012100:	4619      	mov	r1, r3
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7fd fff6 	bl	80100f4 <pbuf_remove_header>
 8012108:	e04e      	b.n	80121a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d105      	bne.n	801211e <tcp_input+0xca>
 8012112:	4b70      	ldr	r3, [pc, #448]	; (80122d4 <tcp_input+0x280>)
 8012114:	22c2      	movs	r2, #194	; 0xc2
 8012116:	4977      	ldr	r1, [pc, #476]	; (80122f4 <tcp_input+0x2a0>)
 8012118:	4870      	ldr	r0, [pc, #448]	; (80122dc <tcp_input+0x288>)
 801211a:	f004 fdaf 	bl	8016c7c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801211e:	2114      	movs	r1, #20
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7fd ffe7 	bl	80100f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	895a      	ldrh	r2, [r3, #10]
 801212a:	4b71      	ldr	r3, [pc, #452]	; (80122f0 <tcp_input+0x29c>)
 801212c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801212e:	4b6e      	ldr	r3, [pc, #440]	; (80122e8 <tcp_input+0x294>)
 8012130:	881a      	ldrh	r2, [r3, #0]
 8012132:	4b6f      	ldr	r3, [pc, #444]	; (80122f0 <tcp_input+0x29c>)
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	1ad3      	subs	r3, r2, r3
 8012138:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801213a:	4b6d      	ldr	r3, [pc, #436]	; (80122f0 <tcp_input+0x29c>)
 801213c:	881b      	ldrh	r3, [r3, #0]
 801213e:	4619      	mov	r1, r3
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7fd ffd7 	bl	80100f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	895b      	ldrh	r3, [r3, #10]
 801214c:	8a3a      	ldrh	r2, [r7, #16]
 801214e:	429a      	cmp	r2, r3
 8012150:	f200 835f 	bhi.w	8012812 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	4a64      	ldr	r2, [pc, #400]	; (80122ec <tcp_input+0x298>)
 801215c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	8a3a      	ldrh	r2, [r7, #16]
 8012164:	4611      	mov	r1, r2
 8012166:	4618      	mov	r0, r3
 8012168:	f7fd ffc4 	bl	80100f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	891a      	ldrh	r2, [r3, #8]
 8012170:	8a3b      	ldrh	r3, [r7, #16]
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	b29a      	uxth	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	895b      	ldrh	r3, [r3, #10]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d005      	beq.n	801218e <tcp_input+0x13a>
 8012182:	4b54      	ldr	r3, [pc, #336]	; (80122d4 <tcp_input+0x280>)
 8012184:	22df      	movs	r2, #223	; 0xdf
 8012186:	495c      	ldr	r1, [pc, #368]	; (80122f8 <tcp_input+0x2a4>)
 8012188:	4854      	ldr	r0, [pc, #336]	; (80122dc <tcp_input+0x288>)
 801218a:	f004 fd77 	bl	8016c7c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	891a      	ldrh	r2, [r3, #8]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	891b      	ldrh	r3, [r3, #8]
 8012198:	429a      	cmp	r2, r3
 801219a:	d005      	beq.n	80121a8 <tcp_input+0x154>
 801219c:	4b4d      	ldr	r3, [pc, #308]	; (80122d4 <tcp_input+0x280>)
 801219e:	22e0      	movs	r2, #224	; 0xe0
 80121a0:	4956      	ldr	r1, [pc, #344]	; (80122fc <tcp_input+0x2a8>)
 80121a2:	484e      	ldr	r0, [pc, #312]	; (80122dc <tcp_input+0x288>)
 80121a4:	f004 fd6a 	bl	8016c7c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80121a8:	4b4d      	ldr	r3, [pc, #308]	; (80122e0 <tcp_input+0x28c>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	b29a      	uxth	r2, r3
 80121b0:	4b4b      	ldr	r3, [pc, #300]	; (80122e0 <tcp_input+0x28c>)
 80121b2:	681c      	ldr	r4, [r3, #0]
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7fa f88d 	bl	800c2d4 <lwip_htons>
 80121ba:	4603      	mov	r3, r0
 80121bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80121be:	4b48      	ldr	r3, [pc, #288]	; (80122e0 <tcp_input+0x28c>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	885b      	ldrh	r3, [r3, #2]
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	4b46      	ldr	r3, [pc, #280]	; (80122e0 <tcp_input+0x28c>)
 80121c8:	681c      	ldr	r4, [r3, #0]
 80121ca:	4610      	mov	r0, r2
 80121cc:	f7fa f882 	bl	800c2d4 <lwip_htons>
 80121d0:	4603      	mov	r3, r0
 80121d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80121d4:	4b42      	ldr	r3, [pc, #264]	; (80122e0 <tcp_input+0x28c>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	685a      	ldr	r2, [r3, #4]
 80121da:	4b41      	ldr	r3, [pc, #260]	; (80122e0 <tcp_input+0x28c>)
 80121dc:	681c      	ldr	r4, [r3, #0]
 80121de:	4610      	mov	r0, r2
 80121e0:	f7fa f88d 	bl	800c2fe <lwip_htonl>
 80121e4:	4603      	mov	r3, r0
 80121e6:	6063      	str	r3, [r4, #4]
 80121e8:	6863      	ldr	r3, [r4, #4]
 80121ea:	4a45      	ldr	r2, [pc, #276]	; (8012300 <tcp_input+0x2ac>)
 80121ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80121ee:	4b3c      	ldr	r3, [pc, #240]	; (80122e0 <tcp_input+0x28c>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	689a      	ldr	r2, [r3, #8]
 80121f4:	4b3a      	ldr	r3, [pc, #232]	; (80122e0 <tcp_input+0x28c>)
 80121f6:	681c      	ldr	r4, [r3, #0]
 80121f8:	4610      	mov	r0, r2
 80121fa:	f7fa f880 	bl	800c2fe <lwip_htonl>
 80121fe:	4603      	mov	r3, r0
 8012200:	60a3      	str	r3, [r4, #8]
 8012202:	68a3      	ldr	r3, [r4, #8]
 8012204:	4a3f      	ldr	r2, [pc, #252]	; (8012304 <tcp_input+0x2b0>)
 8012206:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012208:	4b35      	ldr	r3, [pc, #212]	; (80122e0 <tcp_input+0x28c>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	89db      	ldrh	r3, [r3, #14]
 801220e:	b29a      	uxth	r2, r3
 8012210:	4b33      	ldr	r3, [pc, #204]	; (80122e0 <tcp_input+0x28c>)
 8012212:	681c      	ldr	r4, [r3, #0]
 8012214:	4610      	mov	r0, r2
 8012216:	f7fa f85d 	bl	800c2d4 <lwip_htons>
 801221a:	4603      	mov	r3, r0
 801221c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801221e:	4b30      	ldr	r3, [pc, #192]	; (80122e0 <tcp_input+0x28c>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	899b      	ldrh	r3, [r3, #12]
 8012224:	b29b      	uxth	r3, r3
 8012226:	4618      	mov	r0, r3
 8012228:	f7fa f854 	bl	800c2d4 <lwip_htons>
 801222c:	4603      	mov	r3, r0
 801222e:	b2db      	uxtb	r3, r3
 8012230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012234:	b2da      	uxtb	r2, r3
 8012236:	4b34      	ldr	r3, [pc, #208]	; (8012308 <tcp_input+0x2b4>)
 8012238:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	891a      	ldrh	r2, [r3, #8]
 801223e:	4b33      	ldr	r3, [pc, #204]	; (801230c <tcp_input+0x2b8>)
 8012240:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012242:	4b31      	ldr	r3, [pc, #196]	; (8012308 <tcp_input+0x2b4>)
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	f003 0303 	and.w	r3, r3, #3
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00c      	beq.n	8012268 <tcp_input+0x214>
    tcplen++;
 801224e:	4b2f      	ldr	r3, [pc, #188]	; (801230c <tcp_input+0x2b8>)
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	3301      	adds	r3, #1
 8012254:	b29a      	uxth	r2, r3
 8012256:	4b2d      	ldr	r3, [pc, #180]	; (801230c <tcp_input+0x2b8>)
 8012258:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	891a      	ldrh	r2, [r3, #8]
 801225e:	4b2b      	ldr	r3, [pc, #172]	; (801230c <tcp_input+0x2b8>)
 8012260:	881b      	ldrh	r3, [r3, #0]
 8012262:	429a      	cmp	r2, r3
 8012264:	f200 82d7 	bhi.w	8012816 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012268:	2300      	movs	r3, #0
 801226a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801226c:	4b28      	ldr	r3, [pc, #160]	; (8012310 <tcp_input+0x2bc>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	61fb      	str	r3, [r7, #28]
 8012272:	e09d      	b.n	80123b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012274:	69fb      	ldr	r3, [r7, #28]
 8012276:	7d1b      	ldrb	r3, [r3, #20]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d105      	bne.n	8012288 <tcp_input+0x234>
 801227c:	4b15      	ldr	r3, [pc, #84]	; (80122d4 <tcp_input+0x280>)
 801227e:	22fb      	movs	r2, #251	; 0xfb
 8012280:	4924      	ldr	r1, [pc, #144]	; (8012314 <tcp_input+0x2c0>)
 8012282:	4816      	ldr	r0, [pc, #88]	; (80122dc <tcp_input+0x288>)
 8012284:	f004 fcfa 	bl	8016c7c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012288:	69fb      	ldr	r3, [r7, #28]
 801228a:	7d1b      	ldrb	r3, [r3, #20]
 801228c:	2b0a      	cmp	r3, #10
 801228e:	d105      	bne.n	801229c <tcp_input+0x248>
 8012290:	4b10      	ldr	r3, [pc, #64]	; (80122d4 <tcp_input+0x280>)
 8012292:	22fc      	movs	r2, #252	; 0xfc
 8012294:	4920      	ldr	r1, [pc, #128]	; (8012318 <tcp_input+0x2c4>)
 8012296:	4811      	ldr	r0, [pc, #68]	; (80122dc <tcp_input+0x288>)
 8012298:	f004 fcf0 	bl	8016c7c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	7d1b      	ldrb	r3, [r3, #20]
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d105      	bne.n	80122b0 <tcp_input+0x25c>
 80122a4:	4b0b      	ldr	r3, [pc, #44]	; (80122d4 <tcp_input+0x280>)
 80122a6:	22fd      	movs	r2, #253	; 0xfd
 80122a8:	491c      	ldr	r1, [pc, #112]	; (801231c <tcp_input+0x2c8>)
 80122aa:	480c      	ldr	r0, [pc, #48]	; (80122dc <tcp_input+0x288>)
 80122ac:	f004 fce6 	bl	8016c7c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	7a1b      	ldrb	r3, [r3, #8]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d033      	beq.n	8012320 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	7a1a      	ldrb	r2, [r3, #8]
 80122bc:	4b09      	ldr	r3, [pc, #36]	; (80122e4 <tcp_input+0x290>)
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122c4:	3301      	adds	r3, #1
 80122c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d029      	beq.n	8012320 <tcp_input+0x2cc>
      prev = pcb;
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	61bb      	str	r3, [r7, #24]
      continue;
 80122d0:	e06b      	b.n	80123aa <tcp_input+0x356>
 80122d2:	bf00      	nop
 80122d4:	0801963c 	.word	0x0801963c
 80122d8:	080196a0 	.word	0x080196a0
 80122dc:	080196b8 	.word	0x080196b8
 80122e0:	24004b1c 	.word	0x24004b1c
 80122e4:	24005288 	.word	0x24005288
 80122e8:	24004b20 	.word	0x24004b20
 80122ec:	24004b24 	.word	0x24004b24
 80122f0:	24004b22 	.word	0x24004b22
 80122f4:	080196e0 	.word	0x080196e0
 80122f8:	080196f0 	.word	0x080196f0
 80122fc:	080196fc 	.word	0x080196fc
 8012300:	24004b2c 	.word	0x24004b2c
 8012304:	24004b30 	.word	0x24004b30
 8012308:	24004b38 	.word	0x24004b38
 801230c:	24004b36 	.word	0x24004b36
 8012310:	24008350 	.word	0x24008350
 8012314:	0801971c 	.word	0x0801971c
 8012318:	08019744 	.word	0x08019744
 801231c:	08019770 	.word	0x08019770
    }

    if (pcb->remote_port == tcphdr->src &&
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	8b1a      	ldrh	r2, [r3, #24]
 8012324:	4b94      	ldr	r3, [pc, #592]	; (8012578 <tcp_input+0x524>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	881b      	ldrh	r3, [r3, #0]
 801232a:	b29b      	uxth	r3, r3
 801232c:	429a      	cmp	r2, r3
 801232e:	d13a      	bne.n	80123a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012330:	69fb      	ldr	r3, [r7, #28]
 8012332:	8ada      	ldrh	r2, [r3, #22]
 8012334:	4b90      	ldr	r3, [pc, #576]	; (8012578 <tcp_input+0x524>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	885b      	ldrh	r3, [r3, #2]
 801233a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801233c:	429a      	cmp	r2, r3
 801233e:	d132      	bne.n	80123a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	685a      	ldr	r2, [r3, #4]
 8012344:	4b8d      	ldr	r3, [pc, #564]	; (801257c <tcp_input+0x528>)
 8012346:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012348:	429a      	cmp	r2, r3
 801234a:	d12c      	bne.n	80123a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	4b8a      	ldr	r3, [pc, #552]	; (801257c <tcp_input+0x528>)
 8012352:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012354:	429a      	cmp	r2, r3
 8012356:	d126      	bne.n	80123a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	69fa      	ldr	r2, [r7, #28]
 801235e:	429a      	cmp	r2, r3
 8012360:	d106      	bne.n	8012370 <tcp_input+0x31c>
 8012362:	4b87      	ldr	r3, [pc, #540]	; (8012580 <tcp_input+0x52c>)
 8012364:	f240 120d 	movw	r2, #269	; 0x10d
 8012368:	4986      	ldr	r1, [pc, #536]	; (8012584 <tcp_input+0x530>)
 801236a:	4887      	ldr	r0, [pc, #540]	; (8012588 <tcp_input+0x534>)
 801236c:	f004 fc86 	bl	8016c7c <iprintf>
      if (prev != NULL) {
 8012370:	69bb      	ldr	r3, [r7, #24]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d00a      	beq.n	801238c <tcp_input+0x338>
        prev->next = pcb->next;
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	68da      	ldr	r2, [r3, #12]
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801237e:	4b83      	ldr	r3, [pc, #524]	; (801258c <tcp_input+0x538>)
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012386:	4a81      	ldr	r2, [pc, #516]	; (801258c <tcp_input+0x538>)
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	69fa      	ldr	r2, [r7, #28]
 8012392:	429a      	cmp	r2, r3
 8012394:	d111      	bne.n	80123ba <tcp_input+0x366>
 8012396:	4b7a      	ldr	r3, [pc, #488]	; (8012580 <tcp_input+0x52c>)
 8012398:	f240 1215 	movw	r2, #277	; 0x115
 801239c:	497c      	ldr	r1, [pc, #496]	; (8012590 <tcp_input+0x53c>)
 801239e:	487a      	ldr	r0, [pc, #488]	; (8012588 <tcp_input+0x534>)
 80123a0:	f004 fc6c 	bl	8016c7c <iprintf>
      break;
 80123a4:	e009      	b.n	80123ba <tcp_input+0x366>
    }
    prev = pcb;
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	61fb      	str	r3, [r7, #28]
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f47f af5e 	bne.w	8012274 <tcp_input+0x220>
 80123b8:	e000      	b.n	80123bc <tcp_input+0x368>
      break;
 80123ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f040 8095 	bne.w	80124ee <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80123c4:	4b73      	ldr	r3, [pc, #460]	; (8012594 <tcp_input+0x540>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	61fb      	str	r3, [r7, #28]
 80123ca:	e03f      	b.n	801244c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	7d1b      	ldrb	r3, [r3, #20]
 80123d0:	2b0a      	cmp	r3, #10
 80123d2:	d006      	beq.n	80123e2 <tcp_input+0x38e>
 80123d4:	4b6a      	ldr	r3, [pc, #424]	; (8012580 <tcp_input+0x52c>)
 80123d6:	f240 121f 	movw	r2, #287	; 0x11f
 80123da:	496f      	ldr	r1, [pc, #444]	; (8012598 <tcp_input+0x544>)
 80123dc:	486a      	ldr	r0, [pc, #424]	; (8012588 <tcp_input+0x534>)
 80123de:	f004 fc4d 	bl	8016c7c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	7a1b      	ldrb	r3, [r3, #8]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d009      	beq.n	80123fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	7a1a      	ldrb	r2, [r3, #8]
 80123ee:	4b63      	ldr	r3, [pc, #396]	; (801257c <tcp_input+0x528>)
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80123f6:	3301      	adds	r3, #1
 80123f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d122      	bne.n	8012444 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	8b1a      	ldrh	r2, [r3, #24]
 8012402:	4b5d      	ldr	r3, [pc, #372]	; (8012578 <tcp_input+0x524>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	881b      	ldrh	r3, [r3, #0]
 8012408:	b29b      	uxth	r3, r3
 801240a:	429a      	cmp	r2, r3
 801240c:	d11b      	bne.n	8012446 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	8ada      	ldrh	r2, [r3, #22]
 8012412:	4b59      	ldr	r3, [pc, #356]	; (8012578 <tcp_input+0x524>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	885b      	ldrh	r3, [r3, #2]
 8012418:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801241a:	429a      	cmp	r2, r3
 801241c:	d113      	bne.n	8012446 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	685a      	ldr	r2, [r3, #4]
 8012422:	4b56      	ldr	r3, [pc, #344]	; (801257c <tcp_input+0x528>)
 8012424:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012426:	429a      	cmp	r2, r3
 8012428:	d10d      	bne.n	8012446 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	4b53      	ldr	r3, [pc, #332]	; (801257c <tcp_input+0x528>)
 8012430:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012432:	429a      	cmp	r2, r3
 8012434:	d107      	bne.n	8012446 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012436:	69f8      	ldr	r0, [r7, #28]
 8012438:	f000 fb52 	bl	8012ae0 <tcp_timewait_input>
        }
        pbuf_free(p);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f7fd fedf 	bl	8010200 <pbuf_free>
        return;
 8012442:	e1ee      	b.n	8012822 <tcp_input+0x7ce>
        continue;
 8012444:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	61fb      	str	r3, [r7, #28]
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1bc      	bne.n	80123cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012452:	2300      	movs	r3, #0
 8012454:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012456:	4b51      	ldr	r3, [pc, #324]	; (801259c <tcp_input+0x548>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	617b      	str	r3, [r7, #20]
 801245c:	e02a      	b.n	80124b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	7a1b      	ldrb	r3, [r3, #8]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00c      	beq.n	8012480 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	7a1a      	ldrb	r2, [r3, #8]
 801246a:	4b44      	ldr	r3, [pc, #272]	; (801257c <tcp_input+0x528>)
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012472:	3301      	adds	r3, #1
 8012474:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012476:	429a      	cmp	r2, r3
 8012478:	d002      	beq.n	8012480 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	61bb      	str	r3, [r7, #24]
        continue;
 801247e:	e016      	b.n	80124ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	8ada      	ldrh	r2, [r3, #22]
 8012484:	4b3c      	ldr	r3, [pc, #240]	; (8012578 <tcp_input+0x524>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	885b      	ldrh	r3, [r3, #2]
 801248a:	b29b      	uxth	r3, r3
 801248c:	429a      	cmp	r2, r3
 801248e:	d10c      	bne.n	80124aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	681a      	ldr	r2, [r3, #0]
 8012494:	4b39      	ldr	r3, [pc, #228]	; (801257c <tcp_input+0x528>)
 8012496:	695b      	ldr	r3, [r3, #20]
 8012498:	429a      	cmp	r2, r3
 801249a:	d00f      	beq.n	80124bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00d      	beq.n	80124be <tcp_input+0x46a>
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d009      	beq.n	80124be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	617b      	str	r3, [r7, #20]
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1d1      	bne.n	801245e <tcp_input+0x40a>
 80124ba:	e000      	b.n	80124be <tcp_input+0x46a>
            break;
 80124bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d014      	beq.n	80124ee <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00a      	beq.n	80124e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	68da      	ldr	r2, [r3, #12]
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80124d2:	4b32      	ldr	r3, [pc, #200]	; (801259c <tcp_input+0x548>)
 80124d4:	681a      	ldr	r2, [r3, #0]
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80124da:	4a30      	ldr	r2, [pc, #192]	; (801259c <tcp_input+0x548>)
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80124e0:	6978      	ldr	r0, [r7, #20]
 80124e2:	f000 f9ff 	bl	80128e4 <tcp_listen_input>
      }
      pbuf_free(p);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7fd fe8a 	bl	8010200 <pbuf_free>
      return;
 80124ec:	e199      	b.n	8012822 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	f000 8160 	beq.w	80127b6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80124f6:	4b2a      	ldr	r3, [pc, #168]	; (80125a0 <tcp_input+0x54c>)
 80124f8:	2200      	movs	r2, #0
 80124fa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	891a      	ldrh	r2, [r3, #8]
 8012500:	4b27      	ldr	r3, [pc, #156]	; (80125a0 <tcp_input+0x54c>)
 8012502:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012504:	4a26      	ldr	r2, [pc, #152]	; (80125a0 <tcp_input+0x54c>)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801250a:	4b1b      	ldr	r3, [pc, #108]	; (8012578 <tcp_input+0x524>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	4a24      	ldr	r2, [pc, #144]	; (80125a0 <tcp_input+0x54c>)
 8012510:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012512:	4b24      	ldr	r3, [pc, #144]	; (80125a4 <tcp_input+0x550>)
 8012514:	2200      	movs	r2, #0
 8012516:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012518:	4b23      	ldr	r3, [pc, #140]	; (80125a8 <tcp_input+0x554>)
 801251a:	2200      	movs	r2, #0
 801251c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801251e:	4b23      	ldr	r3, [pc, #140]	; (80125ac <tcp_input+0x558>)
 8012520:	2200      	movs	r2, #0
 8012522:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012524:	4b22      	ldr	r3, [pc, #136]	; (80125b0 <tcp_input+0x55c>)
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	f003 0308 	and.w	r3, r3, #8
 801252c:	2b00      	cmp	r3, #0
 801252e:	d006      	beq.n	801253e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	7b5b      	ldrb	r3, [r3, #13]
 8012534:	f043 0301 	orr.w	r3, r3, #1
 8012538:	b2da      	uxtb	r2, r3
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801253e:	69fb      	ldr	r3, [r7, #28]
 8012540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012542:	2b00      	cmp	r3, #0
 8012544:	d038      	beq.n	80125b8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012546:	69f8      	ldr	r0, [r7, #28]
 8012548:	f7ff f940 	bl	80117cc <tcp_process_refused_data>
 801254c:	4603      	mov	r3, r0
 801254e:	f113 0f0d 	cmn.w	r3, #13
 8012552:	d007      	beq.n	8012564 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012558:	2b00      	cmp	r3, #0
 801255a:	d02d      	beq.n	80125b8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801255c:	4b15      	ldr	r3, [pc, #84]	; (80125b4 <tcp_input+0x560>)
 801255e:	881b      	ldrh	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d029      	beq.n	80125b8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012568:	2b00      	cmp	r3, #0
 801256a:	f040 8104 	bne.w	8012776 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801256e:	69f8      	ldr	r0, [r7, #28]
 8012570:	f003 f9ce 	bl	8015910 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012574:	e0ff      	b.n	8012776 <tcp_input+0x722>
 8012576:	bf00      	nop
 8012578:	24004b1c 	.word	0x24004b1c
 801257c:	24005288 	.word	0x24005288
 8012580:	0801963c 	.word	0x0801963c
 8012584:	08019798 	.word	0x08019798
 8012588:	080196b8 	.word	0x080196b8
 801258c:	24008350 	.word	0x24008350
 8012590:	080197c4 	.word	0x080197c4
 8012594:	24008360 	.word	0x24008360
 8012598:	080197f0 	.word	0x080197f0
 801259c:	24008358 	.word	0x24008358
 80125a0:	24004b0c 	.word	0x24004b0c
 80125a4:	24004b3c 	.word	0x24004b3c
 80125a8:	24004b39 	.word	0x24004b39
 80125ac:	24004b34 	.word	0x24004b34
 80125b0:	24004b38 	.word	0x24004b38
 80125b4:	24004b36 	.word	0x24004b36
      }
    }
    tcp_input_pcb = pcb;
 80125b8:	4a9b      	ldr	r2, [pc, #620]	; (8012828 <tcp_input+0x7d4>)
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80125be:	69f8      	ldr	r0, [r7, #28]
 80125c0:	f000 fb0a 	bl	8012bd8 <tcp_process>
 80125c4:	4603      	mov	r3, r0
 80125c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80125c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125cc:	f113 0f0d 	cmn.w	r3, #13
 80125d0:	f000 80d3 	beq.w	801277a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80125d4:	4b95      	ldr	r3, [pc, #596]	; (801282c <tcp_input+0x7d8>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	f003 0308 	and.w	r3, r3, #8
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d015      	beq.n	801260c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d008      	beq.n	80125fc <tcp_input+0x5a8>
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125f0:	69fa      	ldr	r2, [r7, #28]
 80125f2:	6912      	ldr	r2, [r2, #16]
 80125f4:	f06f 010d 	mvn.w	r1, #13
 80125f8:	4610      	mov	r0, r2
 80125fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80125fc:	69f9      	ldr	r1, [r7, #28]
 80125fe:	488c      	ldr	r0, [pc, #560]	; (8012830 <tcp_input+0x7dc>)
 8012600:	f7ff fbb0 	bl	8011d64 <tcp_pcb_remove>
        tcp_free(pcb);
 8012604:	69f8      	ldr	r0, [r7, #28]
 8012606:	f7fe f9a9 	bl	801095c <tcp_free>
 801260a:	e0c1      	b.n	8012790 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801260c:	2300      	movs	r3, #0
 801260e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012610:	4b88      	ldr	r3, [pc, #544]	; (8012834 <tcp_input+0x7e0>)
 8012612:	881b      	ldrh	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d01d      	beq.n	8012654 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012618:	4b86      	ldr	r3, [pc, #536]	; (8012834 <tcp_input+0x7e0>)
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00a      	beq.n	801263e <tcp_input+0x5ea>
 8012628:	69fb      	ldr	r3, [r7, #28]
 801262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801262e:	69fa      	ldr	r2, [r7, #28]
 8012630:	6910      	ldr	r0, [r2, #16]
 8012632:	89fa      	ldrh	r2, [r7, #14]
 8012634:	69f9      	ldr	r1, [r7, #28]
 8012636:	4798      	blx	r3
 8012638:	4603      	mov	r3, r0
 801263a:	74fb      	strb	r3, [r7, #19]
 801263c:	e001      	b.n	8012642 <tcp_input+0x5ee>
 801263e:	2300      	movs	r3, #0
 8012640:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012646:	f113 0f0d 	cmn.w	r3, #13
 801264a:	f000 8098 	beq.w	801277e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801264e:	4b79      	ldr	r3, [pc, #484]	; (8012834 <tcp_input+0x7e0>)
 8012650:	2200      	movs	r2, #0
 8012652:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012654:	69f8      	ldr	r0, [r7, #28]
 8012656:	f000 f905 	bl	8012864 <tcp_input_delayed_close>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	f040 8090 	bne.w	8012782 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012662:	4b75      	ldr	r3, [pc, #468]	; (8012838 <tcp_input+0x7e4>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d041      	beq.n	80126ee <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801266e:	2b00      	cmp	r3, #0
 8012670:	d006      	beq.n	8012680 <tcp_input+0x62c>
 8012672:	4b72      	ldr	r3, [pc, #456]	; (801283c <tcp_input+0x7e8>)
 8012674:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012678:	4971      	ldr	r1, [pc, #452]	; (8012840 <tcp_input+0x7ec>)
 801267a:	4872      	ldr	r0, [pc, #456]	; (8012844 <tcp_input+0x7f0>)
 801267c:	f004 fafe 	bl	8016c7c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	8b5b      	ldrh	r3, [r3, #26]
 8012684:	f003 0310 	and.w	r3, r3, #16
 8012688:	2b00      	cmp	r3, #0
 801268a:	d008      	beq.n	801269e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801268c:	4b6a      	ldr	r3, [pc, #424]	; (8012838 <tcp_input+0x7e4>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4618      	mov	r0, r3
 8012692:	f7fd fdb5 	bl	8010200 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012696:	69f8      	ldr	r0, [r7, #28]
 8012698:	f7fe fc40 	bl	8010f1c <tcp_abort>
            goto aborted;
 801269c:	e078      	b.n	8012790 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d00c      	beq.n	80126c2 <tcp_input+0x66e>
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	6918      	ldr	r0, [r3, #16]
 80126b2:	4b61      	ldr	r3, [pc, #388]	; (8012838 <tcp_input+0x7e4>)
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	2300      	movs	r3, #0
 80126b8:	69f9      	ldr	r1, [r7, #28]
 80126ba:	47a0      	blx	r4
 80126bc:	4603      	mov	r3, r0
 80126be:	74fb      	strb	r3, [r7, #19]
 80126c0:	e008      	b.n	80126d4 <tcp_input+0x680>
 80126c2:	4b5d      	ldr	r3, [pc, #372]	; (8012838 <tcp_input+0x7e4>)
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	2300      	movs	r3, #0
 80126c8:	69f9      	ldr	r1, [r7, #28]
 80126ca:	2000      	movs	r0, #0
 80126cc:	f7ff f952 	bl	8011974 <tcp_recv_null>
 80126d0:	4603      	mov	r3, r0
 80126d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80126d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80126d8:	f113 0f0d 	cmn.w	r3, #13
 80126dc:	d053      	beq.n	8012786 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80126de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d003      	beq.n	80126ee <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80126e6:	4b54      	ldr	r3, [pc, #336]	; (8012838 <tcp_input+0x7e4>)
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80126ee:	4b4f      	ldr	r3, [pc, #316]	; (801282c <tcp_input+0x7d8>)
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	f003 0320 	and.w	r3, r3, #32
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d030      	beq.n	801275c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d009      	beq.n	8012716 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012706:	7b5a      	ldrb	r2, [r3, #13]
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801270c:	f042 0220 	orr.w	r2, r2, #32
 8012710:	b2d2      	uxtb	r2, r2
 8012712:	735a      	strb	r2, [r3, #13]
 8012714:	e022      	b.n	801275c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801271a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801271e:	d005      	beq.n	801272c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012724:	3301      	adds	r3, #1
 8012726:	b29a      	uxth	r2, r3
 8012728:	69fb      	ldr	r3, [r7, #28]
 801272a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00b      	beq.n	801274e <tcp_input+0x6fa>
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	6918      	ldr	r0, [r3, #16]
 8012740:	2300      	movs	r3, #0
 8012742:	2200      	movs	r2, #0
 8012744:	69f9      	ldr	r1, [r7, #28]
 8012746:	47a0      	blx	r4
 8012748:	4603      	mov	r3, r0
 801274a:	74fb      	strb	r3, [r7, #19]
 801274c:	e001      	b.n	8012752 <tcp_input+0x6fe>
 801274e:	2300      	movs	r3, #0
 8012750:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012752:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012756:	f113 0f0d 	cmn.w	r3, #13
 801275a:	d016      	beq.n	801278a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801275c:	4b32      	ldr	r3, [pc, #200]	; (8012828 <tcp_input+0x7d4>)
 801275e:	2200      	movs	r2, #0
 8012760:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012762:	69f8      	ldr	r0, [r7, #28]
 8012764:	f000 f87e 	bl	8012864 <tcp_input_delayed_close>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10f      	bne.n	801278e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801276e:	69f8      	ldr	r0, [r7, #28]
 8012770:	f002 fab6 	bl	8014ce0 <tcp_output>
 8012774:	e00c      	b.n	8012790 <tcp_input+0x73c>
        goto aborted;
 8012776:	bf00      	nop
 8012778:	e00a      	b.n	8012790 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801277a:	bf00      	nop
 801277c:	e008      	b.n	8012790 <tcp_input+0x73c>
              goto aborted;
 801277e:	bf00      	nop
 8012780:	e006      	b.n	8012790 <tcp_input+0x73c>
          goto aborted;
 8012782:	bf00      	nop
 8012784:	e004      	b.n	8012790 <tcp_input+0x73c>
            goto aborted;
 8012786:	bf00      	nop
 8012788:	e002      	b.n	8012790 <tcp_input+0x73c>
              goto aborted;
 801278a:	bf00      	nop
 801278c:	e000      	b.n	8012790 <tcp_input+0x73c>
          goto aborted;
 801278e:	bf00      	nop
    tcp_input_pcb = NULL;
 8012790:	4b25      	ldr	r3, [pc, #148]	; (8012828 <tcp_input+0x7d4>)
 8012792:	2200      	movs	r2, #0
 8012794:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012796:	4b28      	ldr	r3, [pc, #160]	; (8012838 <tcp_input+0x7e4>)
 8012798:	2200      	movs	r2, #0
 801279a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801279c:	4b2a      	ldr	r3, [pc, #168]	; (8012848 <tcp_input+0x7f4>)
 801279e:	685b      	ldr	r3, [r3, #4]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d03d      	beq.n	8012820 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80127a4:	4b28      	ldr	r3, [pc, #160]	; (8012848 <tcp_input+0x7f4>)
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7fd fd29 	bl	8010200 <pbuf_free>
      inseg.p = NULL;
 80127ae:	4b26      	ldr	r3, [pc, #152]	; (8012848 <tcp_input+0x7f4>)
 80127b0:	2200      	movs	r2, #0
 80127b2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80127b4:	e034      	b.n	8012820 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80127b6:	4b25      	ldr	r3, [pc, #148]	; (801284c <tcp_input+0x7f8>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	899b      	ldrh	r3, [r3, #12]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	4618      	mov	r0, r3
 80127c0:	f7f9 fd88 	bl	800c2d4 <lwip_htons>
 80127c4:	4603      	mov	r3, r0
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	f003 0304 	and.w	r3, r3, #4
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d118      	bne.n	8012802 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127d0:	4b1f      	ldr	r3, [pc, #124]	; (8012850 <tcp_input+0x7fc>)
 80127d2:	6819      	ldr	r1, [r3, #0]
 80127d4:	4b1f      	ldr	r3, [pc, #124]	; (8012854 <tcp_input+0x800>)
 80127d6:	881b      	ldrh	r3, [r3, #0]
 80127d8:	461a      	mov	r2, r3
 80127da:	4b1f      	ldr	r3, [pc, #124]	; (8012858 <tcp_input+0x804>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127e0:	4b1a      	ldr	r3, [pc, #104]	; (801284c <tcp_input+0x7f8>)
 80127e2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127e4:	885b      	ldrh	r3, [r3, #2]
 80127e6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127e8:	4a18      	ldr	r2, [pc, #96]	; (801284c <tcp_input+0x7f8>)
 80127ea:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127ec:	8812      	ldrh	r2, [r2, #0]
 80127ee:	b292      	uxth	r2, r2
 80127f0:	9202      	str	r2, [sp, #8]
 80127f2:	9301      	str	r3, [sp, #4]
 80127f4:	4b19      	ldr	r3, [pc, #100]	; (801285c <tcp_input+0x808>)
 80127f6:	9300      	str	r3, [sp, #0]
 80127f8:	4b19      	ldr	r3, [pc, #100]	; (8012860 <tcp_input+0x80c>)
 80127fa:	4602      	mov	r2, r0
 80127fc:	2000      	movs	r0, #0
 80127fe:	f003 f835 	bl	801586c <tcp_rst>
    pbuf_free(p);
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7fd fcfc 	bl	8010200 <pbuf_free>
  return;
 8012808:	e00a      	b.n	8012820 <tcp_input+0x7cc>
    goto dropped;
 801280a:	bf00      	nop
 801280c:	e004      	b.n	8012818 <tcp_input+0x7c4>
dropped:
 801280e:	bf00      	nop
 8012810:	e002      	b.n	8012818 <tcp_input+0x7c4>
      goto dropped;
 8012812:	bf00      	nop
 8012814:	e000      	b.n	8012818 <tcp_input+0x7c4>
      goto dropped;
 8012816:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7fd fcf1 	bl	8010200 <pbuf_free>
 801281e:	e000      	b.n	8012822 <tcp_input+0x7ce>
  return;
 8012820:	bf00      	nop
}
 8012822:	3724      	adds	r7, #36	; 0x24
 8012824:	46bd      	mov	sp, r7
 8012826:	bd90      	pop	{r4, r7, pc}
 8012828:	24008364 	.word	0x24008364
 801282c:	24004b39 	.word	0x24004b39
 8012830:	24008350 	.word	0x24008350
 8012834:	24004b34 	.word	0x24004b34
 8012838:	24004b3c 	.word	0x24004b3c
 801283c:	0801963c 	.word	0x0801963c
 8012840:	08019820 	.word	0x08019820
 8012844:	080196b8 	.word	0x080196b8
 8012848:	24004b0c 	.word	0x24004b0c
 801284c:	24004b1c 	.word	0x24004b1c
 8012850:	24004b30 	.word	0x24004b30
 8012854:	24004b36 	.word	0x24004b36
 8012858:	24004b2c 	.word	0x24004b2c
 801285c:	24005298 	.word	0x24005298
 8012860:	2400529c 	.word	0x2400529c

08012864 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d106      	bne.n	8012880 <tcp_input_delayed_close+0x1c>
 8012872:	4b17      	ldr	r3, [pc, #92]	; (80128d0 <tcp_input_delayed_close+0x6c>)
 8012874:	f240 225a 	movw	r2, #602	; 0x25a
 8012878:	4916      	ldr	r1, [pc, #88]	; (80128d4 <tcp_input_delayed_close+0x70>)
 801287a:	4817      	ldr	r0, [pc, #92]	; (80128d8 <tcp_input_delayed_close+0x74>)
 801287c:	f004 f9fe 	bl	8016c7c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012880:	4b16      	ldr	r3, [pc, #88]	; (80128dc <tcp_input_delayed_close+0x78>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	f003 0310 	and.w	r3, r3, #16
 8012888:	2b00      	cmp	r3, #0
 801288a:	d01c      	beq.n	80128c6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	8b5b      	ldrh	r3, [r3, #26]
 8012890:	f003 0310 	and.w	r3, r3, #16
 8012894:	2b00      	cmp	r3, #0
 8012896:	d10d      	bne.n	80128b4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d008      	beq.n	80128b4 <tcp_input_delayed_close+0x50>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	6912      	ldr	r2, [r2, #16]
 80128ac:	f06f 010e 	mvn.w	r1, #14
 80128b0:	4610      	mov	r0, r2
 80128b2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80128b4:	6879      	ldr	r1, [r7, #4]
 80128b6:	480a      	ldr	r0, [pc, #40]	; (80128e0 <tcp_input_delayed_close+0x7c>)
 80128b8:	f7ff fa54 	bl	8011d64 <tcp_pcb_remove>
    tcp_free(pcb);
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f7fe f84d 	bl	801095c <tcp_free>
    return 1;
 80128c2:	2301      	movs	r3, #1
 80128c4:	e000      	b.n	80128c8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	0801963c 	.word	0x0801963c
 80128d4:	0801983c 	.word	0x0801983c
 80128d8:	080196b8 	.word	0x080196b8
 80128dc:	24004b39 	.word	0x24004b39
 80128e0:	24008350 	.word	0x24008350

080128e4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80128e4:	b590      	push	{r4, r7, lr}
 80128e6:	b08b      	sub	sp, #44	; 0x2c
 80128e8:	af04      	add	r7, sp, #16
 80128ea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80128ec:	4b6f      	ldr	r3, [pc, #444]	; (8012aac <tcp_listen_input+0x1c8>)
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	f003 0304 	and.w	r3, r3, #4
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f040 80d3 	bne.w	8012aa0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d106      	bne.n	801290e <tcp_listen_input+0x2a>
 8012900:	4b6b      	ldr	r3, [pc, #428]	; (8012ab0 <tcp_listen_input+0x1cc>)
 8012902:	f240 2281 	movw	r2, #641	; 0x281
 8012906:	496b      	ldr	r1, [pc, #428]	; (8012ab4 <tcp_listen_input+0x1d0>)
 8012908:	486b      	ldr	r0, [pc, #428]	; (8012ab8 <tcp_listen_input+0x1d4>)
 801290a:	f004 f9b7 	bl	8016c7c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801290e:	4b67      	ldr	r3, [pc, #412]	; (8012aac <tcp_listen_input+0x1c8>)
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	f003 0310 	and.w	r3, r3, #16
 8012916:	2b00      	cmp	r3, #0
 8012918:	d019      	beq.n	801294e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801291a:	4b68      	ldr	r3, [pc, #416]	; (8012abc <tcp_listen_input+0x1d8>)
 801291c:	6819      	ldr	r1, [r3, #0]
 801291e:	4b68      	ldr	r3, [pc, #416]	; (8012ac0 <tcp_listen_input+0x1dc>)
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	461a      	mov	r2, r3
 8012924:	4b67      	ldr	r3, [pc, #412]	; (8012ac4 <tcp_listen_input+0x1e0>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801292a:	4b67      	ldr	r3, [pc, #412]	; (8012ac8 <tcp_listen_input+0x1e4>)
 801292c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801292e:	885b      	ldrh	r3, [r3, #2]
 8012930:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012932:	4a65      	ldr	r2, [pc, #404]	; (8012ac8 <tcp_listen_input+0x1e4>)
 8012934:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012936:	8812      	ldrh	r2, [r2, #0]
 8012938:	b292      	uxth	r2, r2
 801293a:	9202      	str	r2, [sp, #8]
 801293c:	9301      	str	r3, [sp, #4]
 801293e:	4b63      	ldr	r3, [pc, #396]	; (8012acc <tcp_listen_input+0x1e8>)
 8012940:	9300      	str	r3, [sp, #0]
 8012942:	4b63      	ldr	r3, [pc, #396]	; (8012ad0 <tcp_listen_input+0x1ec>)
 8012944:	4602      	mov	r2, r0
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f002 ff90 	bl	801586c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801294c:	e0aa      	b.n	8012aa4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801294e:	4b57      	ldr	r3, [pc, #348]	; (8012aac <tcp_listen_input+0x1c8>)
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	f003 0302 	and.w	r3, r3, #2
 8012956:	2b00      	cmp	r3, #0
 8012958:	f000 80a4 	beq.w	8012aa4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	7d5b      	ldrb	r3, [r3, #21]
 8012960:	4618      	mov	r0, r3
 8012962:	f7ff f92b 	bl	8011bbc <tcp_alloc>
 8012966:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d111      	bne.n	8012992 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	699b      	ldr	r3, [r3, #24]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d00a      	beq.n	801298c <tcp_listen_input+0xa8>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	699b      	ldr	r3, [r3, #24]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	6910      	ldr	r0, [r2, #16]
 801297e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012982:	2100      	movs	r1, #0
 8012984:	4798      	blx	r3
 8012986:	4603      	mov	r3, r0
 8012988:	73bb      	strb	r3, [r7, #14]
      return;
 801298a:	e08c      	b.n	8012aa6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801298c:	23f0      	movs	r3, #240	; 0xf0
 801298e:	73bb      	strb	r3, [r7, #14]
      return;
 8012990:	e089      	b.n	8012aa6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012992:	4b50      	ldr	r3, [pc, #320]	; (8012ad4 <tcp_listen_input+0x1f0>)
 8012994:	695a      	ldr	r2, [r3, #20]
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801299a:	4b4e      	ldr	r3, [pc, #312]	; (8012ad4 <tcp_listen_input+0x1f0>)
 801299c:	691a      	ldr	r2, [r3, #16]
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	8ada      	ldrh	r2, [r3, #22]
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80129aa:	4b47      	ldr	r3, [pc, #284]	; (8012ac8 <tcp_listen_input+0x1e4>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	881b      	ldrh	r3, [r3, #0]
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	2203      	movs	r2, #3
 80129ba:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80129bc:	4b41      	ldr	r3, [pc, #260]	; (8012ac4 <tcp_listen_input+0x1e0>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	1c5a      	adds	r2, r3, #1
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80129ce:	6978      	ldr	r0, [r7, #20]
 80129d0:	f7ff fa5c 	bl	8011e8c <tcp_next_iss>
 80129d4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	693a      	ldr	r2, [r7, #16]
 80129da:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	693a      	ldr	r2, [r7, #16]
 80129e0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	693a      	ldr	r2, [r7, #16]
 80129e6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	693a      	ldr	r2, [r7, #16]
 80129ec:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80129ee:	4b35      	ldr	r3, [pc, #212]	; (8012ac4 <tcp_listen_input+0x1e0>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	1e5a      	subs	r2, r3, #1
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	691a      	ldr	r2, [r3, #16]
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	7a5b      	ldrb	r3, [r3, #9]
 8012a0a:	f003 030c 	and.w	r3, r3, #12
 8012a0e:	b2da      	uxtb	r2, r3
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	7a1a      	ldrb	r2, [r3, #8]
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012a1c:	4b2e      	ldr	r3, [pc, #184]	; (8012ad8 <tcp_listen_input+0x1f4>)
 8012a1e:	681a      	ldr	r2, [r3, #0]
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	60da      	str	r2, [r3, #12]
 8012a24:	4a2c      	ldr	r2, [pc, #176]	; (8012ad8 <tcp_listen_input+0x1f4>)
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	6013      	str	r3, [r2, #0]
 8012a2a:	f003 fa7f 	bl	8015f2c <tcp_timer_needed>
 8012a2e:	4b2b      	ldr	r3, [pc, #172]	; (8012adc <tcp_listen_input+0x1f8>)
 8012a30:	2201      	movs	r2, #1
 8012a32:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012a34:	6978      	ldr	r0, [r7, #20]
 8012a36:	f001 fd8f 	bl	8014558 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012a3a:	4b23      	ldr	r3, [pc, #140]	; (8012ac8 <tcp_listen_input+0x1e4>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	89db      	ldrh	r3, [r3, #14]
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	3304      	adds	r3, #4
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fa ff11 	bl	800d884 <ip4_route>
 8012a62:	4601      	mov	r1, r0
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	3304      	adds	r3, #4
 8012a68:	461a      	mov	r2, r3
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f7ff fa34 	bl	8011ed8 <tcp_eff_send_mss_netif>
 8012a70:	4603      	mov	r3, r0
 8012a72:	461a      	mov	r2, r3
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012a78:	2112      	movs	r1, #18
 8012a7a:	6978      	ldr	r0, [r7, #20]
 8012a7c:	f002 f842 	bl	8014b04 <tcp_enqueue_flags>
 8012a80:	4603      	mov	r3, r0
 8012a82:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d004      	beq.n	8012a96 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	6978      	ldr	r0, [r7, #20]
 8012a90:	f7fe f986 	bl	8010da0 <tcp_abandon>
      return;
 8012a94:	e007      	b.n	8012aa6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8012a96:	6978      	ldr	r0, [r7, #20]
 8012a98:	f002 f922 	bl	8014ce0 <tcp_output>
  return;
 8012a9c:	bf00      	nop
 8012a9e:	e001      	b.n	8012aa4 <tcp_listen_input+0x1c0>
    return;
 8012aa0:	bf00      	nop
 8012aa2:	e000      	b.n	8012aa6 <tcp_listen_input+0x1c2>
  return;
 8012aa4:	bf00      	nop
}
 8012aa6:	371c      	adds	r7, #28
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd90      	pop	{r4, r7, pc}
 8012aac:	24004b38 	.word	0x24004b38
 8012ab0:	0801963c 	.word	0x0801963c
 8012ab4:	08019864 	.word	0x08019864
 8012ab8:	080196b8 	.word	0x080196b8
 8012abc:	24004b30 	.word	0x24004b30
 8012ac0:	24004b36 	.word	0x24004b36
 8012ac4:	24004b2c 	.word	0x24004b2c
 8012ac8:	24004b1c 	.word	0x24004b1c
 8012acc:	24005298 	.word	0x24005298
 8012ad0:	2400529c 	.word	0x2400529c
 8012ad4:	24005288 	.word	0x24005288
 8012ad8:	24008350 	.word	0x24008350
 8012adc:	2400834c 	.word	0x2400834c

08012ae0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b086      	sub	sp, #24
 8012ae4:	af04      	add	r7, sp, #16
 8012ae6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012ae8:	4b30      	ldr	r3, [pc, #192]	; (8012bac <tcp_timewait_input+0xcc>)
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	f003 0304 	and.w	r3, r3, #4
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d154      	bne.n	8012b9e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d106      	bne.n	8012b08 <tcp_timewait_input+0x28>
 8012afa:	4b2d      	ldr	r3, [pc, #180]	; (8012bb0 <tcp_timewait_input+0xd0>)
 8012afc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012b00:	492c      	ldr	r1, [pc, #176]	; (8012bb4 <tcp_timewait_input+0xd4>)
 8012b02:	482d      	ldr	r0, [pc, #180]	; (8012bb8 <tcp_timewait_input+0xd8>)
 8012b04:	f004 f8ba 	bl	8016c7c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012b08:	4b28      	ldr	r3, [pc, #160]	; (8012bac <tcp_timewait_input+0xcc>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	f003 0302 	and.w	r3, r3, #2
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d02a      	beq.n	8012b6a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012b14:	4b29      	ldr	r3, [pc, #164]	; (8012bbc <tcp_timewait_input+0xdc>)
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b1c:	1ad3      	subs	r3, r2, r3
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	db2d      	blt.n	8012b7e <tcp_timewait_input+0x9e>
 8012b22:	4b26      	ldr	r3, [pc, #152]	; (8012bbc <tcp_timewait_input+0xdc>)
 8012b24:	681a      	ldr	r2, [r3, #0]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b2a:	6879      	ldr	r1, [r7, #4]
 8012b2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b2e:	440b      	add	r3, r1
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	dc23      	bgt.n	8012b7e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b36:	4b22      	ldr	r3, [pc, #136]	; (8012bc0 <tcp_timewait_input+0xe0>)
 8012b38:	6819      	ldr	r1, [r3, #0]
 8012b3a:	4b22      	ldr	r3, [pc, #136]	; (8012bc4 <tcp_timewait_input+0xe4>)
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	4b1e      	ldr	r3, [pc, #120]	; (8012bbc <tcp_timewait_input+0xdc>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b46:	4b20      	ldr	r3, [pc, #128]	; (8012bc8 <tcp_timewait_input+0xe8>)
 8012b48:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b4a:	885b      	ldrh	r3, [r3, #2]
 8012b4c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b4e:	4a1e      	ldr	r2, [pc, #120]	; (8012bc8 <tcp_timewait_input+0xe8>)
 8012b50:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b52:	8812      	ldrh	r2, [r2, #0]
 8012b54:	b292      	uxth	r2, r2
 8012b56:	9202      	str	r2, [sp, #8]
 8012b58:	9301      	str	r3, [sp, #4]
 8012b5a:	4b1c      	ldr	r3, [pc, #112]	; (8012bcc <tcp_timewait_input+0xec>)
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	4b1c      	ldr	r3, [pc, #112]	; (8012bd0 <tcp_timewait_input+0xf0>)
 8012b60:	4602      	mov	r2, r0
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f002 fe82 	bl	801586c <tcp_rst>
      return;
 8012b68:	e01c      	b.n	8012ba4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8012b6a:	4b10      	ldr	r3, [pc, #64]	; (8012bac <tcp_timewait_input+0xcc>)
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d003      	beq.n	8012b7e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012b76:	4b17      	ldr	r3, [pc, #92]	; (8012bd4 <tcp_timewait_input+0xf4>)
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012b7e:	4b11      	ldr	r3, [pc, #68]	; (8012bc4 <tcp_timewait_input+0xe4>)
 8012b80:	881b      	ldrh	r3, [r3, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d00d      	beq.n	8012ba2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	8b5b      	ldrh	r3, [r3, #26]
 8012b8a:	f043 0302 	orr.w	r3, r3, #2
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f002 f8a3 	bl	8014ce0 <tcp_output>
  }
  return;
 8012b9a:	bf00      	nop
 8012b9c:	e001      	b.n	8012ba2 <tcp_timewait_input+0xc2>
    return;
 8012b9e:	bf00      	nop
 8012ba0:	e000      	b.n	8012ba4 <tcp_timewait_input+0xc4>
  return;
 8012ba2:	bf00      	nop
}
 8012ba4:	3708      	adds	r7, #8
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	24004b38 	.word	0x24004b38
 8012bb0:	0801963c 	.word	0x0801963c
 8012bb4:	08019884 	.word	0x08019884
 8012bb8:	080196b8 	.word	0x080196b8
 8012bbc:	24004b2c 	.word	0x24004b2c
 8012bc0:	24004b30 	.word	0x24004b30
 8012bc4:	24004b36 	.word	0x24004b36
 8012bc8:	24004b1c 	.word	0x24004b1c
 8012bcc:	24005298 	.word	0x24005298
 8012bd0:	2400529c 	.word	0x2400529c
 8012bd4:	24008354 	.word	0x24008354

08012bd8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012bd8:	b590      	push	{r4, r7, lr}
 8012bda:	b08d      	sub	sp, #52	; 0x34
 8012bdc:	af04      	add	r7, sp, #16
 8012bde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012be0:	2300      	movs	r3, #0
 8012be2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012be4:	2300      	movs	r3, #0
 8012be6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d106      	bne.n	8012bfc <tcp_process+0x24>
 8012bee:	4ba5      	ldr	r3, [pc, #660]	; (8012e84 <tcp_process+0x2ac>)
 8012bf0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012bf4:	49a4      	ldr	r1, [pc, #656]	; (8012e88 <tcp_process+0x2b0>)
 8012bf6:	48a5      	ldr	r0, [pc, #660]	; (8012e8c <tcp_process+0x2b4>)
 8012bf8:	f004 f840 	bl	8016c7c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012bfc:	4ba4      	ldr	r3, [pc, #656]	; (8012e90 <tcp_process+0x2b8>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	f003 0304 	and.w	r3, r3, #4
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d04e      	beq.n	8012ca6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	7d1b      	ldrb	r3, [r3, #20]
 8012c0c:	2b02      	cmp	r3, #2
 8012c0e:	d108      	bne.n	8012c22 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c14:	4b9f      	ldr	r3, [pc, #636]	; (8012e94 <tcp_process+0x2bc>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d123      	bne.n	8012c64 <tcp_process+0x8c>
        acceptable = 1;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	76fb      	strb	r3, [r7, #27]
 8012c20:	e020      	b.n	8012c64 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c26:	4b9c      	ldr	r3, [pc, #624]	; (8012e98 <tcp_process+0x2c0>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d102      	bne.n	8012c34 <tcp_process+0x5c>
        acceptable = 1;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	76fb      	strb	r3, [r7, #27]
 8012c32:	e017      	b.n	8012c64 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c34:	4b98      	ldr	r3, [pc, #608]	; (8012e98 <tcp_process+0x2c0>)
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	db10      	blt.n	8012c64 <tcp_process+0x8c>
 8012c42:	4b95      	ldr	r3, [pc, #596]	; (8012e98 <tcp_process+0x2c0>)
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4a:	6879      	ldr	r1, [r7, #4]
 8012c4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c4e:	440b      	add	r3, r1
 8012c50:	1ad3      	subs	r3, r2, r3
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	dc06      	bgt.n	8012c64 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	8b5b      	ldrh	r3, [r3, #26]
 8012c5a:	f043 0302 	orr.w	r3, r3, #2
 8012c5e:	b29a      	uxth	r2, r3
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012c64:	7efb      	ldrb	r3, [r7, #27]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d01b      	beq.n	8012ca2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	7d1b      	ldrb	r3, [r3, #20]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d106      	bne.n	8012c80 <tcp_process+0xa8>
 8012c72:	4b84      	ldr	r3, [pc, #528]	; (8012e84 <tcp_process+0x2ac>)
 8012c74:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012c78:	4988      	ldr	r1, [pc, #544]	; (8012e9c <tcp_process+0x2c4>)
 8012c7a:	4884      	ldr	r0, [pc, #528]	; (8012e8c <tcp_process+0x2b4>)
 8012c7c:	f003 fffe 	bl	8016c7c <iprintf>
      recv_flags |= TF_RESET;
 8012c80:	4b87      	ldr	r3, [pc, #540]	; (8012ea0 <tcp_process+0x2c8>)
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	f043 0308 	orr.w	r3, r3, #8
 8012c88:	b2da      	uxtb	r2, r3
 8012c8a:	4b85      	ldr	r3, [pc, #532]	; (8012ea0 <tcp_process+0x2c8>)
 8012c8c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	8b5b      	ldrh	r3, [r3, #26]
 8012c92:	f023 0301 	bic.w	r3, r3, #1
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012c9c:	f06f 030d 	mvn.w	r3, #13
 8012ca0:	e37a      	b.n	8013398 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e378      	b.n	8013398 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012ca6:	4b7a      	ldr	r3, [pc, #488]	; (8012e90 <tcp_process+0x2b8>)
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	f003 0302 	and.w	r3, r3, #2
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d010      	beq.n	8012cd4 <tcp_process+0xfc>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	7d1b      	ldrb	r3, [r3, #20]
 8012cb6:	2b02      	cmp	r3, #2
 8012cb8:	d00c      	beq.n	8012cd4 <tcp_process+0xfc>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	7d1b      	ldrb	r3, [r3, #20]
 8012cbe:	2b03      	cmp	r3, #3
 8012cc0:	d008      	beq.n	8012cd4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8b5b      	ldrh	r3, [r3, #26]
 8012cc6:	f043 0302 	orr.w	r3, r3, #2
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	e361      	b.n	8013398 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	8b5b      	ldrh	r3, [r3, #26]
 8012cd8:	f003 0310 	and.w	r3, r3, #16
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d103      	bne.n	8012ce8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012ce0:	4b70      	ldr	r3, [pc, #448]	; (8012ea4 <tcp_process+0x2cc>)
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f001 fc2d 	bl	8014558 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	7d1b      	ldrb	r3, [r3, #20]
 8012d02:	3b02      	subs	r3, #2
 8012d04:	2b07      	cmp	r3, #7
 8012d06:	f200 8337 	bhi.w	8013378 <tcp_process+0x7a0>
 8012d0a:	a201      	add	r2, pc, #4	; (adr r2, 8012d10 <tcp_process+0x138>)
 8012d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d10:	08012d31 	.word	0x08012d31
 8012d14:	08012f61 	.word	0x08012f61
 8012d18:	080130d9 	.word	0x080130d9
 8012d1c:	08013103 	.word	0x08013103
 8012d20:	08013227 	.word	0x08013227
 8012d24:	080130d9 	.word	0x080130d9
 8012d28:	080132b3 	.word	0x080132b3
 8012d2c:	08013343 	.word	0x08013343
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012d30:	4b57      	ldr	r3, [pc, #348]	; (8012e90 <tcp_process+0x2b8>)
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	f003 0310 	and.w	r3, r3, #16
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	f000 80e4 	beq.w	8012f06 <tcp_process+0x32e>
 8012d3e:	4b54      	ldr	r3, [pc, #336]	; (8012e90 <tcp_process+0x2b8>)
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	f003 0302 	and.w	r3, r3, #2
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	f000 80dd 	beq.w	8012f06 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d50:	1c5a      	adds	r2, r3, #1
 8012d52:	4b50      	ldr	r3, [pc, #320]	; (8012e94 <tcp_process+0x2bc>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	f040 80d5 	bne.w	8012f06 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012d5c:	4b4e      	ldr	r3, [pc, #312]	; (8012e98 <tcp_process+0x2c0>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012d6e:	4b49      	ldr	r3, [pc, #292]	; (8012e94 <tcp_process+0x2bc>)
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012d76:	4b4c      	ldr	r3, [pc, #304]	; (8012ea8 <tcp_process+0x2d0>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	89db      	ldrh	r3, [r3, #14]
 8012d7c:	b29a      	uxth	r2, r3
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012d90:	4b41      	ldr	r3, [pc, #260]	; (8012e98 <tcp_process+0x2c0>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	1e5a      	subs	r2, r3, #1
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2204      	movs	r2, #4
 8012d9e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	3304      	adds	r3, #4
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fa fd6b 	bl	800d884 <ip4_route>
 8012dae:	4601      	mov	r1, r0
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	3304      	adds	r3, #4
 8012db4:	461a      	mov	r2, r3
 8012db6:	4620      	mov	r0, r4
 8012db8:	f7ff f88e 	bl	8011ed8 <tcp_eff_send_mss_netif>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dc8:	009a      	lsls	r2, r3, #2
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dce:	005b      	lsls	r3, r3, #1
 8012dd0:	f241 111c 	movw	r1, #4380	; 0x111c
 8012dd4:	428b      	cmp	r3, r1
 8012dd6:	bf38      	it	cc
 8012dd8:	460b      	movcc	r3, r1
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d204      	bcs.n	8012de8 <tcp_process+0x210>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012de2:	009b      	lsls	r3, r3, #2
 8012de4:	b29b      	uxth	r3, r3
 8012de6:	e00d      	b.n	8012e04 <tcp_process+0x22c>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dec:	005b      	lsls	r3, r3, #1
 8012dee:	f241 121c 	movw	r2, #4380	; 0x111c
 8012df2:	4293      	cmp	r3, r2
 8012df4:	d904      	bls.n	8012e00 <tcp_process+0x228>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dfa:	005b      	lsls	r3, r3, #1
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	e001      	b.n	8012e04 <tcp_process+0x22c>
 8012e00:	f241 131c 	movw	r3, #4380	; 0x111c
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d106      	bne.n	8012e22 <tcp_process+0x24a>
 8012e14:	4b1b      	ldr	r3, [pc, #108]	; (8012e84 <tcp_process+0x2ac>)
 8012e16:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012e1a:	4924      	ldr	r1, [pc, #144]	; (8012eac <tcp_process+0x2d4>)
 8012e1c:	481b      	ldr	r0, [pc, #108]	; (8012e8c <tcp_process+0x2b4>)
 8012e1e:	f003 ff2d 	bl	8016c7c <iprintf>
        --pcb->snd_queuelen;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e28:	3b01      	subs	r3, #1
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e36:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d111      	bne.n	8012e62 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e42:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d106      	bne.n	8012e58 <tcp_process+0x280>
 8012e4a:	4b0e      	ldr	r3, [pc, #56]	; (8012e84 <tcp_process+0x2ac>)
 8012e4c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012e50:	4917      	ldr	r1, [pc, #92]	; (8012eb0 <tcp_process+0x2d8>)
 8012e52:	480e      	ldr	r0, [pc, #56]	; (8012e8c <tcp_process+0x2b4>)
 8012e54:	f003 ff12 	bl	8016c7c <iprintf>
          pcb->unsent = rseg->next;
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e60:	e003      	b.n	8012e6a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012e6a:	69f8      	ldr	r0, [r7, #28]
 8012e6c:	f7fe fd3e 	bl	80118ec <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d11d      	bne.n	8012eb4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e7e:	861a      	strh	r2, [r3, #48]	; 0x30
 8012e80:	e01f      	b.n	8012ec2 <tcp_process+0x2ea>
 8012e82:	bf00      	nop
 8012e84:	0801963c 	.word	0x0801963c
 8012e88:	080198a4 	.word	0x080198a4
 8012e8c:	080196b8 	.word	0x080196b8
 8012e90:	24004b38 	.word	0x24004b38
 8012e94:	24004b30 	.word	0x24004b30
 8012e98:	24004b2c 	.word	0x24004b2c
 8012e9c:	080198c0 	.word	0x080198c0
 8012ea0:	24004b39 	.word	0x24004b39
 8012ea4:	24008354 	.word	0x24008354
 8012ea8:	24004b1c 	.word	0x24004b1c
 8012eac:	080198e0 	.word	0x080198e0
 8012eb0:	080198f8 	.word	0x080198f8
        } else {
          pcb->rtime = 0;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00a      	beq.n	8012ee2 <tcp_process+0x30a>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	6910      	ldr	r0, [r2, #16]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	6879      	ldr	r1, [r7, #4]
 8012eda:	4798      	blx	r3
 8012edc:	4603      	mov	r3, r0
 8012ede:	76bb      	strb	r3, [r7, #26]
 8012ee0:	e001      	b.n	8012ee6 <tcp_process+0x30e>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012ee6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012eea:	f113 0f0d 	cmn.w	r3, #13
 8012eee:	d102      	bne.n	8012ef6 <tcp_process+0x31e>
          return ERR_ABRT;
 8012ef0:	f06f 030c 	mvn.w	r3, #12
 8012ef4:	e250      	b.n	8013398 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	8b5b      	ldrh	r3, [r3, #26]
 8012efa:	f043 0302 	orr.w	r3, r3, #2
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012f04:	e23a      	b.n	801337c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012f06:	4b9d      	ldr	r3, [pc, #628]	; (801317c <tcp_process+0x5a4>)
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	f003 0310 	and.w	r3, r3, #16
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f000 8234 	beq.w	801337c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f14:	4b9a      	ldr	r3, [pc, #616]	; (8013180 <tcp_process+0x5a8>)
 8012f16:	6819      	ldr	r1, [r3, #0]
 8012f18:	4b9a      	ldr	r3, [pc, #616]	; (8013184 <tcp_process+0x5ac>)
 8012f1a:	881b      	ldrh	r3, [r3, #0]
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	4b9a      	ldr	r3, [pc, #616]	; (8013188 <tcp_process+0x5b0>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f24:	4b99      	ldr	r3, [pc, #612]	; (801318c <tcp_process+0x5b4>)
 8012f26:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f28:	885b      	ldrh	r3, [r3, #2]
 8012f2a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f2c:	4a97      	ldr	r2, [pc, #604]	; (801318c <tcp_process+0x5b4>)
 8012f2e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f30:	8812      	ldrh	r2, [r2, #0]
 8012f32:	b292      	uxth	r2, r2
 8012f34:	9202      	str	r2, [sp, #8]
 8012f36:	9301      	str	r3, [sp, #4]
 8012f38:	4b95      	ldr	r3, [pc, #596]	; (8013190 <tcp_process+0x5b8>)
 8012f3a:	9300      	str	r3, [sp, #0]
 8012f3c:	4b95      	ldr	r3, [pc, #596]	; (8013194 <tcp_process+0x5bc>)
 8012f3e:	4602      	mov	r2, r0
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f002 fc93 	bl	801586c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f4c:	2b05      	cmp	r3, #5
 8012f4e:	f200 8215 	bhi.w	801337c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f002 fa51 	bl	8015400 <tcp_rexmit_rto>
      break;
 8012f5e:	e20d      	b.n	801337c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012f60:	4b86      	ldr	r3, [pc, #536]	; (801317c <tcp_process+0x5a4>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f003 0310 	and.w	r3, r3, #16
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f000 80a1 	beq.w	80130b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f6e:	4b84      	ldr	r3, [pc, #528]	; (8013180 <tcp_process+0x5a8>)
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	db7e      	blt.n	801307c <tcp_process+0x4a4>
 8012f7e:	4b80      	ldr	r3, [pc, #512]	; (8013180 <tcp_process+0x5a8>)
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f86:	1ad3      	subs	r3, r2, r3
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	dc77      	bgt.n	801307c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2204      	movs	r2, #4
 8012f90:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d102      	bne.n	8012fa0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012f9a:	23fa      	movs	r3, #250	; 0xfa
 8012f9c:	76bb      	strb	r3, [r7, #26]
 8012f9e:	e01d      	b.n	8012fdc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fa4:	699b      	ldr	r3, [r3, #24]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d106      	bne.n	8012fb8 <tcp_process+0x3e0>
 8012faa:	4b7b      	ldr	r3, [pc, #492]	; (8013198 <tcp_process+0x5c0>)
 8012fac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012fb0:	497a      	ldr	r1, [pc, #488]	; (801319c <tcp_process+0x5c4>)
 8012fb2:	487b      	ldr	r0, [pc, #492]	; (80131a0 <tcp_process+0x5c8>)
 8012fb4:	f003 fe62 	bl	8016c7c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fbc:	699b      	ldr	r3, [r3, #24]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00a      	beq.n	8012fd8 <tcp_process+0x400>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fc6:	699b      	ldr	r3, [r3, #24]
 8012fc8:	687a      	ldr	r2, [r7, #4]
 8012fca:	6910      	ldr	r0, [r2, #16]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	6879      	ldr	r1, [r7, #4]
 8012fd0:	4798      	blx	r3
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	76bb      	strb	r3, [r7, #26]
 8012fd6:	e001      	b.n	8012fdc <tcp_process+0x404>
 8012fd8:	23f0      	movs	r3, #240	; 0xf0
 8012fda:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012fdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d00a      	beq.n	8012ffa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012fe4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fe8:	f113 0f0d 	cmn.w	r3, #13
 8012fec:	d002      	beq.n	8012ff4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7fd ff94 	bl	8010f1c <tcp_abort>
            }
            return ERR_ABRT;
 8012ff4:	f06f 030c 	mvn.w	r3, #12
 8012ff8:	e1ce      	b.n	8013398 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 fae0 	bl	80135c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013000:	4b68      	ldr	r3, [pc, #416]	; (80131a4 <tcp_process+0x5cc>)
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d005      	beq.n	8013014 <tcp_process+0x43c>
            recv_acked--;
 8013008:	4b66      	ldr	r3, [pc, #408]	; (80131a4 <tcp_process+0x5cc>)
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	3b01      	subs	r3, #1
 801300e:	b29a      	uxth	r2, r3
 8013010:	4b64      	ldr	r3, [pc, #400]	; (80131a4 <tcp_process+0x5cc>)
 8013012:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013018:	009a      	lsls	r2, r3, #2
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801301e:	005b      	lsls	r3, r3, #1
 8013020:	f241 111c 	movw	r1, #4380	; 0x111c
 8013024:	428b      	cmp	r3, r1
 8013026:	bf38      	it	cc
 8013028:	460b      	movcc	r3, r1
 801302a:	429a      	cmp	r2, r3
 801302c:	d204      	bcs.n	8013038 <tcp_process+0x460>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	b29b      	uxth	r3, r3
 8013036:	e00d      	b.n	8013054 <tcp_process+0x47c>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013042:	4293      	cmp	r3, r2
 8013044:	d904      	bls.n	8013050 <tcp_process+0x478>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801304a:	005b      	lsls	r3, r3, #1
 801304c:	b29b      	uxth	r3, r3
 801304e:	e001      	b.n	8013054 <tcp_process+0x47c>
 8013050:	f241 131c 	movw	r3, #4380	; 0x111c
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801305a:	4b53      	ldr	r3, [pc, #332]	; (80131a8 <tcp_process+0x5d0>)
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	f003 0320 	and.w	r3, r3, #32
 8013062:	2b00      	cmp	r3, #0
 8013064:	d037      	beq.n	80130d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	8b5b      	ldrh	r3, [r3, #26]
 801306a:	f043 0302 	orr.w	r3, r3, #2
 801306e:	b29a      	uxth	r2, r3
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2207      	movs	r2, #7
 8013078:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801307a:	e02c      	b.n	80130d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801307c:	4b40      	ldr	r3, [pc, #256]	; (8013180 <tcp_process+0x5a8>)
 801307e:	6819      	ldr	r1, [r3, #0]
 8013080:	4b40      	ldr	r3, [pc, #256]	; (8013184 <tcp_process+0x5ac>)
 8013082:	881b      	ldrh	r3, [r3, #0]
 8013084:	461a      	mov	r2, r3
 8013086:	4b40      	ldr	r3, [pc, #256]	; (8013188 <tcp_process+0x5b0>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801308c:	4b3f      	ldr	r3, [pc, #252]	; (801318c <tcp_process+0x5b4>)
 801308e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013090:	885b      	ldrh	r3, [r3, #2]
 8013092:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013094:	4a3d      	ldr	r2, [pc, #244]	; (801318c <tcp_process+0x5b4>)
 8013096:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013098:	8812      	ldrh	r2, [r2, #0]
 801309a:	b292      	uxth	r2, r2
 801309c:	9202      	str	r2, [sp, #8]
 801309e:	9301      	str	r3, [sp, #4]
 80130a0:	4b3b      	ldr	r3, [pc, #236]	; (8013190 <tcp_process+0x5b8>)
 80130a2:	9300      	str	r3, [sp, #0]
 80130a4:	4b3b      	ldr	r3, [pc, #236]	; (8013194 <tcp_process+0x5bc>)
 80130a6:	4602      	mov	r2, r0
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f002 fbdf 	bl	801586c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80130ae:	e167      	b.n	8013380 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80130b0:	4b32      	ldr	r3, [pc, #200]	; (801317c <tcp_process+0x5a4>)
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	f003 0302 	and.w	r3, r3, #2
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 8161 	beq.w	8013380 <tcp_process+0x7a8>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	1e5a      	subs	r2, r3, #1
 80130c4:	4b30      	ldr	r3, [pc, #192]	; (8013188 <tcp_process+0x5b0>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	f040 8159 	bne.w	8013380 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f002 f9b8 	bl	8015444 <tcp_rexmit>
      break;
 80130d4:	e154      	b.n	8013380 <tcp_process+0x7a8>
 80130d6:	e153      	b.n	8013380 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 fa71 	bl	80135c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80130de:	4b32      	ldr	r3, [pc, #200]	; (80131a8 <tcp_process+0x5d0>)
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	f003 0320 	and.w	r3, r3, #32
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f000 814c 	beq.w	8013384 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	8b5b      	ldrh	r3, [r3, #26]
 80130f0:	f043 0302 	orr.w	r3, r3, #2
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2207      	movs	r2, #7
 80130fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013100:	e140      	b.n	8013384 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 fa5c 	bl	80135c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013108:	4b27      	ldr	r3, [pc, #156]	; (80131a8 <tcp_process+0x5d0>)
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	f003 0320 	and.w	r3, r3, #32
 8013110:	2b00      	cmp	r3, #0
 8013112:	d071      	beq.n	80131f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013114:	4b19      	ldr	r3, [pc, #100]	; (801317c <tcp_process+0x5a4>)
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	f003 0310 	and.w	r3, r3, #16
 801311c:	2b00      	cmp	r3, #0
 801311e:	d060      	beq.n	80131e2 <tcp_process+0x60a>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013124:	4b16      	ldr	r3, [pc, #88]	; (8013180 <tcp_process+0x5a8>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	429a      	cmp	r2, r3
 801312a:	d15a      	bne.n	80131e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013130:	2b00      	cmp	r3, #0
 8013132:	d156      	bne.n	80131e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	8b5b      	ldrh	r3, [r3, #26]
 8013138:	f043 0302 	orr.w	r3, r3, #2
 801313c:	b29a      	uxth	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f7fe fdbe 	bl	8011cc4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013148:	4b18      	ldr	r3, [pc, #96]	; (80131ac <tcp_process+0x5d4>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	429a      	cmp	r2, r3
 8013150:	d105      	bne.n	801315e <tcp_process+0x586>
 8013152:	4b16      	ldr	r3, [pc, #88]	; (80131ac <tcp_process+0x5d4>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	4a14      	ldr	r2, [pc, #80]	; (80131ac <tcp_process+0x5d4>)
 801315a:	6013      	str	r3, [r2, #0]
 801315c:	e02e      	b.n	80131bc <tcp_process+0x5e4>
 801315e:	4b13      	ldr	r3, [pc, #76]	; (80131ac <tcp_process+0x5d4>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	617b      	str	r3, [r7, #20]
 8013164:	e027      	b.n	80131b6 <tcp_process+0x5de>
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	429a      	cmp	r2, r3
 801316e:	d11f      	bne.n	80131b0 <tcp_process+0x5d8>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	68da      	ldr	r2, [r3, #12]
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	60da      	str	r2, [r3, #12]
 8013178:	e020      	b.n	80131bc <tcp_process+0x5e4>
 801317a:	bf00      	nop
 801317c:	24004b38 	.word	0x24004b38
 8013180:	24004b30 	.word	0x24004b30
 8013184:	24004b36 	.word	0x24004b36
 8013188:	24004b2c 	.word	0x24004b2c
 801318c:	24004b1c 	.word	0x24004b1c
 8013190:	24005298 	.word	0x24005298
 8013194:	2400529c 	.word	0x2400529c
 8013198:	0801963c 	.word	0x0801963c
 801319c:	0801990c 	.word	0x0801990c
 80131a0:	080196b8 	.word	0x080196b8
 80131a4:	24004b34 	.word	0x24004b34
 80131a8:	24004b39 	.word	0x24004b39
 80131ac:	24008350 	.word	0x24008350
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	617b      	str	r3, [r7, #20]
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d1d4      	bne.n	8013166 <tcp_process+0x58e>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2200      	movs	r2, #0
 80131c0:	60da      	str	r2, [r3, #12]
 80131c2:	4b77      	ldr	r3, [pc, #476]	; (80133a0 <tcp_process+0x7c8>)
 80131c4:	2201      	movs	r2, #1
 80131c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	220a      	movs	r2, #10
 80131cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80131ce:	4b75      	ldr	r3, [pc, #468]	; (80133a4 <tcp_process+0x7cc>)
 80131d0:	681a      	ldr	r2, [r3, #0]
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	60da      	str	r2, [r3, #12]
 80131d6:	4a73      	ldr	r2, [pc, #460]	; (80133a4 <tcp_process+0x7cc>)
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6013      	str	r3, [r2, #0]
 80131dc:	f002 fea6 	bl	8015f2c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80131e0:	e0d2      	b.n	8013388 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	8b5b      	ldrh	r3, [r3, #26]
 80131e6:	f043 0302 	orr.w	r3, r3, #2
 80131ea:	b29a      	uxth	r2, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2208      	movs	r2, #8
 80131f4:	751a      	strb	r2, [r3, #20]
      break;
 80131f6:	e0c7      	b.n	8013388 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131f8:	4b6b      	ldr	r3, [pc, #428]	; (80133a8 <tcp_process+0x7d0>)
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	f003 0310 	and.w	r3, r3, #16
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 80c1 	beq.w	8013388 <tcp_process+0x7b0>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801320a:	4b68      	ldr	r3, [pc, #416]	; (80133ac <tcp_process+0x7d4>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	429a      	cmp	r2, r3
 8013210:	f040 80ba 	bne.w	8013388 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013218:	2b00      	cmp	r3, #0
 801321a:	f040 80b5 	bne.w	8013388 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2206      	movs	r2, #6
 8013222:	751a      	strb	r2, [r3, #20]
      break;
 8013224:	e0b0      	b.n	8013388 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 f9ca 	bl	80135c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801322c:	4b60      	ldr	r3, [pc, #384]	; (80133b0 <tcp_process+0x7d8>)
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	f003 0320 	and.w	r3, r3, #32
 8013234:	2b00      	cmp	r3, #0
 8013236:	f000 80a9 	beq.w	801338c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	8b5b      	ldrh	r3, [r3, #26]
 801323e:	f043 0302 	orr.w	r3, r3, #2
 8013242:	b29a      	uxth	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7fe fd3b 	bl	8011cc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801324e:	4b59      	ldr	r3, [pc, #356]	; (80133b4 <tcp_process+0x7dc>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	429a      	cmp	r2, r3
 8013256:	d105      	bne.n	8013264 <tcp_process+0x68c>
 8013258:	4b56      	ldr	r3, [pc, #344]	; (80133b4 <tcp_process+0x7dc>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	4a55      	ldr	r2, [pc, #340]	; (80133b4 <tcp_process+0x7dc>)
 8013260:	6013      	str	r3, [r2, #0]
 8013262:	e013      	b.n	801328c <tcp_process+0x6b4>
 8013264:	4b53      	ldr	r3, [pc, #332]	; (80133b4 <tcp_process+0x7dc>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	613b      	str	r3, [r7, #16]
 801326a:	e00c      	b.n	8013286 <tcp_process+0x6ae>
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	429a      	cmp	r2, r3
 8013274:	d104      	bne.n	8013280 <tcp_process+0x6a8>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	68da      	ldr	r2, [r3, #12]
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	60da      	str	r2, [r3, #12]
 801327e:	e005      	b.n	801328c <tcp_process+0x6b4>
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	68db      	ldr	r3, [r3, #12]
 8013284:	613b      	str	r3, [r7, #16]
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d1ef      	bne.n	801326c <tcp_process+0x694>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2200      	movs	r2, #0
 8013290:	60da      	str	r2, [r3, #12]
 8013292:	4b43      	ldr	r3, [pc, #268]	; (80133a0 <tcp_process+0x7c8>)
 8013294:	2201      	movs	r2, #1
 8013296:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	220a      	movs	r2, #10
 801329c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801329e:	4b41      	ldr	r3, [pc, #260]	; (80133a4 <tcp_process+0x7cc>)
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	60da      	str	r2, [r3, #12]
 80132a6:	4a3f      	ldr	r2, [pc, #252]	; (80133a4 <tcp_process+0x7cc>)
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6013      	str	r3, [r2, #0]
 80132ac:	f002 fe3e 	bl	8015f2c <tcp_timer_needed>
      }
      break;
 80132b0:	e06c      	b.n	801338c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f000 f984 	bl	80135c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80132b8:	4b3b      	ldr	r3, [pc, #236]	; (80133a8 <tcp_process+0x7d0>)
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	f003 0310 	and.w	r3, r3, #16
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d065      	beq.n	8013390 <tcp_process+0x7b8>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132c8:	4b38      	ldr	r3, [pc, #224]	; (80133ac <tcp_process+0x7d4>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d15f      	bne.n	8013390 <tcp_process+0x7b8>
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d15b      	bne.n	8013390 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7fe fcf3 	bl	8011cc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80132de:	4b35      	ldr	r3, [pc, #212]	; (80133b4 <tcp_process+0x7dc>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d105      	bne.n	80132f4 <tcp_process+0x71c>
 80132e8:	4b32      	ldr	r3, [pc, #200]	; (80133b4 <tcp_process+0x7dc>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	4a31      	ldr	r2, [pc, #196]	; (80133b4 <tcp_process+0x7dc>)
 80132f0:	6013      	str	r3, [r2, #0]
 80132f2:	e013      	b.n	801331c <tcp_process+0x744>
 80132f4:	4b2f      	ldr	r3, [pc, #188]	; (80133b4 <tcp_process+0x7dc>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	60fb      	str	r3, [r7, #12]
 80132fa:	e00c      	b.n	8013316 <tcp_process+0x73e>
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	429a      	cmp	r2, r3
 8013304:	d104      	bne.n	8013310 <tcp_process+0x738>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	68da      	ldr	r2, [r3, #12]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	60da      	str	r2, [r3, #12]
 801330e:	e005      	b.n	801331c <tcp_process+0x744>
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	68db      	ldr	r3, [r3, #12]
 8013314:	60fb      	str	r3, [r7, #12]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d1ef      	bne.n	80132fc <tcp_process+0x724>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2200      	movs	r2, #0
 8013320:	60da      	str	r2, [r3, #12]
 8013322:	4b1f      	ldr	r3, [pc, #124]	; (80133a0 <tcp_process+0x7c8>)
 8013324:	2201      	movs	r2, #1
 8013326:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	220a      	movs	r2, #10
 801332c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801332e:	4b1d      	ldr	r3, [pc, #116]	; (80133a4 <tcp_process+0x7cc>)
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	60da      	str	r2, [r3, #12]
 8013336:	4a1b      	ldr	r2, [pc, #108]	; (80133a4 <tcp_process+0x7cc>)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6013      	str	r3, [r2, #0]
 801333c:	f002 fdf6 	bl	8015f2c <tcp_timer_needed>
      }
      break;
 8013340:	e026      	b.n	8013390 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f000 f93c 	bl	80135c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013348:	4b17      	ldr	r3, [pc, #92]	; (80133a8 <tcp_process+0x7d0>)
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	f003 0310 	and.w	r3, r3, #16
 8013350:	2b00      	cmp	r3, #0
 8013352:	d01f      	beq.n	8013394 <tcp_process+0x7bc>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013358:	4b14      	ldr	r3, [pc, #80]	; (80133ac <tcp_process+0x7d4>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	429a      	cmp	r2, r3
 801335e:	d119      	bne.n	8013394 <tcp_process+0x7bc>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013364:	2b00      	cmp	r3, #0
 8013366:	d115      	bne.n	8013394 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013368:	4b11      	ldr	r3, [pc, #68]	; (80133b0 <tcp_process+0x7d8>)
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	f043 0310 	orr.w	r3, r3, #16
 8013370:	b2da      	uxtb	r2, r3
 8013372:	4b0f      	ldr	r3, [pc, #60]	; (80133b0 <tcp_process+0x7d8>)
 8013374:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013376:	e00d      	b.n	8013394 <tcp_process+0x7bc>
    default:
      break;
 8013378:	bf00      	nop
 801337a:	e00c      	b.n	8013396 <tcp_process+0x7be>
      break;
 801337c:	bf00      	nop
 801337e:	e00a      	b.n	8013396 <tcp_process+0x7be>
      break;
 8013380:	bf00      	nop
 8013382:	e008      	b.n	8013396 <tcp_process+0x7be>
      break;
 8013384:	bf00      	nop
 8013386:	e006      	b.n	8013396 <tcp_process+0x7be>
      break;
 8013388:	bf00      	nop
 801338a:	e004      	b.n	8013396 <tcp_process+0x7be>
      break;
 801338c:	bf00      	nop
 801338e:	e002      	b.n	8013396 <tcp_process+0x7be>
      break;
 8013390:	bf00      	nop
 8013392:	e000      	b.n	8013396 <tcp_process+0x7be>
      break;
 8013394:	bf00      	nop
  }
  return ERR_OK;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3724      	adds	r7, #36	; 0x24
 801339c:	46bd      	mov	sp, r7
 801339e:	bd90      	pop	{r4, r7, pc}
 80133a0:	2400834c 	.word	0x2400834c
 80133a4:	24008360 	.word	0x24008360
 80133a8:	24004b38 	.word	0x24004b38
 80133ac:	24004b30 	.word	0x24004b30
 80133b0:	24004b39 	.word	0x24004b39
 80133b4:	24008350 	.word	0x24008350

080133b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80133b8:	b590      	push	{r4, r7, lr}
 80133ba:	b085      	sub	sp, #20
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d106      	bne.n	80133d6 <tcp_oos_insert_segment+0x1e>
 80133c8:	4b3b      	ldr	r3, [pc, #236]	; (80134b8 <tcp_oos_insert_segment+0x100>)
 80133ca:	f240 421f 	movw	r2, #1055	; 0x41f
 80133ce:	493b      	ldr	r1, [pc, #236]	; (80134bc <tcp_oos_insert_segment+0x104>)
 80133d0:	483b      	ldr	r0, [pc, #236]	; (80134c0 <tcp_oos_insert_segment+0x108>)
 80133d2:	f003 fc53 	bl	8016c7c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	68db      	ldr	r3, [r3, #12]
 80133da:	899b      	ldrh	r3, [r3, #12]
 80133dc:	b29b      	uxth	r3, r3
 80133de:	4618      	mov	r0, r3
 80133e0:	f7f8 ff78 	bl	800c2d4 <lwip_htons>
 80133e4:	4603      	mov	r3, r0
 80133e6:	b2db      	uxtb	r3, r3
 80133e8:	f003 0301 	and.w	r3, r3, #1
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d028      	beq.n	8013442 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80133f0:	6838      	ldr	r0, [r7, #0]
 80133f2:	f7fe fa67 	bl	80118c4 <tcp_segs_free>
    next = NULL;
 80133f6:	2300      	movs	r3, #0
 80133f8:	603b      	str	r3, [r7, #0]
 80133fa:	e056      	b.n	80134aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	899b      	ldrh	r3, [r3, #12]
 8013402:	b29b      	uxth	r3, r3
 8013404:	4618      	mov	r0, r3
 8013406:	f7f8 ff65 	bl	800c2d4 <lwip_htons>
 801340a:	4603      	mov	r3, r0
 801340c:	b2db      	uxtb	r3, r3
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00d      	beq.n	8013432 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	899b      	ldrh	r3, [r3, #12]
 801341c:	b29c      	uxth	r4, r3
 801341e:	2001      	movs	r0, #1
 8013420:	f7f8 ff58 	bl	800c2d4 <lwip_htons>
 8013424:	4603      	mov	r3, r0
 8013426:	461a      	mov	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	4322      	orrs	r2, r4
 801342e:	b292      	uxth	r2, r2
 8013430:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801343c:	68f8      	ldr	r0, [r7, #12]
 801343e:	f7fe fa55 	bl	80118ec <tcp_seg_free>
    while (next &&
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00e      	beq.n	8013466 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	891b      	ldrh	r3, [r3, #8]
 801344c:	461a      	mov	r2, r3
 801344e:	4b1d      	ldr	r3, [pc, #116]	; (80134c4 <tcp_oos_insert_segment+0x10c>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	441a      	add	r2, r3
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	68db      	ldr	r3, [r3, #12]
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	6839      	ldr	r1, [r7, #0]
 801345c:	8909      	ldrh	r1, [r1, #8]
 801345e:	440b      	add	r3, r1
 8013460:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013462:	2b00      	cmp	r3, #0
 8013464:	daca      	bge.n	80133fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d01e      	beq.n	80134aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	891b      	ldrh	r3, [r3, #8]
 8013470:	461a      	mov	r2, r3
 8013472:	4b14      	ldr	r3, [pc, #80]	; (80134c4 <tcp_oos_insert_segment+0x10c>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	441a      	add	r2, r3
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013480:	2b00      	cmp	r3, #0
 8013482:	dd12      	ble.n	80134aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	b29a      	uxth	r2, r3
 801348c:	4b0d      	ldr	r3, [pc, #52]	; (80134c4 <tcp_oos_insert_segment+0x10c>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	b29b      	uxth	r3, r3
 8013492:	1ad3      	subs	r3, r2, r3
 8013494:	b29a      	uxth	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	685a      	ldr	r2, [r3, #4]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	891b      	ldrh	r3, [r3, #8]
 80134a2:	4619      	mov	r1, r3
 80134a4:	4610      	mov	r0, r2
 80134a6:	f7fc fd25 	bl	800fef4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	683a      	ldr	r2, [r7, #0]
 80134ae:	601a      	str	r2, [r3, #0]
}
 80134b0:	bf00      	nop
 80134b2:	3714      	adds	r7, #20
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd90      	pop	{r4, r7, pc}
 80134b8:	0801963c 	.word	0x0801963c
 80134bc:	0801992c 	.word	0x0801992c
 80134c0:	080196b8 	.word	0x080196b8
 80134c4:	24004b2c 	.word	0x24004b2c

080134c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80134c8:	b5b0      	push	{r4, r5, r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	607a      	str	r2, [r7, #4]
 80134d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80134d6:	e03e      	b.n	8013556 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7fc ff18 	bl	801031c <pbuf_clen>
 80134ec:	4603      	mov	r3, r0
 80134ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134f6:	8a7a      	ldrh	r2, [r7, #18]
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d906      	bls.n	801350a <tcp_free_acked_segments+0x42>
 80134fc:	4b2a      	ldr	r3, [pc, #168]	; (80135a8 <tcp_free_acked_segments+0xe0>)
 80134fe:	f240 4257 	movw	r2, #1111	; 0x457
 8013502:	492a      	ldr	r1, [pc, #168]	; (80135ac <tcp_free_acked_segments+0xe4>)
 8013504:	482a      	ldr	r0, [pc, #168]	; (80135b0 <tcp_free_acked_segments+0xe8>)
 8013506:	f003 fbb9 	bl	8016c7c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013510:	8a7b      	ldrh	r3, [r7, #18]
 8013512:	1ad3      	subs	r3, r2, r3
 8013514:	b29a      	uxth	r2, r3
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	891a      	ldrh	r2, [r3, #8]
 8013520:	4b24      	ldr	r3, [pc, #144]	; (80135b4 <tcp_free_acked_segments+0xec>)
 8013522:	881b      	ldrh	r3, [r3, #0]
 8013524:	4413      	add	r3, r2
 8013526:	b29a      	uxth	r2, r3
 8013528:	4b22      	ldr	r3, [pc, #136]	; (80135b4 <tcp_free_acked_segments+0xec>)
 801352a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801352c:	6978      	ldr	r0, [r7, #20]
 801352e:	f7fe f9dd 	bl	80118ec <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00c      	beq.n	8013556 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d109      	bne.n	8013556 <tcp_free_acked_segments+0x8e>
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d106      	bne.n	8013556 <tcp_free_acked_segments+0x8e>
 8013548:	4b17      	ldr	r3, [pc, #92]	; (80135a8 <tcp_free_acked_segments+0xe0>)
 801354a:	f240 4262 	movw	r2, #1122	; 0x462
 801354e:	491a      	ldr	r1, [pc, #104]	; (80135b8 <tcp_free_acked_segments+0xf0>)
 8013550:	4817      	ldr	r0, [pc, #92]	; (80135b0 <tcp_free_acked_segments+0xe8>)
 8013552:	f003 fb93 	bl	8016c7c <iprintf>
  while (seg_list != NULL &&
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d020      	beq.n	801359e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	4618      	mov	r0, r3
 8013564:	f7f8 fecb 	bl	800c2fe <lwip_htonl>
 8013568:	4604      	mov	r4, r0
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	891b      	ldrh	r3, [r3, #8]
 801356e:	461d      	mov	r5, r3
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	899b      	ldrh	r3, [r3, #12]
 8013576:	b29b      	uxth	r3, r3
 8013578:	4618      	mov	r0, r3
 801357a:	f7f8 feab 	bl	800c2d4 <lwip_htons>
 801357e:	4603      	mov	r3, r0
 8013580:	b2db      	uxtb	r3, r3
 8013582:	f003 0303 	and.w	r3, r3, #3
 8013586:	2b00      	cmp	r3, #0
 8013588:	d001      	beq.n	801358e <tcp_free_acked_segments+0xc6>
 801358a:	2301      	movs	r3, #1
 801358c:	e000      	b.n	8013590 <tcp_free_acked_segments+0xc8>
 801358e:	2300      	movs	r3, #0
 8013590:	442b      	add	r3, r5
 8013592:	18e2      	adds	r2, r4, r3
 8013594:	4b09      	ldr	r3, [pc, #36]	; (80135bc <tcp_free_acked_segments+0xf4>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801359a:	2b00      	cmp	r3, #0
 801359c:	dd9c      	ble.n	80134d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801359e:	68bb      	ldr	r3, [r7, #8]
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3718      	adds	r7, #24
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bdb0      	pop	{r4, r5, r7, pc}
 80135a8:	0801963c 	.word	0x0801963c
 80135ac:	08019954 	.word	0x08019954
 80135b0:	080196b8 	.word	0x080196b8
 80135b4:	24004b34 	.word	0x24004b34
 80135b8:	0801997c 	.word	0x0801997c
 80135bc:	24004b30 	.word	0x24004b30

080135c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80135c0:	b5b0      	push	{r4, r5, r7, lr}
 80135c2:	b094      	sub	sp, #80	; 0x50
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80135c8:	2300      	movs	r3, #0
 80135ca:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d106      	bne.n	80135e0 <tcp_receive+0x20>
 80135d2:	4ba6      	ldr	r3, [pc, #664]	; (801386c <tcp_receive+0x2ac>)
 80135d4:	f240 427b 	movw	r2, #1147	; 0x47b
 80135d8:	49a5      	ldr	r1, [pc, #660]	; (8013870 <tcp_receive+0x2b0>)
 80135da:	48a6      	ldr	r0, [pc, #664]	; (8013874 <tcp_receive+0x2b4>)
 80135dc:	f003 fb4e 	bl	8016c7c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	7d1b      	ldrb	r3, [r3, #20]
 80135e4:	2b03      	cmp	r3, #3
 80135e6:	d806      	bhi.n	80135f6 <tcp_receive+0x36>
 80135e8:	4ba0      	ldr	r3, [pc, #640]	; (801386c <tcp_receive+0x2ac>)
 80135ea:	f240 427c 	movw	r2, #1148	; 0x47c
 80135ee:	49a2      	ldr	r1, [pc, #648]	; (8013878 <tcp_receive+0x2b8>)
 80135f0:	48a0      	ldr	r0, [pc, #640]	; (8013874 <tcp_receive+0x2b4>)
 80135f2:	f003 fb43 	bl	8016c7c <iprintf>

  if (flags & TCP_ACK) {
 80135f6:	4ba1      	ldr	r3, [pc, #644]	; (801387c <tcp_receive+0x2bc>)
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	f003 0310 	and.w	r3, r3, #16
 80135fe:	2b00      	cmp	r3, #0
 8013600:	f000 8263 	beq.w	8013aca <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801360a:	461a      	mov	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013610:	4413      	add	r3, r2
 8013612:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013618:	4b99      	ldr	r3, [pc, #612]	; (8013880 <tcp_receive+0x2c0>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	1ad3      	subs	r3, r2, r3
 801361e:	2b00      	cmp	r3, #0
 8013620:	db1b      	blt.n	801365a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013626:	4b96      	ldr	r3, [pc, #600]	; (8013880 <tcp_receive+0x2c0>)
 8013628:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801362a:	429a      	cmp	r2, r3
 801362c:	d106      	bne.n	801363c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013632:	4b94      	ldr	r3, [pc, #592]	; (8013884 <tcp_receive+0x2c4>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	1ad3      	subs	r3, r2, r3
 8013638:	2b00      	cmp	r3, #0
 801363a:	db0e      	blt.n	801365a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013640:	4b90      	ldr	r3, [pc, #576]	; (8013884 <tcp_receive+0x2c4>)
 8013642:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013644:	429a      	cmp	r2, r3
 8013646:	d125      	bne.n	8013694 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013648:	4b8f      	ldr	r3, [pc, #572]	; (8013888 <tcp_receive+0x2c8>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	89db      	ldrh	r3, [r3, #14]
 801364e:	b29a      	uxth	r2, r3
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013656:	429a      	cmp	r2, r3
 8013658:	d91c      	bls.n	8013694 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801365a:	4b8b      	ldr	r3, [pc, #556]	; (8013888 <tcp_receive+0x2c8>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	89db      	ldrh	r3, [r3, #14]
 8013660:	b29a      	uxth	r2, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013674:	429a      	cmp	r2, r3
 8013676:	d205      	bcs.n	8013684 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013684:	4b7e      	ldr	r3, [pc, #504]	; (8013880 <tcp_receive+0x2c0>)
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801368c:	4b7d      	ldr	r3, [pc, #500]	; (8013884 <tcp_receive+0x2c4>)
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013694:	4b7b      	ldr	r3, [pc, #492]	; (8013884 <tcp_receive+0x2c4>)
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801369c:	1ad3      	subs	r3, r2, r3
 801369e:	2b00      	cmp	r3, #0
 80136a0:	dc58      	bgt.n	8013754 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80136a2:	4b7a      	ldr	r3, [pc, #488]	; (801388c <tcp_receive+0x2cc>)
 80136a4:	881b      	ldrh	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d14b      	bne.n	8013742 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80136b4:	4413      	add	r3, r2
 80136b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d142      	bne.n	8013742 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	db3d      	blt.n	8013742 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80136ca:	4b6e      	ldr	r3, [pc, #440]	; (8013884 <tcp_receive+0x2c4>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d137      	bne.n	8013742 <tcp_receive+0x182>
              found_dupack = 1;
 80136d2:	2301      	movs	r3, #1
 80136d4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136dc:	2bff      	cmp	r3, #255	; 0xff
 80136de:	d007      	beq.n	80136f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136e6:	3301      	adds	r3, #1
 80136e8:	b2da      	uxtb	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136f6:	2b03      	cmp	r3, #3
 80136f8:	d91b      	bls.n	8013732 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013704:	4413      	add	r3, r2
 8013706:	b29a      	uxth	r2, r3
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801370e:	429a      	cmp	r2, r3
 8013710:	d30a      	bcc.n	8013728 <tcp_receive+0x168>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801371c:	4413      	add	r3, r2
 801371e:	b29a      	uxth	r2, r3
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013726:	e004      	b.n	8013732 <tcp_receive+0x172>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801372e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013738:	2b02      	cmp	r3, #2
 801373a:	d902      	bls.n	8013742 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f001 feed 	bl	801551c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013744:	2b00      	cmp	r3, #0
 8013746:	f040 8160 	bne.w	8013a0a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2200      	movs	r2, #0
 801374e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013752:	e15a      	b.n	8013a0a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013754:	4b4b      	ldr	r3, [pc, #300]	; (8013884 <tcp_receive+0x2c4>)
 8013756:	681a      	ldr	r2, [r3, #0]
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801375c:	1ad3      	subs	r3, r2, r3
 801375e:	3b01      	subs	r3, #1
 8013760:	2b00      	cmp	r3, #0
 8013762:	f2c0 814d 	blt.w	8013a00 <tcp_receive+0x440>
 8013766:	4b47      	ldr	r3, [pc, #284]	; (8013884 <tcp_receive+0x2c4>)
 8013768:	681a      	ldr	r2, [r3, #0]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801376e:	1ad3      	subs	r3, r2, r3
 8013770:	2b00      	cmp	r3, #0
 8013772:	f300 8145 	bgt.w	8013a00 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	8b5b      	ldrh	r3, [r3, #26]
 801377a:	f003 0304 	and.w	r3, r3, #4
 801377e:	2b00      	cmp	r3, #0
 8013780:	d010      	beq.n	80137a4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	8b5b      	ldrh	r3, [r3, #26]
 8013786:	f023 0304 	bic.w	r3, r3, #4
 801378a:	b29a      	uxth	r2, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2200      	movs	r2, #0
 80137a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2200      	movs	r2, #0
 80137a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137b2:	10db      	asrs	r3, r3, #3
 80137b4:	b21b      	sxth	r3, r3
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137be:	b29b      	uxth	r3, r3
 80137c0:	4413      	add	r3, r2
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	b21a      	sxth	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80137cc:	4b2d      	ldr	r3, [pc, #180]	; (8013884 <tcp_receive+0x2c4>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	1ad3      	subs	r3, r2, r3
 80137da:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2200      	movs	r2, #0
 80137e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80137e4:	4b27      	ldr	r3, [pc, #156]	; (8013884 <tcp_receive+0x2c4>)
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	7d1b      	ldrb	r3, [r3, #20]
 80137f0:	2b03      	cmp	r3, #3
 80137f2:	f240 8096 	bls.w	8013922 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013802:	429a      	cmp	r2, r3
 8013804:	d244      	bcs.n	8013890 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	8b5b      	ldrh	r3, [r3, #26]
 801380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801380e:	2b00      	cmp	r3, #0
 8013810:	d001      	beq.n	8013816 <tcp_receive+0x256>
 8013812:	2301      	movs	r3, #1
 8013814:	e000      	b.n	8013818 <tcp_receive+0x258>
 8013816:	2302      	movs	r3, #2
 8013818:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801381c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013820:	b29a      	uxth	r2, r3
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013826:	fb12 f303 	smulbb	r3, r2, r3
 801382a:	b29b      	uxth	r3, r3
 801382c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801382e:	4293      	cmp	r3, r2
 8013830:	bf28      	it	cs
 8013832:	4613      	movcs	r3, r2
 8013834:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801383c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801383e:	4413      	add	r3, r2
 8013840:	b29a      	uxth	r2, r3
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013848:	429a      	cmp	r2, r3
 801384a:	d309      	bcc.n	8013860 <tcp_receive+0x2a0>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013852:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013854:	4413      	add	r3, r2
 8013856:	b29a      	uxth	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801385e:	e060      	b.n	8013922 <tcp_receive+0x362>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013866:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801386a:	e05a      	b.n	8013922 <tcp_receive+0x362>
 801386c:	0801963c 	.word	0x0801963c
 8013870:	0801999c 	.word	0x0801999c
 8013874:	080196b8 	.word	0x080196b8
 8013878:	080199b8 	.word	0x080199b8
 801387c:	24004b38 	.word	0x24004b38
 8013880:	24004b2c 	.word	0x24004b2c
 8013884:	24004b30 	.word	0x24004b30
 8013888:	24004b1c 	.word	0x24004b1c
 801388c:	24004b36 	.word	0x24004b36
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013896:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013898:	4413      	add	r3, r2
 801389a:	b29a      	uxth	r2, r3
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d309      	bcc.n	80138ba <tcp_receive+0x2fa>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80138ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80138ae:	4413      	add	r3, r2
 80138b0:	b29a      	uxth	r2, r3
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80138b8:	e004      	b.n	80138c4 <tcp_receive+0x304>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d326      	bcc.n	8013922 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138e0:	1ad3      	subs	r3, r2, r3
 80138e2:	b29a      	uxth	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138f4:	4413      	add	r3, r2
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138fe:	429a      	cmp	r2, r3
 8013900:	d30a      	bcc.n	8013918 <tcp_receive+0x358>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801390c:	4413      	add	r3, r2
 801390e:	b29a      	uxth	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013916:	e004      	b.n	8013922 <tcp_receive+0x362>
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801391e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801392a:	4a98      	ldr	r2, [pc, #608]	; (8013b8c <tcp_receive+0x5cc>)
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f7ff fdcb 	bl	80134c8 <tcp_free_acked_segments>
 8013932:	4602      	mov	r2, r0
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013940:	4a93      	ldr	r2, [pc, #588]	; (8013b90 <tcp_receive+0x5d0>)
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f7ff fdc0 	bl	80134c8 <tcp_free_acked_segments>
 8013948:	4602      	mov	r2, r0
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013952:	2b00      	cmp	r3, #0
 8013954:	d104      	bne.n	8013960 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801395c:	861a      	strh	r2, [r3, #48]	; 0x30
 801395e:	e002      	b.n	8013966 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013970:	2b00      	cmp	r3, #0
 8013972:	d103      	bne.n	801397c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2200      	movs	r2, #0
 8013978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013982:	4b84      	ldr	r3, [pc, #528]	; (8013b94 <tcp_receive+0x5d4>)
 8013984:	881b      	ldrh	r3, [r3, #0]
 8013986:	4413      	add	r3, r2
 8013988:	b29a      	uxth	r2, r3
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	8b5b      	ldrh	r3, [r3, #26]
 8013994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013998:	2b00      	cmp	r3, #0
 801399a:	d035      	beq.n	8013a08 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d118      	bne.n	80139d6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d00c      	beq.n	80139c6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b4:	68db      	ldr	r3, [r3, #12]
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7f8 fca0 	bl	800c2fe <lwip_htonl>
 80139be:	4603      	mov	r3, r0
 80139c0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	dc20      	bgt.n	8013a08 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	8b5b      	ldrh	r3, [r3, #26]
 80139ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139d4:	e018      	b.n	8013a08 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7f8 fc8b 	bl	800c2fe <lwip_htonl>
 80139e8:	4603      	mov	r3, r0
 80139ea:	1ae3      	subs	r3, r4, r3
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	dc0b      	bgt.n	8013a08 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	8b5b      	ldrh	r3, [r3, #26]
 80139f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80139f8:	b29a      	uxth	r2, r3
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139fe:	e003      	b.n	8013a08 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f001 ff85 	bl	8015910 <tcp_send_empty_ack>
 8013a06:	e000      	b.n	8013a0a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013a08:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d05b      	beq.n	8013aca <tcp_receive+0x50a>
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a16:	4b60      	ldr	r3, [pc, #384]	; (8013b98 <tcp_receive+0x5d8>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	da54      	bge.n	8013aca <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013a20:	4b5e      	ldr	r3, [pc, #376]	; (8013b9c <tcp_receive+0x5dc>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013a34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a3e:	10db      	asrs	r3, r3, #3
 8013a40:	b21b      	sxth	r3, r3
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	1ad3      	subs	r3, r2, r3
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a58:	4413      	add	r3, r2
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	b21a      	sxth	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013a62:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	da05      	bge.n	8013a76 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8013a6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a6e:	425b      	negs	r3, r3
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013a76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a80:	109b      	asrs	r3, r3, #2
 8013a82:	b21b      	sxth	r3, r3
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a9a:	4413      	add	r3, r2
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	b21a      	sxth	r2, r3
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013aaa:	10db      	asrs	r3, r3, #3
 8013aac:	b21b      	sxth	r3, r3
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ab6:	b29b      	uxth	r3, r3
 8013ab8:	4413      	add	r3, r2
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	b21a      	sxth	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013aca:	4b35      	ldr	r3, [pc, #212]	; (8013ba0 <tcp_receive+0x5e0>)
 8013acc:	881b      	ldrh	r3, [r3, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	f000 84e1 	beq.w	8014496 <tcp_receive+0xed6>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	7d1b      	ldrb	r3, [r3, #20]
 8013ad8:	2b06      	cmp	r3, #6
 8013ada:	f200 84dc 	bhi.w	8014496 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ae2:	4b30      	ldr	r3, [pc, #192]	; (8013ba4 <tcp_receive+0x5e4>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	1ad3      	subs	r3, r2, r3
 8013ae8:	3b01      	subs	r3, #1
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	f2c0 808e 	blt.w	8013c0c <tcp_receive+0x64c>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013af4:	4b2a      	ldr	r3, [pc, #168]	; (8013ba0 <tcp_receive+0x5e0>)
 8013af6:	881b      	ldrh	r3, [r3, #0]
 8013af8:	4619      	mov	r1, r3
 8013afa:	4b2a      	ldr	r3, [pc, #168]	; (8013ba4 <tcp_receive+0x5e4>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	440b      	add	r3, r1
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	3301      	adds	r3, #1
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f300 8081 	bgt.w	8013c0c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013b0a:	4b27      	ldr	r3, [pc, #156]	; (8013ba8 <tcp_receive+0x5e8>)
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b14:	4b23      	ldr	r3, [pc, #140]	; (8013ba4 <tcp_receive+0x5e4>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	1ad3      	subs	r3, r2, r3
 8013b1a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013b1c:	4b22      	ldr	r3, [pc, #136]	; (8013ba8 <tcp_receive+0x5e8>)
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d106      	bne.n	8013b32 <tcp_receive+0x572>
 8013b24:	4b21      	ldr	r3, [pc, #132]	; (8013bac <tcp_receive+0x5ec>)
 8013b26:	f240 5294 	movw	r2, #1428	; 0x594
 8013b2a:	4921      	ldr	r1, [pc, #132]	; (8013bb0 <tcp_receive+0x5f0>)
 8013b2c:	4821      	ldr	r0, [pc, #132]	; (8013bb4 <tcp_receive+0x5f4>)
 8013b2e:	f003 f8a5 	bl	8016c7c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d906      	bls.n	8013b4a <tcp_receive+0x58a>
 8013b3c:	4b1b      	ldr	r3, [pc, #108]	; (8013bac <tcp_receive+0x5ec>)
 8013b3e:	f240 5295 	movw	r2, #1429	; 0x595
 8013b42:	491d      	ldr	r1, [pc, #116]	; (8013bb8 <tcp_receive+0x5f8>)
 8013b44:	481b      	ldr	r0, [pc, #108]	; (8013bb4 <tcp_receive+0x5f4>)
 8013b46:	f003 f899 	bl	8016c7c <iprintf>
      off = (u16_t)off32;
 8013b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013b50:	4b15      	ldr	r3, [pc, #84]	; (8013ba8 <tcp_receive+0x5e8>)
 8013b52:	685b      	ldr	r3, [r3, #4]
 8013b54:	891b      	ldrh	r3, [r3, #8]
 8013b56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d906      	bls.n	8013b6c <tcp_receive+0x5ac>
 8013b5e:	4b13      	ldr	r3, [pc, #76]	; (8013bac <tcp_receive+0x5ec>)
 8013b60:	f240 5297 	movw	r2, #1431	; 0x597
 8013b64:	4915      	ldr	r1, [pc, #84]	; (8013bbc <tcp_receive+0x5fc>)
 8013b66:	4813      	ldr	r0, [pc, #76]	; (8013bb4 <tcp_receive+0x5f4>)
 8013b68:	f003 f888 	bl	8016c7c <iprintf>
      inseg.len -= off;
 8013b6c:	4b0e      	ldr	r3, [pc, #56]	; (8013ba8 <tcp_receive+0x5e8>)
 8013b6e:	891a      	ldrh	r2, [r3, #8]
 8013b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b74:	1ad3      	subs	r3, r2, r3
 8013b76:	b29a      	uxth	r2, r3
 8013b78:	4b0b      	ldr	r3, [pc, #44]	; (8013ba8 <tcp_receive+0x5e8>)
 8013b7a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013b7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <tcp_receive+0x5e8>)
 8013b7e:	685b      	ldr	r3, [r3, #4]
 8013b80:	891a      	ldrh	r2, [r3, #8]
 8013b82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013b8a:	e029      	b.n	8013be0 <tcp_receive+0x620>
 8013b8c:	080199d4 	.word	0x080199d4
 8013b90:	080199dc 	.word	0x080199dc
 8013b94:	24004b34 	.word	0x24004b34
 8013b98:	24004b30 	.word	0x24004b30
 8013b9c:	24008354 	.word	0x24008354
 8013ba0:	24004b36 	.word	0x24004b36
 8013ba4:	24004b2c 	.word	0x24004b2c
 8013ba8:	24004b0c 	.word	0x24004b0c
 8013bac:	0801963c 	.word	0x0801963c
 8013bb0:	080199e4 	.word	0x080199e4
 8013bb4:	080196b8 	.word	0x080196b8
 8013bb8:	080199f4 	.word	0x080199f4
 8013bbc:	08019a04 	.word	0x08019a04
        off -= p->len;
 8013bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bc2:	895b      	ldrh	r3, [r3, #10]
 8013bc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013bc8:	1ad3      	subs	r3, r2, r3
 8013bca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bd0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013bd2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be2:	895b      	ldrh	r3, [r3, #10]
 8013be4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d8e9      	bhi.n	8013bc0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013bec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013bf4:	f7fc fa7e 	bl	80100f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bfc:	4a91      	ldr	r2, [pc, #580]	; (8013e44 <tcp_receive+0x884>)
 8013bfe:	6013      	str	r3, [r2, #0]
 8013c00:	4b91      	ldr	r3, [pc, #580]	; (8013e48 <tcp_receive+0x888>)
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	4a8f      	ldr	r2, [pc, #572]	; (8013e44 <tcp_receive+0x884>)
 8013c06:	6812      	ldr	r2, [r2, #0]
 8013c08:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013c0a:	e00d      	b.n	8013c28 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013c0c:	4b8d      	ldr	r3, [pc, #564]	; (8013e44 <tcp_receive+0x884>)
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c14:	1ad3      	subs	r3, r2, r3
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	da06      	bge.n	8013c28 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	8b5b      	ldrh	r3, [r3, #26]
 8013c1e:	f043 0302 	orr.w	r3, r3, #2
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013c28:	4b86      	ldr	r3, [pc, #536]	; (8013e44 <tcp_receive+0x884>)
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c30:	1ad3      	subs	r3, r2, r3
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	f2c0 842a 	blt.w	801448c <tcp_receive+0xecc>
 8013c38:	4b82      	ldr	r3, [pc, #520]	; (8013e44 <tcp_receive+0x884>)
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c40:	6879      	ldr	r1, [r7, #4]
 8013c42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c44:	440b      	add	r3, r1
 8013c46:	1ad3      	subs	r3, r2, r3
 8013c48:	3301      	adds	r3, #1
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	f300 841e 	bgt.w	801448c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c54:	4b7b      	ldr	r3, [pc, #492]	; (8013e44 <tcp_receive+0x884>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	f040 829a 	bne.w	8014192 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013c5e:	4b7a      	ldr	r3, [pc, #488]	; (8013e48 <tcp_receive+0x888>)
 8013c60:	891c      	ldrh	r4, [r3, #8]
 8013c62:	4b79      	ldr	r3, [pc, #484]	; (8013e48 <tcp_receive+0x888>)
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	899b      	ldrh	r3, [r3, #12]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7f8 fb32 	bl	800c2d4 <lwip_htons>
 8013c70:	4603      	mov	r3, r0
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	f003 0303 	and.w	r3, r3, #3
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d001      	beq.n	8013c80 <tcp_receive+0x6c0>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e000      	b.n	8013c82 <tcp_receive+0x6c2>
 8013c80:	2300      	movs	r3, #0
 8013c82:	4423      	add	r3, r4
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	4b71      	ldr	r3, [pc, #452]	; (8013e4c <tcp_receive+0x88c>)
 8013c88:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c8e:	4b6f      	ldr	r3, [pc, #444]	; (8013e4c <tcp_receive+0x88c>)
 8013c90:	881b      	ldrh	r3, [r3, #0]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d275      	bcs.n	8013d82 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c96:	4b6c      	ldr	r3, [pc, #432]	; (8013e48 <tcp_receive+0x888>)
 8013c98:	68db      	ldr	r3, [r3, #12]
 8013c9a:	899b      	ldrh	r3, [r3, #12]
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7f8 fb18 	bl	800c2d4 <lwip_htons>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	f003 0301 	and.w	r3, r3, #1
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d01f      	beq.n	8013cf0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013cb0:	4b65      	ldr	r3, [pc, #404]	; (8013e48 <tcp_receive+0x888>)
 8013cb2:	68db      	ldr	r3, [r3, #12]
 8013cb4:	899b      	ldrh	r3, [r3, #12]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	b21b      	sxth	r3, r3
 8013cba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013cbe:	b21c      	sxth	r4, r3
 8013cc0:	4b61      	ldr	r3, [pc, #388]	; (8013e48 <tcp_receive+0x888>)
 8013cc2:	68db      	ldr	r3, [r3, #12]
 8013cc4:	899b      	ldrh	r3, [r3, #12]
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7f8 fb03 	bl	800c2d4 <lwip_htons>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	b2db      	uxtb	r3, r3
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7f8 fafa 	bl	800c2d4 <lwip_htons>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	b21b      	sxth	r3, r3
 8013ce4:	4323      	orrs	r3, r4
 8013ce6:	b21a      	sxth	r2, r3
 8013ce8:	4b57      	ldr	r3, [pc, #348]	; (8013e48 <tcp_receive+0x888>)
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	b292      	uxth	r2, r2
 8013cee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cf4:	4b54      	ldr	r3, [pc, #336]	; (8013e48 <tcp_receive+0x888>)
 8013cf6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013cf8:	4b53      	ldr	r3, [pc, #332]	; (8013e48 <tcp_receive+0x888>)
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	899b      	ldrh	r3, [r3, #12]
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7f8 fae7 	bl	800c2d4 <lwip_htons>
 8013d06:	4603      	mov	r3, r0
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	f003 0302 	and.w	r3, r3, #2
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d005      	beq.n	8013d1e <tcp_receive+0x75e>
            inseg.len -= 1;
 8013d12:	4b4d      	ldr	r3, [pc, #308]	; (8013e48 <tcp_receive+0x888>)
 8013d14:	891b      	ldrh	r3, [r3, #8]
 8013d16:	3b01      	subs	r3, #1
 8013d18:	b29a      	uxth	r2, r3
 8013d1a:	4b4b      	ldr	r3, [pc, #300]	; (8013e48 <tcp_receive+0x888>)
 8013d1c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013d1e:	4b4a      	ldr	r3, [pc, #296]	; (8013e48 <tcp_receive+0x888>)
 8013d20:	685a      	ldr	r2, [r3, #4]
 8013d22:	4b49      	ldr	r3, [pc, #292]	; (8013e48 <tcp_receive+0x888>)
 8013d24:	891b      	ldrh	r3, [r3, #8]
 8013d26:	4619      	mov	r1, r3
 8013d28:	4610      	mov	r0, r2
 8013d2a:	f7fc f8e3 	bl	800fef4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013d2e:	4b46      	ldr	r3, [pc, #280]	; (8013e48 <tcp_receive+0x888>)
 8013d30:	891c      	ldrh	r4, [r3, #8]
 8013d32:	4b45      	ldr	r3, [pc, #276]	; (8013e48 <tcp_receive+0x888>)
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	899b      	ldrh	r3, [r3, #12]
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7f8 faca 	bl	800c2d4 <lwip_htons>
 8013d40:	4603      	mov	r3, r0
 8013d42:	b2db      	uxtb	r3, r3
 8013d44:	f003 0303 	and.w	r3, r3, #3
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d001      	beq.n	8013d50 <tcp_receive+0x790>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	e000      	b.n	8013d52 <tcp_receive+0x792>
 8013d50:	2300      	movs	r3, #0
 8013d52:	4423      	add	r3, r4
 8013d54:	b29a      	uxth	r2, r3
 8013d56:	4b3d      	ldr	r3, [pc, #244]	; (8013e4c <tcp_receive+0x88c>)
 8013d58:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013d5a:	4b3c      	ldr	r3, [pc, #240]	; (8013e4c <tcp_receive+0x88c>)
 8013d5c:	881b      	ldrh	r3, [r3, #0]
 8013d5e:	461a      	mov	r2, r3
 8013d60:	4b38      	ldr	r3, [pc, #224]	; (8013e44 <tcp_receive+0x884>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	441a      	add	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d6a:	6879      	ldr	r1, [r7, #4]
 8013d6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d6e:	440b      	add	r3, r1
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d006      	beq.n	8013d82 <tcp_receive+0x7c2>
 8013d74:	4b36      	ldr	r3, [pc, #216]	; (8013e50 <tcp_receive+0x890>)
 8013d76:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013d7a:	4936      	ldr	r1, [pc, #216]	; (8013e54 <tcp_receive+0x894>)
 8013d7c:	4836      	ldr	r0, [pc, #216]	; (8013e58 <tcp_receive+0x898>)
 8013d7e:	f002 ff7d 	bl	8016c7c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	f000 80e7 	beq.w	8013f5a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013d8c:	4b2e      	ldr	r3, [pc, #184]	; (8013e48 <tcp_receive+0x888>)
 8013d8e:	68db      	ldr	r3, [r3, #12]
 8013d90:	899b      	ldrh	r3, [r3, #12]
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7f8 fa9d 	bl	800c2d4 <lwip_htons>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	f003 0301 	and.w	r3, r3, #1
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d010      	beq.n	8013dc8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013da6:	e00a      	b.n	8013dbe <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f7fd fd97 	bl	80118ec <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d1f0      	bne.n	8013da8 <tcp_receive+0x7e8>
 8013dc6:	e0c8      	b.n	8013f5a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013dce:	e052      	b.n	8013e76 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	899b      	ldrh	r3, [r3, #12]
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7f8 fa7b 	bl	800c2d4 <lwip_htons>
 8013dde:	4603      	mov	r3, r0
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	f003 0301 	and.w	r3, r3, #1
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d03d      	beq.n	8013e66 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013dea:	4b17      	ldr	r3, [pc, #92]	; (8013e48 <tcp_receive+0x888>)
 8013dec:	68db      	ldr	r3, [r3, #12]
 8013dee:	899b      	ldrh	r3, [r3, #12]
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7f8 fa6e 	bl	800c2d4 <lwip_htons>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d130      	bne.n	8013e66 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013e04:	4b10      	ldr	r3, [pc, #64]	; (8013e48 <tcp_receive+0x888>)
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	899b      	ldrh	r3, [r3, #12]
 8013e0a:	b29c      	uxth	r4, r3
 8013e0c:	2001      	movs	r0, #1
 8013e0e:	f7f8 fa61 	bl	800c2d4 <lwip_htons>
 8013e12:	4603      	mov	r3, r0
 8013e14:	461a      	mov	r2, r3
 8013e16:	4b0c      	ldr	r3, [pc, #48]	; (8013e48 <tcp_receive+0x888>)
 8013e18:	68db      	ldr	r3, [r3, #12]
 8013e1a:	4322      	orrs	r2, r4
 8013e1c:	b292      	uxth	r2, r2
 8013e1e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013e20:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <tcp_receive+0x888>)
 8013e22:	891c      	ldrh	r4, [r3, #8]
 8013e24:	4b08      	ldr	r3, [pc, #32]	; (8013e48 <tcp_receive+0x888>)
 8013e26:	68db      	ldr	r3, [r3, #12]
 8013e28:	899b      	ldrh	r3, [r3, #12]
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7f8 fa51 	bl	800c2d4 <lwip_htons>
 8013e32:	4603      	mov	r3, r0
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	f003 0303 	and.w	r3, r3, #3
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d00e      	beq.n	8013e5c <tcp_receive+0x89c>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e00d      	b.n	8013e5e <tcp_receive+0x89e>
 8013e42:	bf00      	nop
 8013e44:	24004b2c 	.word	0x24004b2c
 8013e48:	24004b0c 	.word	0x24004b0c
 8013e4c:	24004b36 	.word	0x24004b36
 8013e50:	0801963c 	.word	0x0801963c
 8013e54:	08019a14 	.word	0x08019a14
 8013e58:	080196b8 	.word	0x080196b8
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	4423      	add	r3, r4
 8013e60:	b29a      	uxth	r2, r3
 8013e62:	4b98      	ldr	r3, [pc, #608]	; (80140c4 <tcp_receive+0xb04>)
 8013e64:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e68:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013e70:	6938      	ldr	r0, [r7, #16]
 8013e72:	f7fd fd3b 	bl	80118ec <tcp_seg_free>
            while (next &&
 8013e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d00e      	beq.n	8013e9a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013e7c:	4b91      	ldr	r3, [pc, #580]	; (80140c4 <tcp_receive+0xb04>)
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	461a      	mov	r2, r3
 8013e82:	4b91      	ldr	r3, [pc, #580]	; (80140c8 <tcp_receive+0xb08>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	441a      	add	r2, r3
 8013e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e90:	8909      	ldrh	r1, [r1, #8]
 8013e92:	440b      	add	r3, r1
 8013e94:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	da9a      	bge.n	8013dd0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d059      	beq.n	8013f54 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013ea0:	4b88      	ldr	r3, [pc, #544]	; (80140c4 <tcp_receive+0xb04>)
 8013ea2:	881b      	ldrh	r3, [r3, #0]
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	4b88      	ldr	r3, [pc, #544]	; (80140c8 <tcp_receive+0xb08>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	441a      	add	r2, r3
 8013eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	dd4d      	ble.n	8013f54 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	4b81      	ldr	r3, [pc, #516]	; (80140c8 <tcp_receive+0xb08>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	4b80      	ldr	r3, [pc, #512]	; (80140cc <tcp_receive+0xb0c>)
 8013ecc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013ece:	4b7f      	ldr	r3, [pc, #508]	; (80140cc <tcp_receive+0xb0c>)
 8013ed0:	68db      	ldr	r3, [r3, #12]
 8013ed2:	899b      	ldrh	r3, [r3, #12]
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7f8 f9fc 	bl	800c2d4 <lwip_htons>
 8013edc:	4603      	mov	r3, r0
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	f003 0302 	and.w	r3, r3, #2
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d005      	beq.n	8013ef4 <tcp_receive+0x934>
                inseg.len -= 1;
 8013ee8:	4b78      	ldr	r3, [pc, #480]	; (80140cc <tcp_receive+0xb0c>)
 8013eea:	891b      	ldrh	r3, [r3, #8]
 8013eec:	3b01      	subs	r3, #1
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	4b76      	ldr	r3, [pc, #472]	; (80140cc <tcp_receive+0xb0c>)
 8013ef2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013ef4:	4b75      	ldr	r3, [pc, #468]	; (80140cc <tcp_receive+0xb0c>)
 8013ef6:	685a      	ldr	r2, [r3, #4]
 8013ef8:	4b74      	ldr	r3, [pc, #464]	; (80140cc <tcp_receive+0xb0c>)
 8013efa:	891b      	ldrh	r3, [r3, #8]
 8013efc:	4619      	mov	r1, r3
 8013efe:	4610      	mov	r0, r2
 8013f00:	f7fb fff8 	bl	800fef4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013f04:	4b71      	ldr	r3, [pc, #452]	; (80140cc <tcp_receive+0xb0c>)
 8013f06:	891c      	ldrh	r4, [r3, #8]
 8013f08:	4b70      	ldr	r3, [pc, #448]	; (80140cc <tcp_receive+0xb0c>)
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	899b      	ldrh	r3, [r3, #12]
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7f8 f9df 	bl	800c2d4 <lwip_htons>
 8013f16:	4603      	mov	r3, r0
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	f003 0303 	and.w	r3, r3, #3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d001      	beq.n	8013f26 <tcp_receive+0x966>
 8013f22:	2301      	movs	r3, #1
 8013f24:	e000      	b.n	8013f28 <tcp_receive+0x968>
 8013f26:	2300      	movs	r3, #0
 8013f28:	4423      	add	r3, r4
 8013f2a:	b29a      	uxth	r2, r3
 8013f2c:	4b65      	ldr	r3, [pc, #404]	; (80140c4 <tcp_receive+0xb04>)
 8013f2e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013f30:	4b64      	ldr	r3, [pc, #400]	; (80140c4 <tcp_receive+0xb04>)
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	461a      	mov	r2, r3
 8013f36:	4b64      	ldr	r3, [pc, #400]	; (80140c8 <tcp_receive+0xb08>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	441a      	add	r2, r3
 8013f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	685b      	ldr	r3, [r3, #4]
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d006      	beq.n	8013f54 <tcp_receive+0x994>
 8013f46:	4b62      	ldr	r3, [pc, #392]	; (80140d0 <tcp_receive+0xb10>)
 8013f48:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8013f4c:	4961      	ldr	r1, [pc, #388]	; (80140d4 <tcp_receive+0xb14>)
 8013f4e:	4862      	ldr	r0, [pc, #392]	; (80140d8 <tcp_receive+0xb18>)
 8013f50:	f002 fe94 	bl	8016c7c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f58:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013f5a:	4b5a      	ldr	r3, [pc, #360]	; (80140c4 <tcp_receive+0xb04>)
 8013f5c:	881b      	ldrh	r3, [r3, #0]
 8013f5e:	461a      	mov	r2, r3
 8013f60:	4b59      	ldr	r3, [pc, #356]	; (80140c8 <tcp_receive+0xb08>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	441a      	add	r2, r3
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f6e:	4b55      	ldr	r3, [pc, #340]	; (80140c4 <tcp_receive+0xb04>)
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d206      	bcs.n	8013f84 <tcp_receive+0x9c4>
 8013f76:	4b56      	ldr	r3, [pc, #344]	; (80140d0 <tcp_receive+0xb10>)
 8013f78:	f240 6207 	movw	r2, #1543	; 0x607
 8013f7c:	4957      	ldr	r1, [pc, #348]	; (80140dc <tcp_receive+0xb1c>)
 8013f7e:	4856      	ldr	r0, [pc, #344]	; (80140d8 <tcp_receive+0xb18>)
 8013f80:	f002 fe7c 	bl	8016c7c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f88:	4b4e      	ldr	r3, [pc, #312]	; (80140c4 <tcp_receive+0xb04>)
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f7fc ffcd 	bl	8010f34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013f9a:	4b4c      	ldr	r3, [pc, #304]	; (80140cc <tcp_receive+0xb0c>)
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	891b      	ldrh	r3, [r3, #8]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d006      	beq.n	8013fb2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013fa4:	4b49      	ldr	r3, [pc, #292]	; (80140cc <tcp_receive+0xb0c>)
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	4a4d      	ldr	r2, [pc, #308]	; (80140e0 <tcp_receive+0xb20>)
 8013faa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013fac:	4b47      	ldr	r3, [pc, #284]	; (80140cc <tcp_receive+0xb0c>)
 8013fae:	2200      	movs	r2, #0
 8013fb0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013fb2:	4b46      	ldr	r3, [pc, #280]	; (80140cc <tcp_receive+0xb0c>)
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	899b      	ldrh	r3, [r3, #12]
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7f8 f98a 	bl	800c2d4 <lwip_htons>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	f003 0301 	and.w	r3, r3, #1
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f000 80b8 	beq.w	801413e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013fce:	4b45      	ldr	r3, [pc, #276]	; (80140e4 <tcp_receive+0xb24>)
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	f043 0320 	orr.w	r3, r3, #32
 8013fd6:	b2da      	uxtb	r2, r3
 8013fd8:	4b42      	ldr	r3, [pc, #264]	; (80140e4 <tcp_receive+0xb24>)
 8013fda:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013fdc:	e0af      	b.n	801413e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fe2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	4a36      	ldr	r2, [pc, #216]	; (80140c8 <tcp_receive+0xb08>)
 8013fee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	891b      	ldrh	r3, [r3, #8]
 8013ff4:	461c      	mov	r4, r3
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	68db      	ldr	r3, [r3, #12]
 8013ffa:	899b      	ldrh	r3, [r3, #12]
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7f8 f968 	bl	800c2d4 <lwip_htons>
 8014004:	4603      	mov	r3, r0
 8014006:	b2db      	uxtb	r3, r3
 8014008:	f003 0303 	and.w	r3, r3, #3
 801400c:	2b00      	cmp	r3, #0
 801400e:	d001      	beq.n	8014014 <tcp_receive+0xa54>
 8014010:	2301      	movs	r3, #1
 8014012:	e000      	b.n	8014016 <tcp_receive+0xa56>
 8014014:	2300      	movs	r3, #0
 8014016:	191a      	adds	r2, r3, r4
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801401c:	441a      	add	r2, r3
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014026:	461c      	mov	r4, r3
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	891b      	ldrh	r3, [r3, #8]
 801402c:	461d      	mov	r5, r3
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	899b      	ldrh	r3, [r3, #12]
 8014034:	b29b      	uxth	r3, r3
 8014036:	4618      	mov	r0, r3
 8014038:	f7f8 f94c 	bl	800c2d4 <lwip_htons>
 801403c:	4603      	mov	r3, r0
 801403e:	b2db      	uxtb	r3, r3
 8014040:	f003 0303 	and.w	r3, r3, #3
 8014044:	2b00      	cmp	r3, #0
 8014046:	d001      	beq.n	801404c <tcp_receive+0xa8c>
 8014048:	2301      	movs	r3, #1
 801404a:	e000      	b.n	801404e <tcp_receive+0xa8e>
 801404c:	2300      	movs	r3, #0
 801404e:	442b      	add	r3, r5
 8014050:	429c      	cmp	r4, r3
 8014052:	d206      	bcs.n	8014062 <tcp_receive+0xaa2>
 8014054:	4b1e      	ldr	r3, [pc, #120]	; (80140d0 <tcp_receive+0xb10>)
 8014056:	f240 622c 	movw	r2, #1580	; 0x62c
 801405a:	4923      	ldr	r1, [pc, #140]	; (80140e8 <tcp_receive+0xb28>)
 801405c:	481e      	ldr	r0, [pc, #120]	; (80140d8 <tcp_receive+0xb18>)
 801405e:	f002 fe0d 	bl	8016c7c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	891b      	ldrh	r3, [r3, #8]
 8014066:	461c      	mov	r4, r3
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	899b      	ldrh	r3, [r3, #12]
 801406e:	b29b      	uxth	r3, r3
 8014070:	4618      	mov	r0, r3
 8014072:	f7f8 f92f 	bl	800c2d4 <lwip_htons>
 8014076:	4603      	mov	r3, r0
 8014078:	b2db      	uxtb	r3, r3
 801407a:	f003 0303 	and.w	r3, r3, #3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <tcp_receive+0xac6>
 8014082:	2301      	movs	r3, #1
 8014084:	e000      	b.n	8014088 <tcp_receive+0xac8>
 8014086:	2300      	movs	r3, #0
 8014088:	1919      	adds	r1, r3, r4
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801408e:	b28b      	uxth	r3, r1
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f7fc ff4b 	bl	8010f34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	891b      	ldrh	r3, [r3, #8]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d028      	beq.n	80140fa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80140a8:	4b0d      	ldr	r3, [pc, #52]	; (80140e0 <tcp_receive+0xb20>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d01d      	beq.n	80140ec <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80140b0:	4b0b      	ldr	r3, [pc, #44]	; (80140e0 <tcp_receive+0xb20>)
 80140b2:	681a      	ldr	r2, [r3, #0]
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	685b      	ldr	r3, [r3, #4]
 80140b8:	4619      	mov	r1, r3
 80140ba:	4610      	mov	r0, r2
 80140bc:	f7fc f96e 	bl	801039c <pbuf_cat>
 80140c0:	e018      	b.n	80140f4 <tcp_receive+0xb34>
 80140c2:	bf00      	nop
 80140c4:	24004b36 	.word	0x24004b36
 80140c8:	24004b2c 	.word	0x24004b2c
 80140cc:	24004b0c 	.word	0x24004b0c
 80140d0:	0801963c 	.word	0x0801963c
 80140d4:	08019a4c 	.word	0x08019a4c
 80140d8:	080196b8 	.word	0x080196b8
 80140dc:	08019a88 	.word	0x08019a88
 80140e0:	24004b3c 	.word	0x24004b3c
 80140e4:	24004b39 	.word	0x24004b39
 80140e8:	08019aa8 	.word	0x08019aa8
            } else {
              recv_data = cseg->p;
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	685b      	ldr	r3, [r3, #4]
 80140f0:	4a70      	ldr	r2, [pc, #448]	; (80142b4 <tcp_receive+0xcf4>)
 80140f2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	2200      	movs	r2, #0
 80140f8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	68db      	ldr	r3, [r3, #12]
 80140fe:	899b      	ldrh	r3, [r3, #12]
 8014100:	b29b      	uxth	r3, r3
 8014102:	4618      	mov	r0, r3
 8014104:	f7f8 f8e6 	bl	800c2d4 <lwip_htons>
 8014108:	4603      	mov	r3, r0
 801410a:	b2db      	uxtb	r3, r3
 801410c:	f003 0301 	and.w	r3, r3, #1
 8014110:	2b00      	cmp	r3, #0
 8014112:	d00d      	beq.n	8014130 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014114:	4b68      	ldr	r3, [pc, #416]	; (80142b8 <tcp_receive+0xcf8>)
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f043 0320 	orr.w	r3, r3, #32
 801411c:	b2da      	uxtb	r2, r3
 801411e:	4b66      	ldr	r3, [pc, #408]	; (80142b8 <tcp_receive+0xcf8>)
 8014120:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	7d1b      	ldrb	r3, [r3, #20]
 8014126:	2b04      	cmp	r3, #4
 8014128:	d102      	bne.n	8014130 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2207      	movs	r2, #7
 801412e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	681a      	ldr	r2, [r3, #0]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014138:	68b8      	ldr	r0, [r7, #8]
 801413a:	f7fd fbd7 	bl	80118ec <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014142:	2b00      	cmp	r3, #0
 8014144:	d008      	beq.n	8014158 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	685a      	ldr	r2, [r3, #4]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014152:	429a      	cmp	r2, r3
 8014154:	f43f af43 	beq.w	8013fde <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	8b5b      	ldrh	r3, [r3, #26]
 801415c:	f003 0301 	and.w	r3, r3, #1
 8014160:	2b00      	cmp	r3, #0
 8014162:	d00e      	beq.n	8014182 <tcp_receive+0xbc2>
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	8b5b      	ldrh	r3, [r3, #26]
 8014168:	f023 0301 	bic.w	r3, r3, #1
 801416c:	b29a      	uxth	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	835a      	strh	r2, [r3, #26]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	8b5b      	ldrh	r3, [r3, #26]
 8014176:	f043 0302 	orr.w	r3, r3, #2
 801417a:	b29a      	uxth	r2, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014180:	e188      	b.n	8014494 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	8b5b      	ldrh	r3, [r3, #26]
 8014186:	f043 0301 	orr.w	r3, r3, #1
 801418a:	b29a      	uxth	r2, r3
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014190:	e180      	b.n	8014494 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014196:	2b00      	cmp	r3, #0
 8014198:	d106      	bne.n	80141a8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801419a:	4848      	ldr	r0, [pc, #288]	; (80142bc <tcp_receive+0xcfc>)
 801419c:	f7fd fbbe 	bl	801191c <tcp_seg_copy>
 80141a0:	4602      	mov	r2, r0
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	675a      	str	r2, [r3, #116]	; 0x74
 80141a6:	e16d      	b.n	8014484 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80141a8:	2300      	movs	r3, #0
 80141aa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80141b2:	e157      	b.n	8014464 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80141b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	685a      	ldr	r2, [r3, #4]
 80141ba:	4b41      	ldr	r3, [pc, #260]	; (80142c0 <tcp_receive+0xd00>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	429a      	cmp	r2, r3
 80141c0:	d11d      	bne.n	80141fe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80141c2:	4b3e      	ldr	r3, [pc, #248]	; (80142bc <tcp_receive+0xcfc>)
 80141c4:	891a      	ldrh	r2, [r3, #8]
 80141c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c8:	891b      	ldrh	r3, [r3, #8]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	f240 814f 	bls.w	801446e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80141d0:	483a      	ldr	r0, [pc, #232]	; (80142bc <tcp_receive+0xcfc>)
 80141d2:	f7fd fba3 	bl	801191c <tcp_seg_copy>
 80141d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	f000 8149 	beq.w	8014472 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80141e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d003      	beq.n	80141ee <tcp_receive+0xc2e>
                    prev->next = cseg;
 80141e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141e8:	697a      	ldr	r2, [r7, #20]
 80141ea:	601a      	str	r2, [r3, #0]
 80141ec:	e002      	b.n	80141f4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	697a      	ldr	r2, [r7, #20]
 80141f2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80141f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141f6:	6978      	ldr	r0, [r7, #20]
 80141f8:	f7ff f8de 	bl	80133b8 <tcp_oos_insert_segment>
                }
                break;
 80141fc:	e139      	b.n	8014472 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80141fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014200:	2b00      	cmp	r3, #0
 8014202:	d117      	bne.n	8014234 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014204:	4b2e      	ldr	r3, [pc, #184]	; (80142c0 <tcp_receive+0xd00>)
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	1ad3      	subs	r3, r2, r3
 8014210:	2b00      	cmp	r3, #0
 8014212:	da57      	bge.n	80142c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014214:	4829      	ldr	r0, [pc, #164]	; (80142bc <tcp_receive+0xcfc>)
 8014216:	f7fd fb81 	bl	801191c <tcp_seg_copy>
 801421a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801421c:	69bb      	ldr	r3, [r7, #24]
 801421e:	2b00      	cmp	r3, #0
 8014220:	f000 8129 	beq.w	8014476 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	69ba      	ldr	r2, [r7, #24]
 8014228:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801422a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801422c:	69b8      	ldr	r0, [r7, #24]
 801422e:	f7ff f8c3 	bl	80133b8 <tcp_oos_insert_segment>
                  }
                  break;
 8014232:	e120      	b.n	8014476 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014234:	4b22      	ldr	r3, [pc, #136]	; (80142c0 <tcp_receive+0xd00>)
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	3b01      	subs	r3, #1
 8014242:	2b00      	cmp	r3, #0
 8014244:	db3e      	blt.n	80142c4 <tcp_receive+0xd04>
 8014246:	4b1e      	ldr	r3, [pc, #120]	; (80142c0 <tcp_receive+0xd00>)
 8014248:	681a      	ldr	r2, [r3, #0]
 801424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	1ad3      	subs	r3, r2, r3
 8014252:	3301      	adds	r3, #1
 8014254:	2b00      	cmp	r3, #0
 8014256:	dc35      	bgt.n	80142c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014258:	4818      	ldr	r0, [pc, #96]	; (80142bc <tcp_receive+0xcfc>)
 801425a:	f7fd fb5f 	bl	801191c <tcp_seg_copy>
 801425e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	2b00      	cmp	r3, #0
 8014264:	f000 8109 	beq.w	801447a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801426a:	68db      	ldr	r3, [r3, #12]
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014270:	8912      	ldrh	r2, [r2, #8]
 8014272:	441a      	add	r2, r3
 8014274:	4b12      	ldr	r3, [pc, #72]	; (80142c0 <tcp_receive+0xd00>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	1ad3      	subs	r3, r2, r3
 801427a:	2b00      	cmp	r3, #0
 801427c:	dd12      	ble.n	80142a4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801427e:	4b10      	ldr	r3, [pc, #64]	; (80142c0 <tcp_receive+0xd00>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	b29a      	uxth	r2, r3
 8014284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	b29b      	uxth	r3, r3
 801428c:	1ad3      	subs	r3, r2, r3
 801428e:	b29a      	uxth	r2, r3
 8014290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014292:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014296:	685a      	ldr	r2, [r3, #4]
 8014298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801429a:	891b      	ldrh	r3, [r3, #8]
 801429c:	4619      	mov	r1, r3
 801429e:	4610      	mov	r0, r2
 80142a0:	f7fb fe28 	bl	800fef4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80142a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a6:	69fa      	ldr	r2, [r7, #28]
 80142a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80142aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142ac:	69f8      	ldr	r0, [r7, #28]
 80142ae:	f7ff f883 	bl	80133b8 <tcp_oos_insert_segment>
                  }
                  break;
 80142b2:	e0e2      	b.n	801447a <tcp_receive+0xeba>
 80142b4:	24004b3c 	.word	0x24004b3c
 80142b8:	24004b39 	.word	0x24004b39
 80142bc:	24004b0c 	.word	0x24004b0c
 80142c0:	24004b2c 	.word	0x24004b2c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80142c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80142c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	f040 80c6 	bne.w	801445e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80142d2:	4b80      	ldr	r3, [pc, #512]	; (80144d4 <tcp_receive+0xf14>)
 80142d4:	681a      	ldr	r2, [r3, #0]
 80142d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d8:	68db      	ldr	r3, [r3, #12]
 80142da:	685b      	ldr	r3, [r3, #4]
 80142dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80142de:	2b00      	cmp	r3, #0
 80142e0:	f340 80bd 	ble.w	801445e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80142e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e6:	68db      	ldr	r3, [r3, #12]
 80142e8:	899b      	ldrh	r3, [r3, #12]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7f7 fff1 	bl	800c2d4 <lwip_htons>
 80142f2:	4603      	mov	r3, r0
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	f003 0301 	and.w	r3, r3, #1
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	f040 80bf 	bne.w	801447e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014300:	4875      	ldr	r0, [pc, #468]	; (80144d8 <tcp_receive+0xf18>)
 8014302:	f7fd fb0b 	bl	801191c <tcp_seg_copy>
 8014306:	4602      	mov	r2, r0
 8014308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801430a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	f000 80b6 	beq.w	8014482 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801431e:	8912      	ldrh	r2, [r2, #8]
 8014320:	441a      	add	r2, r3
 8014322:	4b6c      	ldr	r3, [pc, #432]	; (80144d4 <tcp_receive+0xf14>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	2b00      	cmp	r3, #0
 801432a:	dd12      	ble.n	8014352 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801432c:	4b69      	ldr	r3, [pc, #420]	; (80144d4 <tcp_receive+0xf14>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	b29a      	uxth	r2, r3
 8014332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	b29b      	uxth	r3, r3
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	b29a      	uxth	r2, r3
 801433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014340:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014344:	685a      	ldr	r2, [r3, #4]
 8014346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014348:	891b      	ldrh	r3, [r3, #8]
 801434a:	4619      	mov	r1, r3
 801434c:	4610      	mov	r0, r2
 801434e:	f7fb fdd1 	bl	800fef4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014352:	4b62      	ldr	r3, [pc, #392]	; (80144dc <tcp_receive+0xf1c>)
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	461a      	mov	r2, r3
 8014358:	4b5e      	ldr	r3, [pc, #376]	; (80144d4 <tcp_receive+0xf14>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	441a      	add	r2, r3
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014362:	6879      	ldr	r1, [r7, #4]
 8014364:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014366:	440b      	add	r3, r1
 8014368:	1ad3      	subs	r3, r2, r3
 801436a:	2b00      	cmp	r3, #0
 801436c:	f340 8089 	ble.w	8014482 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	68db      	ldr	r3, [r3, #12]
 8014376:	899b      	ldrh	r3, [r3, #12]
 8014378:	b29b      	uxth	r3, r3
 801437a:	4618      	mov	r0, r3
 801437c:	f7f7 ffaa 	bl	800c2d4 <lwip_htons>
 8014380:	4603      	mov	r3, r0
 8014382:	b2db      	uxtb	r3, r3
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d022      	beq.n	80143d2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	68db      	ldr	r3, [r3, #12]
 8014392:	899b      	ldrh	r3, [r3, #12]
 8014394:	b29b      	uxth	r3, r3
 8014396:	b21b      	sxth	r3, r3
 8014398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801439c:	b21c      	sxth	r4, r3
 801439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7f7 ff93 	bl	800c2d4 <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7f7 ff8a 	bl	800c2d4 <lwip_htons>
 80143c0:	4603      	mov	r3, r0
 80143c2:	b21b      	sxth	r3, r3
 80143c4:	4323      	orrs	r3, r4
 80143c6:	b21a      	sxth	r2, r3
 80143c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	b292      	uxth	r2, r2
 80143d0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143dc:	4413      	add	r3, r2
 80143de:	b299      	uxth	r1, r3
 80143e0:	4b3c      	ldr	r3, [pc, #240]	; (80144d4 <tcp_receive+0xf14>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	b29a      	uxth	r2, r3
 80143e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	1a8a      	subs	r2, r1, r2
 80143ec:	b292      	uxth	r2, r2
 80143ee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80143f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	685a      	ldr	r2, [r3, #4]
 80143f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	891b      	ldrh	r3, [r3, #8]
 80143fc:	4619      	mov	r1, r3
 80143fe:	4610      	mov	r0, r2
 8014400:	f7fb fd78 	bl	800fef4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	891c      	ldrh	r4, [r3, #8]
 801440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	899b      	ldrh	r3, [r3, #12]
 8014412:	b29b      	uxth	r3, r3
 8014414:	4618      	mov	r0, r3
 8014416:	f7f7 ff5d 	bl	800c2d4 <lwip_htons>
 801441a:	4603      	mov	r3, r0
 801441c:	b2db      	uxtb	r3, r3
 801441e:	f003 0303 	and.w	r3, r3, #3
 8014422:	2b00      	cmp	r3, #0
 8014424:	d001      	beq.n	801442a <tcp_receive+0xe6a>
 8014426:	2301      	movs	r3, #1
 8014428:	e000      	b.n	801442c <tcp_receive+0xe6c>
 801442a:	2300      	movs	r3, #0
 801442c:	4423      	add	r3, r4
 801442e:	b29a      	uxth	r2, r3
 8014430:	4b2a      	ldr	r3, [pc, #168]	; (80144dc <tcp_receive+0xf1c>)
 8014432:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014434:	4b29      	ldr	r3, [pc, #164]	; (80144dc <tcp_receive+0xf1c>)
 8014436:	881b      	ldrh	r3, [r3, #0]
 8014438:	461a      	mov	r2, r3
 801443a:	4b26      	ldr	r3, [pc, #152]	; (80144d4 <tcp_receive+0xf14>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	441a      	add	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014444:	6879      	ldr	r1, [r7, #4]
 8014446:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014448:	440b      	add	r3, r1
 801444a:	429a      	cmp	r2, r3
 801444c:	d019      	beq.n	8014482 <tcp_receive+0xec2>
 801444e:	4b24      	ldr	r3, [pc, #144]	; (80144e0 <tcp_receive+0xf20>)
 8014450:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014454:	4923      	ldr	r1, [pc, #140]	; (80144e4 <tcp_receive+0xf24>)
 8014456:	4824      	ldr	r0, [pc, #144]	; (80144e8 <tcp_receive+0xf28>)
 8014458:	f002 fc10 	bl	8016c7c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801445c:	e011      	b.n	8014482 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	63bb      	str	r3, [r7, #56]	; 0x38
 8014464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014466:	2b00      	cmp	r3, #0
 8014468:	f47f aea4 	bne.w	80141b4 <tcp_receive+0xbf4>
 801446c:	e00a      	b.n	8014484 <tcp_receive+0xec4>
                break;
 801446e:	bf00      	nop
 8014470:	e008      	b.n	8014484 <tcp_receive+0xec4>
                break;
 8014472:	bf00      	nop
 8014474:	e006      	b.n	8014484 <tcp_receive+0xec4>
                  break;
 8014476:	bf00      	nop
 8014478:	e004      	b.n	8014484 <tcp_receive+0xec4>
                  break;
 801447a:	bf00      	nop
 801447c:	e002      	b.n	8014484 <tcp_receive+0xec4>
                  break;
 801447e:	bf00      	nop
 8014480:	e000      	b.n	8014484 <tcp_receive+0xec4>
                break;
 8014482:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f001 fa43 	bl	8015910 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801448a:	e003      	b.n	8014494 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f001 fa3f 	bl	8015910 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014492:	e01a      	b.n	80144ca <tcp_receive+0xf0a>
 8014494:	e019      	b.n	80144ca <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014496:	4b0f      	ldr	r3, [pc, #60]	; (80144d4 <tcp_receive+0xf14>)
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801449e:	1ad3      	subs	r3, r2, r3
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	db0a      	blt.n	80144ba <tcp_receive+0xefa>
 80144a4:	4b0b      	ldr	r3, [pc, #44]	; (80144d4 <tcp_receive+0xf14>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ac:	6879      	ldr	r1, [r7, #4]
 80144ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80144b0:	440b      	add	r3, r1
 80144b2:	1ad3      	subs	r3, r2, r3
 80144b4:	3301      	adds	r3, #1
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	dd07      	ble.n	80144ca <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	8b5b      	ldrh	r3, [r3, #26]
 80144be:	f043 0302 	orr.w	r3, r3, #2
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80144c8:	e7ff      	b.n	80144ca <tcp_receive+0xf0a>
 80144ca:	bf00      	nop
 80144cc:	3750      	adds	r7, #80	; 0x50
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bdb0      	pop	{r4, r5, r7, pc}
 80144d2:	bf00      	nop
 80144d4:	24004b2c 	.word	0x24004b2c
 80144d8:	24004b0c 	.word	0x24004b0c
 80144dc:	24004b36 	.word	0x24004b36
 80144e0:	0801963c 	.word	0x0801963c
 80144e4:	08019a14 	.word	0x08019a14
 80144e8:	080196b8 	.word	0x080196b8

080144ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80144ec:	b480      	push	{r7}
 80144ee:	b083      	sub	sp, #12
 80144f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80144f2:	4b15      	ldr	r3, [pc, #84]	; (8014548 <tcp_get_next_optbyte+0x5c>)
 80144f4:	881b      	ldrh	r3, [r3, #0]
 80144f6:	1c5a      	adds	r2, r3, #1
 80144f8:	b291      	uxth	r1, r2
 80144fa:	4a13      	ldr	r2, [pc, #76]	; (8014548 <tcp_get_next_optbyte+0x5c>)
 80144fc:	8011      	strh	r1, [r2, #0]
 80144fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014500:	4b12      	ldr	r3, [pc, #72]	; (801454c <tcp_get_next_optbyte+0x60>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d004      	beq.n	8014512 <tcp_get_next_optbyte+0x26>
 8014508:	4b11      	ldr	r3, [pc, #68]	; (8014550 <tcp_get_next_optbyte+0x64>)
 801450a:	881b      	ldrh	r3, [r3, #0]
 801450c:	88fa      	ldrh	r2, [r7, #6]
 801450e:	429a      	cmp	r2, r3
 8014510:	d208      	bcs.n	8014524 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014512:	4b10      	ldr	r3, [pc, #64]	; (8014554 <tcp_get_next_optbyte+0x68>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	3314      	adds	r3, #20
 8014518:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801451a:	88fb      	ldrh	r3, [r7, #6]
 801451c:	683a      	ldr	r2, [r7, #0]
 801451e:	4413      	add	r3, r2
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	e00b      	b.n	801453c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014524:	88fb      	ldrh	r3, [r7, #6]
 8014526:	b2da      	uxtb	r2, r3
 8014528:	4b09      	ldr	r3, [pc, #36]	; (8014550 <tcp_get_next_optbyte+0x64>)
 801452a:	881b      	ldrh	r3, [r3, #0]
 801452c:	b2db      	uxtb	r3, r3
 801452e:	1ad3      	subs	r3, r2, r3
 8014530:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014532:	4b06      	ldr	r3, [pc, #24]	; (801454c <tcp_get_next_optbyte+0x60>)
 8014534:	681a      	ldr	r2, [r3, #0]
 8014536:	797b      	ldrb	r3, [r7, #5]
 8014538:	4413      	add	r3, r2
 801453a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801453c:	4618      	mov	r0, r3
 801453e:	370c      	adds	r7, #12
 8014540:	46bd      	mov	sp, r7
 8014542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014546:	4770      	bx	lr
 8014548:	24004b28 	.word	0x24004b28
 801454c:	24004b24 	.word	0x24004b24
 8014550:	24004b22 	.word	0x24004b22
 8014554:	24004b1c 	.word	0x24004b1c

08014558 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <tcp_parseopt+0x1c>
 8014566:	4b31      	ldr	r3, [pc, #196]	; (801462c <tcp_parseopt+0xd4>)
 8014568:	f240 727d 	movw	r2, #1917	; 0x77d
 801456c:	4930      	ldr	r1, [pc, #192]	; (8014630 <tcp_parseopt+0xd8>)
 801456e:	4831      	ldr	r0, [pc, #196]	; (8014634 <tcp_parseopt+0xdc>)
 8014570:	f002 fb84 	bl	8016c7c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014574:	4b30      	ldr	r3, [pc, #192]	; (8014638 <tcp_parseopt+0xe0>)
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d053      	beq.n	8014624 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801457c:	4b2f      	ldr	r3, [pc, #188]	; (801463c <tcp_parseopt+0xe4>)
 801457e:	2200      	movs	r2, #0
 8014580:	801a      	strh	r2, [r3, #0]
 8014582:	e043      	b.n	801460c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8014584:	f7ff ffb2 	bl	80144ec <tcp_get_next_optbyte>
 8014588:	4603      	mov	r3, r0
 801458a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801458c:	7bfb      	ldrb	r3, [r7, #15]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d03c      	beq.n	801460c <tcp_parseopt+0xb4>
 8014592:	2b02      	cmp	r3, #2
 8014594:	d002      	beq.n	801459c <tcp_parseopt+0x44>
 8014596:	2b00      	cmp	r3, #0
 8014598:	d03f      	beq.n	801461a <tcp_parseopt+0xc2>
 801459a:	e026      	b.n	80145ea <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801459c:	f7ff ffa6 	bl	80144ec <tcp_get_next_optbyte>
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b04      	cmp	r3, #4
 80145a4:	d13b      	bne.n	801461e <tcp_parseopt+0xc6>
 80145a6:	4b25      	ldr	r3, [pc, #148]	; (801463c <tcp_parseopt+0xe4>)
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	3302      	adds	r3, #2
 80145ac:	4a22      	ldr	r2, [pc, #136]	; (8014638 <tcp_parseopt+0xe0>)
 80145ae:	8812      	ldrh	r2, [r2, #0]
 80145b0:	4293      	cmp	r3, r2
 80145b2:	dc34      	bgt.n	801461e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80145b4:	f7ff ff9a 	bl	80144ec <tcp_get_next_optbyte>
 80145b8:	4603      	mov	r3, r0
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	021b      	lsls	r3, r3, #8
 80145be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80145c0:	f7ff ff94 	bl	80144ec <tcp_get_next_optbyte>
 80145c4:	4603      	mov	r3, r0
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	89bb      	ldrh	r3, [r7, #12]
 80145ca:	4313      	orrs	r3, r2
 80145cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80145ce:	89bb      	ldrh	r3, [r7, #12]
 80145d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80145d4:	d804      	bhi.n	80145e0 <tcp_parseopt+0x88>
 80145d6:	89bb      	ldrh	r3, [r7, #12]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d001      	beq.n	80145e0 <tcp_parseopt+0x88>
 80145dc:	89ba      	ldrh	r2, [r7, #12]
 80145de:	e001      	b.n	80145e4 <tcp_parseopt+0x8c>
 80145e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80145e8:	e010      	b.n	801460c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80145ea:	f7ff ff7f 	bl	80144ec <tcp_get_next_optbyte>
 80145ee:	4603      	mov	r3, r0
 80145f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80145f2:	7afb      	ldrb	r3, [r7, #11]
 80145f4:	2b01      	cmp	r3, #1
 80145f6:	d914      	bls.n	8014622 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80145f8:	7afb      	ldrb	r3, [r7, #11]
 80145fa:	b29a      	uxth	r2, r3
 80145fc:	4b0f      	ldr	r3, [pc, #60]	; (801463c <tcp_parseopt+0xe4>)
 80145fe:	881b      	ldrh	r3, [r3, #0]
 8014600:	4413      	add	r3, r2
 8014602:	b29b      	uxth	r3, r3
 8014604:	3b02      	subs	r3, #2
 8014606:	b29a      	uxth	r2, r3
 8014608:	4b0c      	ldr	r3, [pc, #48]	; (801463c <tcp_parseopt+0xe4>)
 801460a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801460c:	4b0b      	ldr	r3, [pc, #44]	; (801463c <tcp_parseopt+0xe4>)
 801460e:	881a      	ldrh	r2, [r3, #0]
 8014610:	4b09      	ldr	r3, [pc, #36]	; (8014638 <tcp_parseopt+0xe0>)
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	429a      	cmp	r2, r3
 8014616:	d3b5      	bcc.n	8014584 <tcp_parseopt+0x2c>
 8014618:	e004      	b.n	8014624 <tcp_parseopt+0xcc>
          return;
 801461a:	bf00      	nop
 801461c:	e002      	b.n	8014624 <tcp_parseopt+0xcc>
            return;
 801461e:	bf00      	nop
 8014620:	e000      	b.n	8014624 <tcp_parseopt+0xcc>
            return;
 8014622:	bf00      	nop
      }
    }
  }
}
 8014624:	3710      	adds	r7, #16
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	0801963c 	.word	0x0801963c
 8014630:	08019ad0 	.word	0x08019ad0
 8014634:	080196b8 	.word	0x080196b8
 8014638:	24004b20 	.word	0x24004b20
 801463c:	24004b28 	.word	0x24004b28

08014640 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014640:	b480      	push	{r7}
 8014642:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014644:	4b05      	ldr	r3, [pc, #20]	; (801465c <tcp_trigger_input_pcb_close+0x1c>)
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	f043 0310 	orr.w	r3, r3, #16
 801464c:	b2da      	uxtb	r2, r3
 801464e:	4b03      	ldr	r3, [pc, #12]	; (801465c <tcp_trigger_input_pcb_close+0x1c>)
 8014650:	701a      	strb	r2, [r3, #0]
}
 8014652:	bf00      	nop
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	24004b39 	.word	0x24004b39

08014660 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b084      	sub	sp, #16
 8014664:	af00      	add	r7, sp, #0
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d00a      	beq.n	8014688 <tcp_route+0x28>
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	7a1b      	ldrb	r3, [r3, #8]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d006      	beq.n	8014688 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	7a1b      	ldrb	r3, [r3, #8]
 801467e:	4618      	mov	r0, r3
 8014680:	f7fb fa34 	bl	800faec <netif_get_by_index>
 8014684:	4603      	mov	r3, r0
 8014686:	e003      	b.n	8014690 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7f9 f8fb 	bl	800d884 <ip4_route>
 801468e:	4603      	mov	r3, r0
  }
}
 8014690:	4618      	mov	r0, r3
 8014692:	3710      	adds	r7, #16
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}

08014698 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014698:	b590      	push	{r4, r7, lr}
 801469a:	b087      	sub	sp, #28
 801469c:	af00      	add	r7, sp, #0
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	60b9      	str	r1, [r7, #8]
 80146a2:	603b      	str	r3, [r7, #0]
 80146a4:	4613      	mov	r3, r2
 80146a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d105      	bne.n	80146ba <tcp_create_segment+0x22>
 80146ae:	4b44      	ldr	r3, [pc, #272]	; (80147c0 <tcp_create_segment+0x128>)
 80146b0:	22a3      	movs	r2, #163	; 0xa3
 80146b2:	4944      	ldr	r1, [pc, #272]	; (80147c4 <tcp_create_segment+0x12c>)
 80146b4:	4844      	ldr	r0, [pc, #272]	; (80147c8 <tcp_create_segment+0x130>)
 80146b6:	f002 fae1 	bl	8016c7c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d105      	bne.n	80146cc <tcp_create_segment+0x34>
 80146c0:	4b3f      	ldr	r3, [pc, #252]	; (80147c0 <tcp_create_segment+0x128>)
 80146c2:	22a4      	movs	r2, #164	; 0xa4
 80146c4:	4941      	ldr	r1, [pc, #260]	; (80147cc <tcp_create_segment+0x134>)
 80146c6:	4840      	ldr	r0, [pc, #256]	; (80147c8 <tcp_create_segment+0x130>)
 80146c8:	f002 fad8 	bl	8016c7c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80146cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80146d0:	009b      	lsls	r3, r3, #2
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	f003 0304 	and.w	r3, r3, #4
 80146d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80146da:	2003      	movs	r0, #3
 80146dc:	f7fa fe7a 	bl	800f3d4 <memp_malloc>
 80146e0:	6138      	str	r0, [r7, #16]
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d104      	bne.n	80146f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80146e8:	68b8      	ldr	r0, [r7, #8]
 80146ea:	f7fb fd89 	bl	8010200 <pbuf_free>
    return NULL;
 80146ee:	2300      	movs	r3, #0
 80146f0:	e061      	b.n	80147b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80146f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	2200      	movs	r2, #0
 80146fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	68ba      	ldr	r2, [r7, #8]
 8014704:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	891a      	ldrh	r2, [r3, #8]
 801470a:	7dfb      	ldrb	r3, [r7, #23]
 801470c:	b29b      	uxth	r3, r3
 801470e:	429a      	cmp	r2, r3
 8014710:	d205      	bcs.n	801471e <tcp_create_segment+0x86>
 8014712:	4b2b      	ldr	r3, [pc, #172]	; (80147c0 <tcp_create_segment+0x128>)
 8014714:	22b0      	movs	r2, #176	; 0xb0
 8014716:	492e      	ldr	r1, [pc, #184]	; (80147d0 <tcp_create_segment+0x138>)
 8014718:	482b      	ldr	r0, [pc, #172]	; (80147c8 <tcp_create_segment+0x130>)
 801471a:	f002 faaf 	bl	8016c7c <iprintf>
  seg->len = p->tot_len - optlen;
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	891a      	ldrh	r2, [r3, #8]
 8014722:	7dfb      	ldrb	r3, [r7, #23]
 8014724:	b29b      	uxth	r3, r3
 8014726:	1ad3      	subs	r3, r2, r3
 8014728:	b29a      	uxth	r2, r3
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801472e:	2114      	movs	r1, #20
 8014730:	68b8      	ldr	r0, [r7, #8]
 8014732:	f7fb fccf 	bl	80100d4 <pbuf_add_header>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d004      	beq.n	8014746 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801473c:	6938      	ldr	r0, [r7, #16]
 801473e:	f7fd f8d5 	bl	80118ec <tcp_seg_free>
    return NULL;
 8014742:	2300      	movs	r3, #0
 8014744:	e037      	b.n	80147b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	685a      	ldr	r2, [r3, #4]
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	8ada      	ldrh	r2, [r3, #22]
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	68dc      	ldr	r4, [r3, #12]
 8014758:	4610      	mov	r0, r2
 801475a:	f7f7 fdbb 	bl	800c2d4 <lwip_htons>
 801475e:	4603      	mov	r3, r0
 8014760:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	8b1a      	ldrh	r2, [r3, #24]
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	68dc      	ldr	r4, [r3, #12]
 801476a:	4610      	mov	r0, r2
 801476c:	f7f7 fdb2 	bl	800c2d4 <lwip_htons>
 8014770:	4603      	mov	r3, r0
 8014772:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	68dc      	ldr	r4, [r3, #12]
 8014778:	6838      	ldr	r0, [r7, #0]
 801477a:	f7f7 fdc0 	bl	800c2fe <lwip_htonl>
 801477e:	4603      	mov	r3, r0
 8014780:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014782:	7dfb      	ldrb	r3, [r7, #23]
 8014784:	089b      	lsrs	r3, r3, #2
 8014786:	b2db      	uxtb	r3, r3
 8014788:	b29b      	uxth	r3, r3
 801478a:	3305      	adds	r3, #5
 801478c:	b29b      	uxth	r3, r3
 801478e:	031b      	lsls	r3, r3, #12
 8014790:	b29a      	uxth	r2, r3
 8014792:	79fb      	ldrb	r3, [r7, #7]
 8014794:	b29b      	uxth	r3, r3
 8014796:	4313      	orrs	r3, r2
 8014798:	b29a      	uxth	r2, r3
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	68dc      	ldr	r4, [r3, #12]
 801479e:	4610      	mov	r0, r2
 80147a0:	f7f7 fd98 	bl	800c2d4 <lwip_htons>
 80147a4:	4603      	mov	r3, r0
 80147a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	2200      	movs	r2, #0
 80147ae:	749a      	strb	r2, [r3, #18]
 80147b0:	2200      	movs	r2, #0
 80147b2:	74da      	strb	r2, [r3, #19]
  return seg;
 80147b4:	693b      	ldr	r3, [r7, #16]
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	371c      	adds	r7, #28
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd90      	pop	{r4, r7, pc}
 80147be:	bf00      	nop
 80147c0:	08019aec 	.word	0x08019aec
 80147c4:	08019b54 	.word	0x08019b54
 80147c8:	08019b74 	.word	0x08019b74
 80147cc:	08019b9c 	.word	0x08019b9c
 80147d0:	08019bc0 	.word	0x08019bc0

080147d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80147d4:	b590      	push	{r4, r7, lr}
 80147d6:	b08b      	sub	sp, #44	; 0x2c
 80147d8:	af02      	add	r7, sp, #8
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	460b      	mov	r3, r1
 80147de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80147e0:	2300      	movs	r3, #0
 80147e2:	61fb      	str	r3, [r7, #28]
 80147e4:	2300      	movs	r3, #0
 80147e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80147e8:	2300      	movs	r3, #0
 80147ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d106      	bne.n	8014800 <tcp_split_unsent_seg+0x2c>
 80147f2:	4b95      	ldr	r3, [pc, #596]	; (8014a48 <tcp_split_unsent_seg+0x274>)
 80147f4:	f240 324b 	movw	r2, #843	; 0x34b
 80147f8:	4994      	ldr	r1, [pc, #592]	; (8014a4c <tcp_split_unsent_seg+0x278>)
 80147fa:	4895      	ldr	r0, [pc, #596]	; (8014a50 <tcp_split_unsent_seg+0x27c>)
 80147fc:	f002 fa3e 	bl	8016c7c <iprintf>

  useg = pcb->unsent;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014804:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d102      	bne.n	8014812 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801480c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014810:	e116      	b.n	8014a40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014812:	887b      	ldrh	r3, [r7, #2]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d109      	bne.n	801482c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014818:	4b8b      	ldr	r3, [pc, #556]	; (8014a48 <tcp_split_unsent_seg+0x274>)
 801481a:	f240 3253 	movw	r2, #851	; 0x353
 801481e:	498d      	ldr	r1, [pc, #564]	; (8014a54 <tcp_split_unsent_seg+0x280>)
 8014820:	488b      	ldr	r0, [pc, #556]	; (8014a50 <tcp_split_unsent_seg+0x27c>)
 8014822:	f002 fa2b 	bl	8016c7c <iprintf>
    return ERR_VAL;
 8014826:	f06f 0305 	mvn.w	r3, #5
 801482a:	e109      	b.n	8014a40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	891b      	ldrh	r3, [r3, #8]
 8014830:	887a      	ldrh	r2, [r7, #2]
 8014832:	429a      	cmp	r2, r3
 8014834:	d301      	bcc.n	801483a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014836:	2300      	movs	r3, #0
 8014838:	e102      	b.n	8014a40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801483e:	887a      	ldrh	r2, [r7, #2]
 8014840:	429a      	cmp	r2, r3
 8014842:	d906      	bls.n	8014852 <tcp_split_unsent_seg+0x7e>
 8014844:	4b80      	ldr	r3, [pc, #512]	; (8014a48 <tcp_split_unsent_seg+0x274>)
 8014846:	f240 325b 	movw	r2, #859	; 0x35b
 801484a:	4983      	ldr	r1, [pc, #524]	; (8014a58 <tcp_split_unsent_seg+0x284>)
 801484c:	4880      	ldr	r0, [pc, #512]	; (8014a50 <tcp_split_unsent_seg+0x27c>)
 801484e:	f002 fa15 	bl	8016c7c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	891b      	ldrh	r3, [r3, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <tcp_split_unsent_seg+0x94>
 801485a:	4b7b      	ldr	r3, [pc, #492]	; (8014a48 <tcp_split_unsent_seg+0x274>)
 801485c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014860:	497e      	ldr	r1, [pc, #504]	; (8014a5c <tcp_split_unsent_seg+0x288>)
 8014862:	487b      	ldr	r0, [pc, #492]	; (8014a50 <tcp_split_unsent_seg+0x27c>)
 8014864:	f002 fa0a 	bl	8016c7c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	7a9b      	ldrb	r3, [r3, #10]
 801486c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801486e:	7bfb      	ldrb	r3, [r7, #15]
 8014870:	009b      	lsls	r3, r3, #2
 8014872:	b2db      	uxtb	r3, r3
 8014874:	f003 0304 	and.w	r3, r3, #4
 8014878:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	891a      	ldrh	r2, [r3, #8]
 801487e:	887b      	ldrh	r3, [r7, #2]
 8014880:	1ad3      	subs	r3, r2, r3
 8014882:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014884:	7bbb      	ldrb	r3, [r7, #14]
 8014886:	b29a      	uxth	r2, r3
 8014888:	89bb      	ldrh	r3, [r7, #12]
 801488a:	4413      	add	r3, r2
 801488c:	b29b      	uxth	r3, r3
 801488e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014892:	4619      	mov	r1, r3
 8014894:	2036      	movs	r0, #54	; 0x36
 8014896:	f7fb f9d3 	bl	800fc40 <pbuf_alloc>
 801489a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	f000 80b7 	beq.w	8014a12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	891a      	ldrh	r2, [r3, #8]
 80148aa:	697b      	ldr	r3, [r7, #20]
 80148ac:	891b      	ldrh	r3, [r3, #8]
 80148ae:	1ad3      	subs	r3, r2, r3
 80148b0:	b29a      	uxth	r2, r3
 80148b2:	887b      	ldrh	r3, [r7, #2]
 80148b4:	4413      	add	r3, r2
 80148b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	6858      	ldr	r0, [r3, #4]
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	685a      	ldr	r2, [r3, #4]
 80148c0:	7bbb      	ldrb	r3, [r7, #14]
 80148c2:	18d1      	adds	r1, r2, r3
 80148c4:	897b      	ldrh	r3, [r7, #10]
 80148c6:	89ba      	ldrh	r2, [r7, #12]
 80148c8:	f7fb fea0 	bl	801060c <pbuf_copy_partial>
 80148cc:	4603      	mov	r3, r0
 80148ce:	461a      	mov	r2, r3
 80148d0:	89bb      	ldrh	r3, [r7, #12]
 80148d2:	4293      	cmp	r3, r2
 80148d4:	f040 809f 	bne.w	8014a16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	899b      	ldrh	r3, [r3, #12]
 80148de:	b29b      	uxth	r3, r3
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7f7 fcf7 	bl	800c2d4 <lwip_htons>
 80148e6:	4603      	mov	r3, r0
 80148e8:	b2db      	uxtb	r3, r3
 80148ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80148ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80148f0:	2300      	movs	r3, #0
 80148f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80148f4:	7efb      	ldrb	r3, [r7, #27]
 80148f6:	f003 0308 	and.w	r3, r3, #8
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d007      	beq.n	801490e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80148fe:	7efb      	ldrb	r3, [r7, #27]
 8014900:	f023 0308 	bic.w	r3, r3, #8
 8014904:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014906:	7ebb      	ldrb	r3, [r7, #26]
 8014908:	f043 0308 	orr.w	r3, r3, #8
 801490c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801490e:	7efb      	ldrb	r3, [r7, #27]
 8014910:	f003 0301 	and.w	r3, r3, #1
 8014914:	2b00      	cmp	r3, #0
 8014916:	d007      	beq.n	8014928 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014918:	7efb      	ldrb	r3, [r7, #27]
 801491a:	f023 0301 	bic.w	r3, r3, #1
 801491e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014920:	7ebb      	ldrb	r3, [r7, #26]
 8014922:	f043 0301 	orr.w	r3, r3, #1
 8014926:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	68db      	ldr	r3, [r3, #12]
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	4618      	mov	r0, r3
 8014930:	f7f7 fce5 	bl	800c2fe <lwip_htonl>
 8014934:	4602      	mov	r2, r0
 8014936:	887b      	ldrh	r3, [r7, #2]
 8014938:	18d1      	adds	r1, r2, r3
 801493a:	7eba      	ldrb	r2, [r7, #26]
 801493c:	7bfb      	ldrb	r3, [r7, #15]
 801493e:	9300      	str	r3, [sp, #0]
 8014940:	460b      	mov	r3, r1
 8014942:	6939      	ldr	r1, [r7, #16]
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7ff fea7 	bl	8014698 <tcp_create_segment>
 801494a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d063      	beq.n	8014a1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	4618      	mov	r0, r3
 8014958:	f7fb fce0 	bl	801031c <pbuf_clen>
 801495c:	4603      	mov	r3, r0
 801495e:	461a      	mov	r2, r3
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014966:	1a9b      	subs	r3, r3, r2
 8014968:	b29a      	uxth	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	6858      	ldr	r0, [r3, #4]
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	685b      	ldr	r3, [r3, #4]
 8014978:	891a      	ldrh	r2, [r3, #8]
 801497a:	89bb      	ldrh	r3, [r7, #12]
 801497c:	1ad3      	subs	r3, r2, r3
 801497e:	b29b      	uxth	r3, r3
 8014980:	4619      	mov	r1, r3
 8014982:	f7fb fab7 	bl	800fef4 <pbuf_realloc>
  useg->len -= remainder;
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	891a      	ldrh	r2, [r3, #8]
 801498a:	89bb      	ldrh	r3, [r7, #12]
 801498c:	1ad3      	subs	r3, r2, r3
 801498e:	b29a      	uxth	r2, r3
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	899b      	ldrh	r3, [r3, #12]
 801499a:	b29c      	uxth	r4, r3
 801499c:	7efb      	ldrb	r3, [r7, #27]
 801499e:	b29b      	uxth	r3, r3
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7f7 fc97 	bl	800c2d4 <lwip_htons>
 80149a6:	4603      	mov	r3, r0
 80149a8:	461a      	mov	r2, r3
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	4322      	orrs	r2, r4
 80149b0:	b292      	uxth	r2, r2
 80149b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7fb fcaf 	bl	801031c <pbuf_clen>
 80149be:	4603      	mov	r3, r0
 80149c0:	461a      	mov	r2, r3
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149c8:	4413      	add	r3, r2
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7fb fca0 	bl	801031c <pbuf_clen>
 80149dc:	4603      	mov	r3, r0
 80149de:	461a      	mov	r2, r3
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149e6:	4413      	add	r3, r2
 80149e8:	b29a      	uxth	r2, r3
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80149f8:	697b      	ldr	r3, [r7, #20]
 80149fa:	69fa      	ldr	r2, [r7, #28]
 80149fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80149fe:	69fb      	ldr	r3, [r7, #28]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d103      	bne.n	8014a0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	e016      	b.n	8014a40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014a12:	bf00      	nop
 8014a14:	e002      	b.n	8014a1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014a16:	bf00      	nop
 8014a18:	e000      	b.n	8014a1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014a1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014a1c:	69fb      	ldr	r3, [r7, #28]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d006      	beq.n	8014a30 <tcp_split_unsent_seg+0x25c>
 8014a22:	4b09      	ldr	r3, [pc, #36]	; (8014a48 <tcp_split_unsent_seg+0x274>)
 8014a24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014a28:	490d      	ldr	r1, [pc, #52]	; (8014a60 <tcp_split_unsent_seg+0x28c>)
 8014a2a:	4809      	ldr	r0, [pc, #36]	; (8014a50 <tcp_split_unsent_seg+0x27c>)
 8014a2c:	f002 f926 	bl	8016c7c <iprintf>
  if (p != NULL) {
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d002      	beq.n	8014a3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014a36:	6938      	ldr	r0, [r7, #16]
 8014a38:	f7fb fbe2 	bl	8010200 <pbuf_free>
  }

  return ERR_MEM;
 8014a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	3724      	adds	r7, #36	; 0x24
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd90      	pop	{r4, r7, pc}
 8014a48:	08019aec 	.word	0x08019aec
 8014a4c:	08019eb4 	.word	0x08019eb4
 8014a50:	08019b74 	.word	0x08019b74
 8014a54:	08019ed8 	.word	0x08019ed8
 8014a58:	08019efc 	.word	0x08019efc
 8014a5c:	08019f0c 	.word	0x08019f0c
 8014a60:	08019f1c 	.word	0x08019f1c

08014a64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014a64:	b590      	push	{r4, r7, lr}
 8014a66:	b085      	sub	sp, #20
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d106      	bne.n	8014a80 <tcp_send_fin+0x1c>
 8014a72:	4b21      	ldr	r3, [pc, #132]	; (8014af8 <tcp_send_fin+0x94>)
 8014a74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014a78:	4920      	ldr	r1, [pc, #128]	; (8014afc <tcp_send_fin+0x98>)
 8014a7a:	4821      	ldr	r0, [pc, #132]	; (8014b00 <tcp_send_fin+0x9c>)
 8014a7c:	f002 f8fe 	bl	8016c7c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d02e      	beq.n	8014ae6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a8c:	60fb      	str	r3, [r7, #12]
 8014a8e:	e002      	b.n	8014a96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d1f8      	bne.n	8014a90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	68db      	ldr	r3, [r3, #12]
 8014aa2:	899b      	ldrh	r3, [r3, #12]
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7f7 fc14 	bl	800c2d4 <lwip_htons>
 8014aac:	4603      	mov	r3, r0
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	f003 0307 	and.w	r3, r3, #7
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d116      	bne.n	8014ae6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	68db      	ldr	r3, [r3, #12]
 8014abc:	899b      	ldrh	r3, [r3, #12]
 8014abe:	b29c      	uxth	r4, r3
 8014ac0:	2001      	movs	r0, #1
 8014ac2:	f7f7 fc07 	bl	800c2d4 <lwip_htons>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	461a      	mov	r2, r3
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	68db      	ldr	r3, [r3, #12]
 8014ace:	4322      	orrs	r2, r4
 8014ad0:	b292      	uxth	r2, r2
 8014ad2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	8b5b      	ldrh	r3, [r3, #26]
 8014ad8:	f043 0320 	orr.w	r3, r3, #32
 8014adc:	b29a      	uxth	r2, r3
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	e004      	b.n	8014af0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014ae6:	2101      	movs	r1, #1
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f000 f80b 	bl	8014b04 <tcp_enqueue_flags>
 8014aee:	4603      	mov	r3, r0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3714      	adds	r7, #20
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd90      	pop	{r4, r7, pc}
 8014af8:	08019aec 	.word	0x08019aec
 8014afc:	08019f28 	.word	0x08019f28
 8014b00:	08019b74 	.word	0x08019b74

08014b04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b08a      	sub	sp, #40	; 0x28
 8014b08:	af02      	add	r7, sp, #8
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014b10:	2300      	movs	r3, #0
 8014b12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014b14:	2300      	movs	r3, #0
 8014b16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014b18:	78fb      	ldrb	r3, [r7, #3]
 8014b1a:	f003 0303 	and.w	r3, r3, #3
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d106      	bne.n	8014b30 <tcp_enqueue_flags+0x2c>
 8014b22:	4b67      	ldr	r3, [pc, #412]	; (8014cc0 <tcp_enqueue_flags+0x1bc>)
 8014b24:	f240 4212 	movw	r2, #1042	; 0x412
 8014b28:	4966      	ldr	r1, [pc, #408]	; (8014cc4 <tcp_enqueue_flags+0x1c0>)
 8014b2a:	4867      	ldr	r0, [pc, #412]	; (8014cc8 <tcp_enqueue_flags+0x1c4>)
 8014b2c:	f002 f8a6 	bl	8016c7c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d106      	bne.n	8014b44 <tcp_enqueue_flags+0x40>
 8014b36:	4b62      	ldr	r3, [pc, #392]	; (8014cc0 <tcp_enqueue_flags+0x1bc>)
 8014b38:	f240 4213 	movw	r2, #1043	; 0x413
 8014b3c:	4963      	ldr	r1, [pc, #396]	; (8014ccc <tcp_enqueue_flags+0x1c8>)
 8014b3e:	4862      	ldr	r0, [pc, #392]	; (8014cc8 <tcp_enqueue_flags+0x1c4>)
 8014b40:	f002 f89c 	bl	8016c7c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014b44:	78fb      	ldrb	r3, [r7, #3]
 8014b46:	f003 0302 	and.w	r3, r3, #2
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d001      	beq.n	8014b52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014b4e:	2301      	movs	r3, #1
 8014b50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014b52:	7ffb      	ldrb	r3, [r7, #31]
 8014b54:	009b      	lsls	r3, r3, #2
 8014b56:	b2db      	uxtb	r3, r3
 8014b58:	f003 0304 	and.w	r3, r3, #4
 8014b5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014b5e:	7dfb      	ldrb	r3, [r7, #23]
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b66:	4619      	mov	r1, r3
 8014b68:	2036      	movs	r0, #54	; 0x36
 8014b6a:	f7fb f869 	bl	800fc40 <pbuf_alloc>
 8014b6e:	6138      	str	r0, [r7, #16]
 8014b70:	693b      	ldr	r3, [r7, #16]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d109      	bne.n	8014b8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	8b5b      	ldrh	r3, [r3, #26]
 8014b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b7e:	b29a      	uxth	r2, r3
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b88:	e095      	b.n	8014cb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	895a      	ldrh	r2, [r3, #10]
 8014b8e:	7dfb      	ldrb	r3, [r7, #23]
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d206      	bcs.n	8014ba4 <tcp_enqueue_flags+0xa0>
 8014b96:	4b4a      	ldr	r3, [pc, #296]	; (8014cc0 <tcp_enqueue_flags+0x1bc>)
 8014b98:	f240 423a 	movw	r2, #1082	; 0x43a
 8014b9c:	494c      	ldr	r1, [pc, #304]	; (8014cd0 <tcp_enqueue_flags+0x1cc>)
 8014b9e:	484a      	ldr	r0, [pc, #296]	; (8014cc8 <tcp_enqueue_flags+0x1c4>)
 8014ba0:	f002 f86c 	bl	8016c7c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014ba8:	78fa      	ldrb	r2, [r7, #3]
 8014baa:	7ffb      	ldrb	r3, [r7, #31]
 8014bac:	9300      	str	r3, [sp, #0]
 8014bae:	460b      	mov	r3, r1
 8014bb0:	6939      	ldr	r1, [r7, #16]
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f7ff fd70 	bl	8014698 <tcp_create_segment>
 8014bb8:	60f8      	str	r0, [r7, #12]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d109      	bne.n	8014bd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	8b5b      	ldrh	r3, [r3, #26]
 8014bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bc8:	b29a      	uxth	r2, r3
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bd2:	e070      	b.n	8014cb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	f003 0303 	and.w	r3, r3, #3
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d006      	beq.n	8014bee <tcp_enqueue_flags+0xea>
 8014be0:	4b37      	ldr	r3, [pc, #220]	; (8014cc0 <tcp_enqueue_flags+0x1bc>)
 8014be2:	f240 4242 	movw	r2, #1090	; 0x442
 8014be6:	493b      	ldr	r1, [pc, #236]	; (8014cd4 <tcp_enqueue_flags+0x1d0>)
 8014be8:	4837      	ldr	r0, [pc, #220]	; (8014cc8 <tcp_enqueue_flags+0x1c4>)
 8014bea:	f002 f847 	bl	8016c7c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	891b      	ldrh	r3, [r3, #8]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d006      	beq.n	8014c04 <tcp_enqueue_flags+0x100>
 8014bf6:	4b32      	ldr	r3, [pc, #200]	; (8014cc0 <tcp_enqueue_flags+0x1bc>)
 8014bf8:	f240 4243 	movw	r2, #1091	; 0x443
 8014bfc:	4936      	ldr	r1, [pc, #216]	; (8014cd8 <tcp_enqueue_flags+0x1d4>)
 8014bfe:	4832      	ldr	r0, [pc, #200]	; (8014cc8 <tcp_enqueue_flags+0x1c4>)
 8014c00:	f002 f83c 	bl	8016c7c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d103      	bne.n	8014c14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	68fa      	ldr	r2, [r7, #12]
 8014c10:	66da      	str	r2, [r3, #108]	; 0x6c
 8014c12:	e00d      	b.n	8014c30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c18:	61bb      	str	r3, [r7, #24]
 8014c1a:	e002      	b.n	8014c22 <tcp_enqueue_flags+0x11e>
 8014c1c:	69bb      	ldr	r3, [r7, #24]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	61bb      	str	r3, [r7, #24]
 8014c22:	69bb      	ldr	r3, [r7, #24]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d1f8      	bne.n	8014c1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014c2a:	69bb      	ldr	r3, [r7, #24]
 8014c2c:	68fa      	ldr	r2, [r7, #12]
 8014c2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2200      	movs	r2, #0
 8014c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014c38:	78fb      	ldrb	r3, [r7, #3]
 8014c3a:	f003 0302 	and.w	r3, r3, #2
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d104      	bne.n	8014c4c <tcp_enqueue_flags+0x148>
 8014c42:	78fb      	ldrb	r3, [r7, #3]
 8014c44:	f003 0301 	and.w	r3, r3, #1
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d004      	beq.n	8014c56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c50:	1c5a      	adds	r2, r3, #1
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014c56:	78fb      	ldrb	r3, [r7, #3]
 8014c58:	f003 0301 	and.w	r3, r3, #1
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d006      	beq.n	8014c6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	8b5b      	ldrh	r3, [r3, #26]
 8014c64:	f043 0320 	orr.w	r3, r3, #32
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	685b      	ldr	r3, [r3, #4]
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7fb fb52 	bl	801031c <pbuf_clen>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c82:	4413      	add	r3, r2
 8014c84:	b29a      	uxth	r2, r3
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d00e      	beq.n	8014cb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d10a      	bne.n	8014cb4 <tcp_enqueue_flags+0x1b0>
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d106      	bne.n	8014cb4 <tcp_enqueue_flags+0x1b0>
 8014ca6:	4b06      	ldr	r3, [pc, #24]	; (8014cc0 <tcp_enqueue_flags+0x1bc>)
 8014ca8:	f240 4266 	movw	r2, #1126	; 0x466
 8014cac:	490b      	ldr	r1, [pc, #44]	; (8014cdc <tcp_enqueue_flags+0x1d8>)
 8014cae:	4806      	ldr	r0, [pc, #24]	; (8014cc8 <tcp_enqueue_flags+0x1c4>)
 8014cb0:	f001 ffe4 	bl	8016c7c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014cb4:	2300      	movs	r3, #0
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3720      	adds	r7, #32
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	08019aec 	.word	0x08019aec
 8014cc4:	08019f44 	.word	0x08019f44
 8014cc8:	08019b74 	.word	0x08019b74
 8014ccc:	08019f9c 	.word	0x08019f9c
 8014cd0:	08019fbc 	.word	0x08019fbc
 8014cd4:	08019ff8 	.word	0x08019ff8
 8014cd8:	0801a010 	.word	0x0801a010
 8014cdc:	0801a03c 	.word	0x0801a03c

08014ce0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014ce0:	b5b0      	push	{r4, r5, r7, lr}
 8014ce2:	b08a      	sub	sp, #40	; 0x28
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d106      	bne.n	8014cfc <tcp_output+0x1c>
 8014cee:	4ba0      	ldr	r3, [pc, #640]	; (8014f70 <tcp_output+0x290>)
 8014cf0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014cf4:	499f      	ldr	r1, [pc, #636]	; (8014f74 <tcp_output+0x294>)
 8014cf6:	48a0      	ldr	r0, [pc, #640]	; (8014f78 <tcp_output+0x298>)
 8014cf8:	f001 ffc0 	bl	8016c7c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	7d1b      	ldrb	r3, [r3, #20]
 8014d00:	2b01      	cmp	r3, #1
 8014d02:	d106      	bne.n	8014d12 <tcp_output+0x32>
 8014d04:	4b9a      	ldr	r3, [pc, #616]	; (8014f70 <tcp_output+0x290>)
 8014d06:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8014d0a:	499c      	ldr	r1, [pc, #624]	; (8014f7c <tcp_output+0x29c>)
 8014d0c:	489a      	ldr	r0, [pc, #616]	; (8014f78 <tcp_output+0x298>)
 8014d0e:	f001 ffb5 	bl	8016c7c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014d12:	4b9b      	ldr	r3, [pc, #620]	; (8014f80 <tcp_output+0x2a0>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d101      	bne.n	8014d20 <tcp_output+0x40>
    return ERR_OK;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	e1d2      	b.n	80150c6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d203      	bcs.n	8014d38 <tcp_output+0x58>
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014d36:	e002      	b.n	8014d3e <tcp_output+0x5e>
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d3e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d44:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d10b      	bne.n	8014d64 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	8b5b      	ldrh	r3, [r3, #26]
 8014d50:	f003 0302 	and.w	r3, r3, #2
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f000 81a9 	beq.w	80150ac <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f000 fdd8 	bl	8015910 <tcp_send_empty_ack>
 8014d60:	4603      	mov	r3, r0
 8014d62:	e1b0      	b.n	80150c6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014d64:	6879      	ldr	r1, [r7, #4]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	3304      	adds	r3, #4
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f7ff fc77 	bl	8014660 <tcp_route>
 8014d72:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d102      	bne.n	8014d80 <tcp_output+0xa0>
    return ERR_RTE;
 8014d7a:	f06f 0303 	mvn.w	r3, #3
 8014d7e:	e1a2      	b.n	80150c6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d003      	beq.n	8014d8e <tcp_output+0xae>
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d111      	bne.n	8014db2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d002      	beq.n	8014d9a <tcp_output+0xba>
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	3304      	adds	r3, #4
 8014d98:	e000      	b.n	8014d9c <tcp_output+0xbc>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d102      	bne.n	8014daa <tcp_output+0xca>
      return ERR_RTE;
 8014da4:	f06f 0303 	mvn.w	r3, #3
 8014da8:	e18d      	b.n	80150c6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7f7 faa0 	bl	800c2fe <lwip_htonl>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dc4:	1ad3      	subs	r3, r2, r3
 8014dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014dc8:	8912      	ldrh	r2, [r2, #8]
 8014dca:	4413      	add	r3, r2
 8014dcc:	69ba      	ldr	r2, [r7, #24]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d227      	bcs.n	8014e22 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014dd8:	461a      	mov	r2, r3
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	d114      	bne.n	8014e0a <tcp_output+0x12a>
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d110      	bne.n	8014e0a <tcp_output+0x12a>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d10b      	bne.n	8014e0a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2200      	movs	r2, #0
 8014df6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2200      	movs	r2, #0
 8014e06:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	8b5b      	ldrh	r3, [r3, #26]
 8014e0e:	f003 0302 	and.w	r3, r3, #2
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	f000 814c 	beq.w	80150b0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f000 fd79 	bl	8015910 <tcp_send_empty_ack>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	e151      	b.n	80150c6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2200      	movs	r2, #0
 8014e26:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e2e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014e30:	6a3b      	ldr	r3, [r7, #32]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	f000 811b 	beq.w	801506e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8014e38:	e002      	b.n	8014e40 <tcp_output+0x160>
 8014e3a:	6a3b      	ldr	r3, [r7, #32]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	623b      	str	r3, [r7, #32]
 8014e40:	6a3b      	ldr	r3, [r7, #32]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d1f8      	bne.n	8014e3a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014e48:	e111      	b.n	801506e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4c:	68db      	ldr	r3, [r3, #12]
 8014e4e:	899b      	ldrh	r3, [r3, #12]
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7f7 fa3e 	bl	800c2d4 <lwip_htons>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	b2db      	uxtb	r3, r3
 8014e5c:	f003 0304 	and.w	r3, r3, #4
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d006      	beq.n	8014e72 <tcp_output+0x192>
 8014e64:	4b42      	ldr	r3, [pc, #264]	; (8014f70 <tcp_output+0x290>)
 8014e66:	f240 5237 	movw	r2, #1335	; 0x537
 8014e6a:	4946      	ldr	r1, [pc, #280]	; (8014f84 <tcp_output+0x2a4>)
 8014e6c:	4842      	ldr	r0, [pc, #264]	; (8014f78 <tcp_output+0x298>)
 8014e6e:	f001 ff05 	bl	8016c7c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d01f      	beq.n	8014eba <tcp_output+0x1da>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	8b5b      	ldrh	r3, [r3, #26]
 8014e7e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d119      	bne.n	8014eba <tcp_output+0x1da>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d00b      	beq.n	8014ea6 <tcp_output+0x1c6>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d110      	bne.n	8014eba <tcp_output+0x1da>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e9c:	891a      	ldrh	r2, [r3, #8]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d209      	bcs.n	8014eba <tcp_output+0x1da>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d004      	beq.n	8014eba <tcp_output+0x1da>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014eb6:	2b08      	cmp	r3, #8
 8014eb8:	d901      	bls.n	8014ebe <tcp_output+0x1de>
 8014eba:	2301      	movs	r3, #1
 8014ebc:	e000      	b.n	8014ec0 <tcp_output+0x1e0>
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d106      	bne.n	8014ed2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	8b5b      	ldrh	r3, [r3, #26]
 8014ec8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	f000 80e3 	beq.w	8015098 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	7d1b      	ldrb	r3, [r3, #20]
 8014ed6:	2b02      	cmp	r3, #2
 8014ed8:	d00d      	beq.n	8014ef6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014edc:	68db      	ldr	r3, [r3, #12]
 8014ede:	899b      	ldrh	r3, [r3, #12]
 8014ee0:	b29c      	uxth	r4, r3
 8014ee2:	2010      	movs	r0, #16
 8014ee4:	f7f7 f9f6 	bl	800c2d4 <lwip_htons>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	461a      	mov	r2, r3
 8014eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eee:	68db      	ldr	r3, [r3, #12]
 8014ef0:	4322      	orrs	r2, r4
 8014ef2:	b292      	uxth	r2, r2
 8014ef4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014ef6:	697a      	ldr	r2, [r7, #20]
 8014ef8:	6879      	ldr	r1, [r7, #4]
 8014efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014efc:	f000 f908 	bl	8015110 <tcp_output_segment>
 8014f00:	4603      	mov	r3, r0
 8014f02:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d009      	beq.n	8014f20 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	8b5b      	ldrh	r3, [r3, #26]
 8014f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f14:	b29a      	uxth	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	835a      	strh	r2, [r3, #26]
      return err;
 8014f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f1e:	e0d2      	b.n	80150c6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f22:	681a      	ldr	r2, [r3, #0]
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	7d1b      	ldrb	r3, [r3, #20]
 8014f2c:	2b02      	cmp	r3, #2
 8014f2e:	d006      	beq.n	8014f3e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	8b5b      	ldrh	r3, [r3, #26]
 8014f34:	f023 0303 	bic.w	r3, r3, #3
 8014f38:	b29a      	uxth	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f40:	68db      	ldr	r3, [r3, #12]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7f7 f9da 	bl	800c2fe <lwip_htonl>
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4e:	891b      	ldrh	r3, [r3, #8]
 8014f50:	461d      	mov	r5, r3
 8014f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f54:	68db      	ldr	r3, [r3, #12]
 8014f56:	899b      	ldrh	r3, [r3, #12]
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7f7 f9ba 	bl	800c2d4 <lwip_htons>
 8014f60:	4603      	mov	r3, r0
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	f003 0303 	and.w	r3, r3, #3
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d00d      	beq.n	8014f88 <tcp_output+0x2a8>
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	e00c      	b.n	8014f8a <tcp_output+0x2aa>
 8014f70:	08019aec 	.word	0x08019aec
 8014f74:	0801a064 	.word	0x0801a064
 8014f78:	08019b74 	.word	0x08019b74
 8014f7c:	0801a07c 	.word	0x0801a07c
 8014f80:	24008364 	.word	0x24008364
 8014f84:	0801a0a4 	.word	0x0801a0a4
 8014f88:	2300      	movs	r3, #0
 8014f8a:	442b      	add	r3, r5
 8014f8c:	4423      	add	r3, r4
 8014f8e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	1ad3      	subs	r3, r2, r3
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	da02      	bge.n	8014fa2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	68ba      	ldr	r2, [r7, #8]
 8014fa0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa4:	891b      	ldrh	r3, [r3, #8]
 8014fa6:	461c      	mov	r4, r3
 8014fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	899b      	ldrh	r3, [r3, #12]
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7f7 f98f 	bl	800c2d4 <lwip_htons>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	f003 0303 	and.w	r3, r3, #3
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d001      	beq.n	8014fc6 <tcp_output+0x2e6>
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e000      	b.n	8014fc8 <tcp_output+0x2e8>
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	4423      	add	r3, r4
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d049      	beq.n	8015062 <tcp_output+0x382>
      seg->next = NULL;
 8014fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d105      	bne.n	8014fe8 <tcp_output+0x308>
        pcb->unacked = seg;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fe0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe4:	623b      	str	r3, [r7, #32]
 8014fe6:	e03f      	b.n	8015068 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7f7 f985 	bl	800c2fe <lwip_htonl>
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	6a3b      	ldr	r3, [r7, #32]
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7f7 f97e 	bl	800c2fe <lwip_htonl>
 8015002:	4603      	mov	r3, r0
 8015004:	1ae3      	subs	r3, r4, r3
 8015006:	2b00      	cmp	r3, #0
 8015008:	da24      	bge.n	8015054 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	3370      	adds	r3, #112	; 0x70
 801500e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015010:	e002      	b.n	8015018 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015018:	69fb      	ldr	r3, [r7, #28]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d011      	beq.n	8015044 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	4618      	mov	r0, r3
 801502a:	f7f7 f968 	bl	800c2fe <lwip_htonl>
 801502e:	4604      	mov	r4, r0
 8015030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	4618      	mov	r0, r3
 8015038:	f7f7 f961 	bl	800c2fe <lwip_htonl>
 801503c:	4603      	mov	r3, r0
 801503e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015040:	2b00      	cmp	r3, #0
 8015042:	dbe6      	blt.n	8015012 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8015044:	69fb      	ldr	r3, [r7, #28]
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015050:	601a      	str	r2, [r3, #0]
 8015052:	e009      	b.n	8015068 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015054:	6a3b      	ldr	r3, [r7, #32]
 8015056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015058:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801505a:	6a3b      	ldr	r3, [r7, #32]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	623b      	str	r3, [r7, #32]
 8015060:	e002      	b.n	8015068 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015064:	f7fc fc42 	bl	80118ec <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801506c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015070:	2b00      	cmp	r3, #0
 8015072:	d012      	beq.n	801509a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015076:	68db      	ldr	r3, [r3, #12]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	4618      	mov	r0, r3
 801507c:	f7f7 f93f 	bl	800c2fe <lwip_htonl>
 8015080:	4602      	mov	r2, r0
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015086:	1ad3      	subs	r3, r2, r3
 8015088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801508a:	8912      	ldrh	r2, [r2, #8]
 801508c:	4413      	add	r3, r2
  while (seg != NULL &&
 801508e:	69ba      	ldr	r2, [r7, #24]
 8015090:	429a      	cmp	r2, r3
 8015092:	f4bf aeda 	bcs.w	8014e4a <tcp_output+0x16a>
 8015096:	e000      	b.n	801509a <tcp_output+0x3ba>
      break;
 8015098:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d108      	bne.n	80150b4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80150aa:	e004      	b.n	80150b6 <tcp_output+0x3d6>
    goto output_done;
 80150ac:	bf00      	nop
 80150ae:	e002      	b.n	80150b6 <tcp_output+0x3d6>
    goto output_done;
 80150b0:	bf00      	nop
 80150b2:	e000      	b.n	80150b6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80150b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	8b5b      	ldrh	r3, [r3, #26]
 80150ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80150be:	b29a      	uxth	r2, r3
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3728      	adds	r7, #40	; 0x28
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bdb0      	pop	{r4, r5, r7, pc}
 80150ce:	bf00      	nop

080150d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d106      	bne.n	80150ec <tcp_output_segment_busy+0x1c>
 80150de:	4b09      	ldr	r3, [pc, #36]	; (8015104 <tcp_output_segment_busy+0x34>)
 80150e0:	f240 529a 	movw	r2, #1434	; 0x59a
 80150e4:	4908      	ldr	r1, [pc, #32]	; (8015108 <tcp_output_segment_busy+0x38>)
 80150e6:	4809      	ldr	r0, [pc, #36]	; (801510c <tcp_output_segment_busy+0x3c>)
 80150e8:	f001 fdc8 	bl	8016c7c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	7b9b      	ldrb	r3, [r3, #14]
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d001      	beq.n	80150fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80150f6:	2301      	movs	r3, #1
 80150f8:	e000      	b.n	80150fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80150fa:	2300      	movs	r3, #0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	08019aec 	.word	0x08019aec
 8015108:	0801a0bc 	.word	0x0801a0bc
 801510c:	08019b74 	.word	0x08019b74

08015110 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015110:	b5b0      	push	{r4, r5, r7, lr}
 8015112:	b08c      	sub	sp, #48	; 0x30
 8015114:	af04      	add	r7, sp, #16
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d106      	bne.n	8015130 <tcp_output_segment+0x20>
 8015122:	4b64      	ldr	r3, [pc, #400]	; (80152b4 <tcp_output_segment+0x1a4>)
 8015124:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015128:	4963      	ldr	r1, [pc, #396]	; (80152b8 <tcp_output_segment+0x1a8>)
 801512a:	4864      	ldr	r0, [pc, #400]	; (80152bc <tcp_output_segment+0x1ac>)
 801512c:	f001 fda6 	bl	8016c7c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d106      	bne.n	8015144 <tcp_output_segment+0x34>
 8015136:	4b5f      	ldr	r3, [pc, #380]	; (80152b4 <tcp_output_segment+0x1a4>)
 8015138:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801513c:	4960      	ldr	r1, [pc, #384]	; (80152c0 <tcp_output_segment+0x1b0>)
 801513e:	485f      	ldr	r0, [pc, #380]	; (80152bc <tcp_output_segment+0x1ac>)
 8015140:	f001 fd9c 	bl	8016c7c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d106      	bne.n	8015158 <tcp_output_segment+0x48>
 801514a:	4b5a      	ldr	r3, [pc, #360]	; (80152b4 <tcp_output_segment+0x1a4>)
 801514c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015150:	495c      	ldr	r1, [pc, #368]	; (80152c4 <tcp_output_segment+0x1b4>)
 8015152:	485a      	ldr	r0, [pc, #360]	; (80152bc <tcp_output_segment+0x1ac>)
 8015154:	f001 fd92 	bl	8016c7c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	f7ff ffb9 	bl	80150d0 <tcp_output_segment_busy>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015164:	2300      	movs	r3, #0
 8015166:	e0a0      	b.n	80152aa <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	68dc      	ldr	r4, [r3, #12]
 8015170:	4610      	mov	r0, r2
 8015172:	f7f7 f8c4 	bl	800c2fe <lwip_htonl>
 8015176:	4603      	mov	r3, r0
 8015178:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	68dc      	ldr	r4, [r3, #12]
 8015182:	4610      	mov	r0, r2
 8015184:	f7f7 f8a6 	bl	800c2d4 <lwip_htons>
 8015188:	4603      	mov	r3, r0
 801518a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015190:	68ba      	ldr	r2, [r7, #8]
 8015192:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015194:	441a      	add	r2, r3
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	68db      	ldr	r3, [r3, #12]
 801519e:	3314      	adds	r3, #20
 80151a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	7a9b      	ldrb	r3, [r3, #10]
 80151a6:	f003 0301 	and.w	r3, r3, #1
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d015      	beq.n	80151da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	3304      	adds	r3, #4
 80151b2:	461a      	mov	r2, r3
 80151b4:	6879      	ldr	r1, [r7, #4]
 80151b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80151ba:	f7fc fe8d 	bl	8011ed8 <tcp_eff_send_mss_netif>
 80151be:	4603      	mov	r3, r0
 80151c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80151c2:	8b7b      	ldrh	r3, [r7, #26]
 80151c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7f7 f898 	bl	800c2fe <lwip_htonl>
 80151ce:	4602      	mov	r2, r0
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80151d4:	69fb      	ldr	r3, [r7, #28]
 80151d6:	3304      	adds	r3, #4
 80151d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	da02      	bge.n	80151ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	2200      	movs	r2, #0
 80151e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d10c      	bne.n	801520c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80151f2:	4b35      	ldr	r3, [pc, #212]	; (80152c8 <tcp_output_segment+0x1b8>)
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	68bb      	ldr	r3, [r7, #8]
 80151f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	68db      	ldr	r3, [r3, #12]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	4618      	mov	r0, r3
 8015202:	f7f7 f87c 	bl	800c2fe <lwip_htonl>
 8015206:	4602      	mov	r2, r0
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	461a      	mov	r2, r3
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	1ad3      	subs	r3, r2, r3
 801521a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	685b      	ldr	r3, [r3, #4]
 8015220:	8959      	ldrh	r1, [r3, #10]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	685b      	ldr	r3, [r3, #4]
 8015226:	8b3a      	ldrh	r2, [r7, #24]
 8015228:	1a8a      	subs	r2, r1, r2
 801522a:	b292      	uxth	r2, r2
 801522c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	8919      	ldrh	r1, [r3, #8]
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	8b3a      	ldrh	r2, [r7, #24]
 801523a:	1a8a      	subs	r2, r1, r2
 801523c:	b292      	uxth	r2, r2
 801523e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	685b      	ldr	r3, [r3, #4]
 8015244:	68fa      	ldr	r2, [r7, #12]
 8015246:	68d2      	ldr	r2, [r2, #12]
 8015248:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	2200      	movs	r2, #0
 8015250:	741a      	strb	r2, [r3, #16]
 8015252:	2200      	movs	r2, #0
 8015254:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	68db      	ldr	r3, [r3, #12]
 801525a:	f103 0214 	add.w	r2, r3, #20
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	7a9b      	ldrb	r3, [r3, #10]
 8015262:	009b      	lsls	r3, r3, #2
 8015264:	f003 0304 	and.w	r3, r3, #4
 8015268:	4413      	add	r3, r2
 801526a:	69fa      	ldr	r2, [r7, #28]
 801526c:	429a      	cmp	r2, r3
 801526e:	d006      	beq.n	801527e <tcp_output_segment+0x16e>
 8015270:	4b10      	ldr	r3, [pc, #64]	; (80152b4 <tcp_output_segment+0x1a4>)
 8015272:	f240 621c 	movw	r2, #1564	; 0x61c
 8015276:	4915      	ldr	r1, [pc, #84]	; (80152cc <tcp_output_segment+0x1bc>)
 8015278:	4810      	ldr	r0, [pc, #64]	; (80152bc <tcp_output_segment+0x1ac>)
 801527a:	f001 fcff 	bl	8016c7c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	6858      	ldr	r0, [r3, #4]
 8015282:	68b9      	ldr	r1, [r7, #8]
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	1d1c      	adds	r4, r3, #4
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	7add      	ldrb	r5, [r3, #11]
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	7a9b      	ldrb	r3, [r3, #10]
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	9202      	str	r2, [sp, #8]
 8015294:	2206      	movs	r2, #6
 8015296:	9201      	str	r2, [sp, #4]
 8015298:	9300      	str	r3, [sp, #0]
 801529a:	462b      	mov	r3, r5
 801529c:	4622      	mov	r2, r4
 801529e:	f7f8 fcad 	bl	800dbfc <ip4_output_if>
 80152a2:	4603      	mov	r3, r0
 80152a4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80152a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3720      	adds	r7, #32
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bdb0      	pop	{r4, r5, r7, pc}
 80152b2:	bf00      	nop
 80152b4:	08019aec 	.word	0x08019aec
 80152b8:	0801a0e4 	.word	0x0801a0e4
 80152bc:	08019b74 	.word	0x08019b74
 80152c0:	0801a104 	.word	0x0801a104
 80152c4:	0801a124 	.word	0x0801a124
 80152c8:	24008354 	.word	0x24008354
 80152cc:	0801a148 	.word	0x0801a148

080152d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80152d0:	b5b0      	push	{r4, r5, r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d106      	bne.n	80152ec <tcp_rexmit_rto_prepare+0x1c>
 80152de:	4b31      	ldr	r3, [pc, #196]	; (80153a4 <tcp_rexmit_rto_prepare+0xd4>)
 80152e0:	f240 6263 	movw	r2, #1635	; 0x663
 80152e4:	4930      	ldr	r1, [pc, #192]	; (80153a8 <tcp_rexmit_rto_prepare+0xd8>)
 80152e6:	4831      	ldr	r0, [pc, #196]	; (80153ac <tcp_rexmit_rto_prepare+0xdc>)
 80152e8:	f001 fcc8 	bl	8016c7c <iprintf>

  if (pcb->unacked == NULL) {
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d102      	bne.n	80152fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80152f4:	f06f 0305 	mvn.w	r3, #5
 80152f8:	e050      	b.n	801539c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152fe:	60fb      	str	r3, [r7, #12]
 8015300:	e00b      	b.n	801531a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	f7ff fee4 	bl	80150d0 <tcp_output_segment_busy>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d002      	beq.n	8015314 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801530e:	f06f 0305 	mvn.w	r3, #5
 8015312:	e043      	b.n	801539c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	60fb      	str	r3, [r7, #12]
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d1ef      	bne.n	8015302 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	f7ff fed4 	bl	80150d0 <tcp_output_segment_busy>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d002      	beq.n	8015334 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801532e:	f06f 0305 	mvn.w	r3, #5
 8015332:	e033      	b.n	801539c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2200      	movs	r2, #0
 8015348:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	8b5b      	ldrh	r3, [r3, #26]
 801534e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015352:	b29a      	uxth	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	4618      	mov	r0, r3
 8015360:	f7f6 ffcd 	bl	800c2fe <lwip_htonl>
 8015364:	4604      	mov	r4, r0
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	891b      	ldrh	r3, [r3, #8]
 801536a:	461d      	mov	r5, r3
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	68db      	ldr	r3, [r3, #12]
 8015370:	899b      	ldrh	r3, [r3, #12]
 8015372:	b29b      	uxth	r3, r3
 8015374:	4618      	mov	r0, r3
 8015376:	f7f6 ffad 	bl	800c2d4 <lwip_htons>
 801537a:	4603      	mov	r3, r0
 801537c:	b2db      	uxtb	r3, r3
 801537e:	f003 0303 	and.w	r3, r3, #3
 8015382:	2b00      	cmp	r3, #0
 8015384:	d001      	beq.n	801538a <tcp_rexmit_rto_prepare+0xba>
 8015386:	2301      	movs	r3, #1
 8015388:	e000      	b.n	801538c <tcp_rexmit_rto_prepare+0xbc>
 801538a:	2300      	movs	r3, #0
 801538c:	442b      	add	r3, r5
 801538e:	18e2      	adds	r2, r4, r3
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3710      	adds	r7, #16
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bdb0      	pop	{r4, r5, r7, pc}
 80153a4:	08019aec 	.word	0x08019aec
 80153a8:	0801a15c 	.word	0x0801a15c
 80153ac:	08019b74 	.word	0x08019b74

080153b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d106      	bne.n	80153cc <tcp_rexmit_rto_commit+0x1c>
 80153be:	4b0d      	ldr	r3, [pc, #52]	; (80153f4 <tcp_rexmit_rto_commit+0x44>)
 80153c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80153c4:	490c      	ldr	r1, [pc, #48]	; (80153f8 <tcp_rexmit_rto_commit+0x48>)
 80153c6:	480d      	ldr	r0, [pc, #52]	; (80153fc <tcp_rexmit_rto_commit+0x4c>)
 80153c8:	f001 fc58 	bl	8016c7c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153d2:	2bff      	cmp	r3, #255	; 0xff
 80153d4:	d007      	beq.n	80153e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153dc:	3301      	adds	r3, #1
 80153de:	b2da      	uxtb	r2, r3
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f7ff fc7a 	bl	8014ce0 <tcp_output>
}
 80153ec:	bf00      	nop
 80153ee:	3708      	adds	r7, #8
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	08019aec 	.word	0x08019aec
 80153f8:	0801a180 	.word	0x0801a180
 80153fc:	08019b74 	.word	0x08019b74

08015400 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d106      	bne.n	801541c <tcp_rexmit_rto+0x1c>
 801540e:	4b0a      	ldr	r3, [pc, #40]	; (8015438 <tcp_rexmit_rto+0x38>)
 8015410:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015414:	4909      	ldr	r1, [pc, #36]	; (801543c <tcp_rexmit_rto+0x3c>)
 8015416:	480a      	ldr	r0, [pc, #40]	; (8015440 <tcp_rexmit_rto+0x40>)
 8015418:	f001 fc30 	bl	8016c7c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f7ff ff57 	bl	80152d0 <tcp_rexmit_rto_prepare>
 8015422:	4603      	mov	r3, r0
 8015424:	2b00      	cmp	r3, #0
 8015426:	d102      	bne.n	801542e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f7ff ffc1 	bl	80153b0 <tcp_rexmit_rto_commit>
  }
}
 801542e:	bf00      	nop
 8015430:	3708      	adds	r7, #8
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}
 8015436:	bf00      	nop
 8015438:	08019aec 	.word	0x08019aec
 801543c:	0801a1a4 	.word	0x0801a1a4
 8015440:	08019b74 	.word	0x08019b74

08015444 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015444:	b590      	push	{r4, r7, lr}
 8015446:	b085      	sub	sp, #20
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d106      	bne.n	8015460 <tcp_rexmit+0x1c>
 8015452:	4b2f      	ldr	r3, [pc, #188]	; (8015510 <tcp_rexmit+0xcc>)
 8015454:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015458:	492e      	ldr	r1, [pc, #184]	; (8015514 <tcp_rexmit+0xd0>)
 801545a:	482f      	ldr	r0, [pc, #188]	; (8015518 <tcp_rexmit+0xd4>)
 801545c:	f001 fc0e 	bl	8016c7c <iprintf>

  if (pcb->unacked == NULL) {
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015464:	2b00      	cmp	r3, #0
 8015466:	d102      	bne.n	801546e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015468:	f06f 0305 	mvn.w	r3, #5
 801546c:	e04c      	b.n	8015508 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015472:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015474:	68b8      	ldr	r0, [r7, #8]
 8015476:	f7ff fe2b 	bl	80150d0 <tcp_output_segment_busy>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	d002      	beq.n	8015486 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015480:	f06f 0305 	mvn.w	r3, #5
 8015484:	e040      	b.n	8015508 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	681a      	ldr	r2, [r3, #0]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	336c      	adds	r3, #108	; 0x6c
 8015492:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015494:	e002      	b.n	801549c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d011      	beq.n	80154c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7f6 ff26 	bl	800c2fe <lwip_htonl>
 80154b2:	4604      	mov	r4, r0
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7f6 ff1f 	bl	800c2fe <lwip_htonl>
 80154c0:	4603      	mov	r3, r0
 80154c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	dbe6      	blt.n	8015496 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	681a      	ldr	r2, [r3, #0]
 80154cc:	68bb      	ldr	r3, [r7, #8]
 80154ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	68ba      	ldr	r2, [r7, #8]
 80154d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d103      	bne.n	80154e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2200      	movs	r2, #0
 80154e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154ec:	2bff      	cmp	r3, #255	; 0xff
 80154ee:	d007      	beq.n	8015500 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154f6:	3301      	adds	r3, #1
 80154f8:	b2da      	uxtb	r2, r3
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2200      	movs	r2, #0
 8015504:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015506:	2300      	movs	r3, #0
}
 8015508:	4618      	mov	r0, r3
 801550a:	3714      	adds	r7, #20
 801550c:	46bd      	mov	sp, r7
 801550e:	bd90      	pop	{r4, r7, pc}
 8015510:	08019aec 	.word	0x08019aec
 8015514:	0801a1c0 	.word	0x0801a1c0
 8015518:	08019b74 	.word	0x08019b74

0801551c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d106      	bne.n	8015538 <tcp_rexmit_fast+0x1c>
 801552a:	4b2f      	ldr	r3, [pc, #188]	; (80155e8 <tcp_rexmit_fast+0xcc>)
 801552c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015530:	492e      	ldr	r1, [pc, #184]	; (80155ec <tcp_rexmit_fast+0xd0>)
 8015532:	482f      	ldr	r0, [pc, #188]	; (80155f0 <tcp_rexmit_fast+0xd4>)
 8015534:	f001 fba2 	bl	8016c7c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801553c:	2b00      	cmp	r3, #0
 801553e:	d04f      	beq.n	80155e0 <tcp_rexmit_fast+0xc4>
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	8b5b      	ldrh	r3, [r3, #26]
 8015544:	f003 0304 	and.w	r3, r3, #4
 8015548:	2b00      	cmp	r3, #0
 801554a:	d149      	bne.n	80155e0 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f7ff ff79 	bl	8015444 <tcp_rexmit>
 8015552:	4603      	mov	r3, r0
 8015554:	2b00      	cmp	r3, #0
 8015556:	d143      	bne.n	80155e0 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015564:	429a      	cmp	r2, r3
 8015566:	d208      	bcs.n	801557a <tcp_rexmit_fast+0x5e>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801556e:	2b00      	cmp	r3, #0
 8015570:	da00      	bge.n	8015574 <tcp_rexmit_fast+0x58>
 8015572:	3301      	adds	r3, #1
 8015574:	105b      	asrs	r3, r3, #1
 8015576:	b29b      	uxth	r3, r3
 8015578:	e007      	b.n	801558a <tcp_rexmit_fast+0x6e>
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015580:	2b00      	cmp	r3, #0
 8015582:	da00      	bge.n	8015586 <tcp_rexmit_fast+0x6a>
 8015584:	3301      	adds	r3, #1
 8015586:	105b      	asrs	r3, r3, #1
 8015588:	b29b      	uxth	r3, r3
 801558a:	687a      	ldr	r2, [r7, #4]
 801558c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015596:	461a      	mov	r2, r3
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	429a      	cmp	r2, r3
 80155a0:	d206      	bcs.n	80155b0 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155a6:	005b      	lsls	r3, r3, #1
 80155a8:	b29a      	uxth	r2, r3
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155ba:	4619      	mov	r1, r3
 80155bc:	0049      	lsls	r1, r1, #1
 80155be:	440b      	add	r3, r1
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	4413      	add	r3, r2
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	8b5b      	ldrh	r3, [r3, #26]
 80155d0:	f043 0304 	orr.w	r3, r3, #4
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2200      	movs	r2, #0
 80155de:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80155e0:	bf00      	nop
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	08019aec 	.word	0x08019aec
 80155ec:	0801a1d8 	.word	0x0801a1d8
 80155f0:	08019b74 	.word	0x08019b74

080155f4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b086      	sub	sp, #24
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	607b      	str	r3, [r7, #4]
 80155fe:	460b      	mov	r3, r1
 8015600:	817b      	strh	r3, [r7, #10]
 8015602:	4613      	mov	r3, r2
 8015604:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015606:	897a      	ldrh	r2, [r7, #10]
 8015608:	893b      	ldrh	r3, [r7, #8]
 801560a:	4413      	add	r3, r2
 801560c:	b29b      	uxth	r3, r3
 801560e:	3314      	adds	r3, #20
 8015610:	b29b      	uxth	r3, r3
 8015612:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015616:	4619      	mov	r1, r3
 8015618:	2022      	movs	r0, #34	; 0x22
 801561a:	f7fa fb11 	bl	800fc40 <pbuf_alloc>
 801561e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015620:	697b      	ldr	r3, [r7, #20]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d04e      	beq.n	80156c4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	895b      	ldrh	r3, [r3, #10]
 801562a:	461a      	mov	r2, r3
 801562c:	897b      	ldrh	r3, [r7, #10]
 801562e:	3314      	adds	r3, #20
 8015630:	429a      	cmp	r2, r3
 8015632:	da06      	bge.n	8015642 <tcp_output_alloc_header_common+0x4e>
 8015634:	4b26      	ldr	r3, [pc, #152]	; (80156d0 <tcp_output_alloc_header_common+0xdc>)
 8015636:	f240 7224 	movw	r2, #1828	; 0x724
 801563a:	4926      	ldr	r1, [pc, #152]	; (80156d4 <tcp_output_alloc_header_common+0xe0>)
 801563c:	4826      	ldr	r0, [pc, #152]	; (80156d8 <tcp_output_alloc_header_common+0xe4>)
 801563e:	f001 fb1d 	bl	8016c7c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015648:	8c3b      	ldrh	r3, [r7, #32]
 801564a:	4618      	mov	r0, r3
 801564c:	f7f6 fe42 	bl	800c2d4 <lwip_htons>
 8015650:	4603      	mov	r3, r0
 8015652:	461a      	mov	r2, r3
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801565a:	4618      	mov	r0, r3
 801565c:	f7f6 fe3a 	bl	800c2d4 <lwip_htons>
 8015660:	4603      	mov	r3, r0
 8015662:	461a      	mov	r2, r3
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	687a      	ldr	r2, [r7, #4]
 801566c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f7f6 fe45 	bl	800c2fe <lwip_htonl>
 8015674:	4602      	mov	r2, r0
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801567a:	897b      	ldrh	r3, [r7, #10]
 801567c:	089b      	lsrs	r3, r3, #2
 801567e:	b29b      	uxth	r3, r3
 8015680:	3305      	adds	r3, #5
 8015682:	b29b      	uxth	r3, r3
 8015684:	031b      	lsls	r3, r3, #12
 8015686:	b29a      	uxth	r2, r3
 8015688:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801568c:	b29b      	uxth	r3, r3
 801568e:	4313      	orrs	r3, r2
 8015690:	b29b      	uxth	r3, r3
 8015692:	4618      	mov	r0, r3
 8015694:	f7f6 fe1e 	bl	800c2d4 <lwip_htons>
 8015698:	4603      	mov	r3, r0
 801569a:	461a      	mov	r2, r3
 801569c:	693b      	ldr	r3, [r7, #16]
 801569e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80156a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7f6 fe16 	bl	800c2d4 <lwip_htons>
 80156a8:	4603      	mov	r3, r0
 80156aa:	461a      	mov	r2, r3
 80156ac:	693b      	ldr	r3, [r7, #16]
 80156ae:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80156b0:	693b      	ldr	r3, [r7, #16]
 80156b2:	2200      	movs	r2, #0
 80156b4:	741a      	strb	r2, [r3, #16]
 80156b6:	2200      	movs	r2, #0
 80156b8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80156ba:	693b      	ldr	r3, [r7, #16]
 80156bc:	2200      	movs	r2, #0
 80156be:	749a      	strb	r2, [r3, #18]
 80156c0:	2200      	movs	r2, #0
 80156c2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80156c4:	697b      	ldr	r3, [r7, #20]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3718      	adds	r7, #24
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	08019aec 	.word	0x08019aec
 80156d4:	0801a1f8 	.word	0x0801a1f8
 80156d8:	08019b74 	.word	0x08019b74

080156dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80156dc:	b5b0      	push	{r4, r5, r7, lr}
 80156de:	b08a      	sub	sp, #40	; 0x28
 80156e0:	af04      	add	r7, sp, #16
 80156e2:	60f8      	str	r0, [r7, #12]
 80156e4:	607b      	str	r3, [r7, #4]
 80156e6:	460b      	mov	r3, r1
 80156e8:	817b      	strh	r3, [r7, #10]
 80156ea:	4613      	mov	r3, r2
 80156ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d106      	bne.n	8015702 <tcp_output_alloc_header+0x26>
 80156f4:	4b15      	ldr	r3, [pc, #84]	; (801574c <tcp_output_alloc_header+0x70>)
 80156f6:	f240 7242 	movw	r2, #1858	; 0x742
 80156fa:	4915      	ldr	r1, [pc, #84]	; (8015750 <tcp_output_alloc_header+0x74>)
 80156fc:	4815      	ldr	r0, [pc, #84]	; (8015754 <tcp_output_alloc_header+0x78>)
 80156fe:	f001 fabd 	bl	8016c7c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	8adb      	ldrh	r3, [r3, #22]
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	8b12      	ldrh	r2, [r2, #24]
 801570e:	68f9      	ldr	r1, [r7, #12]
 8015710:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015712:	893d      	ldrh	r5, [r7, #8]
 8015714:	897c      	ldrh	r4, [r7, #10]
 8015716:	9103      	str	r1, [sp, #12]
 8015718:	2110      	movs	r1, #16
 801571a:	9102      	str	r1, [sp, #8]
 801571c:	9201      	str	r2, [sp, #4]
 801571e:	9300      	str	r3, [sp, #0]
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	462a      	mov	r2, r5
 8015724:	4621      	mov	r1, r4
 8015726:	f7ff ff65 	bl	80155f4 <tcp_output_alloc_header_common>
 801572a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d006      	beq.n	8015740 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015736:	68fa      	ldr	r2, [r7, #12]
 8015738:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801573a:	441a      	add	r2, r3
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015740:	697b      	ldr	r3, [r7, #20]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3718      	adds	r7, #24
 8015746:	46bd      	mov	sp, r7
 8015748:	bdb0      	pop	{r4, r5, r7, pc}
 801574a:	bf00      	nop
 801574c:	08019aec 	.word	0x08019aec
 8015750:	0801a228 	.word	0x0801a228
 8015754:	08019b74 	.word	0x08019b74

08015758 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b088      	sub	sp, #32
 801575c:	af00      	add	r7, sp, #0
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	4611      	mov	r1, r2
 8015764:	461a      	mov	r2, r3
 8015766:	460b      	mov	r3, r1
 8015768:	71fb      	strb	r3, [r7, #7]
 801576a:	4613      	mov	r3, r2
 801576c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801576e:	2300      	movs	r3, #0
 8015770:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d106      	bne.n	8015786 <tcp_output_fill_options+0x2e>
 8015778:	4b13      	ldr	r3, [pc, #76]	; (80157c8 <tcp_output_fill_options+0x70>)
 801577a:	f240 7256 	movw	r2, #1878	; 0x756
 801577e:	4913      	ldr	r1, [pc, #76]	; (80157cc <tcp_output_fill_options+0x74>)
 8015780:	4813      	ldr	r0, [pc, #76]	; (80157d0 <tcp_output_fill_options+0x78>)
 8015782:	f001 fa7b 	bl	8016c7c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801578c:	69bb      	ldr	r3, [r7, #24]
 801578e:	3314      	adds	r3, #20
 8015790:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	f103 0214 	add.w	r2, r3, #20
 8015798:	8bfb      	ldrh	r3, [r7, #30]
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	4619      	mov	r1, r3
 801579e:	79fb      	ldrb	r3, [r7, #7]
 80157a0:	009b      	lsls	r3, r3, #2
 80157a2:	f003 0304 	and.w	r3, r3, #4
 80157a6:	440b      	add	r3, r1
 80157a8:	4413      	add	r3, r2
 80157aa:	697a      	ldr	r2, [r7, #20]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d006      	beq.n	80157be <tcp_output_fill_options+0x66>
 80157b0:	4b05      	ldr	r3, [pc, #20]	; (80157c8 <tcp_output_fill_options+0x70>)
 80157b2:	f240 7275 	movw	r2, #1909	; 0x775
 80157b6:	4907      	ldr	r1, [pc, #28]	; (80157d4 <tcp_output_fill_options+0x7c>)
 80157b8:	4805      	ldr	r0, [pc, #20]	; (80157d0 <tcp_output_fill_options+0x78>)
 80157ba:	f001 fa5f 	bl	8016c7c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80157be:	bf00      	nop
 80157c0:	3720      	adds	r7, #32
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}
 80157c6:	bf00      	nop
 80157c8:	08019aec 	.word	0x08019aec
 80157cc:	0801a250 	.word	0x0801a250
 80157d0:	08019b74 	.word	0x08019b74
 80157d4:	0801a148 	.word	0x0801a148

080157d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b08a      	sub	sp, #40	; 0x28
 80157dc:	af04      	add	r7, sp, #16
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d106      	bne.n	80157fa <tcp_output_control_segment+0x22>
 80157ec:	4b1c      	ldr	r3, [pc, #112]	; (8015860 <tcp_output_control_segment+0x88>)
 80157ee:	f240 7287 	movw	r2, #1927	; 0x787
 80157f2:	491c      	ldr	r1, [pc, #112]	; (8015864 <tcp_output_control_segment+0x8c>)
 80157f4:	481c      	ldr	r0, [pc, #112]	; (8015868 <tcp_output_control_segment+0x90>)
 80157f6:	f001 fa41 	bl	8016c7c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80157fa:	683a      	ldr	r2, [r7, #0]
 80157fc:	6879      	ldr	r1, [r7, #4]
 80157fe:	68f8      	ldr	r0, [r7, #12]
 8015800:	f7fe ff2e 	bl	8014660 <tcp_route>
 8015804:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d102      	bne.n	8015812 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801580c:	23fc      	movs	r3, #252	; 0xfc
 801580e:	75fb      	strb	r3, [r7, #23]
 8015810:	e01c      	b.n	801584c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d006      	beq.n	8015826 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	7adb      	ldrb	r3, [r3, #11]
 801581c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	7a9b      	ldrb	r3, [r3, #10]
 8015822:	757b      	strb	r3, [r7, #21]
 8015824:	e003      	b.n	801582e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015826:	23ff      	movs	r3, #255	; 0xff
 8015828:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801582a:	2300      	movs	r3, #0
 801582c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801582e:	7dba      	ldrb	r2, [r7, #22]
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	9302      	str	r3, [sp, #8]
 8015834:	2306      	movs	r3, #6
 8015836:	9301      	str	r3, [sp, #4]
 8015838:	7d7b      	ldrb	r3, [r7, #21]
 801583a:	9300      	str	r3, [sp, #0]
 801583c:	4613      	mov	r3, r2
 801583e:	683a      	ldr	r2, [r7, #0]
 8015840:	6879      	ldr	r1, [r7, #4]
 8015842:	68b8      	ldr	r0, [r7, #8]
 8015844:	f7f8 f9da 	bl	800dbfc <ip4_output_if>
 8015848:	4603      	mov	r3, r0
 801584a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801584c:	68b8      	ldr	r0, [r7, #8]
 801584e:	f7fa fcd7 	bl	8010200 <pbuf_free>
  return err;
 8015852:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015856:	4618      	mov	r0, r3
 8015858:	3718      	adds	r7, #24
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	08019aec 	.word	0x08019aec
 8015864:	0801a278 	.word	0x0801a278
 8015868:	08019b74 	.word	0x08019b74

0801586c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801586c:	b590      	push	{r4, r7, lr}
 801586e:	b08b      	sub	sp, #44	; 0x2c
 8015870:	af04      	add	r7, sp, #16
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]
 8015878:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d106      	bne.n	801588e <tcp_rst+0x22>
 8015880:	4b1f      	ldr	r3, [pc, #124]	; (8015900 <tcp_rst+0x94>)
 8015882:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015886:	491f      	ldr	r1, [pc, #124]	; (8015904 <tcp_rst+0x98>)
 8015888:	481f      	ldr	r0, [pc, #124]	; (8015908 <tcp_rst+0x9c>)
 801588a:	f001 f9f7 	bl	8016c7c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015890:	2b00      	cmp	r3, #0
 8015892:	d106      	bne.n	80158a2 <tcp_rst+0x36>
 8015894:	4b1a      	ldr	r3, [pc, #104]	; (8015900 <tcp_rst+0x94>)
 8015896:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801589a:	491c      	ldr	r1, [pc, #112]	; (801590c <tcp_rst+0xa0>)
 801589c:	481a      	ldr	r0, [pc, #104]	; (8015908 <tcp_rst+0x9c>)
 801589e:	f001 f9ed 	bl	8016c7c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80158a2:	2300      	movs	r3, #0
 80158a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80158a6:	f246 0308 	movw	r3, #24584	; 0x6008
 80158aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80158ac:	7dfb      	ldrb	r3, [r7, #23]
 80158ae:	b29c      	uxth	r4, r3
 80158b0:	68b8      	ldr	r0, [r7, #8]
 80158b2:	f7f6 fd24 	bl	800c2fe <lwip_htonl>
 80158b6:	4602      	mov	r2, r0
 80158b8:	8abb      	ldrh	r3, [r7, #20]
 80158ba:	9303      	str	r3, [sp, #12]
 80158bc:	2314      	movs	r3, #20
 80158be:	9302      	str	r3, [sp, #8]
 80158c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80158c2:	9301      	str	r3, [sp, #4]
 80158c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80158c6:	9300      	str	r3, [sp, #0]
 80158c8:	4613      	mov	r3, r2
 80158ca:	2200      	movs	r2, #0
 80158cc:	4621      	mov	r1, r4
 80158ce:	6878      	ldr	r0, [r7, #4]
 80158d0:	f7ff fe90 	bl	80155f4 <tcp_output_alloc_header_common>
 80158d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d00c      	beq.n	80158f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80158dc:	7dfb      	ldrb	r3, [r7, #23]
 80158de:	2200      	movs	r2, #0
 80158e0:	6939      	ldr	r1, [r7, #16]
 80158e2:	68f8      	ldr	r0, [r7, #12]
 80158e4:	f7ff ff38 	bl	8015758 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80158e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ea:	683a      	ldr	r2, [r7, #0]
 80158ec:	6939      	ldr	r1, [r7, #16]
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f7ff ff72 	bl	80157d8 <tcp_output_control_segment>
 80158f4:	e000      	b.n	80158f8 <tcp_rst+0x8c>
    return;
 80158f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80158f8:	371c      	adds	r7, #28
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd90      	pop	{r4, r7, pc}
 80158fe:	bf00      	nop
 8015900:	08019aec 	.word	0x08019aec
 8015904:	0801a2a4 	.word	0x0801a2a4
 8015908:	08019b74 	.word	0x08019b74
 801590c:	0801a2c0 	.word	0x0801a2c0

08015910 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015910:	b590      	push	{r4, r7, lr}
 8015912:	b087      	sub	sp, #28
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015918:	2300      	movs	r3, #0
 801591a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801591c:	2300      	movs	r3, #0
 801591e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d106      	bne.n	8015934 <tcp_send_empty_ack+0x24>
 8015926:	4b28      	ldr	r3, [pc, #160]	; (80159c8 <tcp_send_empty_ack+0xb8>)
 8015928:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801592c:	4927      	ldr	r1, [pc, #156]	; (80159cc <tcp_send_empty_ack+0xbc>)
 801592e:	4828      	ldr	r0, [pc, #160]	; (80159d0 <tcp_send_empty_ack+0xc0>)
 8015930:	f001 f9a4 	bl	8016c7c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015934:	7dfb      	ldrb	r3, [r7, #23]
 8015936:	009b      	lsls	r3, r3, #2
 8015938:	b2db      	uxtb	r3, r3
 801593a:	f003 0304 	and.w	r3, r3, #4
 801593e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015940:	7d7b      	ldrb	r3, [r7, #21]
 8015942:	b29c      	uxth	r4, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015948:	4618      	mov	r0, r3
 801594a:	f7f6 fcd8 	bl	800c2fe <lwip_htonl>
 801594e:	4603      	mov	r3, r0
 8015950:	2200      	movs	r2, #0
 8015952:	4621      	mov	r1, r4
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f7ff fec1 	bl	80156dc <tcp_output_alloc_header>
 801595a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d109      	bne.n	8015976 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	8b5b      	ldrh	r3, [r3, #26]
 8015966:	f043 0303 	orr.w	r3, r3, #3
 801596a:	b29a      	uxth	r2, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015970:	f06f 0301 	mvn.w	r3, #1
 8015974:	e023      	b.n	80159be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015976:	7dbb      	ldrb	r3, [r7, #22]
 8015978:	7dfa      	ldrb	r2, [r7, #23]
 801597a:	6939      	ldr	r1, [r7, #16]
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f7ff feeb 	bl	8015758 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015982:	687a      	ldr	r2, [r7, #4]
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	3304      	adds	r3, #4
 8015988:	6939      	ldr	r1, [r7, #16]
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f7ff ff24 	bl	80157d8 <tcp_output_control_segment>
 8015990:	4603      	mov	r3, r0
 8015992:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d007      	beq.n	80159ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	8b5b      	ldrh	r3, [r3, #26]
 80159a0:	f043 0303 	orr.w	r3, r3, #3
 80159a4:	b29a      	uxth	r2, r3
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	835a      	strh	r2, [r3, #26]
 80159aa:	e006      	b.n	80159ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	8b5b      	ldrh	r3, [r3, #26]
 80159b0:	f023 0303 	bic.w	r3, r3, #3
 80159b4:	b29a      	uxth	r2, r3
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80159ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80159be:	4618      	mov	r0, r3
 80159c0:	371c      	adds	r7, #28
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd90      	pop	{r4, r7, pc}
 80159c6:	bf00      	nop
 80159c8:	08019aec 	.word	0x08019aec
 80159cc:	0801a2dc 	.word	0x0801a2dc
 80159d0:	08019b74 	.word	0x08019b74

080159d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80159d4:	b590      	push	{r4, r7, lr}
 80159d6:	b087      	sub	sp, #28
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80159dc:	2300      	movs	r3, #0
 80159de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d106      	bne.n	80159f4 <tcp_keepalive+0x20>
 80159e6:	4b18      	ldr	r3, [pc, #96]	; (8015a48 <tcp_keepalive+0x74>)
 80159e8:	f640 0224 	movw	r2, #2084	; 0x824
 80159ec:	4917      	ldr	r1, [pc, #92]	; (8015a4c <tcp_keepalive+0x78>)
 80159ee:	4818      	ldr	r0, [pc, #96]	; (8015a50 <tcp_keepalive+0x7c>)
 80159f0:	f001 f944 	bl	8016c7c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80159f4:	7dfb      	ldrb	r3, [r7, #23]
 80159f6:	b29c      	uxth	r4, r3
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159fc:	3b01      	subs	r3, #1
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7f6 fc7d 	bl	800c2fe <lwip_htonl>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2200      	movs	r2, #0
 8015a08:	4621      	mov	r1, r4
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f7ff fe66 	bl	80156dc <tcp_output_alloc_header>
 8015a10:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d102      	bne.n	8015a1e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a1c:	e010      	b.n	8015a40 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015a1e:	7dfb      	ldrb	r3, [r7, #23]
 8015a20:	2200      	movs	r2, #0
 8015a22:	6939      	ldr	r1, [r7, #16]
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f7ff fe97 	bl	8015758 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	3304      	adds	r3, #4
 8015a30:	6939      	ldr	r1, [r7, #16]
 8015a32:	6878      	ldr	r0, [r7, #4]
 8015a34:	f7ff fed0 	bl	80157d8 <tcp_output_control_segment>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	371c      	adds	r7, #28
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd90      	pop	{r4, r7, pc}
 8015a48:	08019aec 	.word	0x08019aec
 8015a4c:	0801a2fc 	.word	0x0801a2fc
 8015a50:	08019b74 	.word	0x08019b74

08015a54 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015a54:	b590      	push	{r4, r7, lr}
 8015a56:	b08b      	sub	sp, #44	; 0x2c
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d106      	bne.n	8015a76 <tcp_zero_window_probe+0x22>
 8015a68:	4b4c      	ldr	r3, [pc, #304]	; (8015b9c <tcp_zero_window_probe+0x148>)
 8015a6a:	f640 024f 	movw	r2, #2127	; 0x84f
 8015a6e:	494c      	ldr	r1, [pc, #304]	; (8015ba0 <tcp_zero_window_probe+0x14c>)
 8015a70:	484c      	ldr	r0, [pc, #304]	; (8015ba4 <tcp_zero_window_probe+0x150>)
 8015a72:	f001 f903 	bl	8016c7c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a7a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015a7c:	6a3b      	ldr	r3, [r7, #32]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d101      	bne.n	8015a86 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015a82:	2300      	movs	r3, #0
 8015a84:	e086      	b.n	8015b94 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015a8c:	2bff      	cmp	r3, #255	; 0xff
 8015a8e:	d007      	beq.n	8015aa0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015a96:	3301      	adds	r3, #1
 8015a98:	b2da      	uxtb	r2, r3
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015aa0:	6a3b      	ldr	r3, [r7, #32]
 8015aa2:	68db      	ldr	r3, [r3, #12]
 8015aa4:	899b      	ldrh	r3, [r3, #12]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7f6 fc13 	bl	800c2d4 <lwip_htons>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	b2db      	uxtb	r3, r3
 8015ab2:	f003 0301 	and.w	r3, r3, #1
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d005      	beq.n	8015ac6 <tcp_zero_window_probe+0x72>
 8015aba:	6a3b      	ldr	r3, [r7, #32]
 8015abc:	891b      	ldrh	r3, [r3, #8]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d101      	bne.n	8015ac6 <tcp_zero_window_probe+0x72>
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	e000      	b.n	8015ac8 <tcp_zero_window_probe+0x74>
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015aca:	7ffb      	ldrb	r3, [r7, #31]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	bf0c      	ite	eq
 8015ad0:	2301      	moveq	r3, #1
 8015ad2:	2300      	movne	r3, #0
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015adc:	b299      	uxth	r1, r3
 8015ade:	6a3b      	ldr	r3, [r7, #32]
 8015ae0:	68db      	ldr	r3, [r3, #12]
 8015ae2:	685b      	ldr	r3, [r3, #4]
 8015ae4:	8bba      	ldrh	r2, [r7, #28]
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f7ff fdf8 	bl	80156dc <tcp_output_alloc_header>
 8015aec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015aee:	69bb      	ldr	r3, [r7, #24]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d102      	bne.n	8015afa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015af8:	e04c      	b.n	8015b94 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015afa:	69bb      	ldr	r3, [r7, #24]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015b00:	7ffb      	ldrb	r3, [r7, #31]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d011      	beq.n	8015b2a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	899b      	ldrh	r3, [r3, #12]
 8015b0a:	b29b      	uxth	r3, r3
 8015b0c:	b21b      	sxth	r3, r3
 8015b0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015b12:	b21c      	sxth	r4, r3
 8015b14:	2011      	movs	r0, #17
 8015b16:	f7f6 fbdd 	bl	800c2d4 <lwip_htons>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	b21b      	sxth	r3, r3
 8015b1e:	4323      	orrs	r3, r4
 8015b20:	b21b      	sxth	r3, r3
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	819a      	strh	r2, [r3, #12]
 8015b28:	e010      	b.n	8015b4c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015b2a:	69bb      	ldr	r3, [r7, #24]
 8015b2c:	685b      	ldr	r3, [r3, #4]
 8015b2e:	3314      	adds	r3, #20
 8015b30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015b32:	6a3b      	ldr	r3, [r7, #32]
 8015b34:	6858      	ldr	r0, [r3, #4]
 8015b36:	6a3b      	ldr	r3, [r7, #32]
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	891a      	ldrh	r2, [r3, #8]
 8015b3c:	6a3b      	ldr	r3, [r7, #32]
 8015b3e:	891b      	ldrh	r3, [r3, #8]
 8015b40:	1ad3      	subs	r3, r2, r3
 8015b42:	b29b      	uxth	r3, r3
 8015b44:	2201      	movs	r2, #1
 8015b46:	6939      	ldr	r1, [r7, #16]
 8015b48:	f7fa fd60 	bl	801060c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015b4c:	6a3b      	ldr	r3, [r7, #32]
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7f6 fbd3 	bl	800c2fe <lwip_htonl>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	1ad3      	subs	r3, r2, r3
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	da02      	bge.n	8015b70 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	68fa      	ldr	r2, [r7, #12]
 8015b6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b74:	2200      	movs	r2, #0
 8015b76:	69b9      	ldr	r1, [r7, #24]
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f7ff fded 	bl	8015758 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015b7e:	687a      	ldr	r2, [r7, #4]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	3304      	adds	r3, #4
 8015b84:	69b9      	ldr	r1, [r7, #24]
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7ff fe26 	bl	80157d8 <tcp_output_control_segment>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	372c      	adds	r7, #44	; 0x2c
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd90      	pop	{r4, r7, pc}
 8015b9c:	08019aec 	.word	0x08019aec
 8015ba0:	0801a318 	.word	0x0801a318
 8015ba4:	08019b74 	.word	0x08019b74

08015ba8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8015bb2:	f000 fafb 	bl	80161ac <sys_timeouts_sleeptime>
 8015bb6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015bbe:	d10b      	bne.n	8015bd8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8015bc0:	4813      	ldr	r0, [pc, #76]	; (8015c10 <tcpip_timeouts_mbox_fetch+0x68>)
 8015bc2:	f7fa fe6e 	bl	80108a2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	6839      	ldr	r1, [r7, #0]
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f7fa fdf6 	bl	80107bc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015bd0:	480f      	ldr	r0, [pc, #60]	; (8015c10 <tcpip_timeouts_mbox_fetch+0x68>)
 8015bd2:	f7fa fe57 	bl	8010884 <sys_mutex_lock>
    return;
 8015bd6:	e018      	b.n	8015c0a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d102      	bne.n	8015be4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8015bde:	f000 faab 	bl	8016138 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015be2:	e7e6      	b.n	8015bb2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8015be4:	480a      	ldr	r0, [pc, #40]	; (8015c10 <tcpip_timeouts_mbox_fetch+0x68>)
 8015be6:	f7fa fe5c 	bl	80108a2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015bea:	68fa      	ldr	r2, [r7, #12]
 8015bec:	6839      	ldr	r1, [r7, #0]
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f7fa fde4 	bl	80107bc <sys_arch_mbox_fetch>
 8015bf4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8015bf6:	4806      	ldr	r0, [pc, #24]	; (8015c10 <tcpip_timeouts_mbox_fetch+0x68>)
 8015bf8:	f7fa fe44 	bl	8010884 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c02:	d102      	bne.n	8015c0a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015c04:	f000 fa98 	bl	8016138 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015c08:	e7d3      	b.n	8015bb2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8015c0a:	3710      	adds	r7, #16
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}
 8015c10:	24008368 	.word	0x24008368

08015c14 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b084      	sub	sp, #16
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8015c1c:	4810      	ldr	r0, [pc, #64]	; (8015c60 <tcpip_thread+0x4c>)
 8015c1e:	f7fa fe31 	bl	8010884 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015c22:	4b10      	ldr	r3, [pc, #64]	; (8015c64 <tcpip_thread+0x50>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d005      	beq.n	8015c36 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8015c2a:	4b0e      	ldr	r3, [pc, #56]	; (8015c64 <tcpip_thread+0x50>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	4a0e      	ldr	r2, [pc, #56]	; (8015c68 <tcpip_thread+0x54>)
 8015c30:	6812      	ldr	r2, [r2, #0]
 8015c32:	4610      	mov	r0, r2
 8015c34:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015c36:	f107 030c 	add.w	r3, r7, #12
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	480b      	ldr	r0, [pc, #44]	; (8015c6c <tcpip_thread+0x58>)
 8015c3e:	f7ff ffb3 	bl	8015ba8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d106      	bne.n	8015c56 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015c48:	4b09      	ldr	r3, [pc, #36]	; (8015c70 <tcpip_thread+0x5c>)
 8015c4a:	2291      	movs	r2, #145	; 0x91
 8015c4c:	4909      	ldr	r1, [pc, #36]	; (8015c74 <tcpip_thread+0x60>)
 8015c4e:	480a      	ldr	r0, [pc, #40]	; (8015c78 <tcpip_thread+0x64>)
 8015c50:	f001 f814 	bl	8016c7c <iprintf>
      continue;
 8015c54:	e003      	b.n	8015c5e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f000 f80f 	bl	8015c7c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015c5e:	e7ea      	b.n	8015c36 <tcpip_thread+0x22>
 8015c60:	24008368 	.word	0x24008368
 8015c64:	24004b40 	.word	0x24004b40
 8015c68:	24004b44 	.word	0x24004b44
 8015c6c:	24004b48 	.word	0x24004b48
 8015c70:	0801a33c 	.word	0x0801a33c
 8015c74:	0801a3a0 	.word	0x0801a3a0
 8015c78:	0801a3c0 	.word	0x0801a3c0

08015c7c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b082      	sub	sp, #8
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	2b01      	cmp	r3, #1
 8015c8a:	d018      	beq.n	8015cbe <tcpip_thread_handle_msg+0x42>
 8015c8c:	2b02      	cmp	r3, #2
 8015c8e:	d021      	beq.n	8015cd4 <tcpip_thread_handle_msg+0x58>
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d126      	bne.n	8015ce2 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	68db      	ldr	r3, [r3, #12]
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	6850      	ldr	r0, [r2, #4]
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	6892      	ldr	r2, [r2, #8]
 8015ca0:	4611      	mov	r1, r2
 8015ca2:	4798      	blx	r3
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d004      	beq.n	8015cb4 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7fa faa6 	bl	8010200 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015cb4:	6879      	ldr	r1, [r7, #4]
 8015cb6:	2009      	movs	r0, #9
 8015cb8:	f7f9 fc02 	bl	800f4c0 <memp_free>
      break;
 8015cbc:	e018      	b.n	8015cf0 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	687a      	ldr	r2, [r7, #4]
 8015cc4:	6892      	ldr	r2, [r2, #8]
 8015cc6:	4610      	mov	r0, r2
 8015cc8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015cca:	6879      	ldr	r1, [r7, #4]
 8015ccc:	2008      	movs	r0, #8
 8015cce:	f7f9 fbf7 	bl	800f4c0 <memp_free>
      break;
 8015cd2:	e00d      	b.n	8015cf0 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	685b      	ldr	r3, [r3, #4]
 8015cd8:	687a      	ldr	r2, [r7, #4]
 8015cda:	6892      	ldr	r2, [r2, #8]
 8015cdc:	4610      	mov	r0, r2
 8015cde:	4798      	blx	r3
      break;
 8015ce0:	e006      	b.n	8015cf0 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015ce2:	4b05      	ldr	r3, [pc, #20]	; (8015cf8 <tcpip_thread_handle_msg+0x7c>)
 8015ce4:	22cf      	movs	r2, #207	; 0xcf
 8015ce6:	4905      	ldr	r1, [pc, #20]	; (8015cfc <tcpip_thread_handle_msg+0x80>)
 8015ce8:	4805      	ldr	r0, [pc, #20]	; (8015d00 <tcpip_thread_handle_msg+0x84>)
 8015cea:	f000 ffc7 	bl	8016c7c <iprintf>
      break;
 8015cee:	bf00      	nop
  }
}
 8015cf0:	bf00      	nop
 8015cf2:	3708      	adds	r7, #8
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	0801a33c 	.word	0x0801a33c
 8015cfc:	0801a3a0 	.word	0x0801a3a0
 8015d00:	0801a3c0 	.word	0x0801a3c0

08015d04 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b086      	sub	sp, #24
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	60f8      	str	r0, [r7, #12]
 8015d0c:	60b9      	str	r1, [r7, #8]
 8015d0e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015d10:	481a      	ldr	r0, [pc, #104]	; (8015d7c <tcpip_inpkt+0x78>)
 8015d12:	f7fa fd84 	bl	801081e <sys_mbox_valid>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d105      	bne.n	8015d28 <tcpip_inpkt+0x24>
 8015d1c:	4b18      	ldr	r3, [pc, #96]	; (8015d80 <tcpip_inpkt+0x7c>)
 8015d1e:	22fc      	movs	r2, #252	; 0xfc
 8015d20:	4918      	ldr	r1, [pc, #96]	; (8015d84 <tcpip_inpkt+0x80>)
 8015d22:	4819      	ldr	r0, [pc, #100]	; (8015d88 <tcpip_inpkt+0x84>)
 8015d24:	f000 ffaa 	bl	8016c7c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015d28:	2009      	movs	r0, #9
 8015d2a:	f7f9 fb53 	bl	800f3d4 <memp_malloc>
 8015d2e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d102      	bne.n	8015d3c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8015d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d3a:	e01a      	b.n	8015d72 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	68fa      	ldr	r2, [r7, #12]
 8015d46:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015d54:	6979      	ldr	r1, [r7, #20]
 8015d56:	4809      	ldr	r0, [pc, #36]	; (8015d7c <tcpip_inpkt+0x78>)
 8015d58:	f7fa fd16 	bl	8010788 <sys_mbox_trypost>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d006      	beq.n	8015d70 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015d62:	6979      	ldr	r1, [r7, #20]
 8015d64:	2009      	movs	r0, #9
 8015d66:	f7f9 fbab 	bl	800f4c0 <memp_free>
    return ERR_MEM;
 8015d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d6e:	e000      	b.n	8015d72 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8015d70:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3718      	adds	r7, #24
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	24004b48 	.word	0x24004b48
 8015d80:	0801a33c 	.word	0x0801a33c
 8015d84:	0801a3e8 	.word	0x0801a3e8
 8015d88:	0801a3c0 	.word	0x0801a3c0

08015d8c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b082      	sub	sp, #8
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d9c:	f003 0318 	and.w	r3, r3, #24
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d006      	beq.n	8015db2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8015da4:	4a08      	ldr	r2, [pc, #32]	; (8015dc8 <tcpip_input+0x3c>)
 8015da6:	6839      	ldr	r1, [r7, #0]
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7ff ffab 	bl	8015d04 <tcpip_inpkt>
 8015dae:	4603      	mov	r3, r0
 8015db0:	e005      	b.n	8015dbe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8015db2:	4a06      	ldr	r2, [pc, #24]	; (8015dcc <tcpip_input+0x40>)
 8015db4:	6839      	ldr	r1, [r7, #0]
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f7ff ffa4 	bl	8015d04 <tcpip_inpkt>
 8015dbc:	4603      	mov	r3, r0
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3708      	adds	r7, #8
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	0800d1c9 	.word	0x0800d1c9
 8015dcc:	0800d9b9 	.word	0x0800d9b9

08015dd0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b084      	sub	sp, #16
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015dda:	4819      	ldr	r0, [pc, #100]	; (8015e40 <tcpip_try_callback+0x70>)
 8015ddc:	f7fa fd1f 	bl	801081e <sys_mbox_valid>
 8015de0:	4603      	mov	r3, r0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d106      	bne.n	8015df4 <tcpip_try_callback+0x24>
 8015de6:	4b17      	ldr	r3, [pc, #92]	; (8015e44 <tcpip_try_callback+0x74>)
 8015de8:	f240 125d 	movw	r2, #349	; 0x15d
 8015dec:	4916      	ldr	r1, [pc, #88]	; (8015e48 <tcpip_try_callback+0x78>)
 8015dee:	4817      	ldr	r0, [pc, #92]	; (8015e4c <tcpip_try_callback+0x7c>)
 8015df0:	f000 ff44 	bl	8016c7c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015df4:	2008      	movs	r0, #8
 8015df6:	f7f9 faed 	bl	800f3d4 <memp_malloc>
 8015dfa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d102      	bne.n	8015e08 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8015e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e06:	e017      	b.n	8015e38 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	2201      	movs	r2, #1
 8015e0c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	683a      	ldr	r2, [r7, #0]
 8015e18:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015e1a:	68f9      	ldr	r1, [r7, #12]
 8015e1c:	4808      	ldr	r0, [pc, #32]	; (8015e40 <tcpip_try_callback+0x70>)
 8015e1e:	f7fa fcb3 	bl	8010788 <sys_mbox_trypost>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d006      	beq.n	8015e36 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015e28:	68f9      	ldr	r1, [r7, #12]
 8015e2a:	2008      	movs	r0, #8
 8015e2c:	f7f9 fb48 	bl	800f4c0 <memp_free>
    return ERR_MEM;
 8015e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e34:	e000      	b.n	8015e38 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8015e36:	2300      	movs	r3, #0
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3710      	adds	r7, #16
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}
 8015e40:	24004b48 	.word	0x24004b48
 8015e44:	0801a33c 	.word	0x0801a33c
 8015e48:	0801a3e8 	.word	0x0801a3e8
 8015e4c:	0801a3c0 	.word	0x0801a3c0

08015e50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af02      	add	r7, sp, #8
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	6039      	str	r1, [r7, #0]
  lwip_init();
 8015e5a:	f7f7 fcfb 	bl	800d854 <lwip_init>

  tcpip_init_done = initfunc;
 8015e5e:	4a17      	ldr	r2, [pc, #92]	; (8015ebc <tcpip_init+0x6c>)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8015e64:	4a16      	ldr	r2, [pc, #88]	; (8015ec0 <tcpip_init+0x70>)
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015e6a:	2106      	movs	r1, #6
 8015e6c:	4815      	ldr	r0, [pc, #84]	; (8015ec4 <tcpip_init+0x74>)
 8015e6e:	f7fa fc71 	bl	8010754 <sys_mbox_new>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d006      	beq.n	8015e86 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015e78:	4b13      	ldr	r3, [pc, #76]	; (8015ec8 <tcpip_init+0x78>)
 8015e7a:	f240 2261 	movw	r2, #609	; 0x261
 8015e7e:	4913      	ldr	r1, [pc, #76]	; (8015ecc <tcpip_init+0x7c>)
 8015e80:	4813      	ldr	r0, [pc, #76]	; (8015ed0 <tcpip_init+0x80>)
 8015e82:	f000 fefb 	bl	8016c7c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015e86:	4813      	ldr	r0, [pc, #76]	; (8015ed4 <tcpip_init+0x84>)
 8015e88:	f7fa fce6 	bl	8010858 <sys_mutex_new>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d006      	beq.n	8015ea0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8015e92:	4b0d      	ldr	r3, [pc, #52]	; (8015ec8 <tcpip_init+0x78>)
 8015e94:	f240 2265 	movw	r2, #613	; 0x265
 8015e98:	490f      	ldr	r1, [pc, #60]	; (8015ed8 <tcpip_init+0x88>)
 8015e9a:	480d      	ldr	r0, [pc, #52]	; (8015ed0 <tcpip_init+0x80>)
 8015e9c:	f000 feee 	bl	8016c7c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015ea0:	2318      	movs	r3, #24
 8015ea2:	9300      	str	r3, [sp, #0]
 8015ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	490c      	ldr	r1, [pc, #48]	; (8015edc <tcpip_init+0x8c>)
 8015eac:	480c      	ldr	r0, [pc, #48]	; (8015ee0 <tcpip_init+0x90>)
 8015eae:	f7fa fd05 	bl	80108bc <sys_thread_new>
}
 8015eb2:	bf00      	nop
 8015eb4:	3708      	adds	r7, #8
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	24004b40 	.word	0x24004b40
 8015ec0:	24004b44 	.word	0x24004b44
 8015ec4:	24004b48 	.word	0x24004b48
 8015ec8:	0801a33c 	.word	0x0801a33c
 8015ecc:	0801a3f8 	.word	0x0801a3f8
 8015ed0:	0801a3c0 	.word	0x0801a3c0
 8015ed4:	24008368 	.word	0x24008368
 8015ed8:	0801a41c 	.word	0x0801a41c
 8015edc:	08015c15 	.word	0x08015c15
 8015ee0:	0801a440 	.word	0x0801a440

08015ee4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b082      	sub	sp, #8
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015eec:	f7fa fd6e 	bl	80109cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015ef0:	4b0a      	ldr	r3, [pc, #40]	; (8015f1c <tcpip_tcp_timer+0x38>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d103      	bne.n	8015f00 <tcpip_tcp_timer+0x1c>
 8015ef8:	4b09      	ldr	r3, [pc, #36]	; (8015f20 <tcpip_tcp_timer+0x3c>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d005      	beq.n	8015f0c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015f00:	2200      	movs	r2, #0
 8015f02:	4908      	ldr	r1, [pc, #32]	; (8015f24 <tcpip_tcp_timer+0x40>)
 8015f04:	20fa      	movs	r0, #250	; 0xfa
 8015f06:	f000 f8f1 	bl	80160ec <sys_timeout>
 8015f0a:	e002      	b.n	8015f12 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015f0c:	4b06      	ldr	r3, [pc, #24]	; (8015f28 <tcpip_tcp_timer+0x44>)
 8015f0e:	2200      	movs	r2, #0
 8015f10:	601a      	str	r2, [r3, #0]
  }
}
 8015f12:	bf00      	nop
 8015f14:	3708      	adds	r7, #8
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop
 8015f1c:	24008350 	.word	0x24008350
 8015f20:	24008360 	.word	0x24008360
 8015f24:	08015ee5 	.word	0x08015ee5
 8015f28:	24004b54 	.word	0x24004b54

08015f2c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015f30:	4b0a      	ldr	r3, [pc, #40]	; (8015f5c <tcp_timer_needed+0x30>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d10f      	bne.n	8015f58 <tcp_timer_needed+0x2c>
 8015f38:	4b09      	ldr	r3, [pc, #36]	; (8015f60 <tcp_timer_needed+0x34>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d103      	bne.n	8015f48 <tcp_timer_needed+0x1c>
 8015f40:	4b08      	ldr	r3, [pc, #32]	; (8015f64 <tcp_timer_needed+0x38>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d007      	beq.n	8015f58 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015f48:	4b04      	ldr	r3, [pc, #16]	; (8015f5c <tcp_timer_needed+0x30>)
 8015f4a:	2201      	movs	r2, #1
 8015f4c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015f4e:	2200      	movs	r2, #0
 8015f50:	4905      	ldr	r1, [pc, #20]	; (8015f68 <tcp_timer_needed+0x3c>)
 8015f52:	20fa      	movs	r0, #250	; 0xfa
 8015f54:	f000 f8ca 	bl	80160ec <sys_timeout>
  }
}
 8015f58:	bf00      	nop
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	24004b54 	.word	0x24004b54
 8015f60:	24008350 	.word	0x24008350
 8015f64:	24008360 	.word	0x24008360
 8015f68:	08015ee5 	.word	0x08015ee5

08015f6c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b086      	sub	sp, #24
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	60f8      	str	r0, [r7, #12]
 8015f74:	60b9      	str	r1, [r7, #8]
 8015f76:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015f78:	200a      	movs	r0, #10
 8015f7a:	f7f9 fa2b 	bl	800f3d4 <memp_malloc>
 8015f7e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d109      	bne.n	8015f9a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d151      	bne.n	8016030 <sys_timeout_abs+0xc4>
 8015f8c:	4b2a      	ldr	r3, [pc, #168]	; (8016038 <sys_timeout_abs+0xcc>)
 8015f8e:	22be      	movs	r2, #190	; 0xbe
 8015f90:	492a      	ldr	r1, [pc, #168]	; (801603c <sys_timeout_abs+0xd0>)
 8015f92:	482b      	ldr	r0, [pc, #172]	; (8016040 <sys_timeout_abs+0xd4>)
 8015f94:	f000 fe72 	bl	8016c7c <iprintf>
    return;
 8015f98:	e04a      	b.n	8016030 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	68ba      	ldr	r2, [r7, #8]
 8015fa4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015fa6:	693b      	ldr	r3, [r7, #16]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	68fa      	ldr	r2, [r7, #12]
 8015fb0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015fb2:	4b24      	ldr	r3, [pc, #144]	; (8016044 <sys_timeout_abs+0xd8>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d103      	bne.n	8015fc2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015fba:	4a22      	ldr	r2, [pc, #136]	; (8016044 <sys_timeout_abs+0xd8>)
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	6013      	str	r3, [r2, #0]
    return;
 8015fc0:	e037      	b.n	8016032 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	685a      	ldr	r2, [r3, #4]
 8015fc6:	4b1f      	ldr	r3, [pc, #124]	; (8016044 <sys_timeout_abs+0xd8>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	0fdb      	lsrs	r3, r3, #31
 8015fd0:	f003 0301 	and.w	r3, r3, #1
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d007      	beq.n	8015fea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015fda:	4b1a      	ldr	r3, [pc, #104]	; (8016044 <sys_timeout_abs+0xd8>)
 8015fdc:	681a      	ldr	r2, [r3, #0]
 8015fde:	693b      	ldr	r3, [r7, #16]
 8015fe0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015fe2:	4a18      	ldr	r2, [pc, #96]	; (8016044 <sys_timeout_abs+0xd8>)
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	6013      	str	r3, [r2, #0]
 8015fe8:	e023      	b.n	8016032 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015fea:	4b16      	ldr	r3, [pc, #88]	; (8016044 <sys_timeout_abs+0xd8>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	617b      	str	r3, [r7, #20]
 8015ff0:	e01a      	b.n	8016028 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015ff2:	697b      	ldr	r3, [r7, #20]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d00b      	beq.n	8016012 <sys_timeout_abs+0xa6>
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	685a      	ldr	r2, [r3, #4]
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	685b      	ldr	r3, [r3, #4]
 8016004:	1ad3      	subs	r3, r2, r3
 8016006:	0fdb      	lsrs	r3, r3, #31
 8016008:	f003 0301 	and.w	r3, r3, #1
 801600c:	b2db      	uxtb	r3, r3
 801600e:	2b00      	cmp	r3, #0
 8016010:	d007      	beq.n	8016022 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016012:	697b      	ldr	r3, [r7, #20]
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801601a:	697b      	ldr	r3, [r7, #20]
 801601c:	693a      	ldr	r2, [r7, #16]
 801601e:	601a      	str	r2, [r3, #0]
        break;
 8016020:	e007      	b.n	8016032 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016022:	697b      	ldr	r3, [r7, #20]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	617b      	str	r3, [r7, #20]
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d1e1      	bne.n	8015ff2 <sys_timeout_abs+0x86>
 801602e:	e000      	b.n	8016032 <sys_timeout_abs+0xc6>
    return;
 8016030:	bf00      	nop
      }
    }
  }
}
 8016032:	3718      	adds	r7, #24
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	0801a450 	.word	0x0801a450
 801603c:	0801a4b8 	.word	0x0801a4b8
 8016040:	0801a4f8 	.word	0x0801a4f8
 8016044:	24004b4c 	.word	0x24004b4c

08016048 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b086      	sub	sp, #24
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	685b      	ldr	r3, [r3, #4]
 8016058:	4798      	blx	r3

  now = sys_now();
 801605a:	f7f2 fad5 	bl	8008608 <sys_now>
 801605e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016060:	697b      	ldr	r3, [r7, #20]
 8016062:	681a      	ldr	r2, [r3, #0]
 8016064:	4b0f      	ldr	r3, [pc, #60]	; (80160a4 <lwip_cyclic_timer+0x5c>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4413      	add	r3, r2
 801606a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801606c:	68fa      	ldr	r2, [r7, #12]
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	1ad3      	subs	r3, r2, r3
 8016072:	0fdb      	lsrs	r3, r3, #31
 8016074:	f003 0301 	and.w	r3, r3, #1
 8016078:	b2db      	uxtb	r3, r3
 801607a:	2b00      	cmp	r3, #0
 801607c:	d009      	beq.n	8016092 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	681a      	ldr	r2, [r3, #0]
 8016082:	693b      	ldr	r3, [r7, #16]
 8016084:	4413      	add	r3, r2
 8016086:	687a      	ldr	r2, [r7, #4]
 8016088:	4907      	ldr	r1, [pc, #28]	; (80160a8 <lwip_cyclic_timer+0x60>)
 801608a:	4618      	mov	r0, r3
 801608c:	f7ff ff6e 	bl	8015f6c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016090:	e004      	b.n	801609c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	4904      	ldr	r1, [pc, #16]	; (80160a8 <lwip_cyclic_timer+0x60>)
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f7ff ff68 	bl	8015f6c <sys_timeout_abs>
}
 801609c:	bf00      	nop
 801609e:	3718      	adds	r7, #24
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	24004b50 	.word	0x24004b50
 80160a8:	08016049 	.word	0x08016049

080160ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80160b2:	2301      	movs	r3, #1
 80160b4:	607b      	str	r3, [r7, #4]
 80160b6:	e00e      	b.n	80160d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80160b8:	4a0a      	ldr	r2, [pc, #40]	; (80160e4 <sys_timeouts_init+0x38>)
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	00db      	lsls	r3, r3, #3
 80160c4:	4a07      	ldr	r2, [pc, #28]	; (80160e4 <sys_timeouts_init+0x38>)
 80160c6:	4413      	add	r3, r2
 80160c8:	461a      	mov	r2, r3
 80160ca:	4907      	ldr	r1, [pc, #28]	; (80160e8 <sys_timeouts_init+0x3c>)
 80160cc:	f000 f80e 	bl	80160ec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	3301      	adds	r3, #1
 80160d4:	607b      	str	r3, [r7, #4]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	2b02      	cmp	r3, #2
 80160da:	d9ed      	bls.n	80160b8 <sys_timeouts_init+0xc>
  }
}
 80160dc:	bf00      	nop
 80160de:	3708      	adds	r7, #8
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}
 80160e4:	0801aa68 	.word	0x0801aa68
 80160e8:	08016049 	.word	0x08016049

080160ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b086      	sub	sp, #24
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	60f8      	str	r0, [r7, #12]
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80160fe:	d306      	bcc.n	801610e <sys_timeout+0x22>
 8016100:	4b0a      	ldr	r3, [pc, #40]	; (801612c <sys_timeout+0x40>)
 8016102:	f240 1229 	movw	r2, #297	; 0x129
 8016106:	490a      	ldr	r1, [pc, #40]	; (8016130 <sys_timeout+0x44>)
 8016108:	480a      	ldr	r0, [pc, #40]	; (8016134 <sys_timeout+0x48>)
 801610a:	f000 fdb7 	bl	8016c7c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801610e:	f7f2 fa7b 	bl	8008608 <sys_now>
 8016112:	4602      	mov	r2, r0
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	4413      	add	r3, r2
 8016118:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801611a:	687a      	ldr	r2, [r7, #4]
 801611c:	68b9      	ldr	r1, [r7, #8]
 801611e:	6978      	ldr	r0, [r7, #20]
 8016120:	f7ff ff24 	bl	8015f6c <sys_timeout_abs>
#endif
}
 8016124:	bf00      	nop
 8016126:	3718      	adds	r7, #24
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}
 801612c:	0801a450 	.word	0x0801a450
 8016130:	0801a520 	.word	0x0801a520
 8016134:	0801a4f8 	.word	0x0801a4f8

08016138 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b084      	sub	sp, #16
 801613c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801613e:	f7f2 fa63 	bl	8008608 <sys_now>
 8016142:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016144:	4b17      	ldr	r3, [pc, #92]	; (80161a4 <sys_check_timeouts+0x6c>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d022      	beq.n	8016196 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016150:	68bb      	ldr	r3, [r7, #8]
 8016152:	685b      	ldr	r3, [r3, #4]
 8016154:	68fa      	ldr	r2, [r7, #12]
 8016156:	1ad3      	subs	r3, r2, r3
 8016158:	0fdb      	lsrs	r3, r3, #31
 801615a:	f003 0301 	and.w	r3, r3, #1
 801615e:	b2db      	uxtb	r3, r3
 8016160:	2b00      	cmp	r3, #0
 8016162:	d11a      	bne.n	801619a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	4a0e      	ldr	r2, [pc, #56]	; (80161a4 <sys_check_timeouts+0x6c>)
 801616a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	68db      	ldr	r3, [r3, #12]
 8016176:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	4a0a      	ldr	r2, [pc, #40]	; (80161a8 <sys_check_timeouts+0x70>)
 801617e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016180:	68b9      	ldr	r1, [r7, #8]
 8016182:	200a      	movs	r0, #10
 8016184:	f7f9 f99c 	bl	800f4c0 <memp_free>
    if (handler != NULL) {
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d0da      	beq.n	8016144 <sys_check_timeouts+0xc>
      handler(arg);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6838      	ldr	r0, [r7, #0]
 8016192:	4798      	blx	r3
  do {
 8016194:	e7d6      	b.n	8016144 <sys_check_timeouts+0xc>
      return;
 8016196:	bf00      	nop
 8016198:	e000      	b.n	801619c <sys_check_timeouts+0x64>
      return;
 801619a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801619c:	3710      	adds	r7, #16
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	24004b4c 	.word	0x24004b4c
 80161a8:	24004b50 	.word	0x24004b50

080161ac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b082      	sub	sp, #8
 80161b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80161b2:	4b16      	ldr	r3, [pc, #88]	; (801620c <sys_timeouts_sleeptime+0x60>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d102      	bne.n	80161c0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80161ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161be:	e020      	b.n	8016202 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80161c0:	f7f2 fa22 	bl	8008608 <sys_now>
 80161c4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80161c6:	4b11      	ldr	r3, [pc, #68]	; (801620c <sys_timeouts_sleeptime+0x60>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	685a      	ldr	r2, [r3, #4]
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	1ad3      	subs	r3, r2, r3
 80161d0:	0fdb      	lsrs	r3, r3, #31
 80161d2:	f003 0301 	and.w	r3, r3, #1
 80161d6:	b2db      	uxtb	r3, r3
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d001      	beq.n	80161e0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80161dc:	2300      	movs	r3, #0
 80161de:	e010      	b.n	8016202 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80161e0:	4b0a      	ldr	r3, [pc, #40]	; (801620c <sys_timeouts_sleeptime+0x60>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	685a      	ldr	r2, [r3, #4]
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	1ad3      	subs	r3, r2, r3
 80161ea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	da06      	bge.n	8016200 <sys_timeouts_sleeptime+0x54>
 80161f2:	4b07      	ldr	r3, [pc, #28]	; (8016210 <sys_timeouts_sleeptime+0x64>)
 80161f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80161f8:	4906      	ldr	r1, [pc, #24]	; (8016214 <sys_timeouts_sleeptime+0x68>)
 80161fa:	4807      	ldr	r0, [pc, #28]	; (8016218 <sys_timeouts_sleeptime+0x6c>)
 80161fc:	f000 fd3e 	bl	8016c7c <iprintf>
    return ret;
 8016200:	683b      	ldr	r3, [r7, #0]
  }
}
 8016202:	4618      	mov	r0, r3
 8016204:	3708      	adds	r7, #8
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}
 801620a:	bf00      	nop
 801620c:	24004b4c 	.word	0x24004b4c
 8016210:	0801a450 	.word	0x0801a450
 8016214:	0801a558 	.word	0x0801a558
 8016218:	0801a4f8 	.word	0x0801a4f8

0801621c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016220:	f000 fd44 	bl	8016cac <rand>
 8016224:	4603      	mov	r3, r0
 8016226:	b29b      	uxth	r3, r3
 8016228:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801622c:	b29b      	uxth	r3, r3
 801622e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016232:	b29a      	uxth	r2, r3
 8016234:	4b01      	ldr	r3, [pc, #4]	; (801623c <udp_init+0x20>)
 8016236:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016238:	bf00      	nop
 801623a:	bd80      	pop	{r7, pc}
 801623c:	24000030 	.word	0x24000030

08016240 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016240:	b480      	push	{r7}
 8016242:	b083      	sub	sp, #12
 8016244:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016246:	2300      	movs	r3, #0
 8016248:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801624a:	4b17      	ldr	r3, [pc, #92]	; (80162a8 <udp_new_port+0x68>)
 801624c:	881b      	ldrh	r3, [r3, #0]
 801624e:	1c5a      	adds	r2, r3, #1
 8016250:	b291      	uxth	r1, r2
 8016252:	4a15      	ldr	r2, [pc, #84]	; (80162a8 <udp_new_port+0x68>)
 8016254:	8011      	strh	r1, [r2, #0]
 8016256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801625a:	4293      	cmp	r3, r2
 801625c:	d103      	bne.n	8016266 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801625e:	4b12      	ldr	r3, [pc, #72]	; (80162a8 <udp_new_port+0x68>)
 8016260:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016264:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016266:	4b11      	ldr	r3, [pc, #68]	; (80162ac <udp_new_port+0x6c>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	603b      	str	r3, [r7, #0]
 801626c:	e011      	b.n	8016292 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	8a5a      	ldrh	r2, [r3, #18]
 8016272:	4b0d      	ldr	r3, [pc, #52]	; (80162a8 <udp_new_port+0x68>)
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	429a      	cmp	r2, r3
 8016278:	d108      	bne.n	801628c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801627a:	88fb      	ldrh	r3, [r7, #6]
 801627c:	3301      	adds	r3, #1
 801627e:	80fb      	strh	r3, [r7, #6]
 8016280:	88fb      	ldrh	r3, [r7, #6]
 8016282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016286:	d3e0      	bcc.n	801624a <udp_new_port+0xa>
        return 0;
 8016288:	2300      	movs	r3, #0
 801628a:	e007      	b.n	801629c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	603b      	str	r3, [r7, #0]
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d1ea      	bne.n	801626e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016298:	4b03      	ldr	r3, [pc, #12]	; (80162a8 <udp_new_port+0x68>)
 801629a:	881b      	ldrh	r3, [r3, #0]
}
 801629c:	4618      	mov	r0, r3
 801629e:	370c      	adds	r7, #12
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr
 80162a8:	24000030 	.word	0x24000030
 80162ac:	2400836c 	.word	0x2400836c

080162b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	4613      	mov	r3, r2
 80162bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d105      	bne.n	80162d0 <udp_input_local_match+0x20>
 80162c4:	4b27      	ldr	r3, [pc, #156]	; (8016364 <udp_input_local_match+0xb4>)
 80162c6:	2287      	movs	r2, #135	; 0x87
 80162c8:	4927      	ldr	r1, [pc, #156]	; (8016368 <udp_input_local_match+0xb8>)
 80162ca:	4828      	ldr	r0, [pc, #160]	; (801636c <udp_input_local_match+0xbc>)
 80162cc:	f000 fcd6 	bl	8016c7c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d105      	bne.n	80162e2 <udp_input_local_match+0x32>
 80162d6:	4b23      	ldr	r3, [pc, #140]	; (8016364 <udp_input_local_match+0xb4>)
 80162d8:	2288      	movs	r2, #136	; 0x88
 80162da:	4925      	ldr	r1, [pc, #148]	; (8016370 <udp_input_local_match+0xc0>)
 80162dc:	4823      	ldr	r0, [pc, #140]	; (801636c <udp_input_local_match+0xbc>)
 80162de:	f000 fccd 	bl	8016c7c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	7a1b      	ldrb	r3, [r3, #8]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d00b      	beq.n	8016302 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	7a1a      	ldrb	r2, [r3, #8]
 80162ee:	4b21      	ldr	r3, [pc, #132]	; (8016374 <udp_input_local_match+0xc4>)
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80162f6:	3301      	adds	r3, #1
 80162f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162fa:	429a      	cmp	r2, r3
 80162fc:	d001      	beq.n	8016302 <udp_input_local_match+0x52>
    return 0;
 80162fe:	2300      	movs	r3, #0
 8016300:	e02b      	b.n	801635a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016302:	79fb      	ldrb	r3, [r7, #7]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d018      	beq.n	801633a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d013      	beq.n	8016336 <udp_input_local_match+0x86>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d00f      	beq.n	8016336 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016316:	4b17      	ldr	r3, [pc, #92]	; (8016374 <udp_input_local_match+0xc4>)
 8016318:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801631a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801631e:	d00a      	beq.n	8016336 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	4b13      	ldr	r3, [pc, #76]	; (8016374 <udp_input_local_match+0xc4>)
 8016326:	695b      	ldr	r3, [r3, #20]
 8016328:	405a      	eors	r2, r3
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	3308      	adds	r3, #8
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016332:	2b00      	cmp	r3, #0
 8016334:	d110      	bne.n	8016358 <udp_input_local_match+0xa8>
          return 1;
 8016336:	2301      	movs	r3, #1
 8016338:	e00f      	b.n	801635a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d009      	beq.n	8016354 <udp_input_local_match+0xa4>
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d005      	beq.n	8016354 <udp_input_local_match+0xa4>
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	681a      	ldr	r2, [r3, #0]
 801634c:	4b09      	ldr	r3, [pc, #36]	; (8016374 <udp_input_local_match+0xc4>)
 801634e:	695b      	ldr	r3, [r3, #20]
 8016350:	429a      	cmp	r2, r3
 8016352:	d101      	bne.n	8016358 <udp_input_local_match+0xa8>
        return 1;
 8016354:	2301      	movs	r3, #1
 8016356:	e000      	b.n	801635a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016358:	2300      	movs	r3, #0
}
 801635a:	4618      	mov	r0, r3
 801635c:	3710      	adds	r7, #16
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	0801a56c 	.word	0x0801a56c
 8016368:	0801a5d0 	.word	0x0801a5d0
 801636c:	0801a5f4 	.word	0x0801a5f4
 8016370:	0801a61c 	.word	0x0801a61c
 8016374:	24005288 	.word	0x24005288

08016378 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016378:	b590      	push	{r4, r7, lr}
 801637a:	b08d      	sub	sp, #52	; 0x34
 801637c:	af02      	add	r7, sp, #8
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016382:	2300      	movs	r3, #0
 8016384:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d105      	bne.n	8016398 <udp_input+0x20>
 801638c:	4b7c      	ldr	r3, [pc, #496]	; (8016580 <udp_input+0x208>)
 801638e:	22cf      	movs	r2, #207	; 0xcf
 8016390:	497c      	ldr	r1, [pc, #496]	; (8016584 <udp_input+0x20c>)
 8016392:	487d      	ldr	r0, [pc, #500]	; (8016588 <udp_input+0x210>)
 8016394:	f000 fc72 	bl	8016c7c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d105      	bne.n	80163aa <udp_input+0x32>
 801639e:	4b78      	ldr	r3, [pc, #480]	; (8016580 <udp_input+0x208>)
 80163a0:	22d0      	movs	r2, #208	; 0xd0
 80163a2:	497a      	ldr	r1, [pc, #488]	; (801658c <udp_input+0x214>)
 80163a4:	4878      	ldr	r0, [pc, #480]	; (8016588 <udp_input+0x210>)
 80163a6:	f000 fc69 	bl	8016c7c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	895b      	ldrh	r3, [r3, #10]
 80163ae:	2b07      	cmp	r3, #7
 80163b0:	d803      	bhi.n	80163ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f7f9 ff24 	bl	8010200 <pbuf_free>
    goto end;
 80163b8:	e0de      	b.n	8016578 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	685b      	ldr	r3, [r3, #4]
 80163be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80163c0:	4b73      	ldr	r3, [pc, #460]	; (8016590 <udp_input+0x218>)
 80163c2:	695a      	ldr	r2, [r3, #20]
 80163c4:	4b72      	ldr	r3, [pc, #456]	; (8016590 <udp_input+0x218>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	4619      	mov	r1, r3
 80163ca:	4610      	mov	r0, r2
 80163cc:	f7f7 fcee 	bl	800ddac <ip4_addr_isbroadcast_u32>
 80163d0:	4603      	mov	r3, r0
 80163d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	881b      	ldrh	r3, [r3, #0]
 80163d8:	b29b      	uxth	r3, r3
 80163da:	4618      	mov	r0, r3
 80163dc:	f7f5 ff7a 	bl	800c2d4 <lwip_htons>
 80163e0:	4603      	mov	r3, r0
 80163e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	885b      	ldrh	r3, [r3, #2]
 80163e8:	b29b      	uxth	r3, r3
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7f5 ff72 	bl	800c2d4 <lwip_htons>
 80163f0:	4603      	mov	r3, r0
 80163f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80163f4:	2300      	movs	r3, #0
 80163f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80163f8:	2300      	movs	r3, #0
 80163fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80163fc:	2300      	movs	r3, #0
 80163fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016400:	4b64      	ldr	r3, [pc, #400]	; (8016594 <udp_input+0x21c>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	627b      	str	r3, [r7, #36]	; 0x24
 8016406:	e054      	b.n	80164b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640a:	8a5b      	ldrh	r3, [r3, #18]
 801640c:	89fa      	ldrh	r2, [r7, #14]
 801640e:	429a      	cmp	r2, r3
 8016410:	d14a      	bne.n	80164a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016412:	7cfb      	ldrb	r3, [r7, #19]
 8016414:	461a      	mov	r2, r3
 8016416:	6839      	ldr	r1, [r7, #0]
 8016418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801641a:	f7ff ff49 	bl	80162b0 <udp_input_local_match>
 801641e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016420:	2b00      	cmp	r3, #0
 8016422:	d041      	beq.n	80164a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016426:	7c1b      	ldrb	r3, [r3, #16]
 8016428:	f003 0304 	and.w	r3, r3, #4
 801642c:	2b00      	cmp	r3, #0
 801642e:	d11d      	bne.n	801646c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d102      	bne.n	801643c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016438:	61fb      	str	r3, [r7, #28]
 801643a:	e017      	b.n	801646c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801643c:	7cfb      	ldrb	r3, [r7, #19]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d014      	beq.n	801646c <udp_input+0xf4>
 8016442:	4b53      	ldr	r3, [pc, #332]	; (8016590 <udp_input+0x218>)
 8016444:	695b      	ldr	r3, [r3, #20]
 8016446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801644a:	d10f      	bne.n	801646c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801644c:	69fb      	ldr	r3, [r7, #28]
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	3304      	adds	r3, #4
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	429a      	cmp	r2, r3
 8016458:	d008      	beq.n	801646c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645c:	681a      	ldr	r2, [r3, #0]
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	3304      	adds	r3, #4
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	429a      	cmp	r2, r3
 8016466:	d101      	bne.n	801646c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801646a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801646e:	8a9b      	ldrh	r3, [r3, #20]
 8016470:	8a3a      	ldrh	r2, [r7, #16]
 8016472:	429a      	cmp	r2, r3
 8016474:	d118      	bne.n	80164a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016478:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801647a:	2b00      	cmp	r3, #0
 801647c:	d005      	beq.n	801648a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016480:	685a      	ldr	r2, [r3, #4]
 8016482:	4b43      	ldr	r3, [pc, #268]	; (8016590 <udp_input+0x218>)
 8016484:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016486:	429a      	cmp	r2, r3
 8016488:	d10e      	bne.n	80164a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801648a:	6a3b      	ldr	r3, [r7, #32]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d014      	beq.n	80164ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016492:	68da      	ldr	r2, [r3, #12]
 8016494:	6a3b      	ldr	r3, [r7, #32]
 8016496:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016498:	4b3e      	ldr	r3, [pc, #248]	; (8016594 <udp_input+0x21c>)
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80164a0:	4a3c      	ldr	r2, [pc, #240]	; (8016594 <udp_input+0x21c>)
 80164a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80164a6:	e008      	b.n	80164ba <udp_input+0x142>
      }
    }

    prev = pcb;
 80164a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80164ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	627b      	str	r3, [r7, #36]	; 0x24
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d1a7      	bne.n	8016408 <udp_input+0x90>
 80164b8:	e000      	b.n	80164bc <udp_input+0x144>
        break;
 80164ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80164bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d101      	bne.n	80164c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80164c2:	69fb      	ldr	r3, [r7, #28]
 80164c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80164c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d002      	beq.n	80164d2 <udp_input+0x15a>
    for_us = 1;
 80164cc:	2301      	movs	r3, #1
 80164ce:	76fb      	strb	r3, [r7, #27]
 80164d0:	e00a      	b.n	80164e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	3304      	adds	r3, #4
 80164d6:	681a      	ldr	r2, [r3, #0]
 80164d8:	4b2d      	ldr	r3, [pc, #180]	; (8016590 <udp_input+0x218>)
 80164da:	695b      	ldr	r3, [r3, #20]
 80164dc:	429a      	cmp	r2, r3
 80164de:	bf0c      	ite	eq
 80164e0:	2301      	moveq	r3, #1
 80164e2:	2300      	movne	r3, #0
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80164e8:	7efb      	ldrb	r3, [r7, #27]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d041      	beq.n	8016572 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80164ee:	2108      	movs	r1, #8
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f7f9 fdff 	bl	80100f4 <pbuf_remove_header>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00a      	beq.n	8016512 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80164fc:	4b20      	ldr	r3, [pc, #128]	; (8016580 <udp_input+0x208>)
 80164fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016502:	4925      	ldr	r1, [pc, #148]	; (8016598 <udp_input+0x220>)
 8016504:	4820      	ldr	r0, [pc, #128]	; (8016588 <udp_input+0x210>)
 8016506:	f000 fbb9 	bl	8016c7c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f7f9 fe78 	bl	8010200 <pbuf_free>
      goto end;
 8016510:	e032      	b.n	8016578 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016514:	2b00      	cmp	r3, #0
 8016516:	d012      	beq.n	801653e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651a:	699b      	ldr	r3, [r3, #24]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00a      	beq.n	8016536 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016522:	699c      	ldr	r4, [r3, #24]
 8016524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016526:	69d8      	ldr	r0, [r3, #28]
 8016528:	8a3b      	ldrh	r3, [r7, #16]
 801652a:	9300      	str	r3, [sp, #0]
 801652c:	4b1b      	ldr	r3, [pc, #108]	; (801659c <udp_input+0x224>)
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016532:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016534:	e021      	b.n	801657a <udp_input+0x202>
        pbuf_free(p);
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7f9 fe62 	bl	8010200 <pbuf_free>
        goto end;
 801653c:	e01c      	b.n	8016578 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801653e:	7cfb      	ldrb	r3, [r7, #19]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d112      	bne.n	801656a <udp_input+0x1f2>
 8016544:	4b12      	ldr	r3, [pc, #72]	; (8016590 <udp_input+0x218>)
 8016546:	695b      	ldr	r3, [r3, #20]
 8016548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801654c:	2be0      	cmp	r3, #224	; 0xe0
 801654e:	d00c      	beq.n	801656a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016550:	4b0f      	ldr	r3, [pc, #60]	; (8016590 <udp_input+0x218>)
 8016552:	899b      	ldrh	r3, [r3, #12]
 8016554:	3308      	adds	r3, #8
 8016556:	b29b      	uxth	r3, r3
 8016558:	b21b      	sxth	r3, r3
 801655a:	4619      	mov	r1, r3
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f7f9 fe3c 	bl	80101da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016562:	2103      	movs	r1, #3
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f7f7 f825 	bl	800d5b4 <icmp_dest_unreach>
      pbuf_free(p);
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f7f9 fe48 	bl	8010200 <pbuf_free>
  return;
 8016570:	e003      	b.n	801657a <udp_input+0x202>
    pbuf_free(p);
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7f9 fe44 	bl	8010200 <pbuf_free>
  return;
 8016578:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801657a:	372c      	adds	r7, #44	; 0x2c
 801657c:	46bd      	mov	sp, r7
 801657e:	bd90      	pop	{r4, r7, pc}
 8016580:	0801a56c 	.word	0x0801a56c
 8016584:	0801a644 	.word	0x0801a644
 8016588:	0801a5f4 	.word	0x0801a5f4
 801658c:	0801a65c 	.word	0x0801a65c
 8016590:	24005288 	.word	0x24005288
 8016594:	2400836c 	.word	0x2400836c
 8016598:	0801a678 	.word	0x0801a678
 801659c:	24005298 	.word	0x24005298

080165a0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d109      	bne.n	80165c4 <udp_send+0x24>
 80165b0:	4b11      	ldr	r3, [pc, #68]	; (80165f8 <udp_send+0x58>)
 80165b2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80165b6:	4911      	ldr	r1, [pc, #68]	; (80165fc <udp_send+0x5c>)
 80165b8:	4811      	ldr	r0, [pc, #68]	; (8016600 <udp_send+0x60>)
 80165ba:	f000 fb5f 	bl	8016c7c <iprintf>
 80165be:	f06f 030f 	mvn.w	r3, #15
 80165c2:	e015      	b.n	80165f0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d109      	bne.n	80165de <udp_send+0x3e>
 80165ca:	4b0b      	ldr	r3, [pc, #44]	; (80165f8 <udp_send+0x58>)
 80165cc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80165d0:	490c      	ldr	r1, [pc, #48]	; (8016604 <udp_send+0x64>)
 80165d2:	480b      	ldr	r0, [pc, #44]	; (8016600 <udp_send+0x60>)
 80165d4:	f000 fb52 	bl	8016c7c <iprintf>
 80165d8:	f06f 030f 	mvn.w	r3, #15
 80165dc:	e008      	b.n	80165f0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	1d1a      	adds	r2, r3, #4
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	8a9b      	ldrh	r3, [r3, #20]
 80165e6:	6839      	ldr	r1, [r7, #0]
 80165e8:	6878      	ldr	r0, [r7, #4]
 80165ea:	f000 f80d 	bl	8016608 <udp_sendto>
 80165ee:	4603      	mov	r3, r0
}
 80165f0:	4618      	mov	r0, r3
 80165f2:	3708      	adds	r7, #8
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}
 80165f8:	0801a56c 	.word	0x0801a56c
 80165fc:	0801a694 	.word	0x0801a694
 8016600:	0801a5f4 	.word	0x0801a5f4
 8016604:	0801a6ac 	.word	0x0801a6ac

08016608 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b088      	sub	sp, #32
 801660c:	af02      	add	r7, sp, #8
 801660e:	60f8      	str	r0, [r7, #12]
 8016610:	60b9      	str	r1, [r7, #8]
 8016612:	607a      	str	r2, [r7, #4]
 8016614:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d109      	bne.n	8016630 <udp_sendto+0x28>
 801661c:	4b23      	ldr	r3, [pc, #140]	; (80166ac <udp_sendto+0xa4>)
 801661e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016622:	4923      	ldr	r1, [pc, #140]	; (80166b0 <udp_sendto+0xa8>)
 8016624:	4823      	ldr	r0, [pc, #140]	; (80166b4 <udp_sendto+0xac>)
 8016626:	f000 fb29 	bl	8016c7c <iprintf>
 801662a:	f06f 030f 	mvn.w	r3, #15
 801662e:	e038      	b.n	80166a2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d109      	bne.n	801664a <udp_sendto+0x42>
 8016636:	4b1d      	ldr	r3, [pc, #116]	; (80166ac <udp_sendto+0xa4>)
 8016638:	f240 2219 	movw	r2, #537	; 0x219
 801663c:	491e      	ldr	r1, [pc, #120]	; (80166b8 <udp_sendto+0xb0>)
 801663e:	481d      	ldr	r0, [pc, #116]	; (80166b4 <udp_sendto+0xac>)
 8016640:	f000 fb1c 	bl	8016c7c <iprintf>
 8016644:	f06f 030f 	mvn.w	r3, #15
 8016648:	e02b      	b.n	80166a2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d109      	bne.n	8016664 <udp_sendto+0x5c>
 8016650:	4b16      	ldr	r3, [pc, #88]	; (80166ac <udp_sendto+0xa4>)
 8016652:	f240 221a 	movw	r2, #538	; 0x21a
 8016656:	4919      	ldr	r1, [pc, #100]	; (80166bc <udp_sendto+0xb4>)
 8016658:	4816      	ldr	r0, [pc, #88]	; (80166b4 <udp_sendto+0xac>)
 801665a:	f000 fb0f 	bl	8016c7c <iprintf>
 801665e:	f06f 030f 	mvn.w	r3, #15
 8016662:	e01e      	b.n	80166a2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	7a1b      	ldrb	r3, [r3, #8]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d006      	beq.n	801667a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	7a1b      	ldrb	r3, [r3, #8]
 8016670:	4618      	mov	r0, r3
 8016672:	f7f9 fa3b 	bl	800faec <netif_get_by_index>
 8016676:	6178      	str	r0, [r7, #20]
 8016678:	e003      	b.n	8016682 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f7f7 f902 	bl	800d884 <ip4_route>
 8016680:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d102      	bne.n	801668e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016688:	f06f 0303 	mvn.w	r3, #3
 801668c:	e009      	b.n	80166a2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801668e:	887a      	ldrh	r2, [r7, #2]
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	9300      	str	r3, [sp, #0]
 8016694:	4613      	mov	r3, r2
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	68b9      	ldr	r1, [r7, #8]
 801669a:	68f8      	ldr	r0, [r7, #12]
 801669c:	f000 f810 	bl	80166c0 <udp_sendto_if>
 80166a0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3718      	adds	r7, #24
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop
 80166ac:	0801a56c 	.word	0x0801a56c
 80166b0:	0801a6c4 	.word	0x0801a6c4
 80166b4:	0801a5f4 	.word	0x0801a5f4
 80166b8:	0801a6dc 	.word	0x0801a6dc
 80166bc:	0801a6f8 	.word	0x0801a6f8

080166c0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b088      	sub	sp, #32
 80166c4:	af02      	add	r7, sp, #8
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
 80166cc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d109      	bne.n	80166e8 <udp_sendto_if+0x28>
 80166d4:	4b2e      	ldr	r3, [pc, #184]	; (8016790 <udp_sendto_if+0xd0>)
 80166d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166da:	492e      	ldr	r1, [pc, #184]	; (8016794 <udp_sendto_if+0xd4>)
 80166dc:	482e      	ldr	r0, [pc, #184]	; (8016798 <udp_sendto_if+0xd8>)
 80166de:	f000 facd 	bl	8016c7c <iprintf>
 80166e2:	f06f 030f 	mvn.w	r3, #15
 80166e6:	e04f      	b.n	8016788 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d109      	bne.n	8016702 <udp_sendto_if+0x42>
 80166ee:	4b28      	ldr	r3, [pc, #160]	; (8016790 <udp_sendto_if+0xd0>)
 80166f0:	f240 2281 	movw	r2, #641	; 0x281
 80166f4:	4929      	ldr	r1, [pc, #164]	; (801679c <udp_sendto_if+0xdc>)
 80166f6:	4828      	ldr	r0, [pc, #160]	; (8016798 <udp_sendto_if+0xd8>)
 80166f8:	f000 fac0 	bl	8016c7c <iprintf>
 80166fc:	f06f 030f 	mvn.w	r3, #15
 8016700:	e042      	b.n	8016788 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d109      	bne.n	801671c <udp_sendto_if+0x5c>
 8016708:	4b21      	ldr	r3, [pc, #132]	; (8016790 <udp_sendto_if+0xd0>)
 801670a:	f240 2282 	movw	r2, #642	; 0x282
 801670e:	4924      	ldr	r1, [pc, #144]	; (80167a0 <udp_sendto_if+0xe0>)
 8016710:	4821      	ldr	r0, [pc, #132]	; (8016798 <udp_sendto_if+0xd8>)
 8016712:	f000 fab3 	bl	8016c7c <iprintf>
 8016716:	f06f 030f 	mvn.w	r3, #15
 801671a:	e035      	b.n	8016788 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801671c:	6a3b      	ldr	r3, [r7, #32]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d109      	bne.n	8016736 <udp_sendto_if+0x76>
 8016722:	4b1b      	ldr	r3, [pc, #108]	; (8016790 <udp_sendto_if+0xd0>)
 8016724:	f240 2283 	movw	r2, #643	; 0x283
 8016728:	491e      	ldr	r1, [pc, #120]	; (80167a4 <udp_sendto_if+0xe4>)
 801672a:	481b      	ldr	r0, [pc, #108]	; (8016798 <udp_sendto_if+0xd8>)
 801672c:	f000 faa6 	bl	8016c7c <iprintf>
 8016730:	f06f 030f 	mvn.w	r3, #15
 8016734:	e028      	b.n	8016788 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d009      	beq.n	8016750 <udp_sendto_if+0x90>
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d005      	beq.n	8016750 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801674c:	2be0      	cmp	r3, #224	; 0xe0
 801674e:	d103      	bne.n	8016758 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016750:	6a3b      	ldr	r3, [r7, #32]
 8016752:	3304      	adds	r3, #4
 8016754:	617b      	str	r3, [r7, #20]
 8016756:	e00b      	b.n	8016770 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	681a      	ldr	r2, [r3, #0]
 801675c:	6a3b      	ldr	r3, [r7, #32]
 801675e:	3304      	adds	r3, #4
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	429a      	cmp	r2, r3
 8016764:	d002      	beq.n	801676c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016766:	f06f 0303 	mvn.w	r3, #3
 801676a:	e00d      	b.n	8016788 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016770:	887a      	ldrh	r2, [r7, #2]
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	9301      	str	r3, [sp, #4]
 8016776:	6a3b      	ldr	r3, [r7, #32]
 8016778:	9300      	str	r3, [sp, #0]
 801677a:	4613      	mov	r3, r2
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	68b9      	ldr	r1, [r7, #8]
 8016780:	68f8      	ldr	r0, [r7, #12]
 8016782:	f000 f811 	bl	80167a8 <udp_sendto_if_src>
 8016786:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016788:	4618      	mov	r0, r3
 801678a:	3718      	adds	r7, #24
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	0801a56c 	.word	0x0801a56c
 8016794:	0801a714 	.word	0x0801a714
 8016798:	0801a5f4 	.word	0x0801a5f4
 801679c:	0801a730 	.word	0x0801a730
 80167a0:	0801a74c 	.word	0x0801a74c
 80167a4:	0801a76c 	.word	0x0801a76c

080167a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b08c      	sub	sp, #48	; 0x30
 80167ac:	af04      	add	r7, sp, #16
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	607a      	str	r2, [r7, #4]
 80167b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d109      	bne.n	80167d0 <udp_sendto_if_src+0x28>
 80167bc:	4b65      	ldr	r3, [pc, #404]	; (8016954 <udp_sendto_if_src+0x1ac>)
 80167be:	f240 22d1 	movw	r2, #721	; 0x2d1
 80167c2:	4965      	ldr	r1, [pc, #404]	; (8016958 <udp_sendto_if_src+0x1b0>)
 80167c4:	4865      	ldr	r0, [pc, #404]	; (801695c <udp_sendto_if_src+0x1b4>)
 80167c6:	f000 fa59 	bl	8016c7c <iprintf>
 80167ca:	f06f 030f 	mvn.w	r3, #15
 80167ce:	e0bc      	b.n	801694a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80167d0:	68bb      	ldr	r3, [r7, #8]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d109      	bne.n	80167ea <udp_sendto_if_src+0x42>
 80167d6:	4b5f      	ldr	r3, [pc, #380]	; (8016954 <udp_sendto_if_src+0x1ac>)
 80167d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80167dc:	4960      	ldr	r1, [pc, #384]	; (8016960 <udp_sendto_if_src+0x1b8>)
 80167de:	485f      	ldr	r0, [pc, #380]	; (801695c <udp_sendto_if_src+0x1b4>)
 80167e0:	f000 fa4c 	bl	8016c7c <iprintf>
 80167e4:	f06f 030f 	mvn.w	r3, #15
 80167e8:	e0af      	b.n	801694a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d109      	bne.n	8016804 <udp_sendto_if_src+0x5c>
 80167f0:	4b58      	ldr	r3, [pc, #352]	; (8016954 <udp_sendto_if_src+0x1ac>)
 80167f2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80167f6:	495b      	ldr	r1, [pc, #364]	; (8016964 <udp_sendto_if_src+0x1bc>)
 80167f8:	4858      	ldr	r0, [pc, #352]	; (801695c <udp_sendto_if_src+0x1b4>)
 80167fa:	f000 fa3f 	bl	8016c7c <iprintf>
 80167fe:	f06f 030f 	mvn.w	r3, #15
 8016802:	e0a2      	b.n	801694a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016806:	2b00      	cmp	r3, #0
 8016808:	d109      	bne.n	801681e <udp_sendto_if_src+0x76>
 801680a:	4b52      	ldr	r3, [pc, #328]	; (8016954 <udp_sendto_if_src+0x1ac>)
 801680c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016810:	4955      	ldr	r1, [pc, #340]	; (8016968 <udp_sendto_if_src+0x1c0>)
 8016812:	4852      	ldr	r0, [pc, #328]	; (801695c <udp_sendto_if_src+0x1b4>)
 8016814:	f000 fa32 	bl	8016c7c <iprintf>
 8016818:	f06f 030f 	mvn.w	r3, #15
 801681c:	e095      	b.n	801694a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016820:	2b00      	cmp	r3, #0
 8016822:	d109      	bne.n	8016838 <udp_sendto_if_src+0x90>
 8016824:	4b4b      	ldr	r3, [pc, #300]	; (8016954 <udp_sendto_if_src+0x1ac>)
 8016826:	f240 22d5 	movw	r2, #725	; 0x2d5
 801682a:	4950      	ldr	r1, [pc, #320]	; (801696c <udp_sendto_if_src+0x1c4>)
 801682c:	484b      	ldr	r0, [pc, #300]	; (801695c <udp_sendto_if_src+0x1b4>)
 801682e:	f000 fa25 	bl	8016c7c <iprintf>
 8016832:	f06f 030f 	mvn.w	r3, #15
 8016836:	e088      	b.n	801694a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	8a5b      	ldrh	r3, [r3, #18]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d10f      	bne.n	8016860 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016840:	68f9      	ldr	r1, [r7, #12]
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	8a5b      	ldrh	r3, [r3, #18]
 8016846:	461a      	mov	r2, r3
 8016848:	68f8      	ldr	r0, [r7, #12]
 801684a:	f000 f893 	bl	8016974 <udp_bind>
 801684e:	4603      	mov	r3, r0
 8016850:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016852:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d002      	beq.n	8016860 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801685a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801685e:	e074      	b.n	801694a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	891b      	ldrh	r3, [r3, #8]
 8016864:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016868:	4293      	cmp	r3, r2
 801686a:	d902      	bls.n	8016872 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801686c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016870:	e06b      	b.n	801694a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016872:	2108      	movs	r1, #8
 8016874:	68b8      	ldr	r0, [r7, #8]
 8016876:	f7f9 fc2d 	bl	80100d4 <pbuf_add_header>
 801687a:	4603      	mov	r3, r0
 801687c:	2b00      	cmp	r3, #0
 801687e:	d015      	beq.n	80168ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016880:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016884:	2108      	movs	r1, #8
 8016886:	2022      	movs	r0, #34	; 0x22
 8016888:	f7f9 f9da 	bl	800fc40 <pbuf_alloc>
 801688c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801688e:	69fb      	ldr	r3, [r7, #28]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d102      	bne.n	801689a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016898:	e057      	b.n	801694a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	891b      	ldrh	r3, [r3, #8]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d006      	beq.n	80168b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80168a2:	68b9      	ldr	r1, [r7, #8]
 80168a4:	69f8      	ldr	r0, [r7, #28]
 80168a6:	f7f9 fdcf 	bl	8010448 <pbuf_chain>
 80168aa:	e001      	b.n	80168b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	895b      	ldrh	r3, [r3, #10]
 80168b4:	2b07      	cmp	r3, #7
 80168b6:	d806      	bhi.n	80168c6 <udp_sendto_if_src+0x11e>
 80168b8:	4b26      	ldr	r3, [pc, #152]	; (8016954 <udp_sendto_if_src+0x1ac>)
 80168ba:	f240 320e 	movw	r2, #782	; 0x30e
 80168be:	492c      	ldr	r1, [pc, #176]	; (8016970 <udp_sendto_if_src+0x1c8>)
 80168c0:	4826      	ldr	r0, [pc, #152]	; (801695c <udp_sendto_if_src+0x1b4>)
 80168c2:	f000 f9db 	bl	8016c7c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80168c6:	69fb      	ldr	r3, [r7, #28]
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	8a5b      	ldrh	r3, [r3, #18]
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7f5 fcff 	bl	800c2d4 <lwip_htons>
 80168d6:	4603      	mov	r3, r0
 80168d8:	461a      	mov	r2, r3
 80168da:	697b      	ldr	r3, [r7, #20]
 80168dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80168de:	887b      	ldrh	r3, [r7, #2]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7f5 fcf7 	bl	800c2d4 <lwip_htons>
 80168e6:	4603      	mov	r3, r0
 80168e8:	461a      	mov	r2, r3
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80168ee:	697b      	ldr	r3, [r7, #20]
 80168f0:	2200      	movs	r2, #0
 80168f2:	719a      	strb	r2, [r3, #6]
 80168f4:	2200      	movs	r2, #0
 80168f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80168f8:	69fb      	ldr	r3, [r7, #28]
 80168fa:	891b      	ldrh	r3, [r3, #8]
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7f5 fce9 	bl	800c2d4 <lwip_htons>
 8016902:	4603      	mov	r3, r0
 8016904:	461a      	mov	r2, r3
 8016906:	697b      	ldr	r3, [r7, #20]
 8016908:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801690a:	2311      	movs	r3, #17
 801690c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	7adb      	ldrb	r3, [r3, #11]
 8016912:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	7a9b      	ldrb	r3, [r3, #10]
 8016918:	7cb9      	ldrb	r1, [r7, #18]
 801691a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801691c:	9202      	str	r2, [sp, #8]
 801691e:	7cfa      	ldrb	r2, [r7, #19]
 8016920:	9201      	str	r2, [sp, #4]
 8016922:	9300      	str	r3, [sp, #0]
 8016924:	460b      	mov	r3, r1
 8016926:	687a      	ldr	r2, [r7, #4]
 8016928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801692a:	69f8      	ldr	r0, [r7, #28]
 801692c:	f7f7 f990 	bl	800dc50 <ip4_output_if_src>
 8016930:	4603      	mov	r3, r0
 8016932:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016934:	69fa      	ldr	r2, [r7, #28]
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	429a      	cmp	r2, r3
 801693a:	d004      	beq.n	8016946 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801693c:	69f8      	ldr	r0, [r7, #28]
 801693e:	f7f9 fc5f 	bl	8010200 <pbuf_free>
    q = NULL;
 8016942:	2300      	movs	r3, #0
 8016944:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016946:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801694a:	4618      	mov	r0, r3
 801694c:	3720      	adds	r7, #32
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	0801a56c 	.word	0x0801a56c
 8016958:	0801a78c 	.word	0x0801a78c
 801695c:	0801a5f4 	.word	0x0801a5f4
 8016960:	0801a7ac 	.word	0x0801a7ac
 8016964:	0801a7cc 	.word	0x0801a7cc
 8016968:	0801a7f0 	.word	0x0801a7f0
 801696c:	0801a814 	.word	0x0801a814
 8016970:	0801a838 	.word	0x0801a838

08016974 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b086      	sub	sp, #24
 8016978:	af00      	add	r7, sp, #0
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	4613      	mov	r3, r2
 8016980:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016982:	68bb      	ldr	r3, [r7, #8]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d101      	bne.n	801698c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016988:	4b39      	ldr	r3, [pc, #228]	; (8016a70 <udp_bind+0xfc>)
 801698a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d109      	bne.n	80169a6 <udp_bind+0x32>
 8016992:	4b38      	ldr	r3, [pc, #224]	; (8016a74 <udp_bind+0x100>)
 8016994:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016998:	4937      	ldr	r1, [pc, #220]	; (8016a78 <udp_bind+0x104>)
 801699a:	4838      	ldr	r0, [pc, #224]	; (8016a7c <udp_bind+0x108>)
 801699c:	f000 f96e 	bl	8016c7c <iprintf>
 80169a0:	f06f 030f 	mvn.w	r3, #15
 80169a4:	e060      	b.n	8016a68 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80169a6:	2300      	movs	r3, #0
 80169a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169aa:	4b35      	ldr	r3, [pc, #212]	; (8016a80 <udp_bind+0x10c>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	617b      	str	r3, [r7, #20]
 80169b0:	e009      	b.n	80169c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80169b2:	68fa      	ldr	r2, [r7, #12]
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d102      	bne.n	80169c0 <udp_bind+0x4c>
      rebind = 1;
 80169ba:	2301      	movs	r3, #1
 80169bc:	74fb      	strb	r3, [r7, #19]
      break;
 80169be:	e005      	b.n	80169cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	68db      	ldr	r3, [r3, #12]
 80169c4:	617b      	str	r3, [r7, #20]
 80169c6:	697b      	ldr	r3, [r7, #20]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d1f2      	bne.n	80169b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80169cc:	88fb      	ldrh	r3, [r7, #6]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d109      	bne.n	80169e6 <udp_bind+0x72>
    port = udp_new_port();
 80169d2:	f7ff fc35 	bl	8016240 <udp_new_port>
 80169d6:	4603      	mov	r3, r0
 80169d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80169da:	88fb      	ldrh	r3, [r7, #6]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d12c      	bne.n	8016a3a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80169e0:	f06f 0307 	mvn.w	r3, #7
 80169e4:	e040      	b.n	8016a68 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169e6:	4b26      	ldr	r3, [pc, #152]	; (8016a80 <udp_bind+0x10c>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	617b      	str	r3, [r7, #20]
 80169ec:	e022      	b.n	8016a34 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80169ee:	68fa      	ldr	r2, [r7, #12]
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d01b      	beq.n	8016a2e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	8a5b      	ldrh	r3, [r3, #18]
 80169fa:	88fa      	ldrh	r2, [r7, #6]
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d116      	bne.n	8016a2e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	681a      	ldr	r2, [r3, #0]
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d00d      	beq.n	8016a28 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d00a      	beq.n	8016a28 <udp_bind+0xb4>
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d006      	beq.n	8016a28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016a1a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d003      	beq.n	8016a28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d102      	bne.n	8016a2e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016a28:	f06f 0307 	mvn.w	r3, #7
 8016a2c:	e01c      	b.n	8016a68 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	68db      	ldr	r3, [r3, #12]
 8016a32:	617b      	str	r3, [r7, #20]
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d1d9      	bne.n	80169ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d002      	beq.n	8016a46 <udp_bind+0xd2>
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	e000      	b.n	8016a48 <udp_bind+0xd4>
 8016a46:	2300      	movs	r3, #0
 8016a48:	68fa      	ldr	r2, [r7, #12]
 8016a4a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	88fa      	ldrh	r2, [r7, #6]
 8016a50:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016a52:	7cfb      	ldrb	r3, [r7, #19]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d106      	bne.n	8016a66 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016a58:	4b09      	ldr	r3, [pc, #36]	; (8016a80 <udp_bind+0x10c>)
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016a60:	4a07      	ldr	r2, [pc, #28]	; (8016a80 <udp_bind+0x10c>)
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016a66:	2300      	movs	r3, #0
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3718      	adds	r7, #24
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	0801a96c 	.word	0x0801a96c
 8016a74:	0801a56c 	.word	0x0801a56c
 8016a78:	0801a868 	.word	0x0801a868
 8016a7c:	0801a5f4 	.word	0x0801a5f4
 8016a80:	2400836c 	.word	0x2400836c

08016a84 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b086      	sub	sp, #24
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	60f8      	str	r0, [r7, #12]
 8016a8c:	60b9      	str	r1, [r7, #8]
 8016a8e:	4613      	mov	r3, r2
 8016a90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d109      	bne.n	8016aac <udp_connect+0x28>
 8016a98:	4b2c      	ldr	r3, [pc, #176]	; (8016b4c <udp_connect+0xc8>)
 8016a9a:	f240 4235 	movw	r2, #1077	; 0x435
 8016a9e:	492c      	ldr	r1, [pc, #176]	; (8016b50 <udp_connect+0xcc>)
 8016aa0:	482c      	ldr	r0, [pc, #176]	; (8016b54 <udp_connect+0xd0>)
 8016aa2:	f000 f8eb 	bl	8016c7c <iprintf>
 8016aa6:	f06f 030f 	mvn.w	r3, #15
 8016aaa:	e04b      	b.n	8016b44 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016aac:	68bb      	ldr	r3, [r7, #8]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d109      	bne.n	8016ac6 <udp_connect+0x42>
 8016ab2:	4b26      	ldr	r3, [pc, #152]	; (8016b4c <udp_connect+0xc8>)
 8016ab4:	f240 4236 	movw	r2, #1078	; 0x436
 8016ab8:	4927      	ldr	r1, [pc, #156]	; (8016b58 <udp_connect+0xd4>)
 8016aba:	4826      	ldr	r0, [pc, #152]	; (8016b54 <udp_connect+0xd0>)
 8016abc:	f000 f8de 	bl	8016c7c <iprintf>
 8016ac0:	f06f 030f 	mvn.w	r3, #15
 8016ac4:	e03e      	b.n	8016b44 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	8a5b      	ldrh	r3, [r3, #18]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d10f      	bne.n	8016aee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016ace:	68f9      	ldr	r1, [r7, #12]
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	8a5b      	ldrh	r3, [r3, #18]
 8016ad4:	461a      	mov	r2, r3
 8016ad6:	68f8      	ldr	r0, [r7, #12]
 8016ad8:	f7ff ff4c 	bl	8016974 <udp_bind>
 8016adc:	4603      	mov	r3, r0
 8016ade:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016ae0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d002      	beq.n	8016aee <udp_connect+0x6a>
      return err;
 8016ae8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016aec:	e02a      	b.n	8016b44 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d002      	beq.n	8016afa <udp_connect+0x76>
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	e000      	b.n	8016afc <udp_connect+0x78>
 8016afa:	2300      	movs	r3, #0
 8016afc:	68fa      	ldr	r2, [r7, #12]
 8016afe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	88fa      	ldrh	r2, [r7, #6]
 8016b04:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	7c1b      	ldrb	r3, [r3, #16]
 8016b0a:	f043 0304 	orr.w	r3, r3, #4
 8016b0e:	b2da      	uxtb	r2, r3
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b14:	4b11      	ldr	r3, [pc, #68]	; (8016b5c <udp_connect+0xd8>)
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	617b      	str	r3, [r7, #20]
 8016b1a:	e008      	b.n	8016b2e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016b1c:	68fa      	ldr	r2, [r7, #12]
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d101      	bne.n	8016b28 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016b24:	2300      	movs	r3, #0
 8016b26:	e00d      	b.n	8016b44 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	68db      	ldr	r3, [r3, #12]
 8016b2c:	617b      	str	r3, [r7, #20]
 8016b2e:	697b      	ldr	r3, [r7, #20]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d1f3      	bne.n	8016b1c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016b34:	4b09      	ldr	r3, [pc, #36]	; (8016b5c <udp_connect+0xd8>)
 8016b36:	681a      	ldr	r2, [r3, #0]
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016b3c:	4a07      	ldr	r2, [pc, #28]	; (8016b5c <udp_connect+0xd8>)
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016b42:	2300      	movs	r3, #0
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	3718      	adds	r7, #24
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	0801a56c 	.word	0x0801a56c
 8016b50:	0801a880 	.word	0x0801a880
 8016b54:	0801a5f4 	.word	0x0801a5f4
 8016b58:	0801a89c 	.word	0x0801a89c
 8016b5c:	2400836c 	.word	0x2400836c

08016b60 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016b66:	2000      	movs	r0, #0
 8016b68:	f7f8 fc34 	bl	800f3d4 <memp_malloc>
 8016b6c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d007      	beq.n	8016b84 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016b74:	2220      	movs	r2, #32
 8016b76:	2100      	movs	r1, #0
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f000 f877 	bl	8016c6c <memset>
    pcb->ttl = UDP_TTL;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	22ff      	movs	r2, #255	; 0xff
 8016b82:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016b84:	687b      	ldr	r3, [r7, #4]
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	3708      	adds	r7, #8
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	bd80      	pop	{r7, pc}
	...

08016b90 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016b90:	b480      	push	{r7}
 8016b92:	b085      	sub	sp, #20
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d01e      	beq.n	8016bde <udp_netif_ip_addr_changed+0x4e>
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d01a      	beq.n	8016bde <udp_netif_ip_addr_changed+0x4e>
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d017      	beq.n	8016bde <udp_netif_ip_addr_changed+0x4e>
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d013      	beq.n	8016bde <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016bb6:	4b0d      	ldr	r3, [pc, #52]	; (8016bec <udp_netif_ip_addr_changed+0x5c>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	60fb      	str	r3, [r7, #12]
 8016bbc:	e00c      	b.n	8016bd8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	681a      	ldr	r2, [r3, #0]
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d103      	bne.n	8016bd2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	681a      	ldr	r2, [r3, #0]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	68db      	ldr	r3, [r3, #12]
 8016bd6:	60fb      	str	r3, [r7, #12]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d1ef      	bne.n	8016bbe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016bde:	bf00      	nop
 8016be0:	3714      	adds	r7, #20
 8016be2:	46bd      	mov	sp, r7
 8016be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be8:	4770      	bx	lr
 8016bea:	bf00      	nop
 8016bec:	2400836c 	.word	0x2400836c

08016bf0 <__libc_init_array>:
 8016bf0:	b570      	push	{r4, r5, r6, lr}
 8016bf2:	4e0d      	ldr	r6, [pc, #52]	; (8016c28 <__libc_init_array+0x38>)
 8016bf4:	4c0d      	ldr	r4, [pc, #52]	; (8016c2c <__libc_init_array+0x3c>)
 8016bf6:	1ba4      	subs	r4, r4, r6
 8016bf8:	10a4      	asrs	r4, r4, #2
 8016bfa:	2500      	movs	r5, #0
 8016bfc:	42a5      	cmp	r5, r4
 8016bfe:	d109      	bne.n	8016c14 <__libc_init_array+0x24>
 8016c00:	4e0b      	ldr	r6, [pc, #44]	; (8016c30 <__libc_init_array+0x40>)
 8016c02:	4c0c      	ldr	r4, [pc, #48]	; (8016c34 <__libc_init_array+0x44>)
 8016c04:	f000 ff5a 	bl	8017abc <_init>
 8016c08:	1ba4      	subs	r4, r4, r6
 8016c0a:	10a4      	asrs	r4, r4, #2
 8016c0c:	2500      	movs	r5, #0
 8016c0e:	42a5      	cmp	r5, r4
 8016c10:	d105      	bne.n	8016c1e <__libc_init_array+0x2e>
 8016c12:	bd70      	pop	{r4, r5, r6, pc}
 8016c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016c18:	4798      	blx	r3
 8016c1a:	3501      	adds	r5, #1
 8016c1c:	e7ee      	b.n	8016bfc <__libc_init_array+0xc>
 8016c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016c22:	4798      	blx	r3
 8016c24:	3501      	adds	r5, #1
 8016c26:	e7f2      	b.n	8016c0e <__libc_init_array+0x1e>
 8016c28:	0801ab20 	.word	0x0801ab20
 8016c2c:	0801ab20 	.word	0x0801ab20
 8016c30:	0801ab20 	.word	0x0801ab20
 8016c34:	0801ab24 	.word	0x0801ab24

08016c38 <memcmp>:
 8016c38:	b530      	push	{r4, r5, lr}
 8016c3a:	2400      	movs	r4, #0
 8016c3c:	42a2      	cmp	r2, r4
 8016c3e:	d101      	bne.n	8016c44 <memcmp+0xc>
 8016c40:	2000      	movs	r0, #0
 8016c42:	e007      	b.n	8016c54 <memcmp+0x1c>
 8016c44:	5d03      	ldrb	r3, [r0, r4]
 8016c46:	3401      	adds	r4, #1
 8016c48:	190d      	adds	r5, r1, r4
 8016c4a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016c4e:	42ab      	cmp	r3, r5
 8016c50:	d0f4      	beq.n	8016c3c <memcmp+0x4>
 8016c52:	1b58      	subs	r0, r3, r5
 8016c54:	bd30      	pop	{r4, r5, pc}

08016c56 <memcpy>:
 8016c56:	b510      	push	{r4, lr}
 8016c58:	1e43      	subs	r3, r0, #1
 8016c5a:	440a      	add	r2, r1
 8016c5c:	4291      	cmp	r1, r2
 8016c5e:	d100      	bne.n	8016c62 <memcpy+0xc>
 8016c60:	bd10      	pop	{r4, pc}
 8016c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c6a:	e7f7      	b.n	8016c5c <memcpy+0x6>

08016c6c <memset>:
 8016c6c:	4402      	add	r2, r0
 8016c6e:	4603      	mov	r3, r0
 8016c70:	4293      	cmp	r3, r2
 8016c72:	d100      	bne.n	8016c76 <memset+0xa>
 8016c74:	4770      	bx	lr
 8016c76:	f803 1b01 	strb.w	r1, [r3], #1
 8016c7a:	e7f9      	b.n	8016c70 <memset+0x4>

08016c7c <iprintf>:
 8016c7c:	b40f      	push	{r0, r1, r2, r3}
 8016c7e:	4b0a      	ldr	r3, [pc, #40]	; (8016ca8 <iprintf+0x2c>)
 8016c80:	b513      	push	{r0, r1, r4, lr}
 8016c82:	681c      	ldr	r4, [r3, #0]
 8016c84:	b124      	cbz	r4, 8016c90 <iprintf+0x14>
 8016c86:	69a3      	ldr	r3, [r4, #24]
 8016c88:	b913      	cbnz	r3, 8016c90 <iprintf+0x14>
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	f000 f882 	bl	8016d94 <__sinit>
 8016c90:	ab05      	add	r3, sp, #20
 8016c92:	9a04      	ldr	r2, [sp, #16]
 8016c94:	68a1      	ldr	r1, [r4, #8]
 8016c96:	9301      	str	r3, [sp, #4]
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f000 f9df 	bl	801705c <_vfiprintf_r>
 8016c9e:	b002      	add	sp, #8
 8016ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca4:	b004      	add	sp, #16
 8016ca6:	4770      	bx	lr
 8016ca8:	24000034 	.word	0x24000034

08016cac <rand>:
 8016cac:	b538      	push	{r3, r4, r5, lr}
 8016cae:	4b13      	ldr	r3, [pc, #76]	; (8016cfc <rand+0x50>)
 8016cb0:	681c      	ldr	r4, [r3, #0]
 8016cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016cb4:	b97b      	cbnz	r3, 8016cd6 <rand+0x2a>
 8016cb6:	2018      	movs	r0, #24
 8016cb8:	f000 f8f6 	bl	8016ea8 <malloc>
 8016cbc:	4a10      	ldr	r2, [pc, #64]	; (8016d00 <rand+0x54>)
 8016cbe:	4b11      	ldr	r3, [pc, #68]	; (8016d04 <rand+0x58>)
 8016cc0:	63a0      	str	r0, [r4, #56]	; 0x38
 8016cc2:	e9c0 2300 	strd	r2, r3, [r0]
 8016cc6:	4b10      	ldr	r3, [pc, #64]	; (8016d08 <rand+0x5c>)
 8016cc8:	6083      	str	r3, [r0, #8]
 8016cca:	230b      	movs	r3, #11
 8016ccc:	8183      	strh	r3, [r0, #12]
 8016cce:	2201      	movs	r2, #1
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016cd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016cd8:	480c      	ldr	r0, [pc, #48]	; (8016d0c <rand+0x60>)
 8016cda:	690a      	ldr	r2, [r1, #16]
 8016cdc:	694b      	ldr	r3, [r1, #20]
 8016cde:	4c0c      	ldr	r4, [pc, #48]	; (8016d10 <rand+0x64>)
 8016ce0:	4350      	muls	r0, r2
 8016ce2:	fb04 0003 	mla	r0, r4, r3, r0
 8016ce6:	fba2 2304 	umull	r2, r3, r2, r4
 8016cea:	4403      	add	r3, r0
 8016cec:	1c54      	adds	r4, r2, #1
 8016cee:	f143 0500 	adc.w	r5, r3, #0
 8016cf2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016cf6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8016cfa:	bd38      	pop	{r3, r4, r5, pc}
 8016cfc:	24000034 	.word	0x24000034
 8016d00:	abcd330e 	.word	0xabcd330e
 8016d04:	e66d1234 	.word	0xe66d1234
 8016d08:	0005deec 	.word	0x0005deec
 8016d0c:	5851f42d 	.word	0x5851f42d
 8016d10:	4c957f2d 	.word	0x4c957f2d

08016d14 <std>:
 8016d14:	2300      	movs	r3, #0
 8016d16:	b510      	push	{r4, lr}
 8016d18:	4604      	mov	r4, r0
 8016d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8016d1e:	6083      	str	r3, [r0, #8]
 8016d20:	8181      	strh	r1, [r0, #12]
 8016d22:	6643      	str	r3, [r0, #100]	; 0x64
 8016d24:	81c2      	strh	r2, [r0, #14]
 8016d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d2a:	6183      	str	r3, [r0, #24]
 8016d2c:	4619      	mov	r1, r3
 8016d2e:	2208      	movs	r2, #8
 8016d30:	305c      	adds	r0, #92	; 0x5c
 8016d32:	f7ff ff9b 	bl	8016c6c <memset>
 8016d36:	4b05      	ldr	r3, [pc, #20]	; (8016d4c <std+0x38>)
 8016d38:	6263      	str	r3, [r4, #36]	; 0x24
 8016d3a:	4b05      	ldr	r3, [pc, #20]	; (8016d50 <std+0x3c>)
 8016d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d3e:	4b05      	ldr	r3, [pc, #20]	; (8016d54 <std+0x40>)
 8016d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d42:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <std+0x44>)
 8016d44:	6224      	str	r4, [r4, #32]
 8016d46:	6323      	str	r3, [r4, #48]	; 0x30
 8016d48:	bd10      	pop	{r4, pc}
 8016d4a:	bf00      	nop
 8016d4c:	080175b9 	.word	0x080175b9
 8016d50:	080175db 	.word	0x080175db
 8016d54:	08017613 	.word	0x08017613
 8016d58:	08017637 	.word	0x08017637

08016d5c <_cleanup_r>:
 8016d5c:	4901      	ldr	r1, [pc, #4]	; (8016d64 <_cleanup_r+0x8>)
 8016d5e:	f000 b885 	b.w	8016e6c <_fwalk_reent>
 8016d62:	bf00      	nop
 8016d64:	08017911 	.word	0x08017911

08016d68 <__sfmoreglue>:
 8016d68:	b570      	push	{r4, r5, r6, lr}
 8016d6a:	1e4a      	subs	r2, r1, #1
 8016d6c:	2568      	movs	r5, #104	; 0x68
 8016d6e:	4355      	muls	r5, r2
 8016d70:	460e      	mov	r6, r1
 8016d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d76:	f000 f8ed 	bl	8016f54 <_malloc_r>
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	b140      	cbz	r0, 8016d90 <__sfmoreglue+0x28>
 8016d7e:	2100      	movs	r1, #0
 8016d80:	e9c0 1600 	strd	r1, r6, [r0]
 8016d84:	300c      	adds	r0, #12
 8016d86:	60a0      	str	r0, [r4, #8]
 8016d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d8c:	f7ff ff6e 	bl	8016c6c <memset>
 8016d90:	4620      	mov	r0, r4
 8016d92:	bd70      	pop	{r4, r5, r6, pc}

08016d94 <__sinit>:
 8016d94:	6983      	ldr	r3, [r0, #24]
 8016d96:	b510      	push	{r4, lr}
 8016d98:	4604      	mov	r4, r0
 8016d9a:	bb33      	cbnz	r3, 8016dea <__sinit+0x56>
 8016d9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016da0:	6503      	str	r3, [r0, #80]	; 0x50
 8016da2:	4b12      	ldr	r3, [pc, #72]	; (8016dec <__sinit+0x58>)
 8016da4:	4a12      	ldr	r2, [pc, #72]	; (8016df0 <__sinit+0x5c>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	6282      	str	r2, [r0, #40]	; 0x28
 8016daa:	4298      	cmp	r0, r3
 8016dac:	bf04      	itt	eq
 8016dae:	2301      	moveq	r3, #1
 8016db0:	6183      	streq	r3, [r0, #24]
 8016db2:	f000 f81f 	bl	8016df4 <__sfp>
 8016db6:	6060      	str	r0, [r4, #4]
 8016db8:	4620      	mov	r0, r4
 8016dba:	f000 f81b 	bl	8016df4 <__sfp>
 8016dbe:	60a0      	str	r0, [r4, #8]
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f000 f817 	bl	8016df4 <__sfp>
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	60e0      	str	r0, [r4, #12]
 8016dca:	2104      	movs	r1, #4
 8016dcc:	6860      	ldr	r0, [r4, #4]
 8016dce:	f7ff ffa1 	bl	8016d14 <std>
 8016dd2:	2201      	movs	r2, #1
 8016dd4:	2109      	movs	r1, #9
 8016dd6:	68a0      	ldr	r0, [r4, #8]
 8016dd8:	f7ff ff9c 	bl	8016d14 <std>
 8016ddc:	2202      	movs	r2, #2
 8016dde:	2112      	movs	r1, #18
 8016de0:	68e0      	ldr	r0, [r4, #12]
 8016de2:	f7ff ff97 	bl	8016d14 <std>
 8016de6:	2301      	movs	r3, #1
 8016de8:	61a3      	str	r3, [r4, #24]
 8016dea:	bd10      	pop	{r4, pc}
 8016dec:	0801aa80 	.word	0x0801aa80
 8016df0:	08016d5d 	.word	0x08016d5d

08016df4 <__sfp>:
 8016df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016df6:	4b1b      	ldr	r3, [pc, #108]	; (8016e64 <__sfp+0x70>)
 8016df8:	681e      	ldr	r6, [r3, #0]
 8016dfa:	69b3      	ldr	r3, [r6, #24]
 8016dfc:	4607      	mov	r7, r0
 8016dfe:	b913      	cbnz	r3, 8016e06 <__sfp+0x12>
 8016e00:	4630      	mov	r0, r6
 8016e02:	f7ff ffc7 	bl	8016d94 <__sinit>
 8016e06:	3648      	adds	r6, #72	; 0x48
 8016e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e0c:	3b01      	subs	r3, #1
 8016e0e:	d503      	bpl.n	8016e18 <__sfp+0x24>
 8016e10:	6833      	ldr	r3, [r6, #0]
 8016e12:	b133      	cbz	r3, 8016e22 <__sfp+0x2e>
 8016e14:	6836      	ldr	r6, [r6, #0]
 8016e16:	e7f7      	b.n	8016e08 <__sfp+0x14>
 8016e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e1c:	b16d      	cbz	r5, 8016e3a <__sfp+0x46>
 8016e1e:	3468      	adds	r4, #104	; 0x68
 8016e20:	e7f4      	b.n	8016e0c <__sfp+0x18>
 8016e22:	2104      	movs	r1, #4
 8016e24:	4638      	mov	r0, r7
 8016e26:	f7ff ff9f 	bl	8016d68 <__sfmoreglue>
 8016e2a:	6030      	str	r0, [r6, #0]
 8016e2c:	2800      	cmp	r0, #0
 8016e2e:	d1f1      	bne.n	8016e14 <__sfp+0x20>
 8016e30:	230c      	movs	r3, #12
 8016e32:	603b      	str	r3, [r7, #0]
 8016e34:	4604      	mov	r4, r0
 8016e36:	4620      	mov	r0, r4
 8016e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e3a:	4b0b      	ldr	r3, [pc, #44]	; (8016e68 <__sfp+0x74>)
 8016e3c:	6665      	str	r5, [r4, #100]	; 0x64
 8016e3e:	e9c4 5500 	strd	r5, r5, [r4]
 8016e42:	60a5      	str	r5, [r4, #8]
 8016e44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016e48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016e4c:	2208      	movs	r2, #8
 8016e4e:	4629      	mov	r1, r5
 8016e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e54:	f7ff ff0a 	bl	8016c6c <memset>
 8016e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e60:	e7e9      	b.n	8016e36 <__sfp+0x42>
 8016e62:	bf00      	nop
 8016e64:	0801aa80 	.word	0x0801aa80
 8016e68:	ffff0001 	.word	0xffff0001

08016e6c <_fwalk_reent>:
 8016e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e70:	4680      	mov	r8, r0
 8016e72:	4689      	mov	r9, r1
 8016e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e78:	2600      	movs	r6, #0
 8016e7a:	b914      	cbnz	r4, 8016e82 <_fwalk_reent+0x16>
 8016e7c:	4630      	mov	r0, r6
 8016e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016e86:	3f01      	subs	r7, #1
 8016e88:	d501      	bpl.n	8016e8e <_fwalk_reent+0x22>
 8016e8a:	6824      	ldr	r4, [r4, #0]
 8016e8c:	e7f5      	b.n	8016e7a <_fwalk_reent+0xe>
 8016e8e:	89ab      	ldrh	r3, [r5, #12]
 8016e90:	2b01      	cmp	r3, #1
 8016e92:	d907      	bls.n	8016ea4 <_fwalk_reent+0x38>
 8016e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e98:	3301      	adds	r3, #1
 8016e9a:	d003      	beq.n	8016ea4 <_fwalk_reent+0x38>
 8016e9c:	4629      	mov	r1, r5
 8016e9e:	4640      	mov	r0, r8
 8016ea0:	47c8      	blx	r9
 8016ea2:	4306      	orrs	r6, r0
 8016ea4:	3568      	adds	r5, #104	; 0x68
 8016ea6:	e7ee      	b.n	8016e86 <_fwalk_reent+0x1a>

08016ea8 <malloc>:
 8016ea8:	4b02      	ldr	r3, [pc, #8]	; (8016eb4 <malloc+0xc>)
 8016eaa:	4601      	mov	r1, r0
 8016eac:	6818      	ldr	r0, [r3, #0]
 8016eae:	f000 b851 	b.w	8016f54 <_malloc_r>
 8016eb2:	bf00      	nop
 8016eb4:	24000034 	.word	0x24000034

08016eb8 <_free_r>:
 8016eb8:	b538      	push	{r3, r4, r5, lr}
 8016eba:	4605      	mov	r5, r0
 8016ebc:	2900      	cmp	r1, #0
 8016ebe:	d045      	beq.n	8016f4c <_free_r+0x94>
 8016ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ec4:	1f0c      	subs	r4, r1, #4
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	bfb8      	it	lt
 8016eca:	18e4      	addlt	r4, r4, r3
 8016ecc:	f000 fdc0 	bl	8017a50 <__malloc_lock>
 8016ed0:	4a1f      	ldr	r2, [pc, #124]	; (8016f50 <_free_r+0x98>)
 8016ed2:	6813      	ldr	r3, [r2, #0]
 8016ed4:	4610      	mov	r0, r2
 8016ed6:	b933      	cbnz	r3, 8016ee6 <_free_r+0x2e>
 8016ed8:	6063      	str	r3, [r4, #4]
 8016eda:	6014      	str	r4, [r2, #0]
 8016edc:	4628      	mov	r0, r5
 8016ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ee2:	f000 bdb6 	b.w	8017a52 <__malloc_unlock>
 8016ee6:	42a3      	cmp	r3, r4
 8016ee8:	d90c      	bls.n	8016f04 <_free_r+0x4c>
 8016eea:	6821      	ldr	r1, [r4, #0]
 8016eec:	1862      	adds	r2, r4, r1
 8016eee:	4293      	cmp	r3, r2
 8016ef0:	bf04      	itt	eq
 8016ef2:	681a      	ldreq	r2, [r3, #0]
 8016ef4:	685b      	ldreq	r3, [r3, #4]
 8016ef6:	6063      	str	r3, [r4, #4]
 8016ef8:	bf04      	itt	eq
 8016efa:	1852      	addeq	r2, r2, r1
 8016efc:	6022      	streq	r2, [r4, #0]
 8016efe:	6004      	str	r4, [r0, #0]
 8016f00:	e7ec      	b.n	8016edc <_free_r+0x24>
 8016f02:	4613      	mov	r3, r2
 8016f04:	685a      	ldr	r2, [r3, #4]
 8016f06:	b10a      	cbz	r2, 8016f0c <_free_r+0x54>
 8016f08:	42a2      	cmp	r2, r4
 8016f0a:	d9fa      	bls.n	8016f02 <_free_r+0x4a>
 8016f0c:	6819      	ldr	r1, [r3, #0]
 8016f0e:	1858      	adds	r0, r3, r1
 8016f10:	42a0      	cmp	r0, r4
 8016f12:	d10b      	bne.n	8016f2c <_free_r+0x74>
 8016f14:	6820      	ldr	r0, [r4, #0]
 8016f16:	4401      	add	r1, r0
 8016f18:	1858      	adds	r0, r3, r1
 8016f1a:	4282      	cmp	r2, r0
 8016f1c:	6019      	str	r1, [r3, #0]
 8016f1e:	d1dd      	bne.n	8016edc <_free_r+0x24>
 8016f20:	6810      	ldr	r0, [r2, #0]
 8016f22:	6852      	ldr	r2, [r2, #4]
 8016f24:	605a      	str	r2, [r3, #4]
 8016f26:	4401      	add	r1, r0
 8016f28:	6019      	str	r1, [r3, #0]
 8016f2a:	e7d7      	b.n	8016edc <_free_r+0x24>
 8016f2c:	d902      	bls.n	8016f34 <_free_r+0x7c>
 8016f2e:	230c      	movs	r3, #12
 8016f30:	602b      	str	r3, [r5, #0]
 8016f32:	e7d3      	b.n	8016edc <_free_r+0x24>
 8016f34:	6820      	ldr	r0, [r4, #0]
 8016f36:	1821      	adds	r1, r4, r0
 8016f38:	428a      	cmp	r2, r1
 8016f3a:	bf04      	itt	eq
 8016f3c:	6811      	ldreq	r1, [r2, #0]
 8016f3e:	6852      	ldreq	r2, [r2, #4]
 8016f40:	6062      	str	r2, [r4, #4]
 8016f42:	bf04      	itt	eq
 8016f44:	1809      	addeq	r1, r1, r0
 8016f46:	6021      	streq	r1, [r4, #0]
 8016f48:	605c      	str	r4, [r3, #4]
 8016f4a:	e7c7      	b.n	8016edc <_free_r+0x24>
 8016f4c:	bd38      	pop	{r3, r4, r5, pc}
 8016f4e:	bf00      	nop
 8016f50:	24004b58 	.word	0x24004b58

08016f54 <_malloc_r>:
 8016f54:	b570      	push	{r4, r5, r6, lr}
 8016f56:	1ccd      	adds	r5, r1, #3
 8016f58:	f025 0503 	bic.w	r5, r5, #3
 8016f5c:	3508      	adds	r5, #8
 8016f5e:	2d0c      	cmp	r5, #12
 8016f60:	bf38      	it	cc
 8016f62:	250c      	movcc	r5, #12
 8016f64:	2d00      	cmp	r5, #0
 8016f66:	4606      	mov	r6, r0
 8016f68:	db01      	blt.n	8016f6e <_malloc_r+0x1a>
 8016f6a:	42a9      	cmp	r1, r5
 8016f6c:	d903      	bls.n	8016f76 <_malloc_r+0x22>
 8016f6e:	230c      	movs	r3, #12
 8016f70:	6033      	str	r3, [r6, #0]
 8016f72:	2000      	movs	r0, #0
 8016f74:	bd70      	pop	{r4, r5, r6, pc}
 8016f76:	f000 fd6b 	bl	8017a50 <__malloc_lock>
 8016f7a:	4a21      	ldr	r2, [pc, #132]	; (8017000 <_malloc_r+0xac>)
 8016f7c:	6814      	ldr	r4, [r2, #0]
 8016f7e:	4621      	mov	r1, r4
 8016f80:	b991      	cbnz	r1, 8016fa8 <_malloc_r+0x54>
 8016f82:	4c20      	ldr	r4, [pc, #128]	; (8017004 <_malloc_r+0xb0>)
 8016f84:	6823      	ldr	r3, [r4, #0]
 8016f86:	b91b      	cbnz	r3, 8016f90 <_malloc_r+0x3c>
 8016f88:	4630      	mov	r0, r6
 8016f8a:	f000 fb05 	bl	8017598 <_sbrk_r>
 8016f8e:	6020      	str	r0, [r4, #0]
 8016f90:	4629      	mov	r1, r5
 8016f92:	4630      	mov	r0, r6
 8016f94:	f000 fb00 	bl	8017598 <_sbrk_r>
 8016f98:	1c43      	adds	r3, r0, #1
 8016f9a:	d124      	bne.n	8016fe6 <_malloc_r+0x92>
 8016f9c:	230c      	movs	r3, #12
 8016f9e:	6033      	str	r3, [r6, #0]
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	f000 fd56 	bl	8017a52 <__malloc_unlock>
 8016fa6:	e7e4      	b.n	8016f72 <_malloc_r+0x1e>
 8016fa8:	680b      	ldr	r3, [r1, #0]
 8016faa:	1b5b      	subs	r3, r3, r5
 8016fac:	d418      	bmi.n	8016fe0 <_malloc_r+0x8c>
 8016fae:	2b0b      	cmp	r3, #11
 8016fb0:	d90f      	bls.n	8016fd2 <_malloc_r+0x7e>
 8016fb2:	600b      	str	r3, [r1, #0]
 8016fb4:	50cd      	str	r5, [r1, r3]
 8016fb6:	18cc      	adds	r4, r1, r3
 8016fb8:	4630      	mov	r0, r6
 8016fba:	f000 fd4a 	bl	8017a52 <__malloc_unlock>
 8016fbe:	f104 000b 	add.w	r0, r4, #11
 8016fc2:	1d23      	adds	r3, r4, #4
 8016fc4:	f020 0007 	bic.w	r0, r0, #7
 8016fc8:	1ac3      	subs	r3, r0, r3
 8016fca:	d0d3      	beq.n	8016f74 <_malloc_r+0x20>
 8016fcc:	425a      	negs	r2, r3
 8016fce:	50e2      	str	r2, [r4, r3]
 8016fd0:	e7d0      	b.n	8016f74 <_malloc_r+0x20>
 8016fd2:	428c      	cmp	r4, r1
 8016fd4:	684b      	ldr	r3, [r1, #4]
 8016fd6:	bf16      	itet	ne
 8016fd8:	6063      	strne	r3, [r4, #4]
 8016fda:	6013      	streq	r3, [r2, #0]
 8016fdc:	460c      	movne	r4, r1
 8016fde:	e7eb      	b.n	8016fb8 <_malloc_r+0x64>
 8016fe0:	460c      	mov	r4, r1
 8016fe2:	6849      	ldr	r1, [r1, #4]
 8016fe4:	e7cc      	b.n	8016f80 <_malloc_r+0x2c>
 8016fe6:	1cc4      	adds	r4, r0, #3
 8016fe8:	f024 0403 	bic.w	r4, r4, #3
 8016fec:	42a0      	cmp	r0, r4
 8016fee:	d005      	beq.n	8016ffc <_malloc_r+0xa8>
 8016ff0:	1a21      	subs	r1, r4, r0
 8016ff2:	4630      	mov	r0, r6
 8016ff4:	f000 fad0 	bl	8017598 <_sbrk_r>
 8016ff8:	3001      	adds	r0, #1
 8016ffa:	d0cf      	beq.n	8016f9c <_malloc_r+0x48>
 8016ffc:	6025      	str	r5, [r4, #0]
 8016ffe:	e7db      	b.n	8016fb8 <_malloc_r+0x64>
 8017000:	24004b58 	.word	0x24004b58
 8017004:	24004b5c 	.word	0x24004b5c

08017008 <__sfputc_r>:
 8017008:	6893      	ldr	r3, [r2, #8]
 801700a:	3b01      	subs	r3, #1
 801700c:	2b00      	cmp	r3, #0
 801700e:	b410      	push	{r4}
 8017010:	6093      	str	r3, [r2, #8]
 8017012:	da08      	bge.n	8017026 <__sfputc_r+0x1e>
 8017014:	6994      	ldr	r4, [r2, #24]
 8017016:	42a3      	cmp	r3, r4
 8017018:	db01      	blt.n	801701e <__sfputc_r+0x16>
 801701a:	290a      	cmp	r1, #10
 801701c:	d103      	bne.n	8017026 <__sfputc_r+0x1e>
 801701e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017022:	f000 bb0d 	b.w	8017640 <__swbuf_r>
 8017026:	6813      	ldr	r3, [r2, #0]
 8017028:	1c58      	adds	r0, r3, #1
 801702a:	6010      	str	r0, [r2, #0]
 801702c:	7019      	strb	r1, [r3, #0]
 801702e:	4608      	mov	r0, r1
 8017030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017034:	4770      	bx	lr

08017036 <__sfputs_r>:
 8017036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017038:	4606      	mov	r6, r0
 801703a:	460f      	mov	r7, r1
 801703c:	4614      	mov	r4, r2
 801703e:	18d5      	adds	r5, r2, r3
 8017040:	42ac      	cmp	r4, r5
 8017042:	d101      	bne.n	8017048 <__sfputs_r+0x12>
 8017044:	2000      	movs	r0, #0
 8017046:	e007      	b.n	8017058 <__sfputs_r+0x22>
 8017048:	463a      	mov	r2, r7
 801704a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801704e:	4630      	mov	r0, r6
 8017050:	f7ff ffda 	bl	8017008 <__sfputc_r>
 8017054:	1c43      	adds	r3, r0, #1
 8017056:	d1f3      	bne.n	8017040 <__sfputs_r+0xa>
 8017058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801705c <_vfiprintf_r>:
 801705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017060:	460c      	mov	r4, r1
 8017062:	b09d      	sub	sp, #116	; 0x74
 8017064:	4617      	mov	r7, r2
 8017066:	461d      	mov	r5, r3
 8017068:	4606      	mov	r6, r0
 801706a:	b118      	cbz	r0, 8017074 <_vfiprintf_r+0x18>
 801706c:	6983      	ldr	r3, [r0, #24]
 801706e:	b90b      	cbnz	r3, 8017074 <_vfiprintf_r+0x18>
 8017070:	f7ff fe90 	bl	8016d94 <__sinit>
 8017074:	4b7c      	ldr	r3, [pc, #496]	; (8017268 <_vfiprintf_r+0x20c>)
 8017076:	429c      	cmp	r4, r3
 8017078:	d158      	bne.n	801712c <_vfiprintf_r+0xd0>
 801707a:	6874      	ldr	r4, [r6, #4]
 801707c:	89a3      	ldrh	r3, [r4, #12]
 801707e:	0718      	lsls	r0, r3, #28
 8017080:	d55e      	bpl.n	8017140 <_vfiprintf_r+0xe4>
 8017082:	6923      	ldr	r3, [r4, #16]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d05b      	beq.n	8017140 <_vfiprintf_r+0xe4>
 8017088:	2300      	movs	r3, #0
 801708a:	9309      	str	r3, [sp, #36]	; 0x24
 801708c:	2320      	movs	r3, #32
 801708e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017092:	2330      	movs	r3, #48	; 0x30
 8017094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017098:	9503      	str	r5, [sp, #12]
 801709a:	f04f 0b01 	mov.w	fp, #1
 801709e:	46b8      	mov	r8, r7
 80170a0:	4645      	mov	r5, r8
 80170a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80170a6:	b10b      	cbz	r3, 80170ac <_vfiprintf_r+0x50>
 80170a8:	2b25      	cmp	r3, #37	; 0x25
 80170aa:	d154      	bne.n	8017156 <_vfiprintf_r+0xfa>
 80170ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80170b0:	d00b      	beq.n	80170ca <_vfiprintf_r+0x6e>
 80170b2:	4653      	mov	r3, sl
 80170b4:	463a      	mov	r2, r7
 80170b6:	4621      	mov	r1, r4
 80170b8:	4630      	mov	r0, r6
 80170ba:	f7ff ffbc 	bl	8017036 <__sfputs_r>
 80170be:	3001      	adds	r0, #1
 80170c0:	f000 80c2 	beq.w	8017248 <_vfiprintf_r+0x1ec>
 80170c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170c6:	4453      	add	r3, sl
 80170c8:	9309      	str	r3, [sp, #36]	; 0x24
 80170ca:	f898 3000 	ldrb.w	r3, [r8]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	f000 80ba 	beq.w	8017248 <_vfiprintf_r+0x1ec>
 80170d4:	2300      	movs	r3, #0
 80170d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170de:	9304      	str	r3, [sp, #16]
 80170e0:	9307      	str	r3, [sp, #28]
 80170e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170e6:	931a      	str	r3, [sp, #104]	; 0x68
 80170e8:	46a8      	mov	r8, r5
 80170ea:	2205      	movs	r2, #5
 80170ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80170f0:	485e      	ldr	r0, [pc, #376]	; (801726c <_vfiprintf_r+0x210>)
 80170f2:	f7e9 f8fd 	bl	80002f0 <memchr>
 80170f6:	9b04      	ldr	r3, [sp, #16]
 80170f8:	bb78      	cbnz	r0, 801715a <_vfiprintf_r+0xfe>
 80170fa:	06d9      	lsls	r1, r3, #27
 80170fc:	bf44      	itt	mi
 80170fe:	2220      	movmi	r2, #32
 8017100:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017104:	071a      	lsls	r2, r3, #28
 8017106:	bf44      	itt	mi
 8017108:	222b      	movmi	r2, #43	; 0x2b
 801710a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801710e:	782a      	ldrb	r2, [r5, #0]
 8017110:	2a2a      	cmp	r2, #42	; 0x2a
 8017112:	d02a      	beq.n	801716a <_vfiprintf_r+0x10e>
 8017114:	9a07      	ldr	r2, [sp, #28]
 8017116:	46a8      	mov	r8, r5
 8017118:	2000      	movs	r0, #0
 801711a:	250a      	movs	r5, #10
 801711c:	4641      	mov	r1, r8
 801711e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017122:	3b30      	subs	r3, #48	; 0x30
 8017124:	2b09      	cmp	r3, #9
 8017126:	d969      	bls.n	80171fc <_vfiprintf_r+0x1a0>
 8017128:	b360      	cbz	r0, 8017184 <_vfiprintf_r+0x128>
 801712a:	e024      	b.n	8017176 <_vfiprintf_r+0x11a>
 801712c:	4b50      	ldr	r3, [pc, #320]	; (8017270 <_vfiprintf_r+0x214>)
 801712e:	429c      	cmp	r4, r3
 8017130:	d101      	bne.n	8017136 <_vfiprintf_r+0xda>
 8017132:	68b4      	ldr	r4, [r6, #8]
 8017134:	e7a2      	b.n	801707c <_vfiprintf_r+0x20>
 8017136:	4b4f      	ldr	r3, [pc, #316]	; (8017274 <_vfiprintf_r+0x218>)
 8017138:	429c      	cmp	r4, r3
 801713a:	bf08      	it	eq
 801713c:	68f4      	ldreq	r4, [r6, #12]
 801713e:	e79d      	b.n	801707c <_vfiprintf_r+0x20>
 8017140:	4621      	mov	r1, r4
 8017142:	4630      	mov	r0, r6
 8017144:	f000 fae0 	bl	8017708 <__swsetup_r>
 8017148:	2800      	cmp	r0, #0
 801714a:	d09d      	beq.n	8017088 <_vfiprintf_r+0x2c>
 801714c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017150:	b01d      	add	sp, #116	; 0x74
 8017152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017156:	46a8      	mov	r8, r5
 8017158:	e7a2      	b.n	80170a0 <_vfiprintf_r+0x44>
 801715a:	4a44      	ldr	r2, [pc, #272]	; (801726c <_vfiprintf_r+0x210>)
 801715c:	1a80      	subs	r0, r0, r2
 801715e:	fa0b f000 	lsl.w	r0, fp, r0
 8017162:	4318      	orrs	r0, r3
 8017164:	9004      	str	r0, [sp, #16]
 8017166:	4645      	mov	r5, r8
 8017168:	e7be      	b.n	80170e8 <_vfiprintf_r+0x8c>
 801716a:	9a03      	ldr	r2, [sp, #12]
 801716c:	1d11      	adds	r1, r2, #4
 801716e:	6812      	ldr	r2, [r2, #0]
 8017170:	9103      	str	r1, [sp, #12]
 8017172:	2a00      	cmp	r2, #0
 8017174:	db01      	blt.n	801717a <_vfiprintf_r+0x11e>
 8017176:	9207      	str	r2, [sp, #28]
 8017178:	e004      	b.n	8017184 <_vfiprintf_r+0x128>
 801717a:	4252      	negs	r2, r2
 801717c:	f043 0302 	orr.w	r3, r3, #2
 8017180:	9207      	str	r2, [sp, #28]
 8017182:	9304      	str	r3, [sp, #16]
 8017184:	f898 3000 	ldrb.w	r3, [r8]
 8017188:	2b2e      	cmp	r3, #46	; 0x2e
 801718a:	d10e      	bne.n	80171aa <_vfiprintf_r+0x14e>
 801718c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017190:	2b2a      	cmp	r3, #42	; 0x2a
 8017192:	d138      	bne.n	8017206 <_vfiprintf_r+0x1aa>
 8017194:	9b03      	ldr	r3, [sp, #12]
 8017196:	1d1a      	adds	r2, r3, #4
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	9203      	str	r2, [sp, #12]
 801719c:	2b00      	cmp	r3, #0
 801719e:	bfb8      	it	lt
 80171a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80171a4:	f108 0802 	add.w	r8, r8, #2
 80171a8:	9305      	str	r3, [sp, #20]
 80171aa:	4d33      	ldr	r5, [pc, #204]	; (8017278 <_vfiprintf_r+0x21c>)
 80171ac:	f898 1000 	ldrb.w	r1, [r8]
 80171b0:	2203      	movs	r2, #3
 80171b2:	4628      	mov	r0, r5
 80171b4:	f7e9 f89c 	bl	80002f0 <memchr>
 80171b8:	b140      	cbz	r0, 80171cc <_vfiprintf_r+0x170>
 80171ba:	2340      	movs	r3, #64	; 0x40
 80171bc:	1b40      	subs	r0, r0, r5
 80171be:	fa03 f000 	lsl.w	r0, r3, r0
 80171c2:	9b04      	ldr	r3, [sp, #16]
 80171c4:	4303      	orrs	r3, r0
 80171c6:	f108 0801 	add.w	r8, r8, #1
 80171ca:	9304      	str	r3, [sp, #16]
 80171cc:	f898 1000 	ldrb.w	r1, [r8]
 80171d0:	482a      	ldr	r0, [pc, #168]	; (801727c <_vfiprintf_r+0x220>)
 80171d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171d6:	2206      	movs	r2, #6
 80171d8:	f108 0701 	add.w	r7, r8, #1
 80171dc:	f7e9 f888 	bl	80002f0 <memchr>
 80171e0:	2800      	cmp	r0, #0
 80171e2:	d037      	beq.n	8017254 <_vfiprintf_r+0x1f8>
 80171e4:	4b26      	ldr	r3, [pc, #152]	; (8017280 <_vfiprintf_r+0x224>)
 80171e6:	bb1b      	cbnz	r3, 8017230 <_vfiprintf_r+0x1d4>
 80171e8:	9b03      	ldr	r3, [sp, #12]
 80171ea:	3307      	adds	r3, #7
 80171ec:	f023 0307 	bic.w	r3, r3, #7
 80171f0:	3308      	adds	r3, #8
 80171f2:	9303      	str	r3, [sp, #12]
 80171f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171f6:	444b      	add	r3, r9
 80171f8:	9309      	str	r3, [sp, #36]	; 0x24
 80171fa:	e750      	b.n	801709e <_vfiprintf_r+0x42>
 80171fc:	fb05 3202 	mla	r2, r5, r2, r3
 8017200:	2001      	movs	r0, #1
 8017202:	4688      	mov	r8, r1
 8017204:	e78a      	b.n	801711c <_vfiprintf_r+0xc0>
 8017206:	2300      	movs	r3, #0
 8017208:	f108 0801 	add.w	r8, r8, #1
 801720c:	9305      	str	r3, [sp, #20]
 801720e:	4619      	mov	r1, r3
 8017210:	250a      	movs	r5, #10
 8017212:	4640      	mov	r0, r8
 8017214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017218:	3a30      	subs	r2, #48	; 0x30
 801721a:	2a09      	cmp	r2, #9
 801721c:	d903      	bls.n	8017226 <_vfiprintf_r+0x1ca>
 801721e:	2b00      	cmp	r3, #0
 8017220:	d0c3      	beq.n	80171aa <_vfiprintf_r+0x14e>
 8017222:	9105      	str	r1, [sp, #20]
 8017224:	e7c1      	b.n	80171aa <_vfiprintf_r+0x14e>
 8017226:	fb05 2101 	mla	r1, r5, r1, r2
 801722a:	2301      	movs	r3, #1
 801722c:	4680      	mov	r8, r0
 801722e:	e7f0      	b.n	8017212 <_vfiprintf_r+0x1b6>
 8017230:	ab03      	add	r3, sp, #12
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	4622      	mov	r2, r4
 8017236:	4b13      	ldr	r3, [pc, #76]	; (8017284 <_vfiprintf_r+0x228>)
 8017238:	a904      	add	r1, sp, #16
 801723a:	4630      	mov	r0, r6
 801723c:	f3af 8000 	nop.w
 8017240:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8017244:	4681      	mov	r9, r0
 8017246:	d1d5      	bne.n	80171f4 <_vfiprintf_r+0x198>
 8017248:	89a3      	ldrh	r3, [r4, #12]
 801724a:	065b      	lsls	r3, r3, #25
 801724c:	f53f af7e 	bmi.w	801714c <_vfiprintf_r+0xf0>
 8017250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017252:	e77d      	b.n	8017150 <_vfiprintf_r+0xf4>
 8017254:	ab03      	add	r3, sp, #12
 8017256:	9300      	str	r3, [sp, #0]
 8017258:	4622      	mov	r2, r4
 801725a:	4b0a      	ldr	r3, [pc, #40]	; (8017284 <_vfiprintf_r+0x228>)
 801725c:	a904      	add	r1, sp, #16
 801725e:	4630      	mov	r0, r6
 8017260:	f000 f888 	bl	8017374 <_printf_i>
 8017264:	e7ec      	b.n	8017240 <_vfiprintf_r+0x1e4>
 8017266:	bf00      	nop
 8017268:	0801aaa4 	.word	0x0801aaa4
 801726c:	0801aae4 	.word	0x0801aae4
 8017270:	0801aac4 	.word	0x0801aac4
 8017274:	0801aa84 	.word	0x0801aa84
 8017278:	0801aaea 	.word	0x0801aaea
 801727c:	0801aaee 	.word	0x0801aaee
 8017280:	00000000 	.word	0x00000000
 8017284:	08017037 	.word	0x08017037

08017288 <_printf_common>:
 8017288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801728c:	4691      	mov	r9, r2
 801728e:	461f      	mov	r7, r3
 8017290:	688a      	ldr	r2, [r1, #8]
 8017292:	690b      	ldr	r3, [r1, #16]
 8017294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017298:	4293      	cmp	r3, r2
 801729a:	bfb8      	it	lt
 801729c:	4613      	movlt	r3, r2
 801729e:	f8c9 3000 	str.w	r3, [r9]
 80172a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80172a6:	4606      	mov	r6, r0
 80172a8:	460c      	mov	r4, r1
 80172aa:	b112      	cbz	r2, 80172b2 <_printf_common+0x2a>
 80172ac:	3301      	adds	r3, #1
 80172ae:	f8c9 3000 	str.w	r3, [r9]
 80172b2:	6823      	ldr	r3, [r4, #0]
 80172b4:	0699      	lsls	r1, r3, #26
 80172b6:	bf42      	ittt	mi
 80172b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80172bc:	3302      	addmi	r3, #2
 80172be:	f8c9 3000 	strmi.w	r3, [r9]
 80172c2:	6825      	ldr	r5, [r4, #0]
 80172c4:	f015 0506 	ands.w	r5, r5, #6
 80172c8:	d107      	bne.n	80172da <_printf_common+0x52>
 80172ca:	f104 0a19 	add.w	sl, r4, #25
 80172ce:	68e3      	ldr	r3, [r4, #12]
 80172d0:	f8d9 2000 	ldr.w	r2, [r9]
 80172d4:	1a9b      	subs	r3, r3, r2
 80172d6:	42ab      	cmp	r3, r5
 80172d8:	dc28      	bgt.n	801732c <_printf_common+0xa4>
 80172da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80172de:	6822      	ldr	r2, [r4, #0]
 80172e0:	3300      	adds	r3, #0
 80172e2:	bf18      	it	ne
 80172e4:	2301      	movne	r3, #1
 80172e6:	0692      	lsls	r2, r2, #26
 80172e8:	d42d      	bmi.n	8017346 <_printf_common+0xbe>
 80172ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80172ee:	4639      	mov	r1, r7
 80172f0:	4630      	mov	r0, r6
 80172f2:	47c0      	blx	r8
 80172f4:	3001      	adds	r0, #1
 80172f6:	d020      	beq.n	801733a <_printf_common+0xb2>
 80172f8:	6823      	ldr	r3, [r4, #0]
 80172fa:	68e5      	ldr	r5, [r4, #12]
 80172fc:	f8d9 2000 	ldr.w	r2, [r9]
 8017300:	f003 0306 	and.w	r3, r3, #6
 8017304:	2b04      	cmp	r3, #4
 8017306:	bf08      	it	eq
 8017308:	1aad      	subeq	r5, r5, r2
 801730a:	68a3      	ldr	r3, [r4, #8]
 801730c:	6922      	ldr	r2, [r4, #16]
 801730e:	bf0c      	ite	eq
 8017310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017314:	2500      	movne	r5, #0
 8017316:	4293      	cmp	r3, r2
 8017318:	bfc4      	itt	gt
 801731a:	1a9b      	subgt	r3, r3, r2
 801731c:	18ed      	addgt	r5, r5, r3
 801731e:	f04f 0900 	mov.w	r9, #0
 8017322:	341a      	adds	r4, #26
 8017324:	454d      	cmp	r5, r9
 8017326:	d11a      	bne.n	801735e <_printf_common+0xd6>
 8017328:	2000      	movs	r0, #0
 801732a:	e008      	b.n	801733e <_printf_common+0xb6>
 801732c:	2301      	movs	r3, #1
 801732e:	4652      	mov	r2, sl
 8017330:	4639      	mov	r1, r7
 8017332:	4630      	mov	r0, r6
 8017334:	47c0      	blx	r8
 8017336:	3001      	adds	r0, #1
 8017338:	d103      	bne.n	8017342 <_printf_common+0xba>
 801733a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017342:	3501      	adds	r5, #1
 8017344:	e7c3      	b.n	80172ce <_printf_common+0x46>
 8017346:	18e1      	adds	r1, r4, r3
 8017348:	1c5a      	adds	r2, r3, #1
 801734a:	2030      	movs	r0, #48	; 0x30
 801734c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017350:	4422      	add	r2, r4
 8017352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801735a:	3302      	adds	r3, #2
 801735c:	e7c5      	b.n	80172ea <_printf_common+0x62>
 801735e:	2301      	movs	r3, #1
 8017360:	4622      	mov	r2, r4
 8017362:	4639      	mov	r1, r7
 8017364:	4630      	mov	r0, r6
 8017366:	47c0      	blx	r8
 8017368:	3001      	adds	r0, #1
 801736a:	d0e6      	beq.n	801733a <_printf_common+0xb2>
 801736c:	f109 0901 	add.w	r9, r9, #1
 8017370:	e7d8      	b.n	8017324 <_printf_common+0x9c>
	...

08017374 <_printf_i>:
 8017374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017378:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801737c:	460c      	mov	r4, r1
 801737e:	7e09      	ldrb	r1, [r1, #24]
 8017380:	b085      	sub	sp, #20
 8017382:	296e      	cmp	r1, #110	; 0x6e
 8017384:	4617      	mov	r7, r2
 8017386:	4606      	mov	r6, r0
 8017388:	4698      	mov	r8, r3
 801738a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801738c:	f000 80b3 	beq.w	80174f6 <_printf_i+0x182>
 8017390:	d822      	bhi.n	80173d8 <_printf_i+0x64>
 8017392:	2963      	cmp	r1, #99	; 0x63
 8017394:	d036      	beq.n	8017404 <_printf_i+0x90>
 8017396:	d80a      	bhi.n	80173ae <_printf_i+0x3a>
 8017398:	2900      	cmp	r1, #0
 801739a:	f000 80b9 	beq.w	8017510 <_printf_i+0x19c>
 801739e:	2958      	cmp	r1, #88	; 0x58
 80173a0:	f000 8083 	beq.w	80174aa <_printf_i+0x136>
 80173a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80173ac:	e032      	b.n	8017414 <_printf_i+0xa0>
 80173ae:	2964      	cmp	r1, #100	; 0x64
 80173b0:	d001      	beq.n	80173b6 <_printf_i+0x42>
 80173b2:	2969      	cmp	r1, #105	; 0x69
 80173b4:	d1f6      	bne.n	80173a4 <_printf_i+0x30>
 80173b6:	6820      	ldr	r0, [r4, #0]
 80173b8:	6813      	ldr	r3, [r2, #0]
 80173ba:	0605      	lsls	r5, r0, #24
 80173bc:	f103 0104 	add.w	r1, r3, #4
 80173c0:	d52a      	bpl.n	8017418 <_printf_i+0xa4>
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	6011      	str	r1, [r2, #0]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	da03      	bge.n	80173d2 <_printf_i+0x5e>
 80173ca:	222d      	movs	r2, #45	; 0x2d
 80173cc:	425b      	negs	r3, r3
 80173ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80173d2:	486f      	ldr	r0, [pc, #444]	; (8017590 <_printf_i+0x21c>)
 80173d4:	220a      	movs	r2, #10
 80173d6:	e039      	b.n	801744c <_printf_i+0xd8>
 80173d8:	2973      	cmp	r1, #115	; 0x73
 80173da:	f000 809d 	beq.w	8017518 <_printf_i+0x1a4>
 80173de:	d808      	bhi.n	80173f2 <_printf_i+0x7e>
 80173e0:	296f      	cmp	r1, #111	; 0x6f
 80173e2:	d020      	beq.n	8017426 <_printf_i+0xb2>
 80173e4:	2970      	cmp	r1, #112	; 0x70
 80173e6:	d1dd      	bne.n	80173a4 <_printf_i+0x30>
 80173e8:	6823      	ldr	r3, [r4, #0]
 80173ea:	f043 0320 	orr.w	r3, r3, #32
 80173ee:	6023      	str	r3, [r4, #0]
 80173f0:	e003      	b.n	80173fa <_printf_i+0x86>
 80173f2:	2975      	cmp	r1, #117	; 0x75
 80173f4:	d017      	beq.n	8017426 <_printf_i+0xb2>
 80173f6:	2978      	cmp	r1, #120	; 0x78
 80173f8:	d1d4      	bne.n	80173a4 <_printf_i+0x30>
 80173fa:	2378      	movs	r3, #120	; 0x78
 80173fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017400:	4864      	ldr	r0, [pc, #400]	; (8017594 <_printf_i+0x220>)
 8017402:	e055      	b.n	80174b0 <_printf_i+0x13c>
 8017404:	6813      	ldr	r3, [r2, #0]
 8017406:	1d19      	adds	r1, r3, #4
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	6011      	str	r1, [r2, #0]
 801740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017414:	2301      	movs	r3, #1
 8017416:	e08c      	b.n	8017532 <_printf_i+0x1be>
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	6011      	str	r1, [r2, #0]
 801741c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017420:	bf18      	it	ne
 8017422:	b21b      	sxthne	r3, r3
 8017424:	e7cf      	b.n	80173c6 <_printf_i+0x52>
 8017426:	6813      	ldr	r3, [r2, #0]
 8017428:	6825      	ldr	r5, [r4, #0]
 801742a:	1d18      	adds	r0, r3, #4
 801742c:	6010      	str	r0, [r2, #0]
 801742e:	0628      	lsls	r0, r5, #24
 8017430:	d501      	bpl.n	8017436 <_printf_i+0xc2>
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	e002      	b.n	801743c <_printf_i+0xc8>
 8017436:	0668      	lsls	r0, r5, #25
 8017438:	d5fb      	bpl.n	8017432 <_printf_i+0xbe>
 801743a:	881b      	ldrh	r3, [r3, #0]
 801743c:	4854      	ldr	r0, [pc, #336]	; (8017590 <_printf_i+0x21c>)
 801743e:	296f      	cmp	r1, #111	; 0x6f
 8017440:	bf14      	ite	ne
 8017442:	220a      	movne	r2, #10
 8017444:	2208      	moveq	r2, #8
 8017446:	2100      	movs	r1, #0
 8017448:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801744c:	6865      	ldr	r5, [r4, #4]
 801744e:	60a5      	str	r5, [r4, #8]
 8017450:	2d00      	cmp	r5, #0
 8017452:	f2c0 8095 	blt.w	8017580 <_printf_i+0x20c>
 8017456:	6821      	ldr	r1, [r4, #0]
 8017458:	f021 0104 	bic.w	r1, r1, #4
 801745c:	6021      	str	r1, [r4, #0]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d13d      	bne.n	80174de <_printf_i+0x16a>
 8017462:	2d00      	cmp	r5, #0
 8017464:	f040 808e 	bne.w	8017584 <_printf_i+0x210>
 8017468:	4665      	mov	r5, ip
 801746a:	2a08      	cmp	r2, #8
 801746c:	d10b      	bne.n	8017486 <_printf_i+0x112>
 801746e:	6823      	ldr	r3, [r4, #0]
 8017470:	07db      	lsls	r3, r3, #31
 8017472:	d508      	bpl.n	8017486 <_printf_i+0x112>
 8017474:	6923      	ldr	r3, [r4, #16]
 8017476:	6862      	ldr	r2, [r4, #4]
 8017478:	429a      	cmp	r2, r3
 801747a:	bfde      	ittt	le
 801747c:	2330      	movle	r3, #48	; 0x30
 801747e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017482:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017486:	ebac 0305 	sub.w	r3, ip, r5
 801748a:	6123      	str	r3, [r4, #16]
 801748c:	f8cd 8000 	str.w	r8, [sp]
 8017490:	463b      	mov	r3, r7
 8017492:	aa03      	add	r2, sp, #12
 8017494:	4621      	mov	r1, r4
 8017496:	4630      	mov	r0, r6
 8017498:	f7ff fef6 	bl	8017288 <_printf_common>
 801749c:	3001      	adds	r0, #1
 801749e:	d14d      	bne.n	801753c <_printf_i+0x1c8>
 80174a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174a4:	b005      	add	sp, #20
 80174a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174aa:	4839      	ldr	r0, [pc, #228]	; (8017590 <_printf_i+0x21c>)
 80174ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80174b0:	6813      	ldr	r3, [r2, #0]
 80174b2:	6821      	ldr	r1, [r4, #0]
 80174b4:	1d1d      	adds	r5, r3, #4
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	6015      	str	r5, [r2, #0]
 80174ba:	060a      	lsls	r2, r1, #24
 80174bc:	d50b      	bpl.n	80174d6 <_printf_i+0x162>
 80174be:	07ca      	lsls	r2, r1, #31
 80174c0:	bf44      	itt	mi
 80174c2:	f041 0120 	orrmi.w	r1, r1, #32
 80174c6:	6021      	strmi	r1, [r4, #0]
 80174c8:	b91b      	cbnz	r3, 80174d2 <_printf_i+0x15e>
 80174ca:	6822      	ldr	r2, [r4, #0]
 80174cc:	f022 0220 	bic.w	r2, r2, #32
 80174d0:	6022      	str	r2, [r4, #0]
 80174d2:	2210      	movs	r2, #16
 80174d4:	e7b7      	b.n	8017446 <_printf_i+0xd2>
 80174d6:	064d      	lsls	r5, r1, #25
 80174d8:	bf48      	it	mi
 80174da:	b29b      	uxthmi	r3, r3
 80174dc:	e7ef      	b.n	80174be <_printf_i+0x14a>
 80174de:	4665      	mov	r5, ip
 80174e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80174e4:	fb02 3311 	mls	r3, r2, r1, r3
 80174e8:	5cc3      	ldrb	r3, [r0, r3]
 80174ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80174ee:	460b      	mov	r3, r1
 80174f0:	2900      	cmp	r1, #0
 80174f2:	d1f5      	bne.n	80174e0 <_printf_i+0x16c>
 80174f4:	e7b9      	b.n	801746a <_printf_i+0xf6>
 80174f6:	6813      	ldr	r3, [r2, #0]
 80174f8:	6825      	ldr	r5, [r4, #0]
 80174fa:	6961      	ldr	r1, [r4, #20]
 80174fc:	1d18      	adds	r0, r3, #4
 80174fe:	6010      	str	r0, [r2, #0]
 8017500:	0628      	lsls	r0, r5, #24
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	d501      	bpl.n	801750a <_printf_i+0x196>
 8017506:	6019      	str	r1, [r3, #0]
 8017508:	e002      	b.n	8017510 <_printf_i+0x19c>
 801750a:	066a      	lsls	r2, r5, #25
 801750c:	d5fb      	bpl.n	8017506 <_printf_i+0x192>
 801750e:	8019      	strh	r1, [r3, #0]
 8017510:	2300      	movs	r3, #0
 8017512:	6123      	str	r3, [r4, #16]
 8017514:	4665      	mov	r5, ip
 8017516:	e7b9      	b.n	801748c <_printf_i+0x118>
 8017518:	6813      	ldr	r3, [r2, #0]
 801751a:	1d19      	adds	r1, r3, #4
 801751c:	6011      	str	r1, [r2, #0]
 801751e:	681d      	ldr	r5, [r3, #0]
 8017520:	6862      	ldr	r2, [r4, #4]
 8017522:	2100      	movs	r1, #0
 8017524:	4628      	mov	r0, r5
 8017526:	f7e8 fee3 	bl	80002f0 <memchr>
 801752a:	b108      	cbz	r0, 8017530 <_printf_i+0x1bc>
 801752c:	1b40      	subs	r0, r0, r5
 801752e:	6060      	str	r0, [r4, #4]
 8017530:	6863      	ldr	r3, [r4, #4]
 8017532:	6123      	str	r3, [r4, #16]
 8017534:	2300      	movs	r3, #0
 8017536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801753a:	e7a7      	b.n	801748c <_printf_i+0x118>
 801753c:	6923      	ldr	r3, [r4, #16]
 801753e:	462a      	mov	r2, r5
 8017540:	4639      	mov	r1, r7
 8017542:	4630      	mov	r0, r6
 8017544:	47c0      	blx	r8
 8017546:	3001      	adds	r0, #1
 8017548:	d0aa      	beq.n	80174a0 <_printf_i+0x12c>
 801754a:	6823      	ldr	r3, [r4, #0]
 801754c:	079b      	lsls	r3, r3, #30
 801754e:	d413      	bmi.n	8017578 <_printf_i+0x204>
 8017550:	68e0      	ldr	r0, [r4, #12]
 8017552:	9b03      	ldr	r3, [sp, #12]
 8017554:	4298      	cmp	r0, r3
 8017556:	bfb8      	it	lt
 8017558:	4618      	movlt	r0, r3
 801755a:	e7a3      	b.n	80174a4 <_printf_i+0x130>
 801755c:	2301      	movs	r3, #1
 801755e:	464a      	mov	r2, r9
 8017560:	4639      	mov	r1, r7
 8017562:	4630      	mov	r0, r6
 8017564:	47c0      	blx	r8
 8017566:	3001      	adds	r0, #1
 8017568:	d09a      	beq.n	80174a0 <_printf_i+0x12c>
 801756a:	3501      	adds	r5, #1
 801756c:	68e3      	ldr	r3, [r4, #12]
 801756e:	9a03      	ldr	r2, [sp, #12]
 8017570:	1a9b      	subs	r3, r3, r2
 8017572:	42ab      	cmp	r3, r5
 8017574:	dcf2      	bgt.n	801755c <_printf_i+0x1e8>
 8017576:	e7eb      	b.n	8017550 <_printf_i+0x1dc>
 8017578:	2500      	movs	r5, #0
 801757a:	f104 0919 	add.w	r9, r4, #25
 801757e:	e7f5      	b.n	801756c <_printf_i+0x1f8>
 8017580:	2b00      	cmp	r3, #0
 8017582:	d1ac      	bne.n	80174de <_printf_i+0x16a>
 8017584:	7803      	ldrb	r3, [r0, #0]
 8017586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801758a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801758e:	e76c      	b.n	801746a <_printf_i+0xf6>
 8017590:	0801aaf5 	.word	0x0801aaf5
 8017594:	0801ab06 	.word	0x0801ab06

08017598 <_sbrk_r>:
 8017598:	b538      	push	{r3, r4, r5, lr}
 801759a:	4c06      	ldr	r4, [pc, #24]	; (80175b4 <_sbrk_r+0x1c>)
 801759c:	2300      	movs	r3, #0
 801759e:	4605      	mov	r5, r0
 80175a0:	4608      	mov	r0, r1
 80175a2:	6023      	str	r3, [r4, #0]
 80175a4:	f7e9 fdfa 	bl	800119c <_sbrk>
 80175a8:	1c43      	adds	r3, r0, #1
 80175aa:	d102      	bne.n	80175b2 <_sbrk_r+0x1a>
 80175ac:	6823      	ldr	r3, [r4, #0]
 80175ae:	b103      	cbz	r3, 80175b2 <_sbrk_r+0x1a>
 80175b0:	602b      	str	r3, [r5, #0]
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	24008344 	.word	0x24008344

080175b8 <__sread>:
 80175b8:	b510      	push	{r4, lr}
 80175ba:	460c      	mov	r4, r1
 80175bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175c0:	f000 fa48 	bl	8017a54 <_read_r>
 80175c4:	2800      	cmp	r0, #0
 80175c6:	bfab      	itete	ge
 80175c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80175ca:	89a3      	ldrhlt	r3, [r4, #12]
 80175cc:	181b      	addge	r3, r3, r0
 80175ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80175d2:	bfac      	ite	ge
 80175d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80175d6:	81a3      	strhlt	r3, [r4, #12]
 80175d8:	bd10      	pop	{r4, pc}

080175da <__swrite>:
 80175da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175de:	461f      	mov	r7, r3
 80175e0:	898b      	ldrh	r3, [r1, #12]
 80175e2:	05db      	lsls	r3, r3, #23
 80175e4:	4605      	mov	r5, r0
 80175e6:	460c      	mov	r4, r1
 80175e8:	4616      	mov	r6, r2
 80175ea:	d505      	bpl.n	80175f8 <__swrite+0x1e>
 80175ec:	2302      	movs	r3, #2
 80175ee:	2200      	movs	r2, #0
 80175f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f4:	f000 f9b6 	bl	8017964 <_lseek_r>
 80175f8:	89a3      	ldrh	r3, [r4, #12]
 80175fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017602:	81a3      	strh	r3, [r4, #12]
 8017604:	4632      	mov	r2, r6
 8017606:	463b      	mov	r3, r7
 8017608:	4628      	mov	r0, r5
 801760a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801760e:	f000 b869 	b.w	80176e4 <_write_r>

08017612 <__sseek>:
 8017612:	b510      	push	{r4, lr}
 8017614:	460c      	mov	r4, r1
 8017616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801761a:	f000 f9a3 	bl	8017964 <_lseek_r>
 801761e:	1c43      	adds	r3, r0, #1
 8017620:	89a3      	ldrh	r3, [r4, #12]
 8017622:	bf15      	itete	ne
 8017624:	6560      	strne	r0, [r4, #84]	; 0x54
 8017626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801762a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801762e:	81a3      	strheq	r3, [r4, #12]
 8017630:	bf18      	it	ne
 8017632:	81a3      	strhne	r3, [r4, #12]
 8017634:	bd10      	pop	{r4, pc}

08017636 <__sclose>:
 8017636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801763a:	f000 b8d3 	b.w	80177e4 <_close_r>
	...

08017640 <__swbuf_r>:
 8017640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017642:	460e      	mov	r6, r1
 8017644:	4614      	mov	r4, r2
 8017646:	4605      	mov	r5, r0
 8017648:	b118      	cbz	r0, 8017652 <__swbuf_r+0x12>
 801764a:	6983      	ldr	r3, [r0, #24]
 801764c:	b90b      	cbnz	r3, 8017652 <__swbuf_r+0x12>
 801764e:	f7ff fba1 	bl	8016d94 <__sinit>
 8017652:	4b21      	ldr	r3, [pc, #132]	; (80176d8 <__swbuf_r+0x98>)
 8017654:	429c      	cmp	r4, r3
 8017656:	d12a      	bne.n	80176ae <__swbuf_r+0x6e>
 8017658:	686c      	ldr	r4, [r5, #4]
 801765a:	69a3      	ldr	r3, [r4, #24]
 801765c:	60a3      	str	r3, [r4, #8]
 801765e:	89a3      	ldrh	r3, [r4, #12]
 8017660:	071a      	lsls	r2, r3, #28
 8017662:	d52e      	bpl.n	80176c2 <__swbuf_r+0x82>
 8017664:	6923      	ldr	r3, [r4, #16]
 8017666:	b363      	cbz	r3, 80176c2 <__swbuf_r+0x82>
 8017668:	6923      	ldr	r3, [r4, #16]
 801766a:	6820      	ldr	r0, [r4, #0]
 801766c:	1ac0      	subs	r0, r0, r3
 801766e:	6963      	ldr	r3, [r4, #20]
 8017670:	b2f6      	uxtb	r6, r6
 8017672:	4283      	cmp	r3, r0
 8017674:	4637      	mov	r7, r6
 8017676:	dc04      	bgt.n	8017682 <__swbuf_r+0x42>
 8017678:	4621      	mov	r1, r4
 801767a:	4628      	mov	r0, r5
 801767c:	f000 f948 	bl	8017910 <_fflush_r>
 8017680:	bb28      	cbnz	r0, 80176ce <__swbuf_r+0x8e>
 8017682:	68a3      	ldr	r3, [r4, #8]
 8017684:	3b01      	subs	r3, #1
 8017686:	60a3      	str	r3, [r4, #8]
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	1c5a      	adds	r2, r3, #1
 801768c:	6022      	str	r2, [r4, #0]
 801768e:	701e      	strb	r6, [r3, #0]
 8017690:	6963      	ldr	r3, [r4, #20]
 8017692:	3001      	adds	r0, #1
 8017694:	4283      	cmp	r3, r0
 8017696:	d004      	beq.n	80176a2 <__swbuf_r+0x62>
 8017698:	89a3      	ldrh	r3, [r4, #12]
 801769a:	07db      	lsls	r3, r3, #31
 801769c:	d519      	bpl.n	80176d2 <__swbuf_r+0x92>
 801769e:	2e0a      	cmp	r6, #10
 80176a0:	d117      	bne.n	80176d2 <__swbuf_r+0x92>
 80176a2:	4621      	mov	r1, r4
 80176a4:	4628      	mov	r0, r5
 80176a6:	f000 f933 	bl	8017910 <_fflush_r>
 80176aa:	b190      	cbz	r0, 80176d2 <__swbuf_r+0x92>
 80176ac:	e00f      	b.n	80176ce <__swbuf_r+0x8e>
 80176ae:	4b0b      	ldr	r3, [pc, #44]	; (80176dc <__swbuf_r+0x9c>)
 80176b0:	429c      	cmp	r4, r3
 80176b2:	d101      	bne.n	80176b8 <__swbuf_r+0x78>
 80176b4:	68ac      	ldr	r4, [r5, #8]
 80176b6:	e7d0      	b.n	801765a <__swbuf_r+0x1a>
 80176b8:	4b09      	ldr	r3, [pc, #36]	; (80176e0 <__swbuf_r+0xa0>)
 80176ba:	429c      	cmp	r4, r3
 80176bc:	bf08      	it	eq
 80176be:	68ec      	ldreq	r4, [r5, #12]
 80176c0:	e7cb      	b.n	801765a <__swbuf_r+0x1a>
 80176c2:	4621      	mov	r1, r4
 80176c4:	4628      	mov	r0, r5
 80176c6:	f000 f81f 	bl	8017708 <__swsetup_r>
 80176ca:	2800      	cmp	r0, #0
 80176cc:	d0cc      	beq.n	8017668 <__swbuf_r+0x28>
 80176ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80176d2:	4638      	mov	r0, r7
 80176d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176d6:	bf00      	nop
 80176d8:	0801aaa4 	.word	0x0801aaa4
 80176dc:	0801aac4 	.word	0x0801aac4
 80176e0:	0801aa84 	.word	0x0801aa84

080176e4 <_write_r>:
 80176e4:	b538      	push	{r3, r4, r5, lr}
 80176e6:	4c07      	ldr	r4, [pc, #28]	; (8017704 <_write_r+0x20>)
 80176e8:	4605      	mov	r5, r0
 80176ea:	4608      	mov	r0, r1
 80176ec:	4611      	mov	r1, r2
 80176ee:	2200      	movs	r2, #0
 80176f0:	6022      	str	r2, [r4, #0]
 80176f2:	461a      	mov	r2, r3
 80176f4:	f7e9 fd01 	bl	80010fa <_write>
 80176f8:	1c43      	adds	r3, r0, #1
 80176fa:	d102      	bne.n	8017702 <_write_r+0x1e>
 80176fc:	6823      	ldr	r3, [r4, #0]
 80176fe:	b103      	cbz	r3, 8017702 <_write_r+0x1e>
 8017700:	602b      	str	r3, [r5, #0]
 8017702:	bd38      	pop	{r3, r4, r5, pc}
 8017704:	24008344 	.word	0x24008344

08017708 <__swsetup_r>:
 8017708:	4b32      	ldr	r3, [pc, #200]	; (80177d4 <__swsetup_r+0xcc>)
 801770a:	b570      	push	{r4, r5, r6, lr}
 801770c:	681d      	ldr	r5, [r3, #0]
 801770e:	4606      	mov	r6, r0
 8017710:	460c      	mov	r4, r1
 8017712:	b125      	cbz	r5, 801771e <__swsetup_r+0x16>
 8017714:	69ab      	ldr	r3, [r5, #24]
 8017716:	b913      	cbnz	r3, 801771e <__swsetup_r+0x16>
 8017718:	4628      	mov	r0, r5
 801771a:	f7ff fb3b 	bl	8016d94 <__sinit>
 801771e:	4b2e      	ldr	r3, [pc, #184]	; (80177d8 <__swsetup_r+0xd0>)
 8017720:	429c      	cmp	r4, r3
 8017722:	d10f      	bne.n	8017744 <__swsetup_r+0x3c>
 8017724:	686c      	ldr	r4, [r5, #4]
 8017726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801772a:	b29a      	uxth	r2, r3
 801772c:	0715      	lsls	r5, r2, #28
 801772e:	d42c      	bmi.n	801778a <__swsetup_r+0x82>
 8017730:	06d0      	lsls	r0, r2, #27
 8017732:	d411      	bmi.n	8017758 <__swsetup_r+0x50>
 8017734:	2209      	movs	r2, #9
 8017736:	6032      	str	r2, [r6, #0]
 8017738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801773c:	81a3      	strh	r3, [r4, #12]
 801773e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017742:	e03e      	b.n	80177c2 <__swsetup_r+0xba>
 8017744:	4b25      	ldr	r3, [pc, #148]	; (80177dc <__swsetup_r+0xd4>)
 8017746:	429c      	cmp	r4, r3
 8017748:	d101      	bne.n	801774e <__swsetup_r+0x46>
 801774a:	68ac      	ldr	r4, [r5, #8]
 801774c:	e7eb      	b.n	8017726 <__swsetup_r+0x1e>
 801774e:	4b24      	ldr	r3, [pc, #144]	; (80177e0 <__swsetup_r+0xd8>)
 8017750:	429c      	cmp	r4, r3
 8017752:	bf08      	it	eq
 8017754:	68ec      	ldreq	r4, [r5, #12]
 8017756:	e7e6      	b.n	8017726 <__swsetup_r+0x1e>
 8017758:	0751      	lsls	r1, r2, #29
 801775a:	d512      	bpl.n	8017782 <__swsetup_r+0x7a>
 801775c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801775e:	b141      	cbz	r1, 8017772 <__swsetup_r+0x6a>
 8017760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017764:	4299      	cmp	r1, r3
 8017766:	d002      	beq.n	801776e <__swsetup_r+0x66>
 8017768:	4630      	mov	r0, r6
 801776a:	f7ff fba5 	bl	8016eb8 <_free_r>
 801776e:	2300      	movs	r3, #0
 8017770:	6363      	str	r3, [r4, #52]	; 0x34
 8017772:	89a3      	ldrh	r3, [r4, #12]
 8017774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017778:	81a3      	strh	r3, [r4, #12]
 801777a:	2300      	movs	r3, #0
 801777c:	6063      	str	r3, [r4, #4]
 801777e:	6923      	ldr	r3, [r4, #16]
 8017780:	6023      	str	r3, [r4, #0]
 8017782:	89a3      	ldrh	r3, [r4, #12]
 8017784:	f043 0308 	orr.w	r3, r3, #8
 8017788:	81a3      	strh	r3, [r4, #12]
 801778a:	6923      	ldr	r3, [r4, #16]
 801778c:	b94b      	cbnz	r3, 80177a2 <__swsetup_r+0x9a>
 801778e:	89a3      	ldrh	r3, [r4, #12]
 8017790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017798:	d003      	beq.n	80177a2 <__swsetup_r+0x9a>
 801779a:	4621      	mov	r1, r4
 801779c:	4630      	mov	r0, r6
 801779e:	f000 f917 	bl	80179d0 <__smakebuf_r>
 80177a2:	89a2      	ldrh	r2, [r4, #12]
 80177a4:	f012 0301 	ands.w	r3, r2, #1
 80177a8:	d00c      	beq.n	80177c4 <__swsetup_r+0xbc>
 80177aa:	2300      	movs	r3, #0
 80177ac:	60a3      	str	r3, [r4, #8]
 80177ae:	6963      	ldr	r3, [r4, #20]
 80177b0:	425b      	negs	r3, r3
 80177b2:	61a3      	str	r3, [r4, #24]
 80177b4:	6923      	ldr	r3, [r4, #16]
 80177b6:	b953      	cbnz	r3, 80177ce <__swsetup_r+0xc6>
 80177b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80177c0:	d1ba      	bne.n	8017738 <__swsetup_r+0x30>
 80177c2:	bd70      	pop	{r4, r5, r6, pc}
 80177c4:	0792      	lsls	r2, r2, #30
 80177c6:	bf58      	it	pl
 80177c8:	6963      	ldrpl	r3, [r4, #20]
 80177ca:	60a3      	str	r3, [r4, #8]
 80177cc:	e7f2      	b.n	80177b4 <__swsetup_r+0xac>
 80177ce:	2000      	movs	r0, #0
 80177d0:	e7f7      	b.n	80177c2 <__swsetup_r+0xba>
 80177d2:	bf00      	nop
 80177d4:	24000034 	.word	0x24000034
 80177d8:	0801aaa4 	.word	0x0801aaa4
 80177dc:	0801aac4 	.word	0x0801aac4
 80177e0:	0801aa84 	.word	0x0801aa84

080177e4 <_close_r>:
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4c06      	ldr	r4, [pc, #24]	; (8017800 <_close_r+0x1c>)
 80177e8:	2300      	movs	r3, #0
 80177ea:	4605      	mov	r5, r0
 80177ec:	4608      	mov	r0, r1
 80177ee:	6023      	str	r3, [r4, #0]
 80177f0:	f7e9 fc9f 	bl	8001132 <_close>
 80177f4:	1c43      	adds	r3, r0, #1
 80177f6:	d102      	bne.n	80177fe <_close_r+0x1a>
 80177f8:	6823      	ldr	r3, [r4, #0]
 80177fa:	b103      	cbz	r3, 80177fe <_close_r+0x1a>
 80177fc:	602b      	str	r3, [r5, #0]
 80177fe:	bd38      	pop	{r3, r4, r5, pc}
 8017800:	24008344 	.word	0x24008344

08017804 <__sflush_r>:
 8017804:	898a      	ldrh	r2, [r1, #12]
 8017806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801780a:	4605      	mov	r5, r0
 801780c:	0710      	lsls	r0, r2, #28
 801780e:	460c      	mov	r4, r1
 8017810:	d458      	bmi.n	80178c4 <__sflush_r+0xc0>
 8017812:	684b      	ldr	r3, [r1, #4]
 8017814:	2b00      	cmp	r3, #0
 8017816:	dc05      	bgt.n	8017824 <__sflush_r+0x20>
 8017818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801781a:	2b00      	cmp	r3, #0
 801781c:	dc02      	bgt.n	8017824 <__sflush_r+0x20>
 801781e:	2000      	movs	r0, #0
 8017820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017826:	2e00      	cmp	r6, #0
 8017828:	d0f9      	beq.n	801781e <__sflush_r+0x1a>
 801782a:	2300      	movs	r3, #0
 801782c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017830:	682f      	ldr	r7, [r5, #0]
 8017832:	6a21      	ldr	r1, [r4, #32]
 8017834:	602b      	str	r3, [r5, #0]
 8017836:	d032      	beq.n	801789e <__sflush_r+0x9a>
 8017838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801783a:	89a3      	ldrh	r3, [r4, #12]
 801783c:	075a      	lsls	r2, r3, #29
 801783e:	d505      	bpl.n	801784c <__sflush_r+0x48>
 8017840:	6863      	ldr	r3, [r4, #4]
 8017842:	1ac0      	subs	r0, r0, r3
 8017844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017846:	b10b      	cbz	r3, 801784c <__sflush_r+0x48>
 8017848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801784a:	1ac0      	subs	r0, r0, r3
 801784c:	2300      	movs	r3, #0
 801784e:	4602      	mov	r2, r0
 8017850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017852:	6a21      	ldr	r1, [r4, #32]
 8017854:	4628      	mov	r0, r5
 8017856:	47b0      	blx	r6
 8017858:	1c43      	adds	r3, r0, #1
 801785a:	89a3      	ldrh	r3, [r4, #12]
 801785c:	d106      	bne.n	801786c <__sflush_r+0x68>
 801785e:	6829      	ldr	r1, [r5, #0]
 8017860:	291d      	cmp	r1, #29
 8017862:	d848      	bhi.n	80178f6 <__sflush_r+0xf2>
 8017864:	4a29      	ldr	r2, [pc, #164]	; (801790c <__sflush_r+0x108>)
 8017866:	40ca      	lsrs	r2, r1
 8017868:	07d6      	lsls	r6, r2, #31
 801786a:	d544      	bpl.n	80178f6 <__sflush_r+0xf2>
 801786c:	2200      	movs	r2, #0
 801786e:	6062      	str	r2, [r4, #4]
 8017870:	04d9      	lsls	r1, r3, #19
 8017872:	6922      	ldr	r2, [r4, #16]
 8017874:	6022      	str	r2, [r4, #0]
 8017876:	d504      	bpl.n	8017882 <__sflush_r+0x7e>
 8017878:	1c42      	adds	r2, r0, #1
 801787a:	d101      	bne.n	8017880 <__sflush_r+0x7c>
 801787c:	682b      	ldr	r3, [r5, #0]
 801787e:	b903      	cbnz	r3, 8017882 <__sflush_r+0x7e>
 8017880:	6560      	str	r0, [r4, #84]	; 0x54
 8017882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017884:	602f      	str	r7, [r5, #0]
 8017886:	2900      	cmp	r1, #0
 8017888:	d0c9      	beq.n	801781e <__sflush_r+0x1a>
 801788a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801788e:	4299      	cmp	r1, r3
 8017890:	d002      	beq.n	8017898 <__sflush_r+0x94>
 8017892:	4628      	mov	r0, r5
 8017894:	f7ff fb10 	bl	8016eb8 <_free_r>
 8017898:	2000      	movs	r0, #0
 801789a:	6360      	str	r0, [r4, #52]	; 0x34
 801789c:	e7c0      	b.n	8017820 <__sflush_r+0x1c>
 801789e:	2301      	movs	r3, #1
 80178a0:	4628      	mov	r0, r5
 80178a2:	47b0      	blx	r6
 80178a4:	1c41      	adds	r1, r0, #1
 80178a6:	d1c8      	bne.n	801783a <__sflush_r+0x36>
 80178a8:	682b      	ldr	r3, [r5, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d0c5      	beq.n	801783a <__sflush_r+0x36>
 80178ae:	2b1d      	cmp	r3, #29
 80178b0:	d001      	beq.n	80178b6 <__sflush_r+0xb2>
 80178b2:	2b16      	cmp	r3, #22
 80178b4:	d101      	bne.n	80178ba <__sflush_r+0xb6>
 80178b6:	602f      	str	r7, [r5, #0]
 80178b8:	e7b1      	b.n	801781e <__sflush_r+0x1a>
 80178ba:	89a3      	ldrh	r3, [r4, #12]
 80178bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178c0:	81a3      	strh	r3, [r4, #12]
 80178c2:	e7ad      	b.n	8017820 <__sflush_r+0x1c>
 80178c4:	690f      	ldr	r7, [r1, #16]
 80178c6:	2f00      	cmp	r7, #0
 80178c8:	d0a9      	beq.n	801781e <__sflush_r+0x1a>
 80178ca:	0793      	lsls	r3, r2, #30
 80178cc:	680e      	ldr	r6, [r1, #0]
 80178ce:	bf08      	it	eq
 80178d0:	694b      	ldreq	r3, [r1, #20]
 80178d2:	600f      	str	r7, [r1, #0]
 80178d4:	bf18      	it	ne
 80178d6:	2300      	movne	r3, #0
 80178d8:	eba6 0807 	sub.w	r8, r6, r7
 80178dc:	608b      	str	r3, [r1, #8]
 80178de:	f1b8 0f00 	cmp.w	r8, #0
 80178e2:	dd9c      	ble.n	801781e <__sflush_r+0x1a>
 80178e4:	4643      	mov	r3, r8
 80178e6:	463a      	mov	r2, r7
 80178e8:	6a21      	ldr	r1, [r4, #32]
 80178ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80178ec:	4628      	mov	r0, r5
 80178ee:	47b0      	blx	r6
 80178f0:	2800      	cmp	r0, #0
 80178f2:	dc06      	bgt.n	8017902 <__sflush_r+0xfe>
 80178f4:	89a3      	ldrh	r3, [r4, #12]
 80178f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178fa:	81a3      	strh	r3, [r4, #12]
 80178fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017900:	e78e      	b.n	8017820 <__sflush_r+0x1c>
 8017902:	4407      	add	r7, r0
 8017904:	eba8 0800 	sub.w	r8, r8, r0
 8017908:	e7e9      	b.n	80178de <__sflush_r+0xda>
 801790a:	bf00      	nop
 801790c:	20400001 	.word	0x20400001

08017910 <_fflush_r>:
 8017910:	b538      	push	{r3, r4, r5, lr}
 8017912:	690b      	ldr	r3, [r1, #16]
 8017914:	4605      	mov	r5, r0
 8017916:	460c      	mov	r4, r1
 8017918:	b1db      	cbz	r3, 8017952 <_fflush_r+0x42>
 801791a:	b118      	cbz	r0, 8017924 <_fflush_r+0x14>
 801791c:	6983      	ldr	r3, [r0, #24]
 801791e:	b90b      	cbnz	r3, 8017924 <_fflush_r+0x14>
 8017920:	f7ff fa38 	bl	8016d94 <__sinit>
 8017924:	4b0c      	ldr	r3, [pc, #48]	; (8017958 <_fflush_r+0x48>)
 8017926:	429c      	cmp	r4, r3
 8017928:	d109      	bne.n	801793e <_fflush_r+0x2e>
 801792a:	686c      	ldr	r4, [r5, #4]
 801792c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017930:	b17b      	cbz	r3, 8017952 <_fflush_r+0x42>
 8017932:	4621      	mov	r1, r4
 8017934:	4628      	mov	r0, r5
 8017936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801793a:	f7ff bf63 	b.w	8017804 <__sflush_r>
 801793e:	4b07      	ldr	r3, [pc, #28]	; (801795c <_fflush_r+0x4c>)
 8017940:	429c      	cmp	r4, r3
 8017942:	d101      	bne.n	8017948 <_fflush_r+0x38>
 8017944:	68ac      	ldr	r4, [r5, #8]
 8017946:	e7f1      	b.n	801792c <_fflush_r+0x1c>
 8017948:	4b05      	ldr	r3, [pc, #20]	; (8017960 <_fflush_r+0x50>)
 801794a:	429c      	cmp	r4, r3
 801794c:	bf08      	it	eq
 801794e:	68ec      	ldreq	r4, [r5, #12]
 8017950:	e7ec      	b.n	801792c <_fflush_r+0x1c>
 8017952:	2000      	movs	r0, #0
 8017954:	bd38      	pop	{r3, r4, r5, pc}
 8017956:	bf00      	nop
 8017958:	0801aaa4 	.word	0x0801aaa4
 801795c:	0801aac4 	.word	0x0801aac4
 8017960:	0801aa84 	.word	0x0801aa84

08017964 <_lseek_r>:
 8017964:	b538      	push	{r3, r4, r5, lr}
 8017966:	4c07      	ldr	r4, [pc, #28]	; (8017984 <_lseek_r+0x20>)
 8017968:	4605      	mov	r5, r0
 801796a:	4608      	mov	r0, r1
 801796c:	4611      	mov	r1, r2
 801796e:	2200      	movs	r2, #0
 8017970:	6022      	str	r2, [r4, #0]
 8017972:	461a      	mov	r2, r3
 8017974:	f7e9 fc04 	bl	8001180 <_lseek>
 8017978:	1c43      	adds	r3, r0, #1
 801797a:	d102      	bne.n	8017982 <_lseek_r+0x1e>
 801797c:	6823      	ldr	r3, [r4, #0]
 801797e:	b103      	cbz	r3, 8017982 <_lseek_r+0x1e>
 8017980:	602b      	str	r3, [r5, #0]
 8017982:	bd38      	pop	{r3, r4, r5, pc}
 8017984:	24008344 	.word	0x24008344

08017988 <__swhatbuf_r>:
 8017988:	b570      	push	{r4, r5, r6, lr}
 801798a:	460e      	mov	r6, r1
 801798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017990:	2900      	cmp	r1, #0
 8017992:	b096      	sub	sp, #88	; 0x58
 8017994:	4614      	mov	r4, r2
 8017996:	461d      	mov	r5, r3
 8017998:	da07      	bge.n	80179aa <__swhatbuf_r+0x22>
 801799a:	2300      	movs	r3, #0
 801799c:	602b      	str	r3, [r5, #0]
 801799e:	89b3      	ldrh	r3, [r6, #12]
 80179a0:	061a      	lsls	r2, r3, #24
 80179a2:	d410      	bmi.n	80179c6 <__swhatbuf_r+0x3e>
 80179a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179a8:	e00e      	b.n	80179c8 <__swhatbuf_r+0x40>
 80179aa:	466a      	mov	r2, sp
 80179ac:	f000 f864 	bl	8017a78 <_fstat_r>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	dbf2      	blt.n	801799a <__swhatbuf_r+0x12>
 80179b4:	9a01      	ldr	r2, [sp, #4]
 80179b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80179ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80179be:	425a      	negs	r2, r3
 80179c0:	415a      	adcs	r2, r3
 80179c2:	602a      	str	r2, [r5, #0]
 80179c4:	e7ee      	b.n	80179a4 <__swhatbuf_r+0x1c>
 80179c6:	2340      	movs	r3, #64	; 0x40
 80179c8:	2000      	movs	r0, #0
 80179ca:	6023      	str	r3, [r4, #0]
 80179cc:	b016      	add	sp, #88	; 0x58
 80179ce:	bd70      	pop	{r4, r5, r6, pc}

080179d0 <__smakebuf_r>:
 80179d0:	898b      	ldrh	r3, [r1, #12]
 80179d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80179d4:	079d      	lsls	r5, r3, #30
 80179d6:	4606      	mov	r6, r0
 80179d8:	460c      	mov	r4, r1
 80179da:	d507      	bpl.n	80179ec <__smakebuf_r+0x1c>
 80179dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80179e0:	6023      	str	r3, [r4, #0]
 80179e2:	6123      	str	r3, [r4, #16]
 80179e4:	2301      	movs	r3, #1
 80179e6:	6163      	str	r3, [r4, #20]
 80179e8:	b002      	add	sp, #8
 80179ea:	bd70      	pop	{r4, r5, r6, pc}
 80179ec:	ab01      	add	r3, sp, #4
 80179ee:	466a      	mov	r2, sp
 80179f0:	f7ff ffca 	bl	8017988 <__swhatbuf_r>
 80179f4:	9900      	ldr	r1, [sp, #0]
 80179f6:	4605      	mov	r5, r0
 80179f8:	4630      	mov	r0, r6
 80179fa:	f7ff faab 	bl	8016f54 <_malloc_r>
 80179fe:	b948      	cbnz	r0, 8017a14 <__smakebuf_r+0x44>
 8017a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a04:	059a      	lsls	r2, r3, #22
 8017a06:	d4ef      	bmi.n	80179e8 <__smakebuf_r+0x18>
 8017a08:	f023 0303 	bic.w	r3, r3, #3
 8017a0c:	f043 0302 	orr.w	r3, r3, #2
 8017a10:	81a3      	strh	r3, [r4, #12]
 8017a12:	e7e3      	b.n	80179dc <__smakebuf_r+0xc>
 8017a14:	4b0d      	ldr	r3, [pc, #52]	; (8017a4c <__smakebuf_r+0x7c>)
 8017a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8017a18:	89a3      	ldrh	r3, [r4, #12]
 8017a1a:	6020      	str	r0, [r4, #0]
 8017a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a20:	81a3      	strh	r3, [r4, #12]
 8017a22:	9b00      	ldr	r3, [sp, #0]
 8017a24:	6163      	str	r3, [r4, #20]
 8017a26:	9b01      	ldr	r3, [sp, #4]
 8017a28:	6120      	str	r0, [r4, #16]
 8017a2a:	b15b      	cbz	r3, 8017a44 <__smakebuf_r+0x74>
 8017a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a30:	4630      	mov	r0, r6
 8017a32:	f000 f833 	bl	8017a9c <_isatty_r>
 8017a36:	b128      	cbz	r0, 8017a44 <__smakebuf_r+0x74>
 8017a38:	89a3      	ldrh	r3, [r4, #12]
 8017a3a:	f023 0303 	bic.w	r3, r3, #3
 8017a3e:	f043 0301 	orr.w	r3, r3, #1
 8017a42:	81a3      	strh	r3, [r4, #12]
 8017a44:	89a3      	ldrh	r3, [r4, #12]
 8017a46:	431d      	orrs	r5, r3
 8017a48:	81a5      	strh	r5, [r4, #12]
 8017a4a:	e7cd      	b.n	80179e8 <__smakebuf_r+0x18>
 8017a4c:	08016d5d 	.word	0x08016d5d

08017a50 <__malloc_lock>:
 8017a50:	4770      	bx	lr

08017a52 <__malloc_unlock>:
 8017a52:	4770      	bx	lr

08017a54 <_read_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	4c07      	ldr	r4, [pc, #28]	; (8017a74 <_read_r+0x20>)
 8017a58:	4605      	mov	r5, r0
 8017a5a:	4608      	mov	r0, r1
 8017a5c:	4611      	mov	r1, r2
 8017a5e:	2200      	movs	r2, #0
 8017a60:	6022      	str	r2, [r4, #0]
 8017a62:	461a      	mov	r2, r3
 8017a64:	f7e9 fb2c 	bl	80010c0 <_read>
 8017a68:	1c43      	adds	r3, r0, #1
 8017a6a:	d102      	bne.n	8017a72 <_read_r+0x1e>
 8017a6c:	6823      	ldr	r3, [r4, #0]
 8017a6e:	b103      	cbz	r3, 8017a72 <_read_r+0x1e>
 8017a70:	602b      	str	r3, [r5, #0]
 8017a72:	bd38      	pop	{r3, r4, r5, pc}
 8017a74:	24008344 	.word	0x24008344

08017a78 <_fstat_r>:
 8017a78:	b538      	push	{r3, r4, r5, lr}
 8017a7a:	4c07      	ldr	r4, [pc, #28]	; (8017a98 <_fstat_r+0x20>)
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	4605      	mov	r5, r0
 8017a80:	4608      	mov	r0, r1
 8017a82:	4611      	mov	r1, r2
 8017a84:	6023      	str	r3, [r4, #0]
 8017a86:	f7e9 fb60 	bl	800114a <_fstat>
 8017a8a:	1c43      	adds	r3, r0, #1
 8017a8c:	d102      	bne.n	8017a94 <_fstat_r+0x1c>
 8017a8e:	6823      	ldr	r3, [r4, #0]
 8017a90:	b103      	cbz	r3, 8017a94 <_fstat_r+0x1c>
 8017a92:	602b      	str	r3, [r5, #0]
 8017a94:	bd38      	pop	{r3, r4, r5, pc}
 8017a96:	bf00      	nop
 8017a98:	24008344 	.word	0x24008344

08017a9c <_isatty_r>:
 8017a9c:	b538      	push	{r3, r4, r5, lr}
 8017a9e:	4c06      	ldr	r4, [pc, #24]	; (8017ab8 <_isatty_r+0x1c>)
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	4605      	mov	r5, r0
 8017aa4:	4608      	mov	r0, r1
 8017aa6:	6023      	str	r3, [r4, #0]
 8017aa8:	f7e9 fb5f 	bl	800116a <_isatty>
 8017aac:	1c43      	adds	r3, r0, #1
 8017aae:	d102      	bne.n	8017ab6 <_isatty_r+0x1a>
 8017ab0:	6823      	ldr	r3, [r4, #0]
 8017ab2:	b103      	cbz	r3, 8017ab6 <_isatty_r+0x1a>
 8017ab4:	602b      	str	r3, [r5, #0]
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	24008344 	.word	0x24008344

08017abc <_init>:
 8017abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017abe:	bf00      	nop
 8017ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ac2:	bc08      	pop	{r3}
 8017ac4:	469e      	mov	lr, r3
 8017ac6:	4770      	bx	lr

08017ac8 <_fini>:
 8017ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aca:	bf00      	nop
 8017acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ace:	bc08      	pop	{r3}
 8017ad0:	469e      	mov	lr, r3
 8017ad2:	4770      	bx	lr
