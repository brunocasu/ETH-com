
ETH-com_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001828c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000308c  0801852c  0801852c  0002852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b5b8  0801b5b8  0002b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b5c0  0801b5c0  0002b5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b5c4  0801b5c4  0002b5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0801b5c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000082ec  24000098  0801b660  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24008384  0801b660  00038384  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005a299  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008f53  00000000  00000000  0008a35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002a48  00000000  00000000  000932b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002850  00000000  00000000  00095d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004a6d8  00000000  00000000  00098550  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00032eee  00000000  00000000  000e2c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001aa043  00000000  00000000  00115b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002bfb59  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b888  00000000  00000000  002bfbd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018514 	.word	0x08018514

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08018514 	.word	0x08018514

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <SCB_EnableICache+0x3c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <SCB_EnableICache+0x3c>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <SCB_EnableICache+0x3c>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <SCB_EnableDCache+0x7c>)
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800081c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	0b5b      	lsrs	r3, r3, #13
 8000822:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000826:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000830:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	015a      	lsls	r2, r3, #5
 8000836:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800083a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000842:	4313      	orrs	r3, r2
 8000844:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1ef      	bne.n	8000832 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	60fa      	str	r2, [r7, #12]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e5      	bne.n	8000828 <SCB_EnableDCache+0x24>
 800085c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <SCB_EnableDCache+0x7c>)
 8000866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086a:	6153      	str	r3, [r2, #20]
 800086c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800088a:	f000 fb5f 	bl	8000f4c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800088e:	f7ff ff99 	bl	80007c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000892:	f7ff ffb7 	bl	8000804 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800089c:	bf00      	nop
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <main+0xf8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <main+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	61fa      	str	r2, [r7, #28]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dcf4      	bgt.n	800089e <main+0x1a>
  if ( timeout < 0 )
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da01      	bge.n	80008be <main+0x3a>
  {
  Error_Handler();
 80008ba:	f000 fba1 	bl	8001000 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 ff21 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f86b 	bl	800099c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <main+0xf8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a2b      	ldr	r2, [pc, #172]	; (800097c <main+0xf8>)
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <main+0xf8>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f003 f973 	bl	8003bd0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f003 f989 	bl	8003c04 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008f8:	bf00      	nop
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <main+0xf8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <main+0x8c>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	61fa      	str	r2, [r7, #28]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dcf4      	bgt.n	80008fa <main+0x76>
if ( timeout < 0 )
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	2b00      	cmp	r3, #0
 8000914:	da01      	bge.n	800091a <main+0x96>
{
Error_Handler();
 8000916:	f000 fb73 	bl	8001000 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 f98b 	bl	8000c34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800091e:	f000 f90b 	bl	8000b38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000922:	f000 f955 	bl	8000bd0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin for RED LED - NUCLEO LED3 on PB14*/
  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 | GPIO_PIN_0, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f244 0101 	movw	r1, #16385	; 0x4001
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <main+0xfc>)
 800092e:	f003 f935 	bl	8003b9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_0;
 8000932:	f244 0301 	movw	r3, #16385	; 0x4001
 8000936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <main+0xfc>)
 800094c:	f002 ff76 	bl	800383c <HAL_GPIO_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000950:	f008 f99e 	bl	8008c90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <main+0x100>)
 8000956:	2100      	movs	r1, #0
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <main+0x104>)
 800095a:	f008 fa2b 	bl	8008db4 <osThreadNew>
 800095e:	4602      	mov	r2, r0
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <main+0x108>)
 8000962:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  udp_reciever_task_handle = osThreadNew(udp_reciever_task, NULL, &udp_reciever_task_attributes);
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <main+0x10c>)
 8000966:	2100      	movs	r1, #0
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <main+0x110>)
 800096a:	f008 fa23 	bl	8008db4 <osThreadNew>
 800096e:	4602      	mov	r2, r0
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <main+0x114>)
 8000972:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000974:	f008 f9c0 	bl	8008cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0xf4>
 800097a:	bf00      	nop
 800097c:	58024400 	.word	0x58024400
 8000980:	58020400 	.word	0x58020400
 8000984:	0801b390 	.word	0x0801b390
 8000988:	08000e15 	.word	0x08000e15
 800098c:	24004b70 	.word	0x24004b70
 8000990:	0801b3b4 	.word	0x0801b3b4
 8000994:	08000d01 	.word	0x08000d01
 8000998:	24005008 	.word	0x24005008

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0cc      	sub	sp, #304	; 0x130
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009a6:	224c      	movs	r2, #76	; 0x4c
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f016 fcd9 	bl	8017362 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009b4:	2220      	movs	r2, #32
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f016 fcd2 	bl	8017362 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4618      	mov	r0, r3
 80009c4:	23bc      	movs	r3, #188	; 0xbc
 80009c6:	461a      	mov	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f016 fcca 	bl	8017362 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ce:	2004      	movs	r0, #4
 80009d0:	f003 fa74 	bl	8003ebc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	4b53      	ldr	r3, [pc, #332]	; (8000b28 <SystemClock_Config+0x18c>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <SystemClock_Config+0x18c>)
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009e6:	4b50      	ldr	r3, [pc, #320]	; (8000b28 <SystemClock_Config+0x18c>)
 80009e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ea:	f003 0201 	and.w	r2, r3, #1
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <SystemClock_Config+0x190>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009fa:	4a4c      	ldr	r2, [pc, #304]	; (8000b2c <SystemClock_Config+0x190>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <SystemClock_Config+0x190>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a12:	bf00      	nop
 8000a14:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <SystemClock_Config+0x190>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a20:	d1f8      	bne.n	8000a14 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a22:	4b43      	ldr	r3, [pc, #268]	; (8000b30 <SystemClock_Config+0x194>)
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	f023 0303 	bic.w	r3, r3, #3
 8000a2a:	4a41      	ldr	r2, [pc, #260]	; (8000b30 <SystemClock_Config+0x194>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fa9d 	bl	8003f90 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a5c:	f000 fad0 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	233f      	movs	r3, #63	; 0x3f
 8000a62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 fe8a 	bl	80047b0 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000aa2:	f000 faad 	bl	8001000 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <SystemClock_Config+0x198>)
 8000aac:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2218      	movs	r2, #24
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2204      	movs	r2, #4
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2200      	movs	r2, #0
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fa17 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x17c>
  {
    Error_Handler();
 8000b14:	f000 fa74 	bl	8001000 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b18:	f003 fa2a 	bl	8003f70 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b1c:	bf00      	nop
 8000b1e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58000400 	.word	0x58000400
 8000b2c:	58024800 	.word	0x58024800
 8000b30:	58024400 	.word	0x58024400
 8000b34:	00040002 	.word	0x00040002

08000b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b3e:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <MX_USART3_UART_Init+0x94>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b80:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b82:	f005 ff73 	bl	8006a6c <HAL_UART_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b8c:	f000 fa38 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b94:	f006 ff0d 	bl	80079b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9e:	f000 fa2f 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000ba6:	f006 ff42 	bl	8007a2e <HAL_UARTEx_SetRxFifoThreshold>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb0:	f000 fa26 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000bb6:	f006 fec3 	bl	8007940 <HAL_UARTEx_DisableFifoMode>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc0:	f000 fa1e 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24004b74 	.word	0x24004b74
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bdc:	2209      	movs	r2, #9
 8000bde:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be2:	2202      	movs	r2, #2
 8000be4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c18:	f003 f808 	bl	8003c2c <HAL_PCD_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c22:	f000 f9ed 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	24004c00 	.word	0x24004c00
 8000c30:	40080000 	.word	0x40080000

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

}
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	58024400 	.word	0x58024400

08000d00 <udp_reciever_task>:

/* USER CODE BEGIN 4 */
void udp_reciever_task (void *argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	udp_led_recv_semphr = xSemaphoreCreateBinary();
 8000d08:	2203      	movs	r2, #3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f009 fb12 	bl	800a336 <xQueueGenericCreate>
 8000d12:	4602      	mov	r2, r0
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <udp_reciever_task+0x64>)
 8000d16:	601a      	str	r2, [r3, #0]
	lwip_init_ready_semphr = xSemaphoreCreateBinary();
 8000d18:	2203      	movs	r2, #3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f009 fb0a 	bl	800a336 <xQueueGenericCreate>
 8000d22:	4602      	mov	r2, r0
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <udp_reciever_task+0x68>)
 8000d26:	601a      	str	r2, [r3, #0]

	xSemaphoreTake (lwip_init_ready_semphr, portMAX_DELAY);
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <udp_reciever_task+0x68>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d30:	4618      	mov	r0, r3
 8000d32:	f009 ff71 	bl	800ac18 <xQueueSemaphoreTake>

	udp_echo_init();
 8000d36:	f000 f84b 	bl	8000dd0 <udp_echo_init>
	for(;;)
	{
		osDelay(80);
 8000d3a:	2050      	movs	r0, #80	; 0x50
 8000d3c:	f008 f8e0 	bl	8008f00 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2101      	movs	r1, #1
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <udp_reciever_task+0x6c>)
 8000d46:	f002 ff29 	bl	8003b9c <HAL_GPIO_WritePin>
		xSemaphoreTake (udp_led_recv_semphr, portMAX_DELAY);
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <udp_reciever_task+0x64>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d52:	4618      	mov	r0, r3
 8000d54:	f009 ff60 	bl	800ac18 <xQueueSemaphoreTake>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <udp_reciever_task+0x6c>)
 8000d5e:	f002 ff1d 	bl	8003b9c <HAL_GPIO_WritePin>
		osDelay(80);
 8000d62:	e7ea      	b.n	8000d3a <udp_reciever_task+0x3a>
 8000d64:	240000b4 	.word	0x240000b4
 8000d68:	240000b8 	.word	0x240000b8
 8000d6c:	58020400 	.word	0x58020400

08000d70 <udp_echo_recv>:
	}
}

void udp_echo_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
	static BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	if (p != NULL) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d01a      	beq.n	8000dba <udp_echo_recv+0x4a>
        /* send received packet back to sender */
        udp_sendto(pcb, p, addr, port);
 8000d84:	8b3b      	ldrh	r3, [r7, #24]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	68b8      	ldr	r0, [r7, #8]
 8000d8c:	f015 ff7e 	bl	8016c8c <udp_sendto>
        /* free the pbuf */
        pbuf_free(p);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f00f fd77 	bl	8010884 <pbuf_free>

        xSemaphoreGiveFromISR(udp_led_recv_semphr, &xHigherPriorityTaskWoken);
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <udp_echo_recv+0x54>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	490b      	ldr	r1, [pc, #44]	; (8000dc8 <udp_echo_recv+0x58>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f009 fdd5 	bl	800a94c <xQueueGiveFromISR>
    	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <udp_echo_recv+0x58>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <udp_echo_recv+0x4a>
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <udp_echo_recv+0x5c>)
 8000dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	f3bf 8f4f 	dsb	sy
 8000db6:	f3bf 8f6f 	isb	sy
    }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	240000b4 	.word	0x240000b4
 8000dc8:	240000bc 	.word	0x240000bc
 8000dcc:	e000ed04 	.word	0xe000ed04

08000dd0 <udp_echo_init>:

void udp_echo_init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
    struct udp_pcb * pcb;

    /* get new pcb */
    pcb = udp_new();
 8000dd6:	f016 fa25 	bl	8017224 <udp_new>
 8000dda:	6078      	str	r0, [r7, #4]
    if (pcb == NULL) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00d      	beq.n	8000dfe <udp_echo_init+0x2e>
        LWIP_DEBUGF(UDP_DEBUG, ("udp_new failed!\n"));
        return;
    }

    /* bind to any IP address on port 7 */
    if (udp_bind(pcb, IP_ADDR_ANY, 7) != ERR_OK) {
 8000de2:	2207      	movs	r2, #7
 8000de4:	4909      	ldr	r1, [pc, #36]	; (8000e0c <udp_echo_init+0x3c>)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f016 f906 	bl	8016ff8 <udp_bind>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d107      	bne.n	8000e02 <udp_echo_init+0x32>
        return;
    }

    /* set udp_echo_recv() as callback function
       for received packets */
    udp_recv(pcb, udp_echo_recv, NULL);
 8000df2:	2200      	movs	r2, #0
 8000df4:	4906      	ldr	r1, [pc, #24]	; (8000e10 <udp_echo_init+0x40>)
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f016 f9f4 	bl	80171e4 <udp_recv>
 8000dfc:	e002      	b.n	8000e04 <udp_echo_init+0x34>
        return;
 8000dfe:	bf00      	nop
 8000e00:	e000      	b.n	8000e04 <udp_echo_init+0x34>
        return;
 8000e02:	bf00      	nop
}
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0801b40c 	.word	0x0801b40c
 8000e10:	08000d71 	.word	0x08000d71

08000e14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b08d      	sub	sp, #52	; 0x34
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e1c:	f007 f958 	bl	80080d0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  const char* str_message = "UDP MSG number: ";
 8000e20:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <StartDefaultTask+0x11c>)
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char* end_message = "- MSG sent from NUCLEO\n\r";
 8000e24:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <StartDefaultTask+0x120>)
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  static uint32_t msg_counter = 0;
  size_t str_size;
  char num_message[10] = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	811a      	strh	r2, [r3, #8]
  char *message;
  osDelay(1000);
 8000e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e38:	f008 f862 	bl	8008f00 <osDelay>

  ip_addr_t PC_IPADDR;
  IP_ADDR4(&PC_IPADDR, 192, 168, 1, 100);
 8000e3c:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <StartDefaultTask+0x124>)
 8000e3e:	60bb      	str	r3, [r7, #8]

  struct udp_pcb* my_udp = udp_new();
 8000e40:	f016 f9f0 	bl	8017224 <udp_new>
 8000e44:	6278      	str	r0, [r7, #36]	; 0x24
  udp_connect(my_udp, &PC_IPADDR, 55151);
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	f24d 726f 	movw	r2, #55151	; 0xd76f
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e52:	f016 f959 	bl	8017108 <udp_connect>
  struct pbuf* udp_buffer = NULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  xSemaphoreGive(lwip_init_ready_semphr);
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <StartDefaultTask+0x128>)
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	f009 fbe4 	bl	800a630 <xQueueGenericSend>
  message = pvPortMalloc( (strlen(str_message)) + (strlen(end_message)) +10);
 8000e68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e6a:	f7ff fa39 	bl	80002e0 <strlen>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e72:	f7ff fa35 	bl	80002e0 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4423      	add	r3, r4
 8000e7a:	330a      	adds	r3, #10
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f008 fcb1 	bl	80097e4 <pvPortMalloc>
 8000e82:	61f8      	str	r0, [r7, #28]

  /* Infinite loop */
  for (;;) {
	msg_counter++;
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <StartDefaultTask+0x12c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <StartDefaultTask+0x12c>)
 8000e8c:	6013      	str	r3, [r2, #0]
	str_size = sprintf(num_message, "%lx", msg_counter);
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <StartDefaultTask+0x12c>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	492b      	ldr	r1, [pc, #172]	; (8000f44 <StartDefaultTask+0x130>)
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f016 fab7 	bl	801740c <siprintf>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	61bb      	str	r3, [r7, #24]

	strcat(message, str_message);
 8000ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ea4:	69f8      	ldr	r0, [r7, #28]
 8000ea6:	f016 fad1 	bl	801744c <strcat>
	strcat(message, num_message);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	69f8      	ldr	r0, [r7, #28]
 8000eb2:	f016 facb 	bl	801744c <strcat>
	strcat(message, end_message);
 8000eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000eb8:	69f8      	ldr	r0, [r7, #28]
 8000eba:	f016 fac7 	bl	801744c <strcat>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec4:	4820      	ldr	r0, [pc, #128]	; (8000f48 <StartDefaultTask+0x134>)
 8000ec6:	f002 fe69 	bl	8003b9c <HAL_GPIO_WritePin>
    osDelay(920);
 8000eca:	f44f 7066 	mov.w	r0, #920	; 0x398
 8000ece:	f008 f817 	bl	8008f00 <osDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <StartDefaultTask+0x134>)
 8000eda:	f002 fe5f 	bl	8003b9c <HAL_GPIO_WritePin>
    udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8000ede:	69f8      	ldr	r0, [r7, #28]
 8000ee0:	f7ff f9fe 	bl	80002e0 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000eec:	4619      	mov	r1, r3
 8000eee:	2036      	movs	r0, #54	; 0x36
 8000ef0:	f00f f9e8 	bl	80102c4 <pbuf_alloc>
 8000ef4:	6238      	str	r0, [r7, #32]
    if (udp_buffer != NULL)
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d011      	beq.n	8000f20 <StartDefaultTask+0x10c>
    {
      memcpy(udp_buffer->payload, message, strlen(message));
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	685c      	ldr	r4, [r3, #4]
 8000f00:	69f8      	ldr	r0, [r7, #28]
 8000f02:	f7ff f9ed 	bl	80002e0 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	69f9      	ldr	r1, [r7, #28]
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f016 fa04 	bl	801731a <memcpy>
      udp_send(my_udp, udp_buffer);
 8000f12:	6a39      	ldr	r1, [r7, #32]
 8000f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f16:	f015 fe85 	bl	8016c24 <udp_send>
      pbuf_free(udp_buffer);
 8000f1a:	6a38      	ldr	r0, [r7, #32]
 8000f1c:	f00f fcb2 	bl	8010884 <pbuf_free>

    }
    osDelay(80);
 8000f20:	2050      	movs	r0, #80	; 0x50
 8000f22:	f007 ffed 	bl	8008f00 <osDelay>
    //vPortFree(message);
    *message = '\0';
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	msg_counter++;
 8000f2c:	e7aa      	b.n	8000e84 <StartDefaultTask+0x70>
 8000f2e:	bf00      	nop
 8000f30:	08018540 	.word	0x08018540
 8000f34:	08018554 	.word	0x08018554
 8000f38:	6401a8c0 	.word	0x6401a8c0
 8000f3c:	240000b8 	.word	0x240000b8
 8000f40:	240000c0 	.word	0x240000c0
 8000f44:	08018570 	.word	0x08018570
 8000f48:	58020400 	.word	0x58020400

08000f4c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f5e:	f000 fd4f 	bl	8001a00 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f62:	2301      	movs	r3, #1
 8000f64:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MPU_Config+0x8c>)
 8000f6c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000f6e:	230e      	movs	r3, #14
 8000f70:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fd69 	bl	8001a68 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MPU_Config+0x8c>)
 8000fa0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fd4f 	bl	8001a68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f000 fd2e 	bl	8001a2c <HAL_MPU_Enable>

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	30040000 	.word	0x30040000

08000fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fee:	f000 fbc5 	bl	800177c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40001400 	.word	0x40001400

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  for(;;);
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x4>
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_MspInit+0x30>)
 8001010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x30>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x30>)
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	58024400 	.word	0x58024400

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <HAL_UART_MspInit+0x88>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12e      	bne.n	80010bc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_UART_MspInit+0x8c>)
 8001060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <HAL_UART_MspInit+0x8c>)
 8001066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800106a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_UART_MspInit+0x8c>)
 8001070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_UART_MspInit+0x8c>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <HAL_UART_MspInit+0x8c>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_UART_MspInit+0x8c>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800109a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ac:	2307      	movs	r3, #7
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_UART_MspInit+0x90>)
 80010b8:	f002 fbc0 	bl	800383c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40004800 	.word	0x40004800
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020c00 	.word	0x58020c00

080010d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <HAL_PCD_MspInit+0xa4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d13b      	bne.n	800116a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_PCD_MspInit+0xa8>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_PCD_MspInit+0xa8>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_PCD_MspInit+0xa8>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001110:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001122:	230a      	movs	r3, #10
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <HAL_PCD_MspInit+0xac>)
 800112e:	f002 fb85 	bl	800383c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <HAL_PCD_MspInit+0xac>)
 8001148:	f002 fb78 	bl	800383c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_PCD_MspInit+0xa8>)
 800114e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_PCD_MspInit+0xa8>)
 8001154:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001158:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_PCD_MspInit+0xa8>)
 800115e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40080000 	.word	0x40080000
 8001178:	58024400 	.word	0x58024400
 800117c:	58020000 	.word	0x58020000

08001180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	2037      	movs	r0, #55	; 0x37
 8001196:	f000 fc0b 	bl	80019b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800119a:	2037      	movs	r0, #55	; 0x37
 800119c:	f000 fc22 	bl	80019e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_InitTick+0xa4>)
 80011a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a6:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <HAL_InitTick+0xa4>)
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_InitTick+0xa4>)
 80011b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fe75 	bl	8004eb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ce:	f003 fe47 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 80011d2:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_InitTick+0xa8>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	0c9b      	lsrs	r3, r3, #18
 80011de:	3b01      	subs	r3, #1
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0xac>)
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_InitTick+0xb0>)
 80011e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_InitTick+0xac>)
 80011ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ee:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_InitTick+0xac>)
 80011f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_InitTick+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_InitTick+0xac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001202:	480a      	ldr	r0, [pc, #40]	; (800122c <HAL_InitTick+0xac>)
 8001204:	f005 f99a 	bl	800653c <HAL_TIM_Base_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d104      	bne.n	8001218 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <HAL_InitTick+0xac>)
 8001210:	f005 f9f6 	bl	8006600 <HAL_TIM_Base_Start_IT>
 8001214:	4603      	mov	r3, r0
 8001216:	e000      	b.n	800121a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3738      	adds	r7, #56	; 0x38
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58024400 	.word	0x58024400
 8001228:	431bde83 	.word	0x431bde83
 800122c:	2400500c 	.word	0x2400500c
 8001230:	40001400 	.word	0x40001400

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM7_IRQHandler+0x10>)
 800126e:	f005 f9fd 	bl	800666c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2400500c 	.word	0x2400500c

0800127c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <ETH_IRQHandler+0x10>)
 8001282:	f001 f923 	bl	80024cc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	240051b8 	.word	0x240051b8

08001290 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <ETH_WKUP_IRQHandler+0x10>)
 8001296:	f001 f919 	bl	80024cc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	240051b8 	.word	0x240051b8

080012a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e00a      	b.n	80012cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012b6:	f3af 8000 	nop.w
 80012ba:	4601      	mov	r1, r0
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf0      	blt.n	80012b6 <_read+0x12>
	}

return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e009      	b.n	8001304 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	60ba      	str	r2, [r7, #8]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf1      	blt.n	80012f0 <_write+0x12>
	}
	return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_close>:

int _close(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133e:	605a      	str	r2, [r3, #4]
	return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_isatty>:

int _isatty(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d205      	bcs.n	80013bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <_sbrk+0x6c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	20020000 	.word	0x20020000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	240000c4 	.word	0x240000c4
 80013e8:	24008388 	.word	0x24008388
 80013ec:	24008358 	.word	0x24008358

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013f4:	f7ff f94c 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013fa:	e003      	b.n	8001404 <LoopCopyDataInit>

080013fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80013fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001400:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001402:	3104      	adds	r1, #4

08001404 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001408:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800140a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800140c:	d3f6      	bcc.n	80013fc <CopyDataInit>
  ldr  r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001410:	e002      	b.n	8001418 <LoopFillZerobss>

08001412 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001412:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001414:	f842 3b04 	str.w	r3, [r2], #4

08001418 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800141a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800141c:	d3f9      	bcc.n	8001412 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800141e:	f015 ff49 	bl	80172b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff fa2f 	bl	8000884 <main>
  bx  lr    
 8001426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800142c:	0801b5c8 	.word	0x0801b5c8
  ldr  r0, =_sdata
 8001430:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001434:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 8001438:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 800143c:	24008384 	.word	0x24008384

08001440 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC3_IRQHandler>

08001442 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <LAN8742_RegisterBusIO+0x28>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <LAN8742_RegisterBusIO+0x28>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <LAN8742_RegisterBusIO+0x28>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146e:	e014      	b.n	800149a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d17c      	bne.n	80015c0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e01c      	b.n	800151a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f107 0208 	add.w	r2, r7, #8
 80014e8:	2112      	movs	r1, #18
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	4798      	blx	r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da03      	bge.n	80014fc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80014f4:	f06f 0304 	mvn.w	r3, #4
 80014f8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80014fa:	e00b      	b.n	8001514 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	d105      	bne.n	8001514 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
         break;
 8001512:	e005      	b.n	8001520 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3301      	adds	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b1f      	cmp	r3, #31
 800151e:	d9df      	bls.n	80014e0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b1f      	cmp	r3, #31
 8001526:	d902      	bls.n	800152e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001528:	f06f 0302 	mvn.w	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d145      	bne.n	80015c0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6810      	ldr	r0, [r2, #0]
 800153c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001540:	2100      	movs	r1, #0
 8001542:	4798      	blx	r3
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	db37      	blt.n	80015ba <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6810      	ldr	r0, [r2, #0]
 8001552:	f107 0208 	add.w	r2, r7, #8
 8001556:	2100      	movs	r1, #0
 8001558:	4798      	blx	r3
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	db28      	blt.n	80015b2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4798      	blx	r3
 8001566:	4603      	mov	r3, r0
 8001568:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800156a:	e01c      	b.n	80015a6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4798      	blx	r3
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800157e:	d80e      	bhi.n	800159e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6810      	ldr	r0, [r2, #0]
 8001588:	f107 0208 	add.w	r2, r7, #8
 800158c:	2100      	movs	r1, #0
 800158e:	4798      	blx	r3
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	da07      	bge.n	80015a6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001596:	f06f 0304 	mvn.w	r3, #4
 800159a:	613b      	str	r3, [r7, #16]
                 break;
 800159c:	e010      	b.n	80015c0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800159e:	f06f 0301 	mvn.w	r3, #1
 80015a2:	613b      	str	r3, [r7, #16]
               break;
 80015a4:	e00c      	b.n	80015c0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1dd      	bne.n	800156c <LAN8742_Init+0xc6>
 80015b0:	e006      	b.n	80015c0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80015b2:	f06f 0304 	mvn.w	r3, #4
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	e002      	b.n	80015c0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80015ba:	f06f 0303 	mvn.w	r3, #3
 80015be:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d112      	bne.n	80015ec <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4798      	blx	r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80015d0:	bf00      	nop
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4798      	blx	r3
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015e4:	d9f5      	bls.n	80015d2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80015ec:	693b      	ldr	r3, [r7, #16]
 }
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	f107 020c 	add.w	r2, r7, #12
 800160e:	2101      	movs	r1, #1
 8001610:	4798      	blx	r3
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	da02      	bge.n	800161e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001618:	f06f 0304 	mvn.w	r3, #4
 800161c:	e06e      	b.n	80016fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6810      	ldr	r0, [r2, #0]
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	2101      	movs	r1, #1
 800162c:	4798      	blx	r3
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	da02      	bge.n	800163a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001634:	f06f 0304 	mvn.w	r3, #4
 8001638:	e060      	b.n	80016fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001644:	2301      	movs	r3, #1
 8001646:	e059      	b.n	80016fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6810      	ldr	r0, [r2, #0]
 8001650:	f107 020c 	add.w	r2, r7, #12
 8001654:	2100      	movs	r1, #0
 8001656:	4798      	blx	r3
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	da02      	bge.n	8001664 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800165e:	f06f 0304 	mvn.w	r3, #4
 8001662:	e04b      	b.n	80016fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11b      	bne.n	80016a6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <LAN8742_GetLinkState+0x90>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001682:	2302      	movs	r3, #2
 8001684:	e03a      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001690:	2303      	movs	r3, #3
 8001692:	e033      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800169e:	2304      	movs	r3, #4
 80016a0:	e02c      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016a2:	2305      	movs	r3, #5
 80016a4:	e02a      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6810      	ldr	r0, [r2, #0]
 80016ae:	f107 020c 	add.w	r2, r7, #12
 80016b2:	211f      	movs	r1, #31
 80016b4:	4798      	blx	r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da02      	bge.n	80016c2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016bc:	f06f 0304 	mvn.w	r3, #4
 80016c0:	e01c      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80016cc:	2306      	movs	r3, #6
 80016ce:	e015      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 031c 	and.w	r3, r3, #28
 80016d6:	2b18      	cmp	r3, #24
 80016d8:	d101      	bne.n	80016de <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016da:	2302      	movs	r3, #2
 80016dc:	e00e      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f003 031c 	and.w	r3, r3, #28
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d101      	bne.n	80016ec <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e007      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 031c 	and.w	r3, r3, #28
 80016f2:	2b14      	cmp	r3, #20
 80016f4:	d101      	bne.n	80016fa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016f6:	2304      	movs	r3, #4
 80016f8:	e000      	b.n	80016fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016fa:	2305      	movs	r3, #5
    }				
  }
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f945 	bl	800199a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001710:	f003 fa04 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8001714:	4601      	mov	r1, r0
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_Init+0x68>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_Init+0x6c>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	fa21 f303 	lsr.w	r3, r1, r3
 800172c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_Init+0x68>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_Init+0x6c>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_Init+0x70>)
 8001746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_Init+0x74>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fd16 	bl	8001180 <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e002      	b.n	8001764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800175e:	f7ff fc53 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400
 8001770:	0801b380 	.word	0x0801b380
 8001774:	24000004 	.word	0x24000004
 8001778:	24000000 	.word	0x24000000

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2400000c 	.word	0x2400000c
 80017a0:	24005058 	.word	0x24005058

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	24005058 	.word	0x24005058

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_Delay+0x40>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2400000c 	.word	0x2400000c

08001800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetREVID+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0c1b      	lsrs	r3, r3, #16
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	5c001000 	.word	0x5c001000

08001818 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001828:	4904      	ldr	r1, [pc, #16]	; (800183c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	58000400 	.word	0x58000400

08001840 <__NVIC_SetPriorityGrouping>:
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <__NVIC_SetPriorityGrouping+0x40>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	4313      	orrs	r3, r2
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <__NVIC_SetPriorityGrouping+0x40>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00
 8001884:	05fa0000 	.word	0x05fa0000

08001888 <__NVIC_GetPriorityGrouping>:
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff4c 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019be:	f7ff ff63 	bl	8001888 <__NVIC_GetPriorityGrouping>
 80019c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f7ff ffb3 	bl	8001934 <NVIC_EncodePriority>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff82 	bl	80018e0 <__NVIC_SetPriority>
}
 80019dc:	bf00      	nop
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff56 	bl	80018a4 <__NVIC_EnableIRQ>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a04:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_MPU_Disable+0x24>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <HAL_MPU_Disable+0x24>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_MPU_Disable+0x28>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00
 8001a28:	e000ed90 	.word	0xe000ed90

08001a2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_MPU_Enable+0x34>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_MPU_Enable+0x38>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <HAL_MPU_Enable+0x38>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a4e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed90 	.word	0xe000ed90
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	785a      	ldrb	r2, [r3, #1]
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_MPU_ConfigRegion+0x84>)
 8001a76:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d029      	beq.n	8001ad4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001a80:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <HAL_MPU_ConfigRegion+0x84>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7b1b      	ldrb	r3, [r3, #12]
 8001a8c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7adb      	ldrb	r3, [r3, #11]
 8001a92:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7a9b      	ldrb	r3, [r3, #10]
 8001a9a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b5b      	ldrb	r3, [r3, #13]
 8001aa2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001aa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7b9b      	ldrb	r3, [r3, #14]
 8001aaa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001aac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7bdb      	ldrb	r3, [r3, #15]
 8001ab2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ab4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7a5b      	ldrb	r3, [r3, #9]
 8001aba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001abc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7a1b      	ldrb	r3, [r3, #8]
 8001ac2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ac4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ace:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ad0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001ad2:	e005      	b.n	8001ae0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_MPU_ConfigRegion+0x84>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_MPU_ConfigRegion+0x84>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed90 	.word	0xe000ed90

08001af0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_GetCurrentCPUID+0x24>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	d101      	bne.n	8001b06 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e000      	b.n	8001b08 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001b06:	2301      	movs	r3, #1
  }
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0c6      	b.n	8001cb8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f006 fc4e 	bl	80083d4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2223      	movs	r2, #35	; 0x23
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <HAL_ETH_Init+0x1a8>)
 8001b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b44:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_ETH_Init+0x1a8>)
 8001b46:	f043 0302 	orr.w	r3, r3, #2
 8001b4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_ETH_Init+0x1a8>)
 8001b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7a1b      	ldrb	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fe57 	bl	8001818 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b6a:	e003      	b.n	8001b74 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b6c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b70:	f7ff fe52 	bl	8001818 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b8c:	f7ff fe0a 	bl	80017a4 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b92:	e00f      	b.n	8001bb4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001b94:	f7ff fe06 	bl	80017a4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ba2:	d907      	bls.n	8001bb4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	22e0      	movs	r2, #224	; 0xe0
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e081      	b.n	8001cb8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1e6      	bne.n	8001b94 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f001 fae8 	bl	800319c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001bcc:	f003 f918 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_ETH_Init+0x1ac>)
 8001bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8001bd8:	0c9a      	lsrs	r2, r3, #18
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3a01      	subs	r2, #1
 8001be0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f001 fa3b 	bl	8003060 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c00:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c04:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	22e0      	movs	r2, #224	; 0xe0
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e04a      	b.n	8001cb8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_ETH_Init+0x1b0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6952      	ldr	r2, [r2, #20]
 8001c36:	0052      	lsls	r2, r2, #1
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	6809      	ldr	r1, [r1, #0]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c42:	440b      	add	r3, r1
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f001 fb00 	bl	800324c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f001 fb44 	bl	80032da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	3305      	adds	r3, #5
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	021a      	lsls	r2, r3, #8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	3303      	adds	r3, #3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	061a      	lsls	r2, r3, #24
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c9e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ca0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2210      	movs	r2, #16
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	ffff8001 	.word	0xffff8001

08001ccc <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	330a      	adds	r3, #10
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_ETH_DescAssignMemory+0x28>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d904      	bls.n	8001cfe <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e021      	b.n	8001d42 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00b      	beq.n	8001d34 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d174      	bne.n	8001e48 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2223      	movs	r2, #35	; 0x23
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e00f      	b.n	8001d8a <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	330a      	adds	r3, #10
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d9ec      	bls.n	8001d6a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0202 	orr.w	r2, r2, #2
 8001da4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f241 1304 	movw	r3, #4356	; 0x1104
 8001dd2:	4413      	add	r3, r2
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6811      	ldr	r1, [r2, #0]
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	f241 1304 	movw	r3, #4356	; 0x1104
 8001de2:	440b      	add	r3, r1
 8001de4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dee:	4413      	add	r3, r2
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6811      	ldr	r1, [r2, #0]
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dfe:	440b      	add	r3, r1
 8001e00:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001e14:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e18:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6811      	ldr	r1, [r2, #0]
 8001e2a:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e34:	440b      	add	r3, r1
 8001e36:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2222      	movs	r2, #34	; 0x22
 8001e42:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d067      	beq.n	8001f38 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2223      	movs	r2, #35	; 0x23
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	4a32      	ldr	r2, [pc, #200]	; (8001f48 <HAL_ETH_Stop_IT+0xf0>)
 8001e80:	401a      	ands	r2, r3
 8001e82:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e86:	440b      	add	r3, r1
 8001e88:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6811      	ldr	r1, [r2, #0]
 8001e9a:	f023 0201 	bic.w	r2, r3, #1
 8001e9e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ea2:	440b      	add	r3, r1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	f023 0201 	bic.w	r2, r3, #1
 8001eba:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ebe:	440b      	add	r3, r1
 8001ec0:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0202 	bic.w	r2, r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e00f      	b.n	8001f1c <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	330a      	adds	r3, #10
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d9ec      	bls.n	8001efc <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2210      	movs	r2, #16
 8001f32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	ffff2fbe 	.word	0xffff2fbe

08001f4c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d107      	bne.n	8001f6e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e073      	b.n	8002056 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d16e      	bne.n	8002054 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f76:	2200      	movs	r2, #0
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f001 fa0a 	bl	8003394 <ETH_Prepare_Tx_Descriptors>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	f043 0202 	orr.w	r2, r3, #2
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e05f      	b.n	8002056 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3206      	adds	r2, #6
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d904      	bls.n	8001fc0 <HAL_ETH_Transmit+0x74>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	1f1a      	subs	r2, r3, #4
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	3106      	adds	r1, #6
 8001fcc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001fd0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001fd4:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001fd6:	f7ff fbe5 	bl	80017a4 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001fdc:	e034      	b.n	8002048 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d011      	beq.n	8002014 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	f043 0208 	orr.w	r2, r3, #8
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	22e0      	movs	r2, #224	; 0xe0
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e020      	b.n	8002056 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800201a:	d015      	beq.n	8002048 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800201c:	f7ff fbc2 	bl	80017a4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d302      	bcc.n	8002032 <HAL_ETH_Transmit+0xe6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	f043 0204 	orr.w	r2, r3, #4
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	22e0      	movs	r2, #224	; 0xe0
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e006      	b.n	8002056 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	dbc6      	blt.n	8001fde <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800205e:	b480      	push	{r7}
 8002060:	b089      	sub	sp, #36	; 0x24
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	332c      	adds	r3, #44	; 0x2c
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d06b      	beq.n	8002168 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002090:	2300      	movs	r3, #0
 8002092:	e0ce      	b.n	8002232 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d036      	beq.n	8002114 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	3301      	adds	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d902      	bls.n	80020c8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b04      	subs	r3, #4
 80020c6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db11      	blt.n	80020fe <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2201      	movs	r2, #1
 80020ea:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3301      	adds	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d902      	bls.n	80020fe <HAL_ETH_IsRxDataAvailable+0xa0>
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3b04      	subs	r3, #4
 80020fc:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002110:	2301      	movs	r3, #1
 8002112:	e08e      	b.n	8002232 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d012      	beq.n	8002146 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002124:	2301      	movs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d902      	bls.n	800213a <HAL_ETH_IsRxDataAvailable+0xdc>
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3b04      	subs	r3, #4
 8002138:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e010      	b.n	8002168 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	3301      	adds	r3, #1
 800214a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d902      	bls.n	800215e <HAL_ETH_IsRxDataAvailable+0x100>
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3b04      	subs	r3, #4
 800215c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db02      	blt.n	8002176 <HAL_ETH_IsRxDataAvailable+0x118>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d98e      	bls.n	8002094 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d056      	beq.n	800222a <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e03b      	b.n	8002214 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021aa:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d20d      	bcs.n	800220e <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d902      	bls.n	8002204 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b04      	subs	r3, #4
 8002202:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3bf      	bcc.n	800219c <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f241 1328 	movw	r3, #4392	; 0x1128
 8002226:	440b      	add	r3, r1
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]

  return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b08a      	sub	sp, #40	; 0x28
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	332c      	adds	r3, #44	; 0x2c
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07d      	b.n	8002372 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff feed 	bl	800205e <HAL_ETH_IsRxDataAvailable>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e071      	b.n	8002372 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229c:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
 80022a2:	e031      	b.n	8002308 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	461a      	mov	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	461a      	mov	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022de:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	3301      	adds	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d902      	bls.n	80022f2 <HAL_ETH_GetRxDataBuffer+0xb4>
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3b04      	subs	r3, #4
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	3301      	adds	r3, #1
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	3b01      	subs	r3, #1
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3c7      	bcc.n	80022a4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	461a      	mov	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d803      	bhi.n	800233e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	e018      	b.n	8002370 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	461a      	mov	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	1ad2      	subs	r2, r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	e001      	b.n	8002370 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	332c      	adds	r3, #44	; 0x2c
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fe60 	bl	800205e <HAL_ETH_IsRxDataAvailable>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e017      	b.n	80023d8 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4413      	add	r3, r2
 80023b0:	3b01      	subs	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d902      	bls.n	80023c0 <HAL_ETH_GetRxDataLength+0x46>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3b04      	subs	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	332c      	adds	r3, #44	; 0x2c
 80023ec:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e057      	b.n	80024c0 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e03b      	b.n	800249c <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002432:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3b01      	subs	r3, #1
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	429a      	cmp	r2, r3
 8002478:	d20d      	bcs.n	8002496 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d902      	bls.n	800248c <HAL_ETH_BuildRxDescriptors+0xac>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b04      	subs	r3, #4
 800248a:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002494:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3301      	adds	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3bf      	bcc.n	8002424 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	f241 1328 	movw	r3, #4392	; 0x1128
 80024ae:	440b      	add	r3, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3724      	adds	r7, #36	; 0x24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d113      	bne.n	800250e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f241 1334 	movw	r3, #4404	; 0x1134
 80024ee:	4413      	add	r3, r2
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d109      	bne.n	800250e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f006 f848 	bl	8008590 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002508:	f248 0240 	movw	r2, #32832	; 0x8040
 800250c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d113      	bne.n	8002548 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	f241 1334 	movw	r3, #4404	; 0x1134
 8002528:	4413      	add	r3, r2
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d109      	bne.n	8002548 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f8c7 	bl	80026c8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002542:	f248 0201 	movw	r2, #32769	; 0x8001
 8002546:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800255a:	d149      	bne.n	80025f0 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f241 1334 	movw	r3, #4404	; 0x1134
 8002564:	4413      	add	r3, r2
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002570:	d13e      	bne.n	80025f0 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	f043 0208 	orr.w	r2, r3, #8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002590:	d11b      	bne.n	80025ca <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f241 1302 	movw	r3, #4354	; 0x1102
 80025a0:	4013      	ands	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f241 1334 	movw	r3, #4404	; 0x1134
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6811      	ldr	r1, [r2, #0]
 80025b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ba:	f241 1334 	movw	r3, #4404	; 0x1134
 80025be:	440b      	add	r3, r1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	22e0      	movs	r2, #224	; 0xe0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
 80025c8:	e00f      	b.n	80025ea <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025e4:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80025e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f876 	bl	80026dc <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025f8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80025fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002600:	d10e      	bne.n	8002620 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	22e0      	movs	r2, #224	; 0xe0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f86b 	bl	80026f0 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b10      	cmp	r3, #16
 800262e:	d10d      	bne.n	800264c <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002638:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f85f 	bl	8002704 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b20      	cmp	r3, #32
 800265a:	d10d      	bne.n	8002678 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f853 	bl	8002718 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002678:	f7ff fa3a 	bl	8001af0 <HAL_GetCurrentCPUID>
 800267c:	4603      	mov	r3, r0
 800267e:	2b03      	cmp	r3, #3
 8002680:	d10d      	bne.n	800269e <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_ETH_IRQHandler+0x1f4>)
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d014      	beq.n	80026b8 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_ETH_IRQHandler+0x1f4>)
 8002690:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f848 	bl	800272c <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 800269c:	e00c      	b.n	80026b8 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_ETH_IRQHandler+0x1f8>)
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_ETH_IRQHandler+0x1f8>)
 80026ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f83a 	bl	800272c <HAL_ETH_WakeUpCallback>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	58000080 	.word	0x58000080
 80026c4:	580000c0 	.word	0x580000c0

080026c8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e03e      	b.n	80027e0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	055b      	lsls	r3, r3, #21
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f043 030c 	orr.w	r3, r3, #12
 800278e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80027a2:	f7fe ffff 	bl	80017a4 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80027a8:	e009      	b.n	80027be <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80027aa:	f7fe fffb 	bl	80017a4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b8:	d901      	bls.n	80027be <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e010      	b.n	80027e0 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ed      	bne.n	80027aa <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e03c      	b.n	8002884 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002812:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	055b      	lsls	r3, r3, #21
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f023 030c 	bic.w	r3, r3, #12
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_ETH_WritePHYRegister+0xa4>)
 800284a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_ETH_WritePHYRegister+0xa4>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002856:	f7fe ffa5 	bl	80017a4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800285c:	e009      	b.n	8002872 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800285e:	f7fe ffa1 	bl	80017a4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286c:	d901      	bls.n	8002872 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e008      	b.n	8002884 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ed      	bne.n	800285e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40028000 	.word	0x40028000

08002890 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e1c3      	b.n	8002c2c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0e5b      	lsrs	r3, r3, #25
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 020f 	and.w	r2, r3, #15
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002bb8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bc8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e00a      	b.n	8002c62 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d105      	bne.n	8002c60 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f860 	bl	8002d1c <ETH_SetMACConfig>

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c7c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c84:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c86:	f002 f8bb 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8002c8a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d908      	bls.n	8002ca6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d804      	bhi.n	8002ca6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e027      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d908      	bls.n	8002cc0 <HAL_ETH_SetMDIOClockRange+0x54>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d804      	bhi.n	8002cc0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e01a      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d903      	bls.n	8002cd0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d911      	bls.n	8002cf4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d908      	bls.n	8002cea <HAL_ETH_SetMDIOClockRange+0x7e>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d804      	bhi.n	8002cea <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e005      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e000      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002cf4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	01312cff 	.word	0x01312cff
 8002d0c:	02160ebf 	.word	0x02160ebf
 8002d10:	039386ff 	.word	0x039386ff
 8002d14:	05f5e0ff 	.word	0x05f5e0ff
 8002d18:	08f0d17f 	.word	0x08f0d17f

08002d1c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002d2e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	791b      	ldrb	r3, [r3, #4]
 8002d34:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002d36:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002d3e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	7b5b      	ldrb	r3, [r3, #13]
 8002d44:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d46:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	7b9b      	ldrb	r3, [r3, #14]
 8002d4c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	7bdb      	ldrb	r3, [r3, #15]
 8002d54:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d56:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	7c12      	ldrb	r2, [r2, #16]
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d102      	bne.n	8002d66 <ETH_SetMACConfig+0x4a>
 8002d60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d64:	e000      	b.n	8002d68 <ETH_SetMACConfig+0x4c>
 8002d66:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d68:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	7c52      	ldrb	r2, [r2, #17]
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d102      	bne.n	8002d78 <ETH_SetMACConfig+0x5c>
 8002d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d76:	e000      	b.n	8002d7a <ETH_SetMACConfig+0x5e>
 8002d78:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d7a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	7c9b      	ldrb	r3, [r3, #18]
 8002d80:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d82:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002d88:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002d8e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	7f1b      	ldrb	r3, [r3, #28]
 8002d94:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002d96:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7f5b      	ldrb	r3, [r3, #29]
 8002d9c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002d9e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	7f92      	ldrb	r2, [r2, #30]
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d102      	bne.n	8002dae <ETH_SetMACConfig+0x92>
 8002da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dac:	e000      	b.n	8002db0 <ETH_SetMACConfig+0x94>
 8002dae:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002db0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	7fdb      	ldrb	r3, [r3, #31]
 8002db6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002db8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	d102      	bne.n	8002dca <ETH_SetMACConfig+0xae>
 8002dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc8:	e000      	b.n	8002dcc <ETH_SetMACConfig+0xb0>
 8002dca:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002dcc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002dd2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dda:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002ddc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <ETH_SetMACConfig+0x22c>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	68f9      	ldr	r1, [r7, #12]
 8002df6:	430b      	orrs	r3, r1
 8002df8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e06:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002e08:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e10:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002e12:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e1a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002e1c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002e24:	2a00      	cmp	r2, #0
 8002e26:	d102      	bne.n	8002e2e <ETH_SetMACConfig+0x112>
 8002e28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e2c:	e000      	b.n	8002e30 <ETH_SetMACConfig+0x114>
 8002e2e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002e30:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <ETH_SetMACConfig+0x230>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <ETH_SetMACConfig+0x234>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e78:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e7e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d101      	bne.n	8002e8e <ETH_SetMACConfig+0x172>
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	e000      	b.n	8002e90 <ETH_SetMACConfig+0x174>
 8002e8e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e90:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e96:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002eb8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002ec0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f023 0103 	bic.w	r1, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ee6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	d101      	bne.n	8002f0a <ETH_SetMACConfig+0x1ee>
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	e000      	b.n	8002f0c <ETH_SetMACConfig+0x1f0>
 8002f0a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002f0c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002f14:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f16:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002f1e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002f2c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	00048083 	.word	0x00048083
 8002f4c:	c0f88000 	.word	0xc0f88000
 8002f50:	fffffef0 	.word	0xfffffef0

08002f54 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b38      	ldr	r3, [pc, #224]	; (800304c <ETH_SetDMAConfig+0xf8>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	6809      	ldr	r1, [r1, #0]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002f7a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f86:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	7b1b      	ldrb	r3, [r3, #12]
 8002f8c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f9a:	4413      	add	r3, r2
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <ETH_SetDMAConfig+0xfc>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6811      	ldr	r1, [r2, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	f241 0304 	movw	r3, #4100	; 0x1004
 8002fae:	440b      	add	r3, r1
 8002fb0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	7b5b      	ldrb	r3, [r3, #13]
 8002fb6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <ETH_SetDMAConfig+0x100>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002fda:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	7d1b      	ldrb	r3, [r3, #20]
 8002fe4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fe6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	7f5b      	ldrb	r3, [r3, #29]
 8002fec:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ffa:	4413      	add	r3, r2
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <ETH_SetDMAConfig+0x104>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6811      	ldr	r1, [r2, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	431a      	orrs	r2, r3
 800300a:	f241 1304 	movw	r3, #4356	; 0x1104
 800300e:	440b      	add	r3, r1
 8003010:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	7f1b      	ldrb	r3, [r3, #28]
 8003016:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f241 1308 	movw	r3, #4360	; 0x1108
 8003028:	4413      	add	r3, r2
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <ETH_SetDMAConfig+0x108>)
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6811      	ldr	r1, [r2, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	431a      	orrs	r2, r3
 8003038:	f241 1308 	movw	r3, #4360	; 0x1108
 800303c:	440b      	add	r3, r1
 800303e:	601a      	str	r2, [r3, #0]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	ffff87fd 	.word	0xffff87fd
 8003050:	ffff2ffe 	.word	0xffff2ffe
 8003054:	fffec000 	.word	0xfffec000
 8003058:	ffc0efef 	.word	0xffc0efef
 800305c:	7fc0ffff 	.word	0x7fc0ffff

08003060 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b0a4      	sub	sp, #144	; 0x90
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800306e:	2300      	movs	r3, #0
 8003070:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800309c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80030b8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80030bc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80030c4:	2300      	movs	r3, #0
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80030da:	2300      	movs	r3, #0
 80030dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80030de:	2300      	movs	r3, #0
 80030e0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80030e2:	2300      	movs	r3, #0
 80030e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80030f8:	2320      	movs	r3, #32
 80030fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800310a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003110:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800311c:	2302      	movs	r3, #2
 800311e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800313a:	2300      	movs	r3, #0
 800313c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fde6 	bl	8002d1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003150:	2301      	movs	r3, #1
 8003152:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003154:	2301      	movs	r3, #1
 8003156:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800316a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800316e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003178:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003180:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fee1 	bl	8002f54 <ETH_SetDMAConfig>
}
 8003192:	bf00      	nop
 8003194:	3790      	adds	r7, #144	; 0x90
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80031b6:	f001 fe23 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 80031ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d908      	bls.n	80031d6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d804      	bhi.n	80031d6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e027      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d908      	bls.n	80031f0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4a17      	ldr	r2, [pc, #92]	; (8003240 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d804      	bhi.n	80031f0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e01a      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d903      	bls.n	8003200 <ETH_MAC_MDIO_ClkConfig+0x64>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d911      	bls.n	8003224 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d908      	bls.n	800321a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d804      	bhi.n	800321a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e005      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e000      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003224:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	01312cff 	.word	0x01312cff
 800323c:	02160ebf 	.word	0x02160ebf
 8003240:	039386ff 	.word	0x039386ff
 8003244:	05f5e0ff 	.word	0x05f5e0ff
 8003248:	08f0d17f 	.word	0x08f0d17f

0800324c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e01d      	b.n	8003296 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	3206      	adds	r2, #6
 800328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d9de      	bls.n	800325a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f241 132c 	movw	r3, #4396	; 0x112c
 80032aa:	4413      	add	r3, r2
 80032ac:	2203      	movs	r2, #3
 80032ae:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68d9      	ldr	r1, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	f241 1314 	movw	r3, #4372	; 0x1114
 80032bc:	4413      	add	r3, r2
 80032be:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e024      	b.n	8003332 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6919      	ldr	r1, [r3, #16]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	330a      	adds	r3, #10
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d9d7      	bls.n	80032e8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f241 1330 	movw	r3, #4400	; 0x1130
 800335e:	4413      	add	r3, r2
 8003360:	2203      	movs	r2, #3
 8003362:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6919      	ldr	r1, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	f241 131c 	movw	r3, #4380	; 0x111c
 8003370:	4413      	add	r3, r2
 8003372:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f241 1328 	movw	r3, #4392	; 0x1128
 8003384:	4413      	add	r3, r2
 8003386:	6019      	str	r1, [r3, #0]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003394:	b480      	push	{r7}
 8003396:	b08d      	sub	sp, #52	; 0x34
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3318      	adds	r3, #24
 80033a4:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033be:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d2:	d101      	bne.n	80033d8 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80033d4:	2302      	movs	r3, #2
 80033d6:	e223      	b.n	8003820 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d044      	beq.n	800346e <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <ETH_Prepare_Tx_Descriptors+0x220>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f0:	431a      	orrs	r2, r3
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003410:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d027      	beq.n	800346e <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	b29a      	uxth	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	431a      	orrs	r2, r3
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	431a      	orrs	r2, r3
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800345c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800346c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4b4e      	ldr	r3, [pc, #312]	; (80035b8 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003480:	4013      	ands	r3, r2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	6992      	ldr	r2, [r2, #24]
 8003486:	431a      	orrs	r2, r3
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <ETH_Prepare_Tx_Descriptors+0x11c>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d030      	beq.n	8003512 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	3301      	adds	r3, #1
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d902      	bls.n	80034da <ETH_Prepare_Tx_Descriptors+0x146>
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	3b04      	subs	r3, #4
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	3301      	adds	r3, #1
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f6:	d10c      	bne.n	8003512 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	e186      	b.n	8003820 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	3301      	adds	r3, #1
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003528:	4013      	ands	r3, r2
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	6852      	ldr	r2, [r2, #4]
 800352e:	431a      	orrs	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d012      	beq.n	8003562 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <ETH_Prepare_Tx_Descriptors+0x228>)
 8003552:	4013      	ands	r3, r2
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	0412      	lsls	r2, r2, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	e008      	b.n	8003574 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	2200      	movs	r2, #0
 8003566:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <ETH_Prepare_Tx_Descriptors+0x228>)
 800356e:	4013      	ands	r3, r2
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d021      	beq.n	80035c4 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	04db      	lsls	r3, r3, #19
 800358e:	431a      	orrs	r2, r3
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800359a:	4013      	ands	r3, r2
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	69d2      	ldr	r2, [r2, #28]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e02e      	b.n	8003612 <ETH_Prepare_Tx_Descriptors+0x27e>
 80035b4:	ffff0000 	.word	0xffff0000
 80035b8:	ffffc000 	.word	0xffffc000
 80035bc:	c000ffff 	.word	0xc000ffff
 80035c0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	4b98      	ldr	r3, [pc, #608]	; (800382c <ETH_Prepare_Tx_Descriptors+0x498>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	6852      	ldr	r2, [r2, #4]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	431a      	orrs	r2, r3
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80c0 	beq.w	80037e2 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	431a      	orrs	r2, r3
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003674:	e0b5      	b.n	80037e2 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	3301      	adds	r3, #1
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	2b03      	cmp	r3, #3
 800368c:	d902      	bls.n	8003694 <ETH_Prepare_Tx_Descriptors+0x300>
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	3b04      	subs	r3, #4
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036b6:	d126      	bne.n	8003706 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e016      	b.n	80036fa <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	3301      	adds	r3, #1
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d902      	bls.n	80036ea <ETH_Prepare_Tx_Descriptors+0x356>
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	3b04      	subs	r3, #4
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f2:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	3301      	adds	r3, #1
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	429a      	cmp	r2, r3
 8003700:	d3e4      	bcc.n	80036cc <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	e08c      	b.n	8003820 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	3301      	adds	r3, #1
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003722:	4013      	ands	r3, r2
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	6852      	ldr	r2, [r2, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800374c:	4013      	ands	r3, r2
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	6852      	ldr	r2, [r2, #4]
 8003752:	0412      	lsls	r2, r2, #16
 8003754:	431a      	orrs	r2, r3
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	e008      	b.n	800376e <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	4b33      	ldr	r3, [pc, #204]	; (8003834 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003768:	4013      	ands	r3, r2
 800376a:	6a3a      	ldr	r2, [r7, #32]
 800376c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00f      	beq.n	800379a <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003780:	4013      	ands	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	69d2      	ldr	r2, [r2, #28]
 8003786:	431a      	orrs	r2, r3
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e017      	b.n	80037ca <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	4b23      	ldr	r3, [pc, #140]	; (800382c <ETH_Prepare_Tx_Descriptors+0x498>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f47f af45 	bne.w	8003676 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	e005      	b.n	800380c <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381c:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3734      	adds	r7, #52	; 0x34
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	ffff8000 	.word	0xffff8000
 8003830:	ffffc000 	.word	0xffffc000
 8003834:	c000ffff 	.word	0xc000ffff
 8003838:	fffc0000 	.word	0xfffc0000

0800383c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800384a:	4b89      	ldr	r3, [pc, #548]	; (8003a70 <HAL_GPIO_Init+0x234>)
 800384c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800384e:	e194      	b.n	8003b7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8186 	beq.w	8003b74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d00b      	beq.n	8003888 <HAL_GPIO_Init+0x4c>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d007      	beq.n	8003888 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800387c:	2b11      	cmp	r3, #17
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b12      	cmp	r3, #18
 8003886:	d130      	bne.n	80038ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	2203      	movs	r2, #3
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038be:	2201      	movs	r2, #1
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 0201 	and.w	r2, r3, #1
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0xee>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b12      	cmp	r3, #18
 8003928:	d123      	bne.n	8003972 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	08da      	lsrs	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3208      	adds	r2, #8
 8003932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	220f      	movs	r2, #15
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0203 	and.w	r2, r3, #3
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80e0 	beq.w	8003b74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_GPIO_Init+0x238>)
 80039b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039ba:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <HAL_GPIO_Init+0x238>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039c4:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <HAL_GPIO_Init+0x238>)
 80039c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d2:	4a29      	ldr	r2, [pc, #164]	; (8003a78 <HAL_GPIO_Init+0x23c>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	220f      	movs	r2, #15
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a20      	ldr	r2, [pc, #128]	; (8003a7c <HAL_GPIO_Init+0x240>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d052      	beq.n	8003aa4 <HAL_GPIO_Init+0x268>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_GPIO_Init+0x244>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d031      	beq.n	8003a6a <HAL_GPIO_Init+0x22e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <HAL_GPIO_Init+0x248>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02b      	beq.n	8003a66 <HAL_GPIO_Init+0x22a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <HAL_GPIO_Init+0x24c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d025      	beq.n	8003a62 <HAL_GPIO_Init+0x226>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <HAL_GPIO_Init+0x250>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01f      	beq.n	8003a5e <HAL_GPIO_Init+0x222>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_GPIO_Init+0x254>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_GPIO_Init+0x21e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_GPIO_Init+0x258>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0x21a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_GPIO_Init+0x25c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_GPIO_Init+0x216>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_GPIO_Init+0x260>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <HAL_GPIO_Init+0x212>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <HAL_GPIO_Init+0x264>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_GPIO_Init+0x20e>
 8003a46:	2309      	movs	r3, #9
 8003a48:	e02d      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a4a:	230a      	movs	r3, #10
 8003a4c:	e02b      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	e029      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a52:	2307      	movs	r3, #7
 8003a54:	e027      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a56:	2306      	movs	r3, #6
 8003a58:	e025      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a5a:	2305      	movs	r3, #5
 8003a5c:	e023      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a5e:	2304      	movs	r3, #4
 8003a60:	e021      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a62:	2303      	movs	r3, #3
 8003a64:	e01f      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e01d      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e01b      	b.n	8003aa6 <HAL_GPIO_Init+0x26a>
 8003a6e:	bf00      	nop
 8003a70:	58000080 	.word	0x58000080
 8003a74:	58024400 	.word	0x58024400
 8003a78:	58000400 	.word	0x58000400
 8003a7c:	58020000 	.word	0x58020000
 8003a80:	58020400 	.word	0x58020400
 8003a84:	58020800 	.word	0x58020800
 8003a88:	58020c00 	.word	0x58020c00
 8003a8c:	58021000 	.word	0x58021000
 8003a90:	58021400 	.word	0x58021400
 8003a94:	58021800 	.word	0x58021800
 8003a98:	58021c00 	.word	0x58021c00
 8003a9c:	58022000 	.word	0x58022000
 8003aa0:	58022400 	.word	0x58022400
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	f002 0203 	and.w	r2, r2, #3
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	4093      	lsls	r3, r2
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab6:	4938      	ldr	r1, [pc, #224]	; (8003b98 <HAL_GPIO_Init+0x35c>)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	3302      	adds	r3, #2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f47f ae63 	bne.w	8003850 <HAL_GPIO_Init+0x14>
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	58000400 	.word	0x58000400

08003b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	787b      	ldrb	r3, [r7, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bb8:	e003      	b.n	8003bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	619a      	str	r2, [r3, #24]
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_HSEM_FastTake+0x2c>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3320      	adds	r3, #32
 8003bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be2:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <HAL_HSEM_FastTake+0x30>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	58026400 	.word	0x58026400
 8003c00:	80000300 	.word	0x80000300

08003c04 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003c0e:	4906      	ldr	r1, [pc, #24]	; (8003c28 <HAL_HSEM_Release+0x24>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	58026400 	.word	0x58026400

08003c2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2e:	b08f      	sub	sp, #60	; 0x3c
 8003c30:	af0a      	add	r7, sp, #40	; 0x28
 8003c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e116      	b.n	8003e6c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fd fa39 	bl	80010d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 ffdf 	bl	8007c40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	687e      	ldr	r6, [r7, #4]
 8003c8a:	466d      	mov	r5, sp
 8003c8c:	f106 0410 	add.w	r4, r6, #16
 8003c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ca0:	1d33      	adds	r3, r6, #4
 8003ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	f003 ff69 	bl	8007b7c <USB_CoreInit>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d7      	b.n	8003e6c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 ffcd 	bl	8007c62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e04a      	b.n	8003d64 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	333d      	adds	r3, #61	; 0x3d
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	333c      	adds	r3, #60	; 0x3c
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3342      	adds	r3, #66	; 0x42
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	333f      	adds	r3, #63	; 0x3f
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	3344      	adds	r3, #68	; 0x44
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3348      	adds	r3, #72	; 0x48
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3350      	adds	r3, #80	; 0x50
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	3301      	adds	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d3af      	bcc.n	8003cce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	e044      	b.n	8003dfe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d3b5      	bcc.n	8003d74 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	687e      	ldr	r6, [r7, #4]
 8003e10:	466d      	mov	r5, sp
 8003e12:	f106 0410 	add.w	r4, r6, #16
 8003e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e26:	1d33      	adds	r3, r6, #4
 8003e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e2a:	6838      	ldr	r0, [r7, #0]
 8003e2c:	f003 ff44 	bl	8007cb8 <USB_DevInit>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e014      	b.n	8003e6c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f80a 	bl	8003e74 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 f8e6 	bl	8008036 <USB_DevDisconnect>

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	10000003 	.word	0x10000003

08003ebc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003ec4:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	2b06      	cmp	r3, #6
 8003ece:	d00a      	beq.n	8003ee6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ed0:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d001      	beq.n	8003ee2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e040      	b.n	8003f64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e03e      	b.n	8003f64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003eee:	491f      	ldr	r1, [pc, #124]	; (8003f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ef6:	f7fd fc55 	bl	80017a4 <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003efc:	e009      	b.n	8003f12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003efe:	f7fd fc51 	bl	80017a4 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0c:	d901      	bls.n	8003f12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e028      	b.n	8003f64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f12:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	d1ee      	bne.n	8003efe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b1e      	cmp	r3, #30
 8003f24:	d008      	beq.n	8003f38 <HAL_PWREx_ConfigSupply+0x7c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b2e      	cmp	r3, #46	; 0x2e
 8003f2a:	d005      	beq.n	8003f38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b1d      	cmp	r3, #29
 8003f30:	d002      	beq.n	8003f38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b2d      	cmp	r3, #45	; 0x2d
 8003f36:	d114      	bne.n	8003f62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003f38:	f7fd fc34 	bl	80017a4 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f3e:	e009      	b.n	8003f54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f40:	f7fd fc30 	bl	80017a4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f4e:	d901      	bls.n	8003f54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d1ee      	bne.n	8003f40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	58024800 	.word	0x58024800

08003f70 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	60d3      	str	r3, [r2, #12]
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	58024800 	.word	0x58024800

08003f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	; 0x30
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e3ff      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8087 	beq.w	80040be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb0:	4b99      	ldr	r3, [pc, #612]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fba:	4b97      	ldr	r3, [pc, #604]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d007      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x46>
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b18      	cmp	r3, #24
 8003fca:	d110      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd6:	4b90      	ldr	r3, [pc, #576]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d06c      	beq.n	80040bc <HAL_RCC_OscConfig+0x12c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d168      	bne.n	80040bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e3d9      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x76>
 8003ff8:	4b87      	ldr	r3, [pc, #540]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a86      	ldr	r2, [pc, #536]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e02e      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x98>
 800400e:	4b82      	ldr	r3, [pc, #520]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a81      	ldr	r2, [pc, #516]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b7f      	ldr	r3, [pc, #508]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0xbc>
 8004032:	4b79      	ldr	r3, [pc, #484]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a78      	ldr	r2, [pc, #480]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a75      	ldr	r2, [pc, #468]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 800404c:	4b72      	ldr	r3, [pc, #456]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a71      	ldr	r2, [pc, #452]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b6f      	ldr	r3, [pc, #444]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6e      	ldr	r2, [pc, #440]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fb9a 	bl	80017a4 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd fb96 	bl	80017a4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e38d      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004086:	4b64      	ldr	r3, [pc, #400]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xe4>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd fb86 	bl	80017a4 <HAL_GetTick>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd fb82 	bl	80017a4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e379      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040ae:	4b5a      	ldr	r3, [pc, #360]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x10c>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80ae 	beq.w	8004228 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040d6:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_RCC_OscConfig+0x162>
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2b18      	cmp	r3, #24
 80040e6:	d13a      	bne.n	800415e <HAL_RCC_OscConfig+0x1ce>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d135      	bne.n	800415e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f2:	4b49      	ldr	r3, [pc, #292]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_RCC_OscConfig+0x17a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e34b      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	f7fd fb79 	bl	8001800 <HAL_GetREVID>
 800410e:	4602      	mov	r2, r0
 8004110:	f241 0303 	movw	r3, #4099	; 0x1003
 8004114:	429a      	cmp	r2, r3
 8004116:	d817      	bhi.n	8004148 <HAL_RCC_OscConfig+0x1b8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d108      	bne.n	8004132 <HAL_RCC_OscConfig+0x1a2>
 8004120:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004128:	4a3b      	ldr	r2, [pc, #236]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 800412a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004130:	e07a      	b.n	8004228 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4b39      	ldr	r3, [pc, #228]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	031b      	lsls	r3, r3, #12
 8004140:	4935      	ldr	r1, [pc, #212]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004146:	e06f      	b.n	8004228 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b33      	ldr	r3, [pc, #204]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	4930      	ldr	r1, [pc, #192]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800415c:	e064      	b.n	8004228 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d045      	beq.n	80041f2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004166:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0219 	bic.w	r2, r3, #25
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	4929      	ldr	r1, [pc, #164]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd fb14 	bl	80017a4 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004180:	f7fd fb10 	bl	80017a4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e307      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004192:	4b21      	ldr	r3, [pc, #132]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	f7fd fb2f 	bl	8001800 <HAL_GetREVID>
 80041a2:	4602      	mov	r2, r0
 80041a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d817      	bhi.n	80041dc <HAL_RCC_OscConfig+0x24c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d108      	bne.n	80041c6 <HAL_RCC_OscConfig+0x236>
 80041b4:	4b18      	ldr	r3, [pc, #96]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041bc:	4a16      	ldr	r2, [pc, #88]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c2:	6053      	str	r3, [r2, #4]
 80041c4:	e030      	b.n	8004228 <HAL_RCC_OscConfig+0x298>
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	031b      	lsls	r3, r3, #12
 80041d4:	4910      	ldr	r1, [pc, #64]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]
 80041da:	e025      	b.n	8004228 <HAL_RCC_OscConfig+0x298>
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	490b      	ldr	r1, [pc, #44]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
 80041f0:	e01a      	b.n	8004228 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a08      	ldr	r2, [pc, #32]	; (8004218 <HAL_RCC_OscConfig+0x288>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fd fad1 	bl	80017a4 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004204:	e00a      	b.n	800421c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004206:	f7fd facd 	bl	80017a4 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d903      	bls.n	800421c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e2c4      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
 8004218:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800421c:	4ba4      	ldr	r3, [pc, #656]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ee      	bne.n	8004206 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80a9 	beq.w	8004388 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004236:	4b9e      	ldr	r3, [pc, #632]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800423e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004240:	4b9b      	ldr	r3, [pc, #620]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d007      	beq.n	800425c <HAL_RCC_OscConfig+0x2cc>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b18      	cmp	r3, #24
 8004250:	d13a      	bne.n	80042c8 <HAL_RCC_OscConfig+0x338>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d135      	bne.n	80042c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800425c:	4b94      	ldr	r3, [pc, #592]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_OscConfig+0x2e4>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	2b80      	cmp	r3, #128	; 0x80
 800426e:	d001      	beq.n	8004274 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e296      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004274:	f7fd fac4 	bl	8001800 <HAL_GetREVID>
 8004278:	4602      	mov	r2, r0
 800427a:	f241 0303 	movw	r3, #4099	; 0x1003
 800427e:	429a      	cmp	r2, r3
 8004280:	d817      	bhi.n	80042b2 <HAL_RCC_OscConfig+0x322>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	2b20      	cmp	r3, #32
 8004288:	d108      	bne.n	800429c <HAL_RCC_OscConfig+0x30c>
 800428a:	4b89      	ldr	r3, [pc, #548]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004292:	4a87      	ldr	r2, [pc, #540]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004294:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004298:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800429a:	e075      	b.n	8004388 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800429c:	4b84      	ldr	r3, [pc, #528]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	069b      	lsls	r3, r3, #26
 80042aa:	4981      	ldr	r1, [pc, #516]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042b0:	e06a      	b.n	8004388 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042b2:	4b7f      	ldr	r3, [pc, #508]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	497b      	ldr	r1, [pc, #492]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042c6:	e05f      	b.n	8004388 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d042      	beq.n	8004356 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042d0:	4b77      	ldr	r3, [pc, #476]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a76      	ldr	r2, [pc, #472]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80042d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fa62 	bl	80017a4 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042e4:	f7fd fa5e 	bl	80017a4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e255      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042f6:	4b6e      	ldr	r3, [pc, #440]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004302:	f7fd fa7d 	bl	8001800 <HAL_GetREVID>
 8004306:	4602      	mov	r2, r0
 8004308:	f241 0303 	movw	r3, #4099	; 0x1003
 800430c:	429a      	cmp	r2, r3
 800430e:	d817      	bhi.n	8004340 <HAL_RCC_OscConfig+0x3b0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	2b20      	cmp	r3, #32
 8004316:	d108      	bne.n	800432a <HAL_RCC_OscConfig+0x39a>
 8004318:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004320:	4a63      	ldr	r2, [pc, #396]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004326:	6053      	str	r3, [r2, #4]
 8004328:	e02e      	b.n	8004388 <HAL_RCC_OscConfig+0x3f8>
 800432a:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	069b      	lsls	r3, r3, #26
 8004338:	495d      	ldr	r1, [pc, #372]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
 800433e:	e023      	b.n	8004388 <HAL_RCC_OscConfig+0x3f8>
 8004340:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	4958      	ldr	r1, [pc, #352]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004350:	4313      	orrs	r3, r2
 8004352:	60cb      	str	r3, [r1, #12]
 8004354:	e018      	b.n	8004388 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004356:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a55      	ldr	r2, [pc, #340]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800435c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fd fa1f 	bl	80017a4 <HAL_GetTick>
 8004366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800436a:	f7fd fa1b 	bl	80017a4 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e212      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800437c:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d036      	beq.n	8004402 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d019      	beq.n	80043d0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439c:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800439e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a0:	4a43      	ldr	r2, [pc, #268]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fd f9fc 	bl	80017a4 <HAL_GetTick>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fd f9f8 	bl	80017a4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1ef      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043c2:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x420>
 80043ce:	e018      	b.n	8004402 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d0:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd f9e2 	bl	80017a4 <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd f9de 	bl	80017a4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1d5      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043f6:	4b2e      	ldr	r3, [pc, #184]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d036      	beq.n	800447c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d019      	beq.n	800444a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800441c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004420:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004422:	f7fd f9bf 	bl	80017a4 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800442a:	f7fd f9bb 	bl	80017a4 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e1b2      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x49a>
 8004448:	e018      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004454:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004456:	f7fd f9a5 	bl	80017a4 <HAL_GetTick>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800445e:	f7fd f9a1 	bl	80017a4 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e198      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCC_OscConfig+0x520>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8085 	beq.w	8004594 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_RCC_OscConfig+0x524>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_OscConfig+0x524>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004496:	f7fd f985 	bl	80017a4 <HAL_GetTick>
 800449a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800449c:	e00c      	b.n	80044b8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fd f981 	bl	80017a4 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b64      	cmp	r3, #100	; 0x64
 80044aa:	d905      	bls.n	80044b8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e178      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
 80044b0:	58024400 	.word	0x58024400
 80044b4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b8:	4b96      	ldr	r3, [pc, #600]	; (8004714 <HAL_RCC_OscConfig+0x784>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ec      	beq.n	800449e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x54a>
 80044cc:	4b92      	ldr	r3, [pc, #584]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a91      	ldr	r2, [pc, #580]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	e02d      	b.n	8004536 <HAL_RCC_OscConfig+0x5a6>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x56c>
 80044e2:	4b8d      	ldr	r3, [pc, #564]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a8c      	ldr	r2, [pc, #560]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
 80044ee:	4b8a      	ldr	r3, [pc, #552]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a89      	ldr	r2, [pc, #548]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	e01c      	b.n	8004536 <HAL_RCC_OscConfig+0x5a6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b05      	cmp	r3, #5
 8004502:	d10c      	bne.n	800451e <HAL_RCC_OscConfig+0x58e>
 8004504:	4b84      	ldr	r3, [pc, #528]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4a83      	ldr	r2, [pc, #524]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	6713      	str	r3, [r2, #112]	; 0x70
 8004510:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a80      	ldr	r2, [pc, #512]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	e00b      	b.n	8004536 <HAL_RCC_OscConfig+0x5a6>
 800451e:	4b7e      	ldr	r3, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a7d      	ldr	r2, [pc, #500]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6713      	str	r3, [r2, #112]	; 0x70
 800452a:	4b7b      	ldr	r3, [pc, #492]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a7a      	ldr	r2, [pc, #488]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d015      	beq.n	800456a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fd f931 	bl	80017a4 <HAL_GetTick>
 8004542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fd f92d 	bl	80017a4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e122      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800455c:	4b6e      	ldr	r3, [pc, #440]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ee      	beq.n	8004546 <HAL_RCC_OscConfig+0x5b6>
 8004568:	e014      	b.n	8004594 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fd f91b 	bl	80017a4 <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd f917 	bl	80017a4 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e10c      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004588:	4b63      	ldr	r3, [pc, #396]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ee      	bne.n	8004572 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8101 	beq.w	80047a0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800459e:	4b5e      	ldr	r3, [pc, #376]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	2b18      	cmp	r3, #24
 80045a8:	f000 80bc 	beq.w	8004724 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f040 8095 	bne.w	80046e0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b6:	4b58      	ldr	r3, [pc, #352]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a57      	ldr	r2, [pc, #348]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80045bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fd f8ef 	bl	80017a4 <HAL_GetTick>
 80045c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fd f8eb 	bl	80017a4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0e2      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045dc:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e8:	4b4b      	ldr	r3, [pc, #300]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80045ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_RCC_OscConfig+0x78c>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	430a      	orrs	r2, r1
 80045fc:	4946      	ldr	r1, [pc, #280]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	628b      	str	r3, [r1, #40]	; 0x28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	3b01      	subs	r3, #1
 8004608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004610:	3b01      	subs	r3, #1
 8004612:	025b      	lsls	r3, r3, #9
 8004614:	b29b      	uxth	r3, r3
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	3b01      	subs	r3, #1
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	3b01      	subs	r3, #1
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004632:	4939      	ldr	r1, [pc, #228]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004634:	4313      	orrs	r3, r2
 8004636:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004638:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4a36      	ldr	r2, [pc, #216]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCC_OscConfig+0x790>)
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004650:	00d2      	lsls	r2, r2, #3
 8004652:	4931      	ldr	r1, [pc, #196]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004654:	4313      	orrs	r3, r2
 8004656:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	f023 020c 	bic.w	r2, r3, #12
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	492c      	ldr	r1, [pc, #176]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004666:	4313      	orrs	r3, r2
 8004668:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800466a:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	f023 0202 	bic.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	4928      	ldr	r1, [pc, #160]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004678:	4313      	orrs	r3, r2
 800467a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800467c:	4b26      	ldr	r3, [pc, #152]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4a25      	ldr	r2, [pc, #148]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004688:	4b23      	ldr	r3, [pc, #140]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4a22      	ldr	r2, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800468e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004692:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004694:	4b20      	ldr	r3, [pc, #128]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 800469a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800469e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80046a0:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ac:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd f874 	bl	80017a4 <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd f870 	bl	80017a4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e067      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x730>
 80046de:	e05f      	b.n	80047a0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd f85a 	bl	80017a4 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fd f856 	bl	80017a4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e04d      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004706:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_RCC_OscConfig+0x788>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x764>
 8004712:	e045      	b.n	80047a0 <HAL_RCC_OscConfig+0x810>
 8004714:	58024800 	.word	0x58024800
 8004718:	58024400 	.word	0x58024400
 800471c:	fffffc0c 	.word	0xfffffc0c
 8004720:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <HAL_RCC_OscConfig+0x81c>)
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_RCC_OscConfig+0x81c>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b01      	cmp	r3, #1
 8004736:	d031      	beq.n	800479c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f003 0203 	and.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d12a      	bne.n	800479c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d122      	bne.n	800479c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	0a5b      	lsrs	r3, r3, #9
 800476a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	0c1b      	lsrs	r3, r3, #16
 800477c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d108      	bne.n	800479c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3730      	adds	r7, #48	; 0x30
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	58024400 	.word	0x58024400

080047b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e19c      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b8a      	ldr	r3, [pc, #552]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d910      	bls.n	80047f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b87      	ldr	r3, [pc, #540]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 020f 	bic.w	r2, r3, #15
 80047da:	4985      	ldr	r1, [pc, #532]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e2:	4b83      	ldr	r3, [pc, #524]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e184      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d010      	beq.n	8004822 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	4b7b      	ldr	r3, [pc, #492]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800480c:	429a      	cmp	r2, r3
 800480e:	d908      	bls.n	8004822 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004810:	4b78      	ldr	r3, [pc, #480]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4975      	ldr	r1, [pc, #468]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800481e:	4313      	orrs	r3, r2
 8004820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	4b70      	ldr	r3, [pc, #448]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800483a:	429a      	cmp	r2, r3
 800483c:	d908      	bls.n	8004850 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800483e:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	496a      	ldr	r1, [pc, #424]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800484c:	4313      	orrs	r3, r2
 800484e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d010      	beq.n	800487e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	4b64      	ldr	r3, [pc, #400]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004868:	429a      	cmp	r2, r3
 800486a:	d908      	bls.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800486c:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	495e      	ldr	r1, [pc, #376]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800487a:	4313      	orrs	r3, r2
 800487c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d010      	beq.n	80048ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004896:	429a      	cmp	r2, r3
 8004898:	d908      	bls.n	80048ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800489a:	4b56      	ldr	r3, [pc, #344]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4953      	ldr	r1, [pc, #332]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d010      	beq.n	80048da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d908      	bls.n	80048da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f023 020f 	bic.w	r2, r3, #15
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4947      	ldr	r1, [pc, #284]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d055      	beq.n	8004992 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80048e6:	4b43      	ldr	r3, [pc, #268]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	4940      	ldr	r1, [pc, #256]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004900:	4b3c      	ldr	r3, [pc, #240]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d121      	bne.n	8004950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0f6      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d107      	bne.n	8004928 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004918:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d115      	bne.n	8004950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0ea      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d107      	bne.n	8004940 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004930:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0de      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004940:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0d6      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f023 0207 	bic.w	r2, r3, #7
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4925      	ldr	r1, [pc, #148]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800495e:	4313      	orrs	r3, r2
 8004960:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004962:	f7fc ff1f 	bl	80017a4 <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004968:	e00a      	b.n	8004980 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496a:	f7fc ff1b 	bl	80017a4 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0be      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004980:	4b1c      	ldr	r3, [pc, #112]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	429a      	cmp	r2, r3
 8004990:	d1eb      	bne.n	800496a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d010      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d208      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f023 020f 	bic.w	r2, r3, #15
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	490e      	ldr	r1, [pc, #56]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d214      	bcs.n	80049f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	4906      	ldr	r1, [pc, #24]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e086      	b.n	8004afe <HAL_RCC_ClockConfig+0x34e>
 80049f0:	52002000 	.word	0x52002000
 80049f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d010      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	4b3f      	ldr	r3, [pc, #252]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d208      	bcs.n	8004a26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a14:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	4939      	ldr	r1, [pc, #228]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d010      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d208      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a42:	4b31      	ldr	r3, [pc, #196]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	492e      	ldr	r1, [pc, #184]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d010      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d208      	bcs.n	8004a82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a70:	4b25      	ldr	r3, [pc, #148]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4922      	ldr	r1, [pc, #136]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d010      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d208      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4917      	ldr	r1, [pc, #92]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ab0:	f000 f834 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004ab4:	4601      	mov	r1, r0
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <HAL_RCC_ClockConfig+0x35c>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	fa21 f303 	lsr.w	r3, r1, r3
 8004acc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_RCC_ClockConfig+0x358>)
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <HAL_RCC_ClockConfig+0x35c>)
 8004ad8:	5cd3      	ldrb	r3, [r2, r3]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_RCC_ClockConfig+0x360>)
 8004ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_RCC_ClockConfig+0x364>)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_RCC_ClockConfig+0x368>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fc fb44 	bl	8001180 <HAL_InitTick>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	0801b380 	.word	0x0801b380
 8004b10:	24000004 	.word	0x24000004
 8004b14:	24000000 	.word	0x24000000
 8004b18:	24000008 	.word	0x24000008

08004b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b089      	sub	sp, #36	; 0x24
 8004b20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b22:	4baf      	ldr	r3, [pc, #700]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b2a:	2b18      	cmp	r3, #24
 8004b2c:	f200 814e 	bhi.w	8004dcc <HAL_RCC_GetSysClockFreq+0x2b0>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b9d 	.word	0x08004b9d
 8004b3c:	08004dcd 	.word	0x08004dcd
 8004b40:	08004dcd 	.word	0x08004dcd
 8004b44:	08004dcd 	.word	0x08004dcd
 8004b48:	08004dcd 	.word	0x08004dcd
 8004b4c:	08004dcd 	.word	0x08004dcd
 8004b50:	08004dcd 	.word	0x08004dcd
 8004b54:	08004dcd 	.word	0x08004dcd
 8004b58:	08004bc3 	.word	0x08004bc3
 8004b5c:	08004dcd 	.word	0x08004dcd
 8004b60:	08004dcd 	.word	0x08004dcd
 8004b64:	08004dcd 	.word	0x08004dcd
 8004b68:	08004dcd 	.word	0x08004dcd
 8004b6c:	08004dcd 	.word	0x08004dcd
 8004b70:	08004dcd 	.word	0x08004dcd
 8004b74:	08004dcd 	.word	0x08004dcd
 8004b78:	08004bc9 	.word	0x08004bc9
 8004b7c:	08004dcd 	.word	0x08004dcd
 8004b80:	08004dcd 	.word	0x08004dcd
 8004b84:	08004dcd 	.word	0x08004dcd
 8004b88:	08004dcd 	.word	0x08004dcd
 8004b8c:	08004dcd 	.word	0x08004dcd
 8004b90:	08004dcd 	.word	0x08004dcd
 8004b94:	08004dcd 	.word	0x08004dcd
 8004b98:	08004bcf 	.word	0x08004bcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9c:	4b90      	ldr	r3, [pc, #576]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ba8:	4b8d      	ldr	r3, [pc, #564]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	08db      	lsrs	r3, r3, #3
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	4a8c      	ldr	r2, [pc, #560]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004bba:	e10a      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bbc:	4b89      	ldr	r3, [pc, #548]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bbe:	61bb      	str	r3, [r7, #24]
    break;
 8004bc0:	e107      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004bc2:	4b89      	ldr	r3, [pc, #548]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004bc4:	61bb      	str	r3, [r7, #24]
    break;
 8004bc6:	e104      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004bc8:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004bca:	61bb      	str	r3, [r7, #24]
    break;
 8004bcc:	e101      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bce:	4b84      	ldr	r3, [pc, #528]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004bd8:	4b81      	ldr	r3, [pc, #516]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004be4:	4b7e      	ldr	r3, [pc, #504]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004bee:	4b7c      	ldr	r3, [pc, #496]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80da 	beq.w	8004dc6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d05a      	beq.n	8004cce <HAL_RCC_GetSysClockFreq+0x1b2>
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d302      	bcc.n	8004c22 <HAL_RCC_GetSysClockFreq+0x106>
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d078      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004c20:	e099      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c22:	4b6f      	ldr	r3, [pc, #444]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02d      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c2e:	4b6c      	ldr	r3, [pc, #432]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	4a6a      	ldr	r2, [pc, #424]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c58:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c6c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004df0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c88:	e087      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c94:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004df4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9c:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cb0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004df0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ccc:	e065      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004df8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce0:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cf4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004df0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d10:	e043      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x2e0>
 8004d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d24:	4b2e      	ldr	r3, [pc, #184]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d38:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004df0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d54:	e021      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d60:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004df8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d68:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d7c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004df0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d98:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004d9a:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	0a5b      	lsrs	r3, r3, #9
 8004da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da4:	3301      	adds	r3, #1
 8004da6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dbe:	ee17 3a90 	vmov	r3, s15
 8004dc2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004dc4:	e005      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
    break;
 8004dca:	e002      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004dce:	61bb      	str	r3, [r7, #24]
    break;
 8004dd0:	bf00      	nop
  }

  return sysclockfreq;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3724      	adds	r7, #36	; 0x24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	58024400 	.word	0x58024400
 8004de4:	03d09000 	.word	0x03d09000
 8004de8:	003d0900 	.word	0x003d0900
 8004dec:	007a1200 	.word	0x007a1200
 8004df0:	46000000 	.word	0x46000000
 8004df4:	4c742400 	.word	0x4c742400
 8004df8:	4a742400 	.word	0x4a742400
 8004dfc:	4af42400 	.word	0x4af42400

08004e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e06:	f7ff fe89 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004e0a:	4601      	mov	r1, r0
 8004e0c:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	4a0f      	ldr	r2, [pc, #60]	; (8004e54 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e18:	5cd3      	ldrb	r3, [r2, r3]
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004e22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e2e:	5cd3      	ldrb	r3, [r2, r3]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3a:	4a07      	ldr	r2, [pc, #28]	; (8004e58 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e3e:	4a07      	ldr	r2, [pc, #28]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e46:	681b      	ldr	r3, [r3, #0]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	58024400 	.word	0x58024400
 8004e54:	0801b380 	.word	0x0801b380
 8004e58:	24000004 	.word	0x24000004
 8004e5c:	24000000 	.word	0x24000000

08004e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e64:	f7ff ffcc 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	58024400 	.word	0x58024400
 8004e88:	0801b380 	.word	0x0801b380

08004e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e90:	f7ff ffb6 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e94:	4601      	mov	r1, r0
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	0801b380 	.word	0x0801b380

08004eb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	223f      	movs	r2, #63	; 0x3f
 8004ec6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_RCC_GetClockConfig+0x7c>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0207 	and.w	r2, r3, #7
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004ed4:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <HAL_RCC_GetClockConfig+0x7c>)
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004ee0:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <HAL_RCC_GetClockConfig+0x7c>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <HAL_RCC_GetClockConfig+0x7c>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <HAL_RCC_GetClockConfig+0x7c>)
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_GetClockConfig+0x7c>)
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004f10:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_RCC_GetClockConfig+0x7c>)
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_RCC_GetClockConfig+0x80>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	58024400 	.word	0x58024400
 8004f38:	52002000 	.word	0x52002000

08004f3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f44:	2300      	movs	r3, #0
 8004f46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d03d      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f60:	d013      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f66:	d802      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f6c:	e01f      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f72:	d013      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f78:	d01c      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004f7a:	e018      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7c:	4baf      	ldr	r3, [pc, #700]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	4aae      	ldr	r2, [pc, #696]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f88:	e015      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 f96f 	bl	8006274 <RCCEx_PLL2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f9a:	e00c      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3324      	adds	r3, #36	; 0x24
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 fa18 	bl	80063d8 <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004fbc:	4b9f      	ldr	r3, [pc, #636]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc8:	499c      	ldr	r1, [pc, #624]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8004fce:	e001      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d03d      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d826      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005005 	.word	0x08005005
 8004ff4:	08005013 	.word	0x08005013
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	0800503d 	.word	0x0800503d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005004:	4b8d      	ldr	r3, [pc, #564]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4a8c      	ldr	r2, [pc, #560]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800500a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005010:	e015      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f92b 	bl	8006274 <RCCEx_PLL2_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005022:	e00c      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3324      	adds	r3, #36	; 0x24
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f001 f9d4 	bl	80063d8 <RCCEx_PLL3_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005034:	e003      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
      break;
 800503a:	e000      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800503c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005044:	4b7d      	ldr	r3, [pc, #500]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	f023 0207 	bic.w	r2, r3, #7
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	497a      	ldr	r1, [pc, #488]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005052:	4313      	orrs	r3, r2
 8005054:	650b      	str	r3, [r1, #80]	; 0x50
 8005056:	e001      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005064:	2b00      	cmp	r3, #0
 8005066:	d03e      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	2b80      	cmp	r3, #128	; 0x80
 800506e:	d01c      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d804      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d00d      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800507c:	e01e      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800507e:	2bc0      	cmp	r3, #192	; 0xc0
 8005080:	d01f      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005086:	d01e      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005088:	e018      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508a:	4b6c      	ldr	r3, [pc, #432]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	4a6b      	ldr	r2, [pc, #428]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005096:	e017      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f8e8 	bl	8006274 <RCCEx_PLL2_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050a8:	e00e      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f991 	bl	80063d8 <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050ba:	e005      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]
      break;
 80050c0:	e002      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80050c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050ce:	4b5b      	ldr	r3, [pc, #364]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	4958      	ldr	r1, [pc, #352]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	650b      	str	r3, [r1, #80]	; 0x50
 80050e0:	e001      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d044      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fc:	d01f      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80050fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005102:	d805      	bhi.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510c:	d00e      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800510e:	e01f      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005110:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005114:	d01f      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511a:	d01e      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800511c:	e018      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	4a46      	ldr	r2, [pc, #280]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800512a:	e017      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f001 f89e 	bl	8006274 <RCCEx_PLL2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800513c:	e00e      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f947 	bl	80063d8 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800514e:	e005      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
      break;
 8005154:	e002      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800515a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005170:	4932      	ldr	r1, [pc, #200]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005172:	4313      	orrs	r3, r2
 8005174:	658b      	str	r3, [r1, #88]	; 0x58
 8005176:	e001      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005184:	2b00      	cmp	r3, #0
 8005186:	d044      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800518e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005192:	d01f      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005198:	d805      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800519e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a2:	d00e      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051a4:	e01f      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80051a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051aa:	d01f      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80051ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051b0:	d01e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80051b2:	e018      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a20      	ldr	r2, [pc, #128]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051c0:	e017      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2100      	movs	r1, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 f853 	bl	8006274 <RCCEx_PLL2_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051d2:	e00e      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3324      	adds	r3, #36	; 0x24
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 f8fc 	bl	80063d8 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051e4:	e005      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80051ec:	bf00      	nop
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80051f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051f8:	4b10      	ldr	r3, [pc, #64]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005206:	490d      	ldr	r1, [pc, #52]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005208:	4313      	orrs	r3, r2
 800520a:	658b      	str	r3, [r1, #88]	; 0x58
 800520c:	e001      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d035      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005222:	2b10      	cmp	r3, #16
 8005224:	d00c      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005226:	2b10      	cmp	r3, #16
 8005228:	d802      	bhi.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800522e:	e017      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d00c      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d018      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005238:	e012      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005240:	4baf      	ldr	r3, [pc, #700]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	4aae      	ldr	r2, [pc, #696]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800524c:	e00e      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	2102      	movs	r1, #2
 8005254:	4618      	mov	r0, r3
 8005256:	f001 f80d 	bl	8006274 <RCCEx_PLL2_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800525e:	e005      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
      break;
 8005264:	e002      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800526a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005272:	4ba3      	ldr	r3, [pc, #652]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	49a0      	ldr	r1, [pc, #640]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005280:	4313      	orrs	r3, r2
 8005282:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005284:	e001      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d042      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	d01f      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80052a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a4:	d805      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ae:	d00e      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x392>
 80052b0:	e01f      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80052b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052b6:	d01f      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80052b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052bc:	d01e      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80052be:	e018      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c0:	4b8f      	ldr	r3, [pc, #572]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a8e      	ldr	r2, [pc, #568]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052cc:	e017      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 ffcd 	bl	8006274 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052de:	e00e      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 f876 	bl	80063d8 <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052f0:	e005      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
      break;
 80052f6:	e002      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80052f8:	bf00      	nop
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80052fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005304:	4b7e      	ldr	r3, [pc, #504]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005308:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	497b      	ldr	r1, [pc, #492]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	650b      	str	r3, [r1, #80]	; 0x50
 8005316:	e001      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d042      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005330:	d01b      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005336:	d805      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d022      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005342:	e01b      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005348:	d01d      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800534a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800534e:	d01c      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005350:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005354:	d01b      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005356:	e011      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f000 ff88 	bl	8006274 <RCCEx_PLL2_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005368:	e012      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3324      	adds	r3, #36	; 0x24
 800536e:	2101      	movs	r1, #1
 8005370:	4618      	mov	r0, r3
 8005372:	f001 f831 	bl	80063d8 <RCCEx_PLL3_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800537a:	e009      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
      break;
 8005380:	e006      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005382:	bf00      	nop
 8005384:	e004      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800538e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005396:	4b5a      	ldr	r3, [pc, #360]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a2:	4957      	ldr	r1, [pc, #348]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	650b      	str	r3, [r1, #80]	; 0x50
 80053a8:	e001      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
 80053ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d044      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c4:	d01b      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80053c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ca:	d805      	bhi.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d022      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80053d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80053d6:	e01b      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053dc:	d01d      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80053de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053e2:	d01c      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80053e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053e8:	d01b      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80053ea:	e011      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2101      	movs	r1, #1
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 ff3e 	bl	8006274 <RCCEx_PLL2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053fc:	e012      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	2101      	movs	r1, #1
 8005404:	4618      	mov	r0, r3
 8005406:	f000 ffe7 	bl	80063d8 <RCCEx_PLL3_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800540e:	e009      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	e006      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005416:	bf00      	nop
 8005418:	e004      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800541a:	bf00      	nop
 800541c:	e002      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800542a:	4b35      	ldr	r3, [pc, #212]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005438:	4931      	ldr	r1, [pc, #196]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	658b      	str	r3, [r1, #88]	; 0x58
 800543e:	e001      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02d      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005458:	d005      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800545a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545e:	d009      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d013      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005464:	e00f      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	4a25      	ldr	r2, [pc, #148]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800546c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005472:	e00c      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	2101      	movs	r1, #1
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fefa 	bl	8006274 <RCCEx_PLL2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	75fb      	strb	r3, [r7, #23]
      break;
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800548c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005494:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a0:	4917      	ldr	r1, [pc, #92]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	650b      	str	r3, [r1, #80]	; 0x50
 80054a6:	e001      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d035      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d81b      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	08005505 	.word	0x08005505
 80054cc:	080054d9 	.word	0x080054d9
 80054d0:	080054e7 	.word	0x080054e7
 80054d4:	08005505 	.word	0x08005505
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	4a08      	ldr	r2, [pc, #32]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054e4:	e00f      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	2102      	movs	r1, #2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fec1 	bl	8006274 <RCCEx_PLL2_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054f6:	e006      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
      break;
 80054fc:	e003      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80054fe:	bf00      	nop
 8005500:	58024400 	.word	0x58024400
      break;
 8005504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800550c:	4bba      	ldr	r3, [pc, #744]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	f023 0203 	bic.w	r2, r3, #3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	49b7      	ldr	r1, [pc, #732]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800551e:	e001      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8086 	beq.w	800563e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005532:	4bb2      	ldr	r3, [pc, #712]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4ab1      	ldr	r2, [pc, #708]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800553e:	f7fc f931 	bl	80017a4 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005544:	e009      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fc f92d 	bl	80017a4 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b64      	cmp	r3, #100	; 0x64
 8005552:	d902      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	75fb      	strb	r3, [r7, #23]
        break;
 8005558:	e005      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555a:	4ba8      	ldr	r3, [pc, #672]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ef      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d166      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800556c:	4ba2      	ldr	r3, [pc, #648]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800556e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005576:	4053      	eors	r3, r2
 8005578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557c:	2b00      	cmp	r3, #0
 800557e:	d013      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005580:	4b9d      	ldr	r3, [pc, #628]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005588:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800558a:	4b9b      	ldr	r3, [pc, #620]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a9a      	ldr	r2, [pc, #616]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005596:	4b98      	ldr	r3, [pc, #608]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a97      	ldr	r2, [pc, #604]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800559c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055a2:	4a95      	ldr	r2, [pc, #596]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b2:	d115      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fc f8f6 	bl	80017a4 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ba:	e00b      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fc f8f2 	bl	80017a4 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d902      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	75fb      	strb	r3, [r7, #23]
            break;
 80055d2:	e005      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d4:	4b88      	ldr	r3, [pc, #544]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ed      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d126      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d10d      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80055f6:	4b80      	ldr	r3, [pc, #512]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005604:	0919      	lsrs	r1, r3, #4
 8005606:	4b7e      	ldr	r3, [pc, #504]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005608:	400b      	ands	r3, r1
 800560a:	497b      	ldr	r1, [pc, #492]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800560c:	4313      	orrs	r3, r2
 800560e:	610b      	str	r3, [r1, #16]
 8005610:	e005      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005612:	4b79      	ldr	r3, [pc, #484]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	4a78      	ldr	r2, [pc, #480]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005618:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800561c:	6113      	str	r3, [r2, #16]
 800561e:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005620:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562c:	4972      	ldr	r1, [pc, #456]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	670b      	str	r3, [r1, #112]	; 0x70
 8005632:	e004      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	75bb      	strb	r3, [r7, #22]
 8005638:	e001      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d07d      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800564e:	2b28      	cmp	r3, #40	; 0x28
 8005650:	d866      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	08005727 	.word	0x08005727
 800565c:	08005721 	.word	0x08005721
 8005660:	08005721 	.word	0x08005721
 8005664:	08005721 	.word	0x08005721
 8005668:	08005721 	.word	0x08005721
 800566c:	08005721 	.word	0x08005721
 8005670:	08005721 	.word	0x08005721
 8005674:	08005721 	.word	0x08005721
 8005678:	080056fd 	.word	0x080056fd
 800567c:	08005721 	.word	0x08005721
 8005680:	08005721 	.word	0x08005721
 8005684:	08005721 	.word	0x08005721
 8005688:	08005721 	.word	0x08005721
 800568c:	08005721 	.word	0x08005721
 8005690:	08005721 	.word	0x08005721
 8005694:	08005721 	.word	0x08005721
 8005698:	0800570f 	.word	0x0800570f
 800569c:	08005721 	.word	0x08005721
 80056a0:	08005721 	.word	0x08005721
 80056a4:	08005721 	.word	0x08005721
 80056a8:	08005721 	.word	0x08005721
 80056ac:	08005721 	.word	0x08005721
 80056b0:	08005721 	.word	0x08005721
 80056b4:	08005721 	.word	0x08005721
 80056b8:	08005727 	.word	0x08005727
 80056bc:	08005721 	.word	0x08005721
 80056c0:	08005721 	.word	0x08005721
 80056c4:	08005721 	.word	0x08005721
 80056c8:	08005721 	.word	0x08005721
 80056cc:	08005721 	.word	0x08005721
 80056d0:	08005721 	.word	0x08005721
 80056d4:	08005721 	.word	0x08005721
 80056d8:	08005727 	.word	0x08005727
 80056dc:	08005721 	.word	0x08005721
 80056e0:	08005721 	.word	0x08005721
 80056e4:	08005721 	.word	0x08005721
 80056e8:	08005721 	.word	0x08005721
 80056ec:	08005721 	.word	0x08005721
 80056f0:	08005721 	.word	0x08005721
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005727 	.word	0x08005727
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	2101      	movs	r1, #1
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fdb6 	bl	8006274 <RCCEx_PLL2_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800570c:	e00c      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3324      	adds	r3, #36	; 0x24
 8005712:	2101      	movs	r1, #1
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fe5f 	bl	80063d8 <RCCEx_PLL3_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800571e:	e003      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
      break;
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800572e:	4b32      	ldr	r3, [pc, #200]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573a:	492f      	ldr	r1, [pc, #188]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800573c:	4313      	orrs	r3, r2
 800573e:	654b      	str	r3, [r1, #84]	; 0x54
 8005740:	e001      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d037      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005756:	2b05      	cmp	r3, #5
 8005758:	d820      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	080057a3 	.word	0x080057a3
 8005764:	08005779 	.word	0x08005779
 8005768:	0800578b 	.word	0x0800578b
 800576c:	080057a3 	.word	0x080057a3
 8005770:	080057a3 	.word	0x080057a3
 8005774:	080057a3 	.word	0x080057a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fd78 	bl	8006274 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005788:	e00c      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3324      	adds	r3, #36	; 0x24
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fe21 	bl	80063d8 <RCCEx_PLL3_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800579a:	e003      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	75fb      	strb	r3, [r7, #23]
      break;
 80057a0:	e000      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80057a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057aa:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ae:	f023 0207 	bic.w	r2, r3, #7
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b6:	4910      	ldr	r1, [pc, #64]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	654b      	str	r3, [r1, #84]	; 0x54
 80057bc:	e001      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d040      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d827      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	0800582f 	.word	0x0800582f
 80057e4:	08005805 	.word	0x08005805
 80057e8:	08005817 	.word	0x08005817
 80057ec:	0800582f 	.word	0x0800582f
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	0800582f 	.word	0x0800582f
 80057f8:	58024400 	.word	0x58024400
 80057fc:	58024800 	.word	0x58024800
 8005800:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fd32 	bl	8006274 <RCCEx_PLL2_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005814:	e00c      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3324      	adds	r3, #36	; 0x24
 800581a:	2101      	movs	r1, #1
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fddb 	bl	80063d8 <RCCEx_PLL3_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005826:	e003      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
      break;
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800582e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005836:	4bb2      	ldr	r3, [pc, #712]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	f023 0207 	bic.w	r2, r3, #7
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005844:	49ae      	ldr	r1, [pc, #696]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005846:	4313      	orrs	r3, r2
 8005848:	658b      	str	r3, [r1, #88]	; 0x58
 800584a:	e001      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d044      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005866:	d01b      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800586c:	d805      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d022      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005878:	e01b      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587e:	d01d      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005884:	d01c      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005886:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800588a:	d01b      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800588c:	e011      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fced 	bl	8006274 <RCCEx_PLL2_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800589e:	e012      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	2102      	movs	r1, #2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fd96 	bl	80063d8 <RCCEx_PLL3_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058b0:	e009      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	e006      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80058b8:	bf00      	nop
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80058c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058cc:	4b8c      	ldr	r3, [pc, #560]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058da:	4989      	ldr	r1, [pc, #548]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	654b      	str	r3, [r1, #84]	; 0x54
 80058e0:	e001      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
 80058e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d044      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fc:	d01b      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005902:	d805      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d022      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800590e:	e01b      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d01d      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005916:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800591a:	d01c      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800591c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005920:	d01b      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005922:	e011      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fca2 	bl	8006274 <RCCEx_PLL2_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005934:	e012      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3324      	adds	r3, #36	; 0x24
 800593a:	2102      	movs	r1, #2
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fd4b 	bl	80063d8 <RCCEx_PLL3_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005946:	e009      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	75fb      	strb	r3, [r7, #23]
      break;
 800594c:	e006      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800594e:	bf00      	nop
 8005950:	e004      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800595a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005962:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005970:	4963      	ldr	r1, [pc, #396]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005972:	4313      	orrs	r3, r2
 8005974:	658b      	str	r3, [r1, #88]	; 0x58
 8005976:	e001      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	d044      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800598e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005992:	d01b      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005998:	d805      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d022      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80059a4:	e01b      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80059a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059aa:	d01d      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80059ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059b0:	d01c      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80059b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059b6:	d01b      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80059b8:	e011      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fc57 	bl	8006274 <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059ca:	e012      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3324      	adds	r3, #36	; 0x24
 80059d0:	2102      	movs	r1, #2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fd00 	bl	80063d8 <RCCEx_PLL3_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059dc:	e009      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
      break;
 80059e2:	e006      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059e4:	bf00      	nop
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059e8:	bf00      	nop
 80059ea:	e002      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80059f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059f8:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a06:	493e      	ldr	r1, [pc, #248]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	658b      	str	r3, [r1, #88]	; 0x58
 8005a0c:	e001      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a28:	d10a      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3324      	adds	r3, #36	; 0x24
 8005a2e:	2102      	movs	r1, #2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fcd1 	bl	80063d8 <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a40:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a4e:	492c      	ldr	r1, [pc, #176]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6a:	d10a      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3324      	adds	r3, #36	; 0x24
 8005a70:	2102      	movs	r1, #2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fcb0 	bl	80063d8 <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a82:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a90:	491b      	ldr	r1, [pc, #108]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d032      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d00d      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ab2:	d016      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d111      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fbd8 	bl	8006274 <RCCEx_PLL2_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ac8:	e00c      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3324      	adds	r3, #36	; 0x24
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fc81 	bl	80063d8 <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ada:	e003      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005af8:	4901      	ldr	r1, [pc, #4]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	658b      	str	r3, [r1, #88]	; 0x58
 8005afe:	e003      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d02f      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b1e:	d00c      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005b20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b24:	d015      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b2a:	d10f      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2c:	4b79      	ldr	r3, [pc, #484]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a78      	ldr	r2, [pc, #480]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b38:	e00c      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3324      	adds	r3, #36	; 0x24
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fc49 	bl	80063d8 <RCCEx_PLL3_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b4a:	e003      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	e000      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b5a:	4b6e      	ldr	r3, [pc, #440]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b68:	496a      	ldr	r1, [pc, #424]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	654b      	str	r3, [r1, #84]	; 0x54
 8005b6e:	e001      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d029      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d007      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005b8e:	e00f      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b90:	4b60      	ldr	r3, [pc, #384]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a5f      	ldr	r2, [pc, #380]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b9c:	e00b      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fb65 	bl	8006274 <RCCEx_PLL2_Config>
 8005baa:	4603      	mov	r3, r0
 8005bac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bbc:	4b55      	ldr	r3, [pc, #340]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc8:	4952      	ldr	r1, [pc, #328]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bce:	e001      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3324      	adds	r3, #36	; 0x24
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fbf6 	bl	80063d8 <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d02f      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0a:	d00c      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c10:	d802      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d011      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005c16:	e00d      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c1c:	d00f      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c22:	d00e      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005c24:	e006      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c26:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	4a3a      	ldr	r2, [pc, #232]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005c32:	e007      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	75fb      	strb	r3, [r7, #23]
      break;
 8005c38:	e004      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e002      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c4a:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c56:	492f      	ldr	r1, [pc, #188]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	654b      	str	r3, [r1, #84]	; 0x54
 8005c5c:	e001      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	4926      	ldr	r1, [pc, #152]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d009      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c8c:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c9a:	491e      	ldr	r1, [pc, #120]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb8:	4916      	ldr	r1, [pc, #88]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cd4:	6113      	str	r3, [r2, #16]
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ce0:	490c      	ldr	r1, [pc, #48]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da08      	bge.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfa:	4906      	ldr	r1, [pc, #24]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005d00:	7dbb      	ldrb	r3, [r7, #22]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e000      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	58024400 	.word	0x58024400

08005d18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d1c:	f7ff f870 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8005d20:	4601      	mov	r1, r0
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4a04      	ldr	r2, [pc, #16]	; (8005d40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d2e:	5cd3      	ldrb	r3, [r2, r3]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	0801b380 	.word	0x0801b380

08005d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d4c:	4b9d      	ldr	r3, [pc, #628]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005d56:	4b9b      	ldr	r3, [pc, #620]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	0b1b      	lsrs	r3, r3, #12
 8005d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d62:	4b98      	ldr	r3, [pc, #608]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005d6e:	4b95      	ldr	r3, [pc, #596]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	08db      	lsrs	r3, r3, #3
 8005d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 810a 	beq.w	8005fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d05a      	beq.n	8005e4e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d302      	bcc.n	8005da2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d078      	beq.n	8005e92 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005da0:	e099      	b.n	8005ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da2:	4b88      	ldr	r3, [pc, #544]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d02d      	beq.n	8005e0a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dae:	4b85      	ldr	r3, [pc, #532]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	4a83      	ldr	r2, [pc, #524]	; (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005dba:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbe:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd8:	4b7a      	ldr	r3, [pc, #488]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e04:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e08:	e087      	b.n	8005f1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1c:	4b69      	ldr	r3, [pc, #420]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e30:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e4c:	e065      	b.n	8005f1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e60:	4b58      	ldr	r3, [pc, #352]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e74:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e90:	e043      	b.n	8005f1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea4:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eac:	ee07 3a90 	vmov	s15, r3
 8005eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ed4:	e021      	b.n	8005f1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee8:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f18:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005f1a:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	0a5b      	lsrs	r3, r3, #9
 8005f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f40:	ee17 2a90 	vmov	r2, s15
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005f48:	4b1e      	ldr	r3, [pc, #120]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6e:	ee17 2a90 	vmov	r2, s15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	0e1b      	lsrs	r3, r3, #24
 8005f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9c:	ee17 2a90 	vmov	r2, s15
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	3724      	adds	r7, #36	; 0x24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	03d09000 	.word	0x03d09000
 8005fcc:	46000000 	.word	0x46000000
 8005fd0:	4c742400 	.word	0x4c742400
 8005fd4:	4a742400 	.word	0x4a742400
 8005fd8:	4af42400 	.word	0x4af42400

08005fdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe4:	4b9d      	ldr	r3, [pc, #628]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005fee:	4b9b      	ldr	r3, [pc, #620]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	0d1b      	lsrs	r3, r3, #20
 8005ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ffa:	4b98      	ldr	r3, [pc, #608]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006006:	4b95      	ldr	r3, [pc, #596]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	08db      	lsrs	r3, r3, #3
 800600c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 810a 	beq.w	800623e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d05a      	beq.n	80060e6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006030:	2b01      	cmp	r3, #1
 8006032:	d302      	bcc.n	800603a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006034:	2b02      	cmp	r3, #2
 8006036:	d078      	beq.n	800612a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006038:	e099      	b.n	800616e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800603a:	4b88      	ldr	r3, [pc, #544]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d02d      	beq.n	80060a2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006046:	4b85      	ldr	r3, [pc, #532]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	08db      	lsrs	r3, r3, #3
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	4a83      	ldr	r2, [pc, #524]	; (8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006070:	4b7a      	ldr	r3, [pc, #488]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006080:	ed97 6a03 	vldr	s12, [r7, #12]
 8006084:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060a0:	e087      	b.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80060b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b4:	4b69      	ldr	r3, [pc, #420]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80060cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060e4:	e065      	b.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80060f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f8:	4b58      	ldr	r3, [pc, #352]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006108:	ed97 6a03 	vldr	s12, [r7, #12]
 800610c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006124:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006128:	e043      	b.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006134:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613c:	4b47      	ldr	r3, [pc, #284]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006150:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006168:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800616c:	e021      	b.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006178:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800617c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006180:	4b36      	ldr	r3, [pc, #216]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006190:	ed97 6a03 	vldr	s12, [r7, #12]
 8006194:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061bc:	ee07 3a90 	vmov	s15, r3
 80061c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d8:	ee17 2a90 	vmov	r2, s15
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006206:	ee17 2a90 	vmov	r2, s15
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800620e:	4b13      	ldr	r3, [pc, #76]	; (800625c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	0e1b      	lsrs	r3, r3, #24
 8006214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006224:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006228:	edd7 6a07 	vldr	s13, [r7, #28]
 800622c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006234:	ee17 2a90 	vmov	r2, s15
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800623c:	e008      	b.n	8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	609a      	str	r2, [r3, #8]
}
 8006250:	bf00      	nop
 8006252:	3724      	adds	r7, #36	; 0x24
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	58024400 	.word	0x58024400
 8006260:	03d09000 	.word	0x03d09000
 8006264:	46000000 	.word	0x46000000
 8006268:	4c742400 	.word	0x4c742400
 800626c:	4a742400 	.word	0x4a742400
 8006270:	4af42400 	.word	0x4af42400

08006274 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006282:	4b53      	ldr	r3, [pc, #332]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d101      	bne.n	8006292 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e099      	b.n	80063c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006292:	4b4f      	ldr	r3, [pc, #316]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a4e      	ldr	r2, [pc, #312]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006298:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800629c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629e:	f7fb fa81 	bl	80017a4 <HAL_GetTick>
 80062a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062a4:	e008      	b.n	80062b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062a6:	f7fb fa7d 	bl	80017a4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e086      	b.n	80063c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062b8:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80062c4:	4b42      	ldr	r3, [pc, #264]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	493f      	ldr	r1, [pc, #252]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	628b      	str	r3, [r1, #40]	; 0x28
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	3b01      	subs	r3, #1
 80062de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	025b      	lsls	r3, r3, #9
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	041b      	lsls	r3, r3, #16
 80062f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	3b01      	subs	r3, #1
 8006302:	061b      	lsls	r3, r3, #24
 8006304:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006308:	4931      	ldr	r1, [pc, #196]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800630e:	4b30      	ldr	r3, [pc, #192]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	492d      	ldr	r1, [pc, #180]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800631c:	4313      	orrs	r3, r2
 800631e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006320:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	f023 0220 	bic.w	r2, r3, #32
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	4928      	ldr	r1, [pc, #160]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800632e:	4313      	orrs	r3, r2
 8006330:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006332:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006338:	f023 0310 	bic.w	r3, r3, #16
 800633c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800633e:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <RCCEx_PLL2_Config+0x160>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	69d2      	ldr	r2, [r2, #28]
 800634a:	00d2      	lsls	r2, r2, #3
 800634c:	4920      	ldr	r1, [pc, #128]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800634e:	4313      	orrs	r3, r2
 8006350:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006352:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4a1e      	ldr	r2, [pc, #120]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006358:	f043 0310 	orr.w	r3, r3, #16
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006364:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800636a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800636e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006370:	e00f      	b.n	8006392 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d106      	bne.n	8006386 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006378:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800637e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006384:	e005      	b.n	8006392 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	4a11      	ldr	r2, [pc, #68]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800638c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006390:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a0e      	ldr	r2, [pc, #56]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800639c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639e:	f7fb fa01 	bl	80017a4 <HAL_GetTick>
 80063a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063a4:	e008      	b.n	80063b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063a6:	f7fb f9fd 	bl	80017a4 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e006      	b.n	80063c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	58024400 	.word	0x58024400
 80063d4:	ffff0007 	.word	0xffff0007

080063d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063e6:	4b53      	ldr	r3, [pc, #332]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d101      	bne.n	80063f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e099      	b.n	800652a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80063f6:	4b4f      	ldr	r3, [pc, #316]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a4e      	ldr	r2, [pc, #312]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80063fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006402:	f7fb f9cf 	bl	80017a4 <HAL_GetTick>
 8006406:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006408:	e008      	b.n	800641c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800640a:	f7fb f9cb 	bl	80017a4 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e086      	b.n	800652a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800641c:	4b45      	ldr	r3, [pc, #276]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006428:	4b42      	ldr	r3, [pc, #264]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	051b      	lsls	r3, r3, #20
 8006436:	493f      	ldr	r1, [pc, #252]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006438:	4313      	orrs	r3, r2
 800643a:	628b      	str	r3, [r1, #40]	; 0x28
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	3b01      	subs	r3, #1
 800644c:	025b      	lsls	r3, r3, #9
 800644e:	b29b      	uxth	r3, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	3b01      	subs	r3, #1
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	3b01      	subs	r3, #1
 8006466:	061b      	lsls	r3, r3, #24
 8006468:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800646c:	4931      	ldr	r1, [pc, #196]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	492d      	ldr	r1, [pc, #180]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006480:	4313      	orrs	r3, r2
 8006482:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006484:	4b2b      	ldr	r3, [pc, #172]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	4928      	ldr	r1, [pc, #160]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006492:	4313      	orrs	r3, r2
 8006494:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006496:	4b27      	ldr	r3, [pc, #156]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	4a26      	ldr	r2, [pc, #152]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800649c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a6:	4b24      	ldr	r3, [pc, #144]	; (8006538 <RCCEx_PLL3_Config+0x160>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	69d2      	ldr	r2, [r2, #28]
 80064ae:	00d2      	lsls	r2, r2, #3
 80064b0:	4920      	ldr	r1, [pc, #128]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064b6:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064d4:	e00f      	b.n	80064f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064dc:	4b15      	ldr	r3, [pc, #84]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	4a14      	ldr	r2, [pc, #80]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064e8:	e005      	b.n	80064f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	4a11      	ldr	r2, [pc, #68]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006502:	f7fb f94f 	bl	80017a4 <HAL_GetTick>
 8006506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006508:	e008      	b.n	800651c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800650a:	f7fb f94b 	bl	80017a4 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e006      	b.n	800652a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400
 8006538:	ffff0007 	.word	0xffff0007

0800653c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e049      	b.n	80065e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f841 	bl	80065ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f000 f9be 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d001      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e021      	b.n	800665c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <HAL_TIM_Base_Start_IT+0x68>)
 8006638:	4013      	ands	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b06      	cmp	r3, #6
 8006640:	d00b      	beq.n	800665a <HAL_TIM_Base_Start_IT+0x5a>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006648:	d007      	beq.n	800665a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0201 	orr.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	00010007 	.word	0x00010007

0800666c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b02      	cmp	r3, #2
 8006680:	d122      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b02      	cmp	r3, #2
 800668e:	d11b      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0202 	mvn.w	r2, #2
 8006698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f905 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8f7 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f908 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0204 	mvn.w	r2, #4
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8db 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f8cd 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8de 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b08      	cmp	r3, #8
 8006728:	d122      	bne.n	8006770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b08      	cmp	r3, #8
 8006736:	d11b      	bne.n	8006770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0208 	mvn.w	r2, #8
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2204      	movs	r2, #4
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f8b1 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8a3 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f8b4 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b10      	cmp	r3, #16
 800677c:	d122      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b10      	cmp	r3, #16
 800678a:	d11b      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0210 	mvn.w	r2, #16
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2208      	movs	r2, #8
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f887 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f879 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f88a 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d10e      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d107      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0201 	mvn.w	r2, #1
 80067e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fa fbf6 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d10e      	bne.n	800681c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d107      	bne.n	800681c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f914 	bl	8006a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682a:	d10e      	bne.n	800684a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	2b80      	cmp	r3, #128	; 0x80
 8006838:	d107      	bne.n	800684a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f907 	bl	8006a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	d10e      	bne.n	8006876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d107      	bne.n	8006876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800686e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f838 	bl	80068e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b20      	cmp	r3, #32
 8006882:	d10e      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b20      	cmp	r3, #32
 8006890:	d107      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f06f 0220 	mvn.w	r2, #32
 800689a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f8c7 	bl	8006a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a40      	ldr	r2, [pc, #256]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d00f      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3d      	ldr	r2, [pc, #244]	; (8006a14 <TIM_Base_SetConfig+0x118>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00b      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3c      	ldr	r2, [pc, #240]	; (8006a18 <TIM_Base_SetConfig+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d007      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3b      	ldr	r2, [pc, #236]	; (8006a1c <TIM_Base_SetConfig+0x120>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a3a      	ldr	r2, [pc, #232]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2f      	ldr	r2, [pc, #188]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01f      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d01b      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2c      	ldr	r2, [pc, #176]	; (8006a14 <TIM_Base_SetConfig+0x118>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d017      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2b      	ldr	r2, [pc, #172]	; (8006a18 <TIM_Base_SetConfig+0x11c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <TIM_Base_SetConfig+0x120>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00f      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a29      	ldr	r2, [pc, #164]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00b      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <TIM_Base_SetConfig+0x128>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d007      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a27      	ldr	r2, [pc, #156]	; (8006a28 <TIM_Base_SetConfig+0x12c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <TIM_Base_SetConfig+0x130>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d108      	bne.n	80069a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a10      	ldr	r2, [pc, #64]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00f      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00b      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a11      	ldr	r2, [pc, #68]	; (8006a24 <TIM_Base_SetConfig+0x128>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <TIM_Base_SetConfig+0x12c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a0f      	ldr	r2, [pc, #60]	; (8006a2c <TIM_Base_SetConfig+0x130>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d103      	bne.n	80069fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	615a      	str	r2, [r3, #20]
}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40000400 	.word	0x40000400
 8006a18:	40000800 	.word	0x40000800
 8006a1c:	40000c00 	.word	0x40000c00
 8006a20:	40010400 	.word	0x40010400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e042      	b.n	8006b04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fa fad3 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2224      	movs	r2, #36	; 0x24
 8006a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f82c 	bl	8006b0c <UART_SetConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e022      	b.n	8006b04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fdd0 	bl	800766c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fe57 	bl	80077b0 <UART_CheckIdleState>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b10:	b08e      	sub	sp, #56	; 0x38
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	4bc1      	ldr	r3, [pc, #772]	; (8006e4c <UART_SetConfig+0x340>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4ab7      	ldr	r2, [pc, #732]	; (8006e50 <UART_SetConfig+0x344>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	4bb2      	ldr	r3, [pc, #712]	; (8006e54 <UART_SetConfig+0x348>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b92:	430b      	orrs	r3, r1
 8006b94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	f023 010f 	bic.w	r1, r3, #15
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4aa9      	ldr	r2, [pc, #676]	; (8006e58 <UART_SetConfig+0x34c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d177      	bne.n	8006ca6 <UART_SetConfig+0x19a>
 8006bb6:	4ba9      	ldr	r3, [pc, #676]	; (8006e5c <UART_SetConfig+0x350>)
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bbe:	2b28      	cmp	r3, #40	; 0x28
 8006bc0:	d86c      	bhi.n	8006c9c <UART_SetConfig+0x190>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <UART_SetConfig+0xbc>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006c6d 	.word	0x08006c6d
 8006bcc:	08006c9d 	.word	0x08006c9d
 8006bd0:	08006c9d 	.word	0x08006c9d
 8006bd4:	08006c9d 	.word	0x08006c9d
 8006bd8:	08006c9d 	.word	0x08006c9d
 8006bdc:	08006c9d 	.word	0x08006c9d
 8006be0:	08006c9d 	.word	0x08006c9d
 8006be4:	08006c9d 	.word	0x08006c9d
 8006be8:	08006c75 	.word	0x08006c75
 8006bec:	08006c9d 	.word	0x08006c9d
 8006bf0:	08006c9d 	.word	0x08006c9d
 8006bf4:	08006c9d 	.word	0x08006c9d
 8006bf8:	08006c9d 	.word	0x08006c9d
 8006bfc:	08006c9d 	.word	0x08006c9d
 8006c00:	08006c9d 	.word	0x08006c9d
 8006c04:	08006c9d 	.word	0x08006c9d
 8006c08:	08006c7d 	.word	0x08006c7d
 8006c0c:	08006c9d 	.word	0x08006c9d
 8006c10:	08006c9d 	.word	0x08006c9d
 8006c14:	08006c9d 	.word	0x08006c9d
 8006c18:	08006c9d 	.word	0x08006c9d
 8006c1c:	08006c9d 	.word	0x08006c9d
 8006c20:	08006c9d 	.word	0x08006c9d
 8006c24:	08006c9d 	.word	0x08006c9d
 8006c28:	08006c85 	.word	0x08006c85
 8006c2c:	08006c9d 	.word	0x08006c9d
 8006c30:	08006c9d 	.word	0x08006c9d
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c9d 	.word	0x08006c9d
 8006c3c:	08006c9d 	.word	0x08006c9d
 8006c40:	08006c9d 	.word	0x08006c9d
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006c8d 	.word	0x08006c8d
 8006c4c:	08006c9d 	.word	0x08006c9d
 8006c50:	08006c9d 	.word	0x08006c9d
 8006c54:	08006c9d 	.word	0x08006c9d
 8006c58:	08006c9d 	.word	0x08006c9d
 8006c5c:	08006c9d 	.word	0x08006c9d
 8006c60:	08006c9d 	.word	0x08006c9d
 8006c64:	08006c9d 	.word	0x08006c9d
 8006c68:	08006c95 	.word	0x08006c95
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c72:	e233      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006c74:	2304      	movs	r3, #4
 8006c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7a:	e22f      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c82:	e22b      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006c84:	2310      	movs	r3, #16
 8006c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8a:	e227      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c92:	e223      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006c94:	2340      	movs	r3, #64	; 0x40
 8006c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c9a:	e21f      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ca2:	bf00      	nop
 8006ca4:	e21a      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a6d      	ldr	r2, [pc, #436]	; (8006e60 <UART_SetConfig+0x354>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d132      	bne.n	8006d16 <UART_SetConfig+0x20a>
 8006cb0:	4b6a      	ldr	r3, [pc, #424]	; (8006e5c <UART_SetConfig+0x350>)
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	2b05      	cmp	r3, #5
 8006cba:	d827      	bhi.n	8006d0c <UART_SetConfig+0x200>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0x1b8>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006cdd 	.word	0x08006cdd
 8006cc8:	08006ce5 	.word	0x08006ce5
 8006ccc:	08006ced 	.word	0x08006ced
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ce2:	e1fb      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cea:	e1f7      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cf2:	e1f3      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cfa:	e1ef      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d02:	e1eb      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d0a:	e1e7      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d0c:	2380      	movs	r3, #128	; 0x80
 8006d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d12:	bf00      	nop
 8006d14:	e1e2      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a52      	ldr	r2, [pc, #328]	; (8006e64 <UART_SetConfig+0x358>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d132      	bne.n	8006d86 <UART_SetConfig+0x27a>
 8006d20:	4b4e      	ldr	r3, [pc, #312]	; (8006e5c <UART_SetConfig+0x350>)
 8006d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	d827      	bhi.n	8006d7c <UART_SetConfig+0x270>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x228>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d4d 	.word	0x08006d4d
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d5d 	.word	0x08006d5d
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d52:	e1c3      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5a:	e1bf      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d62:	e1bb      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6a:	e1b7      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d72:	e1b3      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d7a:	e1af      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d82:	bf00      	nop
 8006d84:	e1aa      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a37      	ldr	r2, [pc, #220]	; (8006e68 <UART_SetConfig+0x35c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d132      	bne.n	8006df6 <UART_SetConfig+0x2ea>
 8006d90:	4b32      	ldr	r3, [pc, #200]	; (8006e5c <UART_SetConfig+0x350>)
 8006d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	2b05      	cmp	r3, #5
 8006d9a:	d827      	bhi.n	8006dec <UART_SetConfig+0x2e0>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <UART_SetConfig+0x298>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006dc5 	.word	0x08006dc5
 8006dac:	08006dcd 	.word	0x08006dcd
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006ddd 	.word	0x08006ddd
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e18b      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dca:	e187      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd2:	e183      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dda:	e17f      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006ddc:	2320      	movs	r3, #32
 8006dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de2:	e17b      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006de4:	2340      	movs	r3, #64	; 0x40
 8006de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dea:	e177      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006dec:	2380      	movs	r3, #128	; 0x80
 8006dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006df2:	bf00      	nop
 8006df4:	e172      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1c      	ldr	r2, [pc, #112]	; (8006e6c <UART_SetConfig+0x360>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d144      	bne.n	8006e8a <UART_SetConfig+0x37e>
 8006e00:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <UART_SetConfig+0x350>)
 8006e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	2b05      	cmp	r3, #5
 8006e0a:	d839      	bhi.n	8006e80 <UART_SetConfig+0x374>
 8006e0c:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <UART_SetConfig+0x308>)
 8006e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e12:	bf00      	nop
 8006e14:	08006e2d 	.word	0x08006e2d
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e3d 	.word	0x08006e3d
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e71 	.word	0x08006e71
 8006e28:	08006e79 	.word	0x08006e79
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e32:	e153      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3a:	e14f      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e42:	e14b      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4a:	e147      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006e4c:	cfff69f3 	.word	0xcfff69f3
 8006e50:	58000c00 	.word	0x58000c00
 8006e54:	11fff4ff 	.word	0x11fff4ff
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	40004400 	.word	0x40004400
 8006e64:	40004800 	.word	0x40004800
 8006e68:	40004c00 	.word	0x40004c00
 8006e6c:	40005000 	.word	0x40005000
 8006e70:	2320      	movs	r3, #32
 8006e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e76:	e131      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006e78:	2340      	movs	r3, #64	; 0x40
 8006e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7e:	e12d      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006e80:	2380      	movs	r3, #128	; 0x80
 8006e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e86:	bf00      	nop
 8006e88:	e128      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4ab6      	ldr	r2, [pc, #728]	; (8007168 <UART_SetConfig+0x65c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d178      	bne.n	8006f86 <UART_SetConfig+0x47a>
 8006e94:	4bb5      	ldr	r3, [pc, #724]	; (800716c <UART_SetConfig+0x660>)
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e9c:	2b28      	cmp	r3, #40	; 0x28
 8006e9e:	d86d      	bhi.n	8006f7c <UART_SetConfig+0x470>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x39c>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006f4d 	.word	0x08006f4d
 8006eac:	08006f7d 	.word	0x08006f7d
 8006eb0:	08006f7d 	.word	0x08006f7d
 8006eb4:	08006f7d 	.word	0x08006f7d
 8006eb8:	08006f7d 	.word	0x08006f7d
 8006ebc:	08006f7d 	.word	0x08006f7d
 8006ec0:	08006f7d 	.word	0x08006f7d
 8006ec4:	08006f7d 	.word	0x08006f7d
 8006ec8:	08006f55 	.word	0x08006f55
 8006ecc:	08006f7d 	.word	0x08006f7d
 8006ed0:	08006f7d 	.word	0x08006f7d
 8006ed4:	08006f7d 	.word	0x08006f7d
 8006ed8:	08006f7d 	.word	0x08006f7d
 8006edc:	08006f7d 	.word	0x08006f7d
 8006ee0:	08006f7d 	.word	0x08006f7d
 8006ee4:	08006f7d 	.word	0x08006f7d
 8006ee8:	08006f5d 	.word	0x08006f5d
 8006eec:	08006f7d 	.word	0x08006f7d
 8006ef0:	08006f7d 	.word	0x08006f7d
 8006ef4:	08006f7d 	.word	0x08006f7d
 8006ef8:	08006f7d 	.word	0x08006f7d
 8006efc:	08006f7d 	.word	0x08006f7d
 8006f00:	08006f7d 	.word	0x08006f7d
 8006f04:	08006f7d 	.word	0x08006f7d
 8006f08:	08006f65 	.word	0x08006f65
 8006f0c:	08006f7d 	.word	0x08006f7d
 8006f10:	08006f7d 	.word	0x08006f7d
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006f7d 	.word	0x08006f7d
 8006f1c:	08006f7d 	.word	0x08006f7d
 8006f20:	08006f7d 	.word	0x08006f7d
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	08006f7d 	.word	0x08006f7d
 8006f34:	08006f7d 	.word	0x08006f7d
 8006f38:	08006f7d 	.word	0x08006f7d
 8006f3c:	08006f7d 	.word	0x08006f7d
 8006f40:	08006f7d 	.word	0x08006f7d
 8006f44:	08006f7d 	.word	0x08006f7d
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f52:	e0c3      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006f54:	2304      	movs	r3, #4
 8006f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f5a:	e0bf      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f62:	e0bb      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f6a:	e0b7      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006f6c:	2320      	movs	r3, #32
 8006f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f72:	e0b3      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7a:	e0af      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006f7c:	2380      	movs	r3, #128	; 0x80
 8006f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f82:	bf00      	nop
 8006f84:	e0aa      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a79      	ldr	r2, [pc, #484]	; (8007170 <UART_SetConfig+0x664>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d132      	bne.n	8006ff6 <UART_SetConfig+0x4ea>
 8006f90:	4b76      	ldr	r3, [pc, #472]	; (800716c <UART_SetConfig+0x660>)
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	d827      	bhi.n	8006fec <UART_SetConfig+0x4e0>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0x498>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fbd 	.word	0x08006fbd
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	08006fcd 	.word	0x08006fcd
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08006fdd 	.word	0x08006fdd
 8006fb8:	08006fe5 	.word	0x08006fe5
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc2:	e08b      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fca:	e087      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fd2:	e083      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fda:	e07f      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006fdc:	2320      	movs	r3, #32
 8006fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fe2:	e07b      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fea:	e077      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff2:	bf00      	nop
 8006ff4:	e072      	b.n	80070dc <UART_SetConfig+0x5d0>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a5e      	ldr	r2, [pc, #376]	; (8007174 <UART_SetConfig+0x668>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d132      	bne.n	8007066 <UART_SetConfig+0x55a>
 8007000:	4b5a      	ldr	r3, [pc, #360]	; (800716c <UART_SetConfig+0x660>)
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	2b05      	cmp	r3, #5
 800700a:	d827      	bhi.n	800705c <UART_SetConfig+0x550>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x508>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	0800702d 	.word	0x0800702d
 8007018:	08007035 	.word	0x08007035
 800701c:	0800703d 	.word	0x0800703d
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007055 	.word	0x08007055
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007032:	e053      	b.n	80070dc <UART_SetConfig+0x5d0>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703a:	e04f      	b.n	80070dc <UART_SetConfig+0x5d0>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007042:	e04b      	b.n	80070dc <UART_SetConfig+0x5d0>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800704a:	e047      	b.n	80070dc <UART_SetConfig+0x5d0>
 800704c:	2320      	movs	r3, #32
 800704e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007052:	e043      	b.n	80070dc <UART_SetConfig+0x5d0>
 8007054:	2340      	movs	r3, #64	; 0x40
 8007056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800705a:	e03f      	b.n	80070dc <UART_SetConfig+0x5d0>
 800705c:	2380      	movs	r3, #128	; 0x80
 800705e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007062:	bf00      	nop
 8007064:	e03a      	b.n	80070dc <UART_SetConfig+0x5d0>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a43      	ldr	r2, [pc, #268]	; (8007178 <UART_SetConfig+0x66c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d132      	bne.n	80070d6 <UART_SetConfig+0x5ca>
 8007070:	4b3e      	ldr	r3, [pc, #248]	; (800716c <UART_SetConfig+0x660>)
 8007072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	2b05      	cmp	r3, #5
 800707a:	d827      	bhi.n	80070cc <UART_SetConfig+0x5c0>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x578>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	0800709d 	.word	0x0800709d
 8007088:	080070a5 	.word	0x080070a5
 800708c:	080070ad 	.word	0x080070ad
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070c5 	.word	0x080070c5
 800709c:	2302      	movs	r3, #2
 800709e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a2:	e01b      	b.n	80070dc <UART_SetConfig+0x5d0>
 80070a4:	2304      	movs	r3, #4
 80070a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070aa:	e017      	b.n	80070dc <UART_SetConfig+0x5d0>
 80070ac:	2308      	movs	r3, #8
 80070ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070b2:	e013      	b.n	80070dc <UART_SetConfig+0x5d0>
 80070b4:	2310      	movs	r3, #16
 80070b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ba:	e00f      	b.n	80070dc <UART_SetConfig+0x5d0>
 80070bc:	2320      	movs	r3, #32
 80070be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070c2:	e00b      	b.n	80070dc <UART_SetConfig+0x5d0>
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ca:	e007      	b.n	80070dc <UART_SetConfig+0x5d0>
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <UART_SetConfig+0x5d0>
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a25      	ldr	r2, [pc, #148]	; (8007178 <UART_SetConfig+0x66c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	f040 80b8 	bne.w	8007258 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d019      	beq.n	8007124 <UART_SetConfig+0x618>
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	dc04      	bgt.n	80070fe <UART_SetConfig+0x5f2>
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d009      	beq.n	800710c <UART_SetConfig+0x600>
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d00b      	beq.n	8007114 <UART_SetConfig+0x608>
 80070fc:	e042      	b.n	8007184 <UART_SetConfig+0x678>
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d02b      	beq.n	800715a <UART_SetConfig+0x64e>
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d02c      	beq.n	8007160 <UART_SetConfig+0x654>
 8007106:	2b10      	cmp	r3, #16
 8007108:	d014      	beq.n	8007134 <UART_SetConfig+0x628>
 800710a:	e03b      	b.n	8007184 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800710c:	f7fe fe04 	bl	8005d18 <HAL_RCCEx_GetD3PCLK1Freq>
 8007110:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007112:	e03d      	b.n	8007190 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007114:	f107 0314 	add.w	r3, r7, #20
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fe13 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007122:	e035      	b.n	8007190 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe ff57 	bl	8005fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007132:	e02d      	b.n	8007190 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007134:	4b0d      	ldr	r3, [pc, #52]	; (800716c <UART_SetConfig+0x660>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007140:	4b0a      	ldr	r3, [pc, #40]	; (800716c <UART_SetConfig+0x660>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	08db      	lsrs	r3, r3, #3
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	4a0c      	ldr	r2, [pc, #48]	; (800717c <UART_SetConfig+0x670>)
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007152:	e01d      	b.n	8007190 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007154:	4b09      	ldr	r3, [pc, #36]	; (800717c <UART_SetConfig+0x670>)
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007158:	e01a      	b.n	8007190 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <UART_SetConfig+0x674>)
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800715e:	e017      	b.n	8007190 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007166:	e013      	b.n	8007190 <UART_SetConfig+0x684>
 8007168:	40011400 	.word	0x40011400
 800716c:	58024400 	.word	0x58024400
 8007170:	40007800 	.word	0x40007800
 8007174:	40007c00 	.word	0x40007c00
 8007178:	58000c00 	.word	0x58000c00
 800717c:	03d09000 	.word	0x03d09000
 8007180:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800718e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 824d 	beq.w	8007632 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	4aad      	ldr	r2, [pc, #692]	; (8007454 <UART_SetConfig+0x948>)
 800719e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071aa:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	4413      	add	r3, r2
 80071b6:	6a3a      	ldr	r2, [r7, #32]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d305      	bcc.n	80071c8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c2:	6a3a      	ldr	r2, [r7, #32]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d903      	bls.n	80071d0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80071ce:	e230      	b.n	8007632 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	4618      	mov	r0, r3
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	4a9d      	ldr	r2, [pc, #628]	; (8007454 <UART_SetConfig+0x948>)
 80071de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f04f 0400 	mov.w	r4, #0
 80071e8:	461a      	mov	r2, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	f7f9 f8d0 	bl	8000390 <__aeabi_uldivmod>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4619      	mov	r1, r3
 80071f6:	4622      	mov	r2, r4
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	0214      	lsls	r4, r2, #8
 8007202:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007206:	020b      	lsls	r3, r1, #8
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6852      	ldr	r2, [r2, #4]
 800720c:	0852      	lsrs	r2, r2, #1
 800720e:	4611      	mov	r1, r2
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	eb13 0b01 	adds.w	fp, r3, r1
 8007218:	eb44 0c02 	adc.w	ip, r4, r2
 800721c:	4658      	mov	r0, fp
 800721e:	4661      	mov	r1, ip
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f04f 0400 	mov.w	r4, #0
 8007228:	461a      	mov	r2, r3
 800722a:	4623      	mov	r3, r4
 800722c:	f7f9 f8b0 	bl	8000390 <__aeabi_uldivmod>
 8007230:	4603      	mov	r3, r0
 8007232:	460c      	mov	r4, r1
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800723c:	d308      	bcc.n	8007250 <UART_SetConfig+0x744>
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007244:	d204      	bcs.n	8007250 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800724c:	60da      	str	r2, [r3, #12]
 800724e:	e1f0      	b.n	8007632 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007256:	e1ec      	b.n	8007632 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007260:	f040 8100 	bne.w	8007464 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8007264:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007268:	2b40      	cmp	r3, #64	; 0x40
 800726a:	f200 80b7 	bhi.w	80073dc <UART_SetConfig+0x8d0>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <UART_SetConfig+0x768>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	08007379 	.word	0x08007379
 8007278:	08007381 	.word	0x08007381
 800727c:	080073dd 	.word	0x080073dd
 8007280:	080073dd 	.word	0x080073dd
 8007284:	08007389 	.word	0x08007389
 8007288:	080073dd 	.word	0x080073dd
 800728c:	080073dd 	.word	0x080073dd
 8007290:	080073dd 	.word	0x080073dd
 8007294:	08007399 	.word	0x08007399
 8007298:	080073dd 	.word	0x080073dd
 800729c:	080073dd 	.word	0x080073dd
 80072a0:	080073dd 	.word	0x080073dd
 80072a4:	080073dd 	.word	0x080073dd
 80072a8:	080073dd 	.word	0x080073dd
 80072ac:	080073dd 	.word	0x080073dd
 80072b0:	080073dd 	.word	0x080073dd
 80072b4:	080073a9 	.word	0x080073a9
 80072b8:	080073dd 	.word	0x080073dd
 80072bc:	080073dd 	.word	0x080073dd
 80072c0:	080073dd 	.word	0x080073dd
 80072c4:	080073dd 	.word	0x080073dd
 80072c8:	080073dd 	.word	0x080073dd
 80072cc:	080073dd 	.word	0x080073dd
 80072d0:	080073dd 	.word	0x080073dd
 80072d4:	080073dd 	.word	0x080073dd
 80072d8:	080073dd 	.word	0x080073dd
 80072dc:	080073dd 	.word	0x080073dd
 80072e0:	080073dd 	.word	0x080073dd
 80072e4:	080073dd 	.word	0x080073dd
 80072e8:	080073dd 	.word	0x080073dd
 80072ec:	080073dd 	.word	0x080073dd
 80072f0:	080073dd 	.word	0x080073dd
 80072f4:	080073cf 	.word	0x080073cf
 80072f8:	080073dd 	.word	0x080073dd
 80072fc:	080073dd 	.word	0x080073dd
 8007300:	080073dd 	.word	0x080073dd
 8007304:	080073dd 	.word	0x080073dd
 8007308:	080073dd 	.word	0x080073dd
 800730c:	080073dd 	.word	0x080073dd
 8007310:	080073dd 	.word	0x080073dd
 8007314:	080073dd 	.word	0x080073dd
 8007318:	080073dd 	.word	0x080073dd
 800731c:	080073dd 	.word	0x080073dd
 8007320:	080073dd 	.word	0x080073dd
 8007324:	080073dd 	.word	0x080073dd
 8007328:	080073dd 	.word	0x080073dd
 800732c:	080073dd 	.word	0x080073dd
 8007330:	080073dd 	.word	0x080073dd
 8007334:	080073dd 	.word	0x080073dd
 8007338:	080073dd 	.word	0x080073dd
 800733c:	080073dd 	.word	0x080073dd
 8007340:	080073dd 	.word	0x080073dd
 8007344:	080073dd 	.word	0x080073dd
 8007348:	080073dd 	.word	0x080073dd
 800734c:	080073dd 	.word	0x080073dd
 8007350:	080073dd 	.word	0x080073dd
 8007354:	080073dd 	.word	0x080073dd
 8007358:	080073dd 	.word	0x080073dd
 800735c:	080073dd 	.word	0x080073dd
 8007360:	080073dd 	.word	0x080073dd
 8007364:	080073dd 	.word	0x080073dd
 8007368:	080073dd 	.word	0x080073dd
 800736c:	080073dd 	.word	0x080073dd
 8007370:	080073dd 	.word	0x080073dd
 8007374:	080073d5 	.word	0x080073d5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007378:	f7fd fd72 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 800737c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800737e:	e033      	b.n	80073e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007380:	f7fd fd84 	bl	8004e8c <HAL_RCC_GetPCLK2Freq>
 8007384:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007386:	e02f      	b.n	80073e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007388:	f107 0314 	add.w	r3, r7, #20
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe fcd9 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007396:	e027      	b.n	80073e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007398:	f107 0308 	add.w	r3, r7, #8
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe fe1d 	bl	8005fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073a6:	e01f      	b.n	80073e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a8:	4b2b      	ldr	r3, [pc, #172]	; (8007458 <UART_SetConfig+0x94c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073b4:	4b28      	ldr	r3, [pc, #160]	; (8007458 <UART_SetConfig+0x94c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	4a27      	ldr	r2, [pc, #156]	; (800745c <UART_SetConfig+0x950>)
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073c6:	e00f      	b.n	80073e8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80073c8:	4b24      	ldr	r3, [pc, #144]	; (800745c <UART_SetConfig+0x950>)
 80073ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073cc:	e00c      	b.n	80073e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073ce:	4b24      	ldr	r3, [pc, #144]	; (8007460 <UART_SetConfig+0x954>)
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073d2:	e009      	b.n	80073e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073da:	e005      	b.n	80073e8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80073e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8121 	beq.w	8007632 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	4a17      	ldr	r2, [pc, #92]	; (8007454 <UART_SetConfig+0x948>)
 80073f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007402:	005a      	lsls	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	441a      	add	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	fbb2 f3f3 	udiv	r3, r2, r3
 8007414:	b29b      	uxth	r3, r3
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2b0f      	cmp	r3, #15
 800741c:	d916      	bls.n	800744c <UART_SetConfig+0x940>
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007424:	d212      	bcs.n	800744c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	b29b      	uxth	r3, r3
 800742a:	f023 030f 	bic.w	r3, r3, #15
 800742e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	b29b      	uxth	r3, r3
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	b29a      	uxth	r2, r3
 800743c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800743e:	4313      	orrs	r3, r2
 8007440:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e0f2      	b.n	8007632 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007452:	e0ee      	b.n	8007632 <UART_SetConfig+0xb26>
 8007454:	0801b3d8 	.word	0x0801b3d8
 8007458:	58024400 	.word	0x58024400
 800745c:	03d09000 	.word	0x03d09000
 8007460:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007468:	2b40      	cmp	r3, #64	; 0x40
 800746a:	f200 80b7 	bhi.w	80075dc <UART_SetConfig+0xad0>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <UART_SetConfig+0x968>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	08007579 	.word	0x08007579
 8007478:	08007581 	.word	0x08007581
 800747c:	080075dd 	.word	0x080075dd
 8007480:	080075dd 	.word	0x080075dd
 8007484:	08007589 	.word	0x08007589
 8007488:	080075dd 	.word	0x080075dd
 800748c:	080075dd 	.word	0x080075dd
 8007490:	080075dd 	.word	0x080075dd
 8007494:	08007599 	.word	0x08007599
 8007498:	080075dd 	.word	0x080075dd
 800749c:	080075dd 	.word	0x080075dd
 80074a0:	080075dd 	.word	0x080075dd
 80074a4:	080075dd 	.word	0x080075dd
 80074a8:	080075dd 	.word	0x080075dd
 80074ac:	080075dd 	.word	0x080075dd
 80074b0:	080075dd 	.word	0x080075dd
 80074b4:	080075a9 	.word	0x080075a9
 80074b8:	080075dd 	.word	0x080075dd
 80074bc:	080075dd 	.word	0x080075dd
 80074c0:	080075dd 	.word	0x080075dd
 80074c4:	080075dd 	.word	0x080075dd
 80074c8:	080075dd 	.word	0x080075dd
 80074cc:	080075dd 	.word	0x080075dd
 80074d0:	080075dd 	.word	0x080075dd
 80074d4:	080075dd 	.word	0x080075dd
 80074d8:	080075dd 	.word	0x080075dd
 80074dc:	080075dd 	.word	0x080075dd
 80074e0:	080075dd 	.word	0x080075dd
 80074e4:	080075dd 	.word	0x080075dd
 80074e8:	080075dd 	.word	0x080075dd
 80074ec:	080075dd 	.word	0x080075dd
 80074f0:	080075dd 	.word	0x080075dd
 80074f4:	080075cf 	.word	0x080075cf
 80074f8:	080075dd 	.word	0x080075dd
 80074fc:	080075dd 	.word	0x080075dd
 8007500:	080075dd 	.word	0x080075dd
 8007504:	080075dd 	.word	0x080075dd
 8007508:	080075dd 	.word	0x080075dd
 800750c:	080075dd 	.word	0x080075dd
 8007510:	080075dd 	.word	0x080075dd
 8007514:	080075dd 	.word	0x080075dd
 8007518:	080075dd 	.word	0x080075dd
 800751c:	080075dd 	.word	0x080075dd
 8007520:	080075dd 	.word	0x080075dd
 8007524:	080075dd 	.word	0x080075dd
 8007528:	080075dd 	.word	0x080075dd
 800752c:	080075dd 	.word	0x080075dd
 8007530:	080075dd 	.word	0x080075dd
 8007534:	080075dd 	.word	0x080075dd
 8007538:	080075dd 	.word	0x080075dd
 800753c:	080075dd 	.word	0x080075dd
 8007540:	080075dd 	.word	0x080075dd
 8007544:	080075dd 	.word	0x080075dd
 8007548:	080075dd 	.word	0x080075dd
 800754c:	080075dd 	.word	0x080075dd
 8007550:	080075dd 	.word	0x080075dd
 8007554:	080075dd 	.word	0x080075dd
 8007558:	080075dd 	.word	0x080075dd
 800755c:	080075dd 	.word	0x080075dd
 8007560:	080075dd 	.word	0x080075dd
 8007564:	080075dd 	.word	0x080075dd
 8007568:	080075dd 	.word	0x080075dd
 800756c:	080075dd 	.word	0x080075dd
 8007570:	080075dd 	.word	0x080075dd
 8007574:	080075d5 	.word	0x080075d5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007578:	f7fd fc72 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 800757c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800757e:	e033      	b.n	80075e8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fd fc84 	bl	8004e8c <HAL_RCC_GetPCLK2Freq>
 8007584:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007586:	e02f      	b.n	80075e8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe fbd9 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007596:	e027      	b.n	80075e8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007598:	f107 0308 	add.w	r3, r7, #8
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe fd1d 	bl	8005fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075a6:	e01f      	b.n	80075e8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a8:	4b2c      	ldr	r3, [pc, #176]	; (800765c <UART_SetConfig+0xb50>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075b4:	4b29      	ldr	r3, [pc, #164]	; (800765c <UART_SetConfig+0xb50>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	08db      	lsrs	r3, r3, #3
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	4a28      	ldr	r2, [pc, #160]	; (8007660 <UART_SetConfig+0xb54>)
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
 80075c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075c6:	e00f      	b.n	80075e8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80075c8:	4b25      	ldr	r3, [pc, #148]	; (8007660 <UART_SetConfig+0xb54>)
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075cc:	e00c      	b.n	80075e8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075ce:	4b25      	ldr	r3, [pc, #148]	; (8007664 <UART_SetConfig+0xb58>)
 80075d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075d2:	e009      	b.n	80075e8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075da:	e005      	b.n	80075e8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80075e6:	bf00      	nop
    }

    if (pclk != 0U)
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d021      	beq.n	8007632 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <UART_SetConfig+0xb5c>)
 80075f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	441a      	add	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007610:	b29b      	uxth	r3, r3
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	2b0f      	cmp	r3, #15
 8007618:	d908      	bls.n	800762c <UART_SetConfig+0xb20>
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007620:	d204      	bcs.n	800762c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	e002      	b.n	8007632 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800764e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007652:	4618      	mov	r0, r3
 8007654:	3738      	adds	r7, #56	; 0x38
 8007656:	46bd      	mov	sp, r7
 8007658:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800765c:	58024400 	.word	0x58024400
 8007660:	03d09000 	.word	0x03d09000
 8007664:	003d0900 	.word	0x003d0900
 8007668:	0801b3d8 	.word	0x0801b3d8

0800766c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01a      	beq.n	8007782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776a:	d10a      	bne.n	8007782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80077c0:	f7f9 fff0 	bl	80017a4 <HAL_GetTick>
 80077c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d10e      	bne.n	80077f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f82c 	bl	8007840 <UART_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e022      	b.n	8007838 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d10e      	bne.n	800781e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f816 	bl	8007840 <UART_WaitOnFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e00c      	b.n	8007838 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007850:	e062      	b.n	8007918 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007858:	d05e      	beq.n	8007918 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785a:	f7f9 ffa3 	bl	80017a4 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <UART_WaitOnFlagUntilTimeout+0x30>
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d11d      	bne.n	80078ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800787e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e045      	b.n	8007938 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d02e      	beq.n	8007918 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c8:	d126      	bne.n	8007918 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e00f      	b.n	8007938 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69da      	ldr	r2, [r3, #28]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4013      	ands	r3, r2
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	429a      	cmp	r2, r3
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	429a      	cmp	r2, r3
 8007934:	d08d      	beq.n	8007852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_UARTEx_DisableFifoMode+0x16>
 8007952:	2302      	movs	r3, #2
 8007954:	e027      	b.n	80079a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2224      	movs	r2, #36	; 0x24
 8007962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0201 	bic.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e02d      	b.n	8007a26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2224      	movs	r2, #36	; 0x24
 80079d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0201 	bic.w	r2, r2, #1
 80079f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f850 	bl	8007aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e02d      	b.n	8007aa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2224      	movs	r2, #36	; 0x24
 8007a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f812 	bl	8007aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b089      	sub	sp, #36	; 0x24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007ab4:	4a2f      	ldr	r2, [pc, #188]	; (8007b74 <UARTEx_SetNbDataToProcess+0xc8>)
 8007ab6:	f107 0314 	add.w	r3, r7, #20
 8007aba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007abe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007ac2:	4a2d      	ldr	r2, [pc, #180]	; (8007b78 <UARTEx_SetNbDataToProcess+0xcc>)
 8007ac4:	f107 030c 	add.w	r3, r7, #12
 8007ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007acc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d108      	bne.n	8007aea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ae8:	e03d      	b.n	8007b66 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aea:	2310      	movs	r3, #16
 8007aec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aee:	2310      	movs	r3, #16
 8007af0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	0e5b      	lsrs	r3, r3, #25
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	0f5b      	lsrs	r3, r3, #29
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007b12:	7fbb      	ldrb	r3, [r7, #30]
 8007b14:	7f3a      	ldrb	r2, [r7, #28]
 8007b16:	f107 0120 	add.w	r1, r7, #32
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007b20:	fb02 f303 	mul.w	r3, r2, r3
 8007b24:	7f3a      	ldrb	r2, [r7, #28]
 8007b26:	f107 0120 	add.w	r1, r7, #32
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007b30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007b3c:	7ffb      	ldrb	r3, [r7, #31]
 8007b3e:	7f7a      	ldrb	r2, [r7, #29]
 8007b40:	f107 0120 	add.w	r1, r7, #32
 8007b44:	440a      	add	r2, r1
 8007b46:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007b4a:	fb02 f303 	mul.w	r3, r2, r3
 8007b4e:	7f7a      	ldrb	r2, [r7, #29]
 8007b50:	f107 0120 	add.w	r1, r7, #32
 8007b54:	440a      	add	r2, r1
 8007b56:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b66:	bf00      	nop
 8007b68:	3724      	adds	r7, #36	; 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	08018574 	.word	0x08018574
 8007b78:	0801857c 	.word	0x0801857c

08007b7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	f107 001c 	add.w	r0, r7, #28
 8007b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d120      	bne.n	8007bd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <USB_CoreInit+0xc0>)
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d105      	bne.n	8007bca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa4c 	bl	8008068 <USB_CoreReset>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
 8007bd4:	e01a      	b.n	8007c0c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa40 	bl	8008068 <USB_CoreReset>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d106      	bne.n	8007c00 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8007bfe:	e005      	b.n	8007c0c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d10b      	bne.n	8007c2a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f043 0206 	orr.w	r2, r3, #6
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f043 0220 	orr.w	r2, r3, #32
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c36:	b004      	add	sp, #16
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	ffbdffbf 	.word	0xffbdffbf

08007c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f023 0201 	bic.w	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d106      	bne.n	8007c8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60da      	str	r2, [r3, #12]
 8007c8c:	e00b      	b.n	8007ca6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d106      	bne.n	8007ca2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60da      	str	r2, [r3, #12]
 8007ca0:	e001      	b.n	8007ca6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e003      	b.n	8007cae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ca6:	2032      	movs	r0, #50	; 0x32
 8007ca8:	f7f9 fd88 	bl	80017bc <HAL_Delay>

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cb8:	b084      	sub	sp, #16
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b086      	sub	sp, #24
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	613b      	str	r3, [r7, #16]
 8007cd6:	e009      	b.n	8007cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3340      	adds	r3, #64	; 0x40
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b0e      	cmp	r3, #14
 8007cf0:	d9f2      	bls.n	8007cd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d11c      	bne.n	8007d32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d06:	f043 0302 	orr.w	r3, r3, #2
 8007d0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	e005      	b.n	8007d3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d44:	461a      	mov	r2, r3
 8007d46:	2300      	movs	r3, #0
 8007d48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d50:	4619      	mov	r1, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d58:	461a      	mov	r2, r3
 8007d5a:	680b      	ldr	r3, [r1, #0]
 8007d5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d10c      	bne.n	8007d7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f949 	bl	8008004 <USB_SetDevSpeed>
 8007d72:	e008      	b.n	8007d86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d74:	2101      	movs	r1, #1
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f944 	bl	8008004 <USB_SetDevSpeed>
 8007d7c:	e003      	b.n	8007d86 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d7e:	2103      	movs	r1, #3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f93f 	bl	8008004 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d86:	2110      	movs	r1, #16
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f8f3 	bl	8007f74 <USB_FlushTxFifo>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f911 	bl	8007fc0 <USB_FlushRxFifo>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dae:	461a      	mov	r2, r3
 8007db0:	2300      	movs	r3, #0
 8007db2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	e043      	b.n	8007e5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de8:	d118      	bne.n	8007e1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	e013      	b.n	8007e2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e12:	461a      	mov	r2, r3
 8007e14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	e008      	b.n	8007e2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	461a      	mov	r2, r3
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	3301      	adds	r3, #1
 8007e58:	613b      	str	r3, [r7, #16]
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d3b7      	bcc.n	8007dd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	e043      	b.n	8007ef0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e7e:	d118      	bne.n	8007eb2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10a      	bne.n	8007e9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e92:	461a      	mov	r2, r3
 8007e94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	e013      	b.n	8007ec4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	e008      	b.n	8007ec4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ee8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	3301      	adds	r3, #1
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d3b7      	bcc.n	8007e68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d105      	bne.n	8007f2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	f043 0210 	orr.w	r2, r3, #16
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699a      	ldr	r2, [r3, #24]
 8007f30:	4b0e      	ldr	r3, [pc, #56]	; (8007f6c <USB_DevInit+0x2b4>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f043 0208 	orr.w	r2, r3, #8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d105      	bne.n	8007f5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699a      	ldr	r2, [r3, #24]
 8007f54:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <USB_DevInit+0x2b8>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f68:	b004      	add	sp, #16
 8007f6a:	4770      	bx	lr
 8007f6c:	803c3800 	.word	0x803c3800
 8007f70:	40000004 	.word	0x40000004

08007f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	019b      	lsls	r3, r3, #6
 8007f86:	f043 0220 	orr.w	r2, r3, #32
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3301      	adds	r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <USB_FlushTxFifo+0x48>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d901      	bls.n	8007fa0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e006      	b.n	8007fae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d0f0      	beq.n	8007f8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	00030d40 	.word	0x00030d40

08007fc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2210      	movs	r2, #16
 8007fd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4a09      	ldr	r2, [pc, #36]	; (8008000 <USB_FlushRxFifo+0x40>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d901      	bls.n	8007fe4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e006      	b.n	8007ff2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b10      	cmp	r3, #16
 8007fee:	d0f0      	beq.n	8007fd2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	00030d40 	.word	0x00030d40

08008004 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008024:	4313      	orrs	r3, r2
 8008026:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008056:	2003      	movs	r0, #3
 8008058:	f7f9 fbb0 	bl	80017bc <HAL_Delay>

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3301      	adds	r3, #1
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4a13      	ldr	r2, [pc, #76]	; (80080cc <USB_CoreReset+0x64>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d901      	bls.n	8008086 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e01b      	b.n	80080be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	daf2      	bge.n	8008074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f043 0201 	orr.w	r2, r3, #1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4a09      	ldr	r2, [pc, #36]	; (80080cc <USB_CoreReset+0x64>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d901      	bls.n	80080b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e006      	b.n	80080be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d0f0      	beq.n	800809e <USB_CoreReset+0x36>

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	00030d40 	.word	0x00030d40

080080d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80080d6:	4b98      	ldr	r3, [pc, #608]	; (8008338 <MX_LWIP_Init+0x268>)
 80080d8:	22c0      	movs	r2, #192	; 0xc0
 80080da:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80080dc:	4b96      	ldr	r3, [pc, #600]	; (8008338 <MX_LWIP_Init+0x268>)
 80080de:	22a8      	movs	r2, #168	; 0xa8
 80080e0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80080e2:	4b95      	ldr	r3, [pc, #596]	; (8008338 <MX_LWIP_Init+0x268>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 80080e8:	4b93      	ldr	r3, [pc, #588]	; (8008338 <MX_LWIP_Init+0x268>)
 80080ea:	226e      	movs	r2, #110	; 0x6e
 80080ec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80080ee:	4b93      	ldr	r3, [pc, #588]	; (800833c <MX_LWIP_Init+0x26c>)
 80080f0:	22ff      	movs	r2, #255	; 0xff
 80080f2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80080f4:	4b91      	ldr	r3, [pc, #580]	; (800833c <MX_LWIP_Init+0x26c>)
 80080f6:	22ff      	movs	r2, #255	; 0xff
 80080f8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80080fa:	4b90      	ldr	r3, [pc, #576]	; (800833c <MX_LWIP_Init+0x26c>)
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008100:	4b8e      	ldr	r3, [pc, #568]	; (800833c <MX_LWIP_Init+0x26c>)
 8008102:	2200      	movs	r2, #0
 8008104:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8008106:	4b8e      	ldr	r3, [pc, #568]	; (8008340 <MX_LWIP_Init+0x270>)
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800810c:	4b8c      	ldr	r3, [pc, #560]	; (8008340 <MX_LWIP_Init+0x270>)
 800810e:	2200      	movs	r2, #0
 8008110:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008112:	4b8b      	ldr	r3, [pc, #556]	; (8008340 <MX_LWIP_Init+0x270>)
 8008114:	2200      	movs	r2, #0
 8008116:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8008118:	4b89      	ldr	r3, [pc, #548]	; (8008340 <MX_LWIP_Init+0x270>)
 800811a:	2200      	movs	r2, #0
 800811c:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800811e:	2100      	movs	r1, #0
 8008120:	2000      	movs	r0, #0
 8008122:	f00e f9d7 	bl	80164d4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008126:	4b84      	ldr	r3, [pc, #528]	; (8008338 <MX_LWIP_Init+0x268>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	061a      	lsls	r2, r3, #24
 800812c:	4b82      	ldr	r3, [pc, #520]	; (8008338 <MX_LWIP_Init+0x268>)
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	041b      	lsls	r3, r3, #16
 8008132:	431a      	orrs	r2, r3
 8008134:	4b80      	ldr	r3, [pc, #512]	; (8008338 <MX_LWIP_Init+0x268>)
 8008136:	789b      	ldrb	r3, [r3, #2]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	4313      	orrs	r3, r2
 800813c:	4a7e      	ldr	r2, [pc, #504]	; (8008338 <MX_LWIP_Init+0x268>)
 800813e:	78d2      	ldrb	r2, [r2, #3]
 8008140:	4313      	orrs	r3, r2
 8008142:	061a      	lsls	r2, r3, #24
 8008144:	4b7c      	ldr	r3, [pc, #496]	; (8008338 <MX_LWIP_Init+0x268>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	0619      	lsls	r1, r3, #24
 800814a:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <MX_LWIP_Init+0x268>)
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	041b      	lsls	r3, r3, #16
 8008150:	4319      	orrs	r1, r3
 8008152:	4b79      	ldr	r3, [pc, #484]	; (8008338 <MX_LWIP_Init+0x268>)
 8008154:	789b      	ldrb	r3, [r3, #2]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	430b      	orrs	r3, r1
 800815a:	4977      	ldr	r1, [pc, #476]	; (8008338 <MX_LWIP_Init+0x268>)
 800815c:	78c9      	ldrb	r1, [r1, #3]
 800815e:	430b      	orrs	r3, r1
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008166:	431a      	orrs	r2, r3
 8008168:	4b73      	ldr	r3, [pc, #460]	; (8008338 <MX_LWIP_Init+0x268>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	0619      	lsls	r1, r3, #24
 800816e:	4b72      	ldr	r3, [pc, #456]	; (8008338 <MX_LWIP_Init+0x268>)
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	4319      	orrs	r1, r3
 8008176:	4b70      	ldr	r3, [pc, #448]	; (8008338 <MX_LWIP_Init+0x268>)
 8008178:	789b      	ldrb	r3, [r3, #2]
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	430b      	orrs	r3, r1
 800817e:	496e      	ldr	r1, [pc, #440]	; (8008338 <MX_LWIP_Init+0x268>)
 8008180:	78c9      	ldrb	r1, [r1, #3]
 8008182:	430b      	orrs	r3, r1
 8008184:	0a1b      	lsrs	r3, r3, #8
 8008186:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800818a:	431a      	orrs	r2, r3
 800818c:	4b6a      	ldr	r3, [pc, #424]	; (8008338 <MX_LWIP_Init+0x268>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	0619      	lsls	r1, r3, #24
 8008192:	4b69      	ldr	r3, [pc, #420]	; (8008338 <MX_LWIP_Init+0x268>)
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	4319      	orrs	r1, r3
 800819a:	4b67      	ldr	r3, [pc, #412]	; (8008338 <MX_LWIP_Init+0x268>)
 800819c:	789b      	ldrb	r3, [r3, #2]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	430b      	orrs	r3, r1
 80081a2:	4965      	ldr	r1, [pc, #404]	; (8008338 <MX_LWIP_Init+0x268>)
 80081a4:	78c9      	ldrb	r1, [r1, #3]
 80081a6:	430b      	orrs	r3, r1
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	4313      	orrs	r3, r2
 80081ac:	4a65      	ldr	r2, [pc, #404]	; (8008344 <MX_LWIP_Init+0x274>)
 80081ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80081b0:	4b62      	ldr	r3, [pc, #392]	; (800833c <MX_LWIP_Init+0x26c>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	061a      	lsls	r2, r3, #24
 80081b6:	4b61      	ldr	r3, [pc, #388]	; (800833c <MX_LWIP_Init+0x26c>)
 80081b8:	785b      	ldrb	r3, [r3, #1]
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	431a      	orrs	r2, r3
 80081be:	4b5f      	ldr	r3, [pc, #380]	; (800833c <MX_LWIP_Init+0x26c>)
 80081c0:	789b      	ldrb	r3, [r3, #2]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	4313      	orrs	r3, r2
 80081c6:	4a5d      	ldr	r2, [pc, #372]	; (800833c <MX_LWIP_Init+0x26c>)
 80081c8:	78d2      	ldrb	r2, [r2, #3]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	061a      	lsls	r2, r3, #24
 80081ce:	4b5b      	ldr	r3, [pc, #364]	; (800833c <MX_LWIP_Init+0x26c>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	0619      	lsls	r1, r3, #24
 80081d4:	4b59      	ldr	r3, [pc, #356]	; (800833c <MX_LWIP_Init+0x26c>)
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	4319      	orrs	r1, r3
 80081dc:	4b57      	ldr	r3, [pc, #348]	; (800833c <MX_LWIP_Init+0x26c>)
 80081de:	789b      	ldrb	r3, [r3, #2]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	430b      	orrs	r3, r1
 80081e4:	4955      	ldr	r1, [pc, #340]	; (800833c <MX_LWIP_Init+0x26c>)
 80081e6:	78c9      	ldrb	r1, [r1, #3]
 80081e8:	430b      	orrs	r3, r1
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081f0:	431a      	orrs	r2, r3
 80081f2:	4b52      	ldr	r3, [pc, #328]	; (800833c <MX_LWIP_Init+0x26c>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	0619      	lsls	r1, r3, #24
 80081f8:	4b50      	ldr	r3, [pc, #320]	; (800833c <MX_LWIP_Init+0x26c>)
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	4319      	orrs	r1, r3
 8008200:	4b4e      	ldr	r3, [pc, #312]	; (800833c <MX_LWIP_Init+0x26c>)
 8008202:	789b      	ldrb	r3, [r3, #2]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	430b      	orrs	r3, r1
 8008208:	494c      	ldr	r1, [pc, #304]	; (800833c <MX_LWIP_Init+0x26c>)
 800820a:	78c9      	ldrb	r1, [r1, #3]
 800820c:	430b      	orrs	r3, r1
 800820e:	0a1b      	lsrs	r3, r3, #8
 8008210:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008214:	431a      	orrs	r2, r3
 8008216:	4b49      	ldr	r3, [pc, #292]	; (800833c <MX_LWIP_Init+0x26c>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	0619      	lsls	r1, r3, #24
 800821c:	4b47      	ldr	r3, [pc, #284]	; (800833c <MX_LWIP_Init+0x26c>)
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	4319      	orrs	r1, r3
 8008224:	4b45      	ldr	r3, [pc, #276]	; (800833c <MX_LWIP_Init+0x26c>)
 8008226:	789b      	ldrb	r3, [r3, #2]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	430b      	orrs	r3, r1
 800822c:	4943      	ldr	r1, [pc, #268]	; (800833c <MX_LWIP_Init+0x26c>)
 800822e:	78c9      	ldrb	r1, [r1, #3]
 8008230:	430b      	orrs	r3, r1
 8008232:	0e1b      	lsrs	r3, r3, #24
 8008234:	4313      	orrs	r3, r2
 8008236:	4a44      	ldr	r2, [pc, #272]	; (8008348 <MX_LWIP_Init+0x278>)
 8008238:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800823a:	4b41      	ldr	r3, [pc, #260]	; (8008340 <MX_LWIP_Init+0x270>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	061a      	lsls	r2, r3, #24
 8008240:	4b3f      	ldr	r3, [pc, #252]	; (8008340 <MX_LWIP_Init+0x270>)
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	431a      	orrs	r2, r3
 8008248:	4b3d      	ldr	r3, [pc, #244]	; (8008340 <MX_LWIP_Init+0x270>)
 800824a:	789b      	ldrb	r3, [r3, #2]
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	4313      	orrs	r3, r2
 8008250:	4a3b      	ldr	r2, [pc, #236]	; (8008340 <MX_LWIP_Init+0x270>)
 8008252:	78d2      	ldrb	r2, [r2, #3]
 8008254:	4313      	orrs	r3, r2
 8008256:	061a      	lsls	r2, r3, #24
 8008258:	4b39      	ldr	r3, [pc, #228]	; (8008340 <MX_LWIP_Init+0x270>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	0619      	lsls	r1, r3, #24
 800825e:	4b38      	ldr	r3, [pc, #224]	; (8008340 <MX_LWIP_Init+0x270>)
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	4319      	orrs	r1, r3
 8008266:	4b36      	ldr	r3, [pc, #216]	; (8008340 <MX_LWIP_Init+0x270>)
 8008268:	789b      	ldrb	r3, [r3, #2]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	430b      	orrs	r3, r1
 800826e:	4934      	ldr	r1, [pc, #208]	; (8008340 <MX_LWIP_Init+0x270>)
 8008270:	78c9      	ldrb	r1, [r1, #3]
 8008272:	430b      	orrs	r3, r1
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800827a:	431a      	orrs	r2, r3
 800827c:	4b30      	ldr	r3, [pc, #192]	; (8008340 <MX_LWIP_Init+0x270>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	0619      	lsls	r1, r3, #24
 8008282:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <MX_LWIP_Init+0x270>)
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	4319      	orrs	r1, r3
 800828a:	4b2d      	ldr	r3, [pc, #180]	; (8008340 <MX_LWIP_Init+0x270>)
 800828c:	789b      	ldrb	r3, [r3, #2]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	430b      	orrs	r3, r1
 8008292:	492b      	ldr	r1, [pc, #172]	; (8008340 <MX_LWIP_Init+0x270>)
 8008294:	78c9      	ldrb	r1, [r1, #3]
 8008296:	430b      	orrs	r3, r1
 8008298:	0a1b      	lsrs	r3, r3, #8
 800829a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800829e:	431a      	orrs	r2, r3
 80082a0:	4b27      	ldr	r3, [pc, #156]	; (8008340 <MX_LWIP_Init+0x270>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	0619      	lsls	r1, r3, #24
 80082a6:	4b26      	ldr	r3, [pc, #152]	; (8008340 <MX_LWIP_Init+0x270>)
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	4319      	orrs	r1, r3
 80082ae:	4b24      	ldr	r3, [pc, #144]	; (8008340 <MX_LWIP_Init+0x270>)
 80082b0:	789b      	ldrb	r3, [r3, #2]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	430b      	orrs	r3, r1
 80082b6:	4922      	ldr	r1, [pc, #136]	; (8008340 <MX_LWIP_Init+0x270>)
 80082b8:	78c9      	ldrb	r1, [r1, #3]
 80082ba:	430b      	orrs	r3, r1
 80082bc:	0e1b      	lsrs	r3, r3, #24
 80082be:	4313      	orrs	r3, r2
 80082c0:	4a22      	ldr	r2, [pc, #136]	; (800834c <MX_LWIP_Init+0x27c>)
 80082c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80082c4:	4b22      	ldr	r3, [pc, #136]	; (8008350 <MX_LWIP_Init+0x280>)
 80082c6:	9302      	str	r3, [sp, #8]
 80082c8:	4b22      	ldr	r3, [pc, #136]	; (8008354 <MX_LWIP_Init+0x284>)
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	2300      	movs	r3, #0
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	4b1e      	ldr	r3, [pc, #120]	; (800834c <MX_LWIP_Init+0x27c>)
 80082d2:	4a1d      	ldr	r2, [pc, #116]	; (8008348 <MX_LWIP_Init+0x278>)
 80082d4:	491b      	ldr	r1, [pc, #108]	; (8008344 <MX_LWIP_Init+0x274>)
 80082d6:	4820      	ldr	r0, [pc, #128]	; (8008358 <MX_LWIP_Init+0x288>)
 80082d8:	f007 fc66 	bl	800fba8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80082dc:	481e      	ldr	r0, [pc, #120]	; (8008358 <MX_LWIP_Init+0x288>)
 80082de:	f007 fe15 	bl	800ff0c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80082e2:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <MX_LWIP_Init+0x288>)
 80082e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082e8:	089b      	lsrs	r3, r3, #2
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80082f4:	4818      	ldr	r0, [pc, #96]	; (8008358 <MX_LWIP_Init+0x288>)
 80082f6:	f007 fe19 	bl	800ff2c <netif_set_up>
 80082fa:	e002      	b.n	8008302 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80082fc:	4816      	ldr	r0, [pc, #88]	; (8008358 <MX_LWIP_Init+0x288>)
 80082fe:	f007 fe81 	bl	8010004 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008302:	4916      	ldr	r1, [pc, #88]	; (800835c <MX_LWIP_Init+0x28c>)
 8008304:	4814      	ldr	r0, [pc, #80]	; (8008358 <MX_LWIP_Init+0x288>)
 8008306:	f007 ff13 	bl	8010130 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800830a:	2224      	movs	r2, #36	; 0x24
 800830c:	2100      	movs	r1, #0
 800830e:	4814      	ldr	r0, [pc, #80]	; (8008360 <MX_LWIP_Init+0x290>)
 8008310:	f00f f827 	bl	8017362 <memset>
  attributes.name = "EthLink";
 8008314:	4b12      	ldr	r3, [pc, #72]	; (8008360 <MX_LWIP_Init+0x290>)
 8008316:	4a13      	ldr	r2, [pc, #76]	; (8008364 <MX_LWIP_Init+0x294>)
 8008318:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800831a:	4b11      	ldr	r3, [pc, #68]	; (8008360 <MX_LWIP_Init+0x290>)
 800831c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008320:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <MX_LWIP_Init+0x290>)
 8008324:	2210      	movs	r2, #16
 8008326:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008328:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <MX_LWIP_Init+0x290>)
 800832a:	490b      	ldr	r1, [pc, #44]	; (8008358 <MX_LWIP_Init+0x288>)
 800832c:	480e      	ldr	r0, [pc, #56]	; (8008368 <MX_LWIP_Init+0x298>)
 800832e:	f000 fd41 	bl	8008db4 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	240050c0 	.word	0x240050c0
 800833c:	240050bc 	.word	0x240050bc
 8008340:	2400505c 	.word	0x2400505c
 8008344:	240050b8 	.word	0x240050b8
 8008348:	240050c4 	.word	0x240050c4
 800834c:	240050c8 	.word	0x240050c8
 8008350:	08016411 	.word	0x08016411
 8008354:	08008a4d 	.word	0x08008a4d
 8008358:	24005084 	.word	0x24005084
 800835c:	0800836d 	.word	0x0800836d
 8008360:	24005060 	.word	0x24005060
 8008364:	08018584 	.word	0x08018584
 8008368:	08008b75 	.word	0x08008b75

0800836c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008392:	2320      	movs	r3, #32
 8008394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008396:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800839a:	e00b      	b.n	80083b4 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800839c:	4a0c      	ldr	r2, [pc, #48]	; (80083d0 <SCB_InvalidateDCache_by_Addr+0x50>)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4413      	add	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dcf0      	bgt.n	800839c <SCB_InvalidateDCache_by_Addr+0x1c>
 80083ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083be:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	e000ed00 	.word	0xe000ed00

080083d4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08e      	sub	sp, #56	; 0x38
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	605a      	str	r2, [r3, #4]
 80083e6:	609a      	str	r2, [r3, #8]
 80083e8:	60da      	str	r2, [r3, #12]
 80083ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a61      	ldr	r2, [pc, #388]	; (8008578 <HAL_ETH_MspInit+0x1a4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	f040 80bb 	bne.w	800856e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80083f8:	4b60      	ldr	r3, [pc, #384]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 80083fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80083fe:	4a5f      	ldr	r2, [pc, #380]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008404:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008408:	4b5c      	ldr	r3, [pc, #368]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 800840a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800840e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008412:	623b      	str	r3, [r7, #32]
 8008414:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008416:	4b59      	ldr	r3, [pc, #356]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800841c:	4a57      	ldr	r2, [pc, #348]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 800841e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008422:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008426:	4b55      	ldr	r3, [pc, #340]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800842c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008430:	61fb      	str	r3, [r7, #28]
 8008432:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008434:	4b51      	ldr	r3, [pc, #324]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008436:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800843a:	4a50      	ldr	r2, [pc, #320]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 800843c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008440:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008444:	4b4d      	ldr	r3, [pc, #308]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008446:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800844a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844e:	61bb      	str	r3, [r7, #24]
 8008450:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008452:	4b4a      	ldr	r3, [pc, #296]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008458:	4a48      	ldr	r2, [pc, #288]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 800845a:	f043 0304 	orr.w	r3, r3, #4
 800845e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008462:	4b46      	ldr	r3, [pc, #280]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008470:	4b42      	ldr	r3, [pc, #264]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008476:	4a41      	ldr	r2, [pc, #260]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008478:	f043 0301 	orr.w	r3, r3, #1
 800847c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008480:	4b3e      	ldr	r3, [pc, #248]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800848e:	4b3b      	ldr	r3, [pc, #236]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008494:	4a39      	ldr	r2, [pc, #228]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 8008496:	f043 0302 	orr.w	r3, r3, #2
 800849a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800849e:	4b37      	ldr	r3, [pc, #220]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 80084a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80084ac:	4b33      	ldr	r3, [pc, #204]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 80084ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084b2:	4a32      	ldr	r2, [pc, #200]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 80084b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084bc:	4b2f      	ldr	r3, [pc, #188]	; (800857c <HAL_ETH_MspInit+0x1a8>)
 80084be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c6:	60bb      	str	r3, [r7, #8]
 80084c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80084ca:	2332      	movs	r3, #50	; 0x32
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ce:	2302      	movs	r3, #2
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084d6:	2303      	movs	r3, #3
 80084d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084da:	230b      	movs	r3, #11
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e2:	4619      	mov	r1, r3
 80084e4:	4826      	ldr	r0, [pc, #152]	; (8008580 <HAL_ETH_MspInit+0x1ac>)
 80084e6:	f7fb f9a9 	bl	800383c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80084ea:	2386      	movs	r3, #134	; 0x86
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ee:	2302      	movs	r3, #2
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084f6:	2303      	movs	r3, #3
 80084f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084fa:	230b      	movs	r3, #11
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008502:	4619      	mov	r1, r3
 8008504:	481f      	ldr	r0, [pc, #124]	; (8008584 <HAL_ETH_MspInit+0x1b0>)
 8008506:	f7fb f999 	bl	800383c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800850a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008510:	2302      	movs	r3, #2
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008514:	2300      	movs	r3, #0
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008518:	2303      	movs	r3, #3
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800851c:	230b      	movs	r3, #11
 800851e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008524:	4619      	mov	r1, r3
 8008526:	4818      	ldr	r0, [pc, #96]	; (8008588 <HAL_ETH_MspInit+0x1b4>)
 8008528:	f7fb f988 	bl	800383c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800852c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008532:	2302      	movs	r3, #2
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008536:	2300      	movs	r3, #0
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800853a:	2303      	movs	r3, #3
 800853c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800853e:	230b      	movs	r3, #11
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008546:	4619      	mov	r1, r3
 8008548:	4810      	ldr	r0, [pc, #64]	; (800858c <HAL_ETH_MspInit+0x1b8>)
 800854a:	f7fb f977 	bl	800383c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 15, 0);
 800854e:	2200      	movs	r2, #0
 8008550:	210f      	movs	r1, #15
 8008552:	203d      	movs	r0, #61	; 0x3d
 8008554:	f7f9 fa2c 	bl	80019b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008558:	203d      	movs	r0, #61	; 0x3d
 800855a:	f7f9 fa43 	bl	80019e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 15, 0);
 800855e:	2200      	movs	r2, #0
 8008560:	210f      	movs	r1, #15
 8008562:	203e      	movs	r0, #62	; 0x3e
 8008564:	f7f9 fa24 	bl	80019b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008568:	203e      	movs	r0, #62	; 0x3e
 800856a:	f7f9 fa3b 	bl	80019e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800856e:	bf00      	nop
 8008570:	3738      	adds	r7, #56	; 0x38
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	40028000 	.word	0x40028000
 800857c:	58024400 	.word	0x58024400
 8008580:	58020800 	.word	0x58020800
 8008584:	58020000 	.word	0x58020000
 8008588:	58020400 	.word	0x58020400
 800858c:	58021800 	.word	0x58021800

08008590 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <HAL_ETH_RxCpltCallback+0x1c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 ff29 	bl	80093f4 <osSemaphoreRelease>
}
 80085a2:	bf00      	nop
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	240000c8 	.word	0x240000c8

080085b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b0ac      	sub	sp, #176	; 0xb0
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80085ca:	4b8f      	ldr	r3, [pc, #572]	; (8008808 <low_level_init+0x258>)
 80085cc:	4a8f      	ldr	r2, [pc, #572]	; (800880c <low_level_init+0x25c>)
 80085ce:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80085d0:	2300      	movs	r3, #0
 80085d2:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80085d4:	2380      	movs	r3, #128	; 0x80
 80085d6:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80085d8:	23e1      	movs	r3, #225	; 0xe1
 80085da:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80085e0:	2300      	movs	r3, #0
 80085e2:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80085e4:	2300      	movs	r3, #0
 80085e6:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80085e8:	4a87      	ldr	r2, [pc, #540]	; (8008808 <low_level_init+0x258>)
 80085ea:	f107 030c 	add.w	r3, r7, #12
 80085ee:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80085f0:	4b85      	ldr	r3, [pc, #532]	; (8008808 <low_level_init+0x258>)
 80085f2:	2201      	movs	r2, #1
 80085f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80085f6:	4b84      	ldr	r3, [pc, #528]	; (8008808 <low_level_init+0x258>)
 80085f8:	4a85      	ldr	r2, [pc, #532]	; (8008810 <low_level_init+0x260>)
 80085fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80085fc:	4b82      	ldr	r3, [pc, #520]	; (8008808 <low_level_init+0x258>)
 80085fe:	4a85      	ldr	r2, [pc, #532]	; (8008814 <low_level_init+0x264>)
 8008600:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008602:	4b81      	ldr	r3, [pc, #516]	; (8008808 <low_level_init+0x258>)
 8008604:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008608:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800860a:	487f      	ldr	r0, [pc, #508]	; (8008808 <low_level_init+0x258>)
 800860c:	f7f9 fa84 	bl	8001b18 <HAL_ETH_Init>
 8008610:	4603      	mov	r3, r0
 8008612:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008616:	2234      	movs	r2, #52	; 0x34
 8008618:	2100      	movs	r1, #0
 800861a:	487f      	ldr	r0, [pc, #508]	; (8008818 <low_level_init+0x268>)
 800861c:	f00e fea1 	bl	8017362 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008620:	4b7d      	ldr	r3, [pc, #500]	; (8008818 <low_level_init+0x268>)
 8008622:	2221      	movs	r2, #33	; 0x21
 8008624:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008626:	4b7c      	ldr	r3, [pc, #496]	; (8008818 <low_level_init+0x268>)
 8008628:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800862c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800862e:	4b7a      	ldr	r3, [pc, #488]	; (8008818 <low_level_init+0x268>)
 8008630:	2200      	movs	r2, #0
 8008632:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008634:	4879      	ldr	r0, [pc, #484]	; (800881c <low_level_init+0x26c>)
 8008636:	f007 f971 	bl	800f91c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2206      	movs	r2, #6
 800863e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008642:	4b71      	ldr	r3, [pc, #452]	; (8008808 <low_level_init+0x258>)
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800864e:	4b6e      	ldr	r3, [pc, #440]	; (8008808 <low_level_init+0x258>)
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	785a      	ldrb	r2, [r3, #1]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800865a:	4b6b      	ldr	r3, [pc, #428]	; (8008808 <low_level_init+0x258>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	789a      	ldrb	r2, [r3, #2]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008666:	4b68      	ldr	r3, [pc, #416]	; (8008808 <low_level_init+0x258>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	78da      	ldrb	r2, [r3, #3]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008672:	4b65      	ldr	r3, [pc, #404]	; (8008808 <low_level_init+0x258>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	791a      	ldrb	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800867e:	4b62      	ldr	r3, [pc, #392]	; (8008808 <low_level_init+0x258>)
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	795a      	ldrb	r2, [r3, #5]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008690:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008698:	f043 030a 	orr.w	r3, r3, #10
 800869c:	b2da      	uxtb	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086aa:	e012      	b.n	80086d2 <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80086ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80086b4:	fb02 f303 	mul.w	r3, r2, r3
 80086b8:	4a59      	ldr	r2, [pc, #356]	; (8008820 <low_level_init+0x270>)
 80086ba:	441a      	add	r2, r3
 80086bc:	2300      	movs	r3, #0
 80086be:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80086c2:	4851      	ldr	r0, [pc, #324]	; (8008808 <low_level_init+0x258>)
 80086c4:	f7f9 fb02 	bl	8001ccc <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80086c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086cc:	3301      	adds	r3, #1
 80086ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d9e8      	bls.n	80086ac <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80086da:	2200      	movs	r2, #0
 80086dc:	2101      	movs	r1, #1
 80086de:	2001      	movs	r0, #1
 80086e0:	f000 fd84 	bl	80091ec <osSemaphoreNew>
 80086e4:	4602      	mov	r2, r0
 80086e6:	4b4f      	ldr	r3, [pc, #316]	; (8008824 <low_level_init+0x274>)
 80086e8:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80086ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80086ee:	2224      	movs	r2, #36	; 0x24
 80086f0:	2100      	movs	r1, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f00e fe35 	bl	8017362 <memset>
  attributes.name = "EthIf";
 80086f8:	4b4b      	ldr	r3, [pc, #300]	; (8008828 <low_level_init+0x278>)
 80086fa:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80086fc:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 8008704:	2330      	movs	r3, #48	; 0x30
 8008706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 800870a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800870e:	461a      	mov	r2, r3
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4846      	ldr	r0, [pc, #280]	; (800882c <low_level_init+0x27c>)
 8008714:	f000 fb4e 	bl	8008db4 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008718:	4945      	ldr	r1, [pc, #276]	; (8008830 <low_level_init+0x280>)
 800871a:	4846      	ldr	r0, [pc, #280]	; (8008834 <low_level_init+0x284>)
 800871c:	f7f8 fe91 	bl	8001442 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008720:	4844      	ldr	r0, [pc, #272]	; (8008834 <low_level_init+0x284>)
 8008722:	f7f8 fec0 	bl	80014a6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008726:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d165      	bne.n	80087fa <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800872e:	4841      	ldr	r0, [pc, #260]	; (8008834 <low_level_init+0x284>)
 8008730:	f7f8 ff61 	bl	80015f6 <LAN8742_GetLinkState>
 8008734:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800873c:	2b01      	cmp	r3, #1
 800873e:	dc06      	bgt.n	800874e <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f007 fcc5 	bl	80100d0 <netif_set_link_down>
      netif_set_down(netif);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f007 fc5c 	bl	8010004 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800874c:	e057      	b.n	80087fe <low_level_init+0x24e>
      switch (PHYLinkState)
 800874e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008752:	3b02      	subs	r3, #2
 8008754:	2b03      	cmp	r3, #3
 8008756:	d82b      	bhi.n	80087b0 <low_level_init+0x200>
 8008758:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <low_level_init+0x1b0>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	08008771 	.word	0x08008771
 8008764:	08008783 	.word	0x08008783
 8008768:	08008793 	.word	0x08008793
 800876c:	080087a3 	.word	0x080087a3
        duplex = ETH_FULLDUPLEX_MODE;
 8008770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008778:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800877c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008780:	e01f      	b.n	80087c2 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8008782:	2300      	movs	r3, #0
 8008784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800878c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008790:	e017      	b.n	80087c2 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8008792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800879a:	2300      	movs	r3, #0
 800879c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80087a0:	e00f      	b.n	80087c2 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80087a8:	2300      	movs	r3, #0
 80087aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80087ae:	e008      	b.n	80087c2 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80087b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80087b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80087c0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80087c2:	f107 0314 	add.w	r3, r7, #20
 80087c6:	4619      	mov	r1, r3
 80087c8:	480f      	ldr	r0, [pc, #60]	; (8008808 <low_level_init+0x258>)
 80087ca:	f7fa f861 	bl	8002890 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80087ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 80087d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80087da:	f107 0314 	add.w	r3, r7, #20
 80087de:	4619      	mov	r1, r3
 80087e0:	4809      	ldr	r0, [pc, #36]	; (8008808 <low_level_init+0x258>)
 80087e2:	f7fa fa29 	bl	8002c38 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80087e6:	4808      	ldr	r0, [pc, #32]	; (8008808 <low_level_init+0x258>)
 80087e8:	f7f9 fab1 	bl	8001d4e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f007 fb9d 	bl	800ff2c <netif_set_up>
    netif_set_link_up(netif);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f007 fc38 	bl	8010068 <netif_set_link_up>
}
 80087f8:	e001      	b.n	80087fe <low_level_init+0x24e>
    Error_Handler();
 80087fa:	f7f8 fc01 	bl	8001000 <Error_Handler>
}
 80087fe:	bf00      	nop
 8008800:	37b0      	adds	r7, #176	; 0xb0
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	240051b8 	.word	0x240051b8
 800880c:	40028000 	.word	0x40028000
 8008810:	30040060 	.word	0x30040060
 8008814:	30040000 	.word	0x30040000
 8008818:	24005228 	.word	0x24005228
 800881c:	0801b3f0 	.word	0x0801b3f0
 8008820:	30040200 	.word	0x30040200
 8008824:	240000c8 	.word	0x240000c8
 8008828:	0801858c 	.word	0x0801858c
 800882c:	080089fd 	.word	0x080089fd
 8008830:	24000010 	.word	0x24000010
 8008834:	24005198 	.word	0x24005198

08008838 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b092      	sub	sp, #72	; 0x48
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8008842:	2300      	movs	r3, #0
 8008844:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800884c:	f107 030c 	add.w	r3, r7, #12
 8008850:	2230      	movs	r2, #48	; 0x30
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f00e fd84 	bl	8017362 <memset>

  for(q = p; q != NULL; q = q->next)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	643b      	str	r3, [r7, #64]	; 0x40
 800885e:	e049      	b.n	80088f4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008862:	2b03      	cmp	r3, #3
 8008864:	d902      	bls.n	800886c <low_level_output+0x34>
      return ERR_IF;
 8008866:	f06f 030b 	mvn.w	r3, #11
 800886a:	e056      	b.n	800891a <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800886c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800886e:	6859      	ldr	r1, [r3, #4]
 8008870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008872:	4613      	mov	r3, r2
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800887e:	4413      	add	r3, r2
 8008880:	3b3c      	subs	r3, #60	; 0x3c
 8008882:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008886:	895b      	ldrh	r3, [r3, #10]
 8008888:	4619      	mov	r1, r3
 800888a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888c:	4613      	mov	r3, r2
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008898:	4413      	add	r3, r2
 800889a:	3b38      	subs	r3, #56	; 0x38
 800889c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800889e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d012      	beq.n	80088ca <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80088a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a6:	1e5a      	subs	r2, r3, #1
 80088a8:	f107 000c 	add.w	r0, r7, #12
 80088ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088ae:	460b      	mov	r3, r1
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	440b      	add	r3, r1
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	18c1      	adds	r1, r0, r3
 80088b8:	4613      	mov	r3, r2
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80088c4:	4413      	add	r3, r2
 80088c6:	3b34      	subs	r3, #52	; 0x34
 80088c8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80088ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 80088d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d4:	4613      	mov	r3, r2
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80088e0:	4413      	add	r3, r2
 80088e2:	3b34      	subs	r3, #52	; 0x34
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
    }

    i++;
 80088e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ea:	3301      	adds	r3, #1
 80088ec:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80088ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	643b      	str	r3, [r7, #64]	; 0x40
 80088f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1b2      	bne.n	8008860 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	891b      	ldrh	r3, [r3, #8]
 80088fe:	461a      	mov	r2, r3
 8008900:	4b08      	ldr	r3, [pc, #32]	; (8008924 <low_level_output+0xec>)
 8008902:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008904:	4a07      	ldr	r2, [pc, #28]	; (8008924 <low_level_output+0xec>)
 8008906:	f107 030c 	add.w	r3, r7, #12
 800890a:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800890c:	2214      	movs	r2, #20
 800890e:	4905      	ldr	r1, [pc, #20]	; (8008924 <low_level_output+0xec>)
 8008910:	4805      	ldr	r0, [pc, #20]	; (8008928 <low_level_output+0xf0>)
 8008912:	f7f9 fb1b 	bl	8001f4c <HAL_ETH_Transmit>

  return errval;
 8008916:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800891a:	4618      	mov	r0, r3
 800891c:	3748      	adds	r7, #72	; 0x48
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	24005228 	.word	0x24005228
 8008928:	240051b8 	.word	0x240051b8

0800892c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b094      	sub	sp, #80	; 0x50
 8008930:	af02      	add	r7, sp, #8
 8008932:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008934:	2300      	movs	r3, #0
 8008936:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	60bb      	str	r3, [r7, #8]
 800893c:	2300      	movs	r3, #0
 800893e:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008940:	f107 030c 	add.w	r3, r7, #12
 8008944:	2230      	movs	r2, #48	; 0x30
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f00e fd0a 	bl	8017362 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800894e:	2300      	movs	r3, #0
 8008950:	643b      	str	r3, [r7, #64]	; 0x40
 8008952:	e015      	b.n	8008980 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8008954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	f107 010c 	add.w	r1, r7, #12
 800895c:	4613      	mov	r3, r2
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4419      	add	r1, r3
 8008966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008968:	4613      	mov	r3, r2
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008974:	4413      	add	r3, r2
 8008976:	3b34      	subs	r3, #52	; 0x34
 8008978:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800897a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897c:	3301      	adds	r3, #1
 800897e:	643b      	str	r3, [r7, #64]	; 0x40
 8008980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008982:	2b02      	cmp	r3, #2
 8008984:	d9e6      	bls.n	8008954 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8008986:	f107 030c 	add.w	r3, r7, #12
 800898a:	4619      	mov	r1, r3
 800898c:	4818      	ldr	r0, [pc, #96]	; (80089f0 <low_level_input+0xc4>)
 800898e:	f7f9 fc56 	bl	800223e <HAL_ETH_GetRxDataBuffer>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d125      	bne.n	80089e4 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008998:	f107 0308 	add.w	r3, r7, #8
 800899c:	4619      	mov	r1, r3
 800899e:	4814      	ldr	r0, [pc, #80]	; (80089f0 <low_level_input+0xc4>)
 80089a0:	f7f9 fceb 	bl	800237a <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 80089a4:	4812      	ldr	r0, [pc, #72]	; (80089f0 <low_level_input+0xc4>)
 80089a6:	f7f9 fd1b 	bl	80023e0 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7ff fce5 	bl	8008380 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80089b6:	480f      	ldr	r0, [pc, #60]	; (80089f4 <low_level_input+0xc8>)
 80089b8:	f007 f82c 	bl	800fa14 <memp_malloc_pool>
 80089bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 80089be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00f      	beq.n	80089e4 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 80089c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c6:	4a0c      	ldr	r2, [pc, #48]	; (80089f8 <low_level_input+0xcc>)
 80089c8:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	b299      	uxth	r1, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	b292      	uxth	r2, r2
 80089d4:	9201      	str	r2, [sp, #4]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089da:	2241      	movs	r2, #65	; 0x41
 80089dc:	2000      	movs	r0, #0
 80089de:	f007 fd97 	bl	8010510 <pbuf_alloced_custom>
 80089e2:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 80089e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3748      	adds	r7, #72	; 0x48
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	240051b8 	.word	0x240051b8
 80089f4:	0801b3f0 	.word	0x0801b3f0
 80089f8:	08008aa9 	.word	0x08008aa9

080089fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008a08:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <ethernetif_input+0x4c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fc89 	bl	8009328 <osSemaphoreAcquire>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f5      	bne.n	8008a08 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7ff ff85 	bl	800892c <low_level_input>
 8008a22:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	68b8      	ldr	r0, [r7, #8]
 8008a32:	4798      	blx	r3
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8008a3a:	68b8      	ldr	r0, [r7, #8]
 8008a3c:	f007 ff22 	bl	8010884 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1ea      	bne.n	8008a1c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008a46:	e7df      	b.n	8008a08 <ethernetif_input+0xc>
 8008a48:	240000c8 	.word	0x240000c8

08008a4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <ethernetif_init+0x1c>
 8008a5a:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <ethernetif_init+0x48>)
 8008a5c:	f240 2251 	movw	r2, #593	; 0x251
 8008a60:	490d      	ldr	r1, [pc, #52]	; (8008a98 <ethernetif_init+0x4c>)
 8008a62:	480e      	ldr	r0, [pc, #56]	; (8008a9c <ethernetif_init+0x50>)
 8008a64:	f00e fc86 	bl	8017374 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2273      	movs	r2, #115	; 0x73
 8008a6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2274      	movs	r2, #116	; 0x74
 8008a74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <ethernetif_init+0x54>)
 8008a7c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a08      	ldr	r2, [pc, #32]	; (8008aa4 <ethernetif_init+0x58>)
 8008a82:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff fd93 	bl	80085b0 <low_level_init>

  return ERR_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	08018594 	.word	0x08018594
 8008a98:	080185b0 	.word	0x080185b0
 8008a9c:	080185c0 	.word	0x080185c0
 8008aa0:	0800d24d 	.word	0x0800d24d
 8008aa4:	08008839 	.word	0x08008839

08008aa8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008ab4:	68f9      	ldr	r1, [r7, #12]
 8008ab6:	4803      	ldr	r0, [pc, #12]	; (8008ac4 <pbuf_free_custom+0x1c>)
 8008ab8:	f007 f820 	bl	800fafc <memp_free_pool>
}
 8008abc:	bf00      	nop
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	0801b3f0 	.word	0x0801b3f0

08008ac8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008acc:	f7f8 fe6a 	bl	80017a4 <HAL_GetTick>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008adc:	4802      	ldr	r0, [pc, #8]	; (8008ae8 <ETH_PHY_IO_Init+0x10>)
 8008ade:	f7fa f8c5 	bl	8002c6c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	240051b8 	.word	0x240051b8

08008aec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
  return 0;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	68f9      	ldr	r1, [r7, #12]
 8008b0e:	4807      	ldr	r0, [pc, #28]	; (8008b2c <ETH_PHY_IO_ReadReg+0x30>)
 8008b10:	f7f9 fe16 	bl	8002740 <HAL_ETH_ReadPHYRegister>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b1e:	e000      	b.n	8008b22 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	240051b8 	.word	0x240051b8

08008b30 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	68f9      	ldr	r1, [r7, #12]
 8008b42:	4807      	ldr	r0, [pc, #28]	; (8008b60 <ETH_PHY_IO_WriteReg+0x30>)
 8008b44:	f7f9 fe50 	bl	80027e8 <HAL_ETH_WritePHYRegister>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b52:	e000      	b.n	8008b56 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	240051b8 	.word	0x240051b8

08008b64 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008b68:	f7f8 fe1c 	bl	80017a4 <HAL_GetTick>
 8008b6c:	4603      	mov	r3, r0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b0a0      	sub	sp, #128	; 0x80
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b80:	2300      	movs	r3, #0
 8008b82:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b84:	2300      	movs	r3, #0
 8008b86:	677b      	str	r3, [r7, #116]	; 0x74

/* USER CODE END ETH link init */

  for(;;)
  {
  struct netif *netif = (struct netif *) argument;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	673b      	str	r3, [r7, #112]	; 0x70
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008b8c:	483a      	ldr	r0, [pc, #232]	; (8008c78 <ethernet_link_thread+0x104>)
 8008b8e:	f7f8 fd32 	bl	80015f6 <LAN8742_GetLinkState>
 8008b92:	4603      	mov	r3, r0
 8008b94:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b9c:	089b      	lsrs	r3, r3, #2
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00c      	beq.n	8008bc2 <ethernet_link_thread+0x4e>
 8008ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d809      	bhi.n	8008bc2 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008bae:	4833      	ldr	r0, [pc, #204]	; (8008c7c <ethernet_link_thread+0x108>)
 8008bb0:	f7f9 f952 	bl	8001e58 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008bb4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008bb6:	f007 fa25 	bl	8010004 <netif_set_down>
    netif_set_link_down(netif);
 8008bba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008bbc:	f007 fa88 	bl	80100d0 <netif_set_link_down>
 8008bc0:	e055      	b.n	8008c6e <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d14e      	bne.n	8008c6e <ethernet_link_thread+0xfa>
 8008bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d94b      	bls.n	8008c6e <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 8008bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd8:	3b02      	subs	r3, #2
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d82a      	bhi.n	8008c34 <ethernet_link_thread+0xc0>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <ethernet_link_thread+0x70>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008bf5 	.word	0x08008bf5
 8008be8:	08008c07 	.word	0x08008c07
 8008bec:	08008c17 	.word	0x08008c17
 8008bf0:	08008c27 	.word	0x08008c27
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bf8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bfe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c00:	2301      	movs	r3, #1
 8008c02:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008c04:	e017      	b.n	8008c36 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008c06:	2300      	movs	r3, #0
 8008c08:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008c0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c0e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c10:	2301      	movs	r3, #1
 8008c12:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008c14:	e00f      	b.n	8008c36 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c1a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c20:	2301      	movs	r3, #1
 8008c22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008c24:	e007      	b.n	8008c36 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008c32:	e000      	b.n	8008c36 <ethernet_link_thread+0xc2>
    default:
      break;
 8008c34:	bf00      	nop
    }

    if(linkchanged)
 8008c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d018      	beq.n	8008c6e <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008c3c:	f107 0308 	add.w	r3, r7, #8
 8008c40:	4619      	mov	r1, r3
 8008c42:	480e      	ldr	r0, [pc, #56]	; (8008c7c <ethernet_link_thread+0x108>)
 8008c44:	f7f9 fe24 	bl	8002890 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c4a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c4e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008c50:	f107 0308 	add.w	r3, r7, #8
 8008c54:	4619      	mov	r1, r3
 8008c56:	4809      	ldr	r0, [pc, #36]	; (8008c7c <ethernet_link_thread+0x108>)
 8008c58:	f7f9 ffee 	bl	8002c38 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8008c5c:	4807      	ldr	r0, [pc, #28]	; (8008c7c <ethernet_link_thread+0x108>)
 8008c5e:	f7f9 f876 	bl	8001d4e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008c62:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008c64:	f007 f962 	bl	800ff2c <netif_set_up>
      netif_set_link_up(netif);
 8008c68:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008c6a:	f007 f9fd 	bl	8010068 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008c6e:	2064      	movs	r0, #100	; 0x64
 8008c70:	f000 f946 	bl	8008f00 <osDelay>
  {
 8008c74:	e788      	b.n	8008b88 <ethernet_link_thread+0x14>
 8008c76:	bf00      	nop
 8008c78:	24005198 	.word	0x24005198
 8008c7c:	240051b8 	.word	0x240051b8

08008c80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c96:	f3ef 8305 	mrs	r3, IPSR
 8008c9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10f      	bne.n	8008cc2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca6:	607b      	str	r3, [r7, #4]
  return(result);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d105      	bne.n	8008cba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cae:	f3ef 8311 	mrs	r3, BASEPRI
 8008cb2:	603b      	str	r3, [r7, #0]
  return(result);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d007      	beq.n	8008cca <osKernelInitialize+0x3a>
 8008cba:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <osKernelInitialize+0x64>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d103      	bne.n	8008cca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008cc2:	f06f 0305 	mvn.w	r3, #5
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e00c      	b.n	8008ce4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <osKernelInitialize+0x64>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d105      	bne.n	8008cde <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cd2:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <osKernelInitialize+0x64>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	e002      	b.n	8008ce4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ce2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	240000d0 	.word	0x240000d0

08008cf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cfe:	f3ef 8305 	mrs	r3, IPSR
 8008d02:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10f      	bne.n	8008d2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d0e:	607b      	str	r3, [r7, #4]
  return(result);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d105      	bne.n	8008d22 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d16:	f3ef 8311 	mrs	r3, BASEPRI
 8008d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d007      	beq.n	8008d32 <osKernelStart+0x3a>
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <osKernelStart+0x68>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d103      	bne.n	8008d32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008d2a:	f06f 0305 	mvn.w	r3, #5
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e010      	b.n	8008d54 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d32:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <osKernelStart+0x68>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d109      	bne.n	8008d4e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d3a:	f7ff ffa1 	bl	8008c80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <osKernelStart+0x68>)
 8008d40:	2202      	movs	r2, #2
 8008d42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d44:	f002 fc90 	bl	800b668 <vTaskStartScheduler>
      stat = osOK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	e002      	b.n	8008d54 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d54:	68fb      	ldr	r3, [r7, #12]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	240000d0 	.word	0x240000d0

08008d64 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d6a:	f3ef 8305 	mrs	r3, IPSR
 8008d6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d70:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10f      	bne.n	8008d96 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d76:	f3ef 8310 	mrs	r3, PRIMASK
 8008d7a:	607b      	str	r3, [r7, #4]
  return(result);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d82:	f3ef 8311 	mrs	r3, BASEPRI
 8008d86:	603b      	str	r3, [r7, #0]
  return(result);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d007      	beq.n	8008d9e <osKernelGetTickCount+0x3a>
 8008d8e:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <osKernelGetTickCount+0x4c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d103      	bne.n	8008d9e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008d96:	f002 fd85 	bl	800b8a4 <xTaskGetTickCountFromISR>
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	e002      	b.n	8008da4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008d9e:	f002 fd71 	bl	800b884 <xTaskGetTickCount>
 8008da2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	240000d0 	.word	0x240000d0

08008db4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b090      	sub	sp, #64	; 0x40
 8008db8:	af04      	add	r7, sp, #16
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc4:	f3ef 8305 	mrs	r3, IPSR
 8008dc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8008dca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f040 808f 	bne.w	8008ef0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d105      	bne.n	8008dea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dde:	f3ef 8311 	mrs	r3, BASEPRI
 8008de2:	617b      	str	r3, [r7, #20]
  return(result);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <osThreadNew+0x3e>
 8008dea:	4b44      	ldr	r3, [pc, #272]	; (8008efc <osThreadNew+0x148>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d07e      	beq.n	8008ef0 <osThreadNew+0x13c>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d07b      	beq.n	8008ef0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008df8:	2380      	movs	r3, #128	; 0x80
 8008dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008dfc:	2318      	movs	r3, #24
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e08:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d045      	beq.n	8008e9c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <osThreadNew+0x6a>
        name = attr->name;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d008      	beq.n	8008e44 <osThreadNew+0x90>
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	2b38      	cmp	r3, #56	; 0x38
 8008e36:	d805      	bhi.n	8008e44 <osThreadNew+0x90>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <osThreadNew+0x94>
        return (NULL);
 8008e44:	2300      	movs	r3, #0
 8008e46:	e054      	b.n	8008ef2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	089b      	lsrs	r3, r3, #2
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00e      	beq.n	8008e7e <osThreadNew+0xca>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	2b5b      	cmp	r3, #91	; 0x5b
 8008e66:	d90a      	bls.n	8008e7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <osThreadNew+0xca>
        mem = 1;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	623b      	str	r3, [r7, #32]
 8008e7c:	e010      	b.n	8008ea0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10c      	bne.n	8008ea0 <osThreadNew+0xec>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d108      	bne.n	8008ea0 <osThreadNew+0xec>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d104      	bne.n	8008ea0 <osThreadNew+0xec>
          mem = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	e001      	b.n	8008ea0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d110      	bne.n	8008ec8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008eae:	9202      	str	r2, [sp, #8]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f002 fa01 	bl	800b2c4 <xTaskCreateStatic>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	e013      	b.n	8008ef0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d110      	bne.n	8008ef0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	f107 0310 	add.w	r3, r7, #16
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f002 fa49 	bl	800b378 <xTaskCreate>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d001      	beq.n	8008ef0 <osThreadNew+0x13c>
          hTask = NULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ef0:	693b      	ldr	r3, [r7, #16]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3730      	adds	r7, #48	; 0x30
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	240000d0 	.word	0x240000d0

08008f00 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f08:	f3ef 8305 	mrs	r3, IPSR
 8008f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f0e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10f      	bne.n	8008f34 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f14:	f3ef 8310 	mrs	r3, PRIMASK
 8008f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d105      	bne.n	8008f2c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f20:	f3ef 8311 	mrs	r3, BASEPRI
 8008f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <osDelay+0x3c>
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <osDelay+0x58>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d103      	bne.n	8008f3c <osDelay+0x3c>
    stat = osErrorISR;
 8008f34:	f06f 0305 	mvn.w	r3, #5
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	e007      	b.n	8008f4c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f002 fb5a 	bl	800b600 <vTaskDelay>
    }
  }

  return (stat);
 8008f4c:	697b      	ldr	r3, [r7, #20]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	240000d0 	.word	0x240000d0

08008f5c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	; 0x28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f68:	f3ef 8305 	mrs	r3, IPSR
 8008f6c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f040 8085 	bne.w	8009080 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f76:	f3ef 8310 	mrs	r3, PRIMASK
 8008f7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f82:	f3ef 8311 	mrs	r3, BASEPRI
 8008f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <osMutexNew+0x3a>
 8008f8e:	4b3f      	ldr	r3, [pc, #252]	; (800908c <osMutexNew+0x130>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d074      	beq.n	8009080 <osMutexNew+0x124>
    if (attr != NULL) {
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	623b      	str	r3, [r7, #32]
 8008fa2:	e001      	b.n	8008fa8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <osMutexNew+0x5c>
      rmtx = 1U;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	61fb      	str	r3, [r7, #28]
 8008fb6:	e001      	b.n	8008fbc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d15c      	bne.n	8009080 <osMutexNew+0x124>
      mem = -1;
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fca:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d015      	beq.n	8008ffe <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d006      	beq.n	8008fe8 <osMutexNew+0x8c>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	2b4f      	cmp	r3, #79	; 0x4f
 8008fe0:	d902      	bls.n	8008fe8 <osMutexNew+0x8c>
          mem = 1;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	e00c      	b.n	8009002 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d108      	bne.n	8009002 <osMutexNew+0xa6>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d104      	bne.n	8009002 <osMutexNew+0xa6>
            mem = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]
 8008ffc:	e001      	b.n	8009002 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d112      	bne.n	800902e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	4619      	mov	r1, r3
 8009014:	2004      	movs	r0, #4
 8009016:	f001 fa22 	bl	800a45e <xQueueCreateMutexStatic>
 800901a:	6278      	str	r0, [r7, #36]	; 0x24
 800901c:	e016      	b.n	800904c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	4619      	mov	r1, r3
 8009024:	2001      	movs	r0, #1
 8009026:	f001 fa1a 	bl	800a45e <xQueueCreateMutexStatic>
 800902a:	6278      	str	r0, [r7, #36]	; 0x24
 800902c:	e00e      	b.n	800904c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10b      	bne.n	800904c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800903a:	2004      	movs	r0, #4
 800903c:	f001 f9f7 	bl	800a42e <xQueueCreateMutex>
 8009040:	6278      	str	r0, [r7, #36]	; 0x24
 8009042:	e003      	b.n	800904c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009044:	2001      	movs	r0, #1
 8009046:	f001 f9f2 	bl	800a42e <xQueueCreateMutex>
 800904a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00c      	beq.n	800906c <osMutexNew+0x110>
        if (attr != NULL) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <osMutexNew+0x104>
          name = attr->name;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	e001      	b.n	8009064 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009064:	6979      	ldr	r1, [r7, #20]
 8009066:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009068:	f002 f8a6 	bl	800b1b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	d006      	beq.n	8009080 <osMutexNew+0x124>
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	f043 0301 	orr.w	r3, r3, #1
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009082:	4618      	mov	r0, r3
 8009084:	3728      	adds	r7, #40	; 0x28
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	240000d0 	.word	0x240000d0

08009090 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f023 0301 	bic.w	r3, r3, #1
 80090a0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ae:	f3ef 8305 	mrs	r3, IPSR
 80090b2:	613b      	str	r3, [r7, #16]
  return(result);
 80090b4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10f      	bne.n	80090da <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ba:	f3ef 8310 	mrs	r3, PRIMASK
 80090be:	60fb      	str	r3, [r7, #12]
  return(result);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090c6:	f3ef 8311 	mrs	r3, BASEPRI
 80090ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <osMutexAcquire+0x52>
 80090d2:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <osMutexAcquire+0xb8>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d103      	bne.n	80090e2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80090da:	f06f 0305 	mvn.w	r3, #5
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	e02c      	b.n	800913c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80090e8:	f06f 0303 	mvn.w	r3, #3
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	e025      	b.n	800913c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d011      	beq.n	800911a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	69b8      	ldr	r0, [r7, #24]
 80090fa:	f001 f9fe 	bl	800a4fa <xQueueTakeMutexRecursive>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b01      	cmp	r3, #1
 8009102:	d01b      	beq.n	800913c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800910a:	f06f 0301 	mvn.w	r3, #1
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e014      	b.n	800913c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009112:	f06f 0302 	mvn.w	r3, #2
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e010      	b.n	800913c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	69b8      	ldr	r0, [r7, #24]
 800911e:	f001 fd7b 	bl	800ac18 <xQueueSemaphoreTake>
 8009122:	4603      	mov	r3, r0
 8009124:	2b01      	cmp	r3, #1
 8009126:	d009      	beq.n	800913c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800912e:	f06f 0301 	mvn.w	r3, #1
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	e002      	b.n	800913c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009136:	f06f 0302 	mvn.w	r3, #2
 800913a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800913c:	69fb      	ldr	r3, [r7, #28]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	240000d0 	.word	0x240000d0

0800914c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f023 0301 	bic.w	r3, r3, #1
 800915a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009164:	2300      	movs	r3, #0
 8009166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009168:	f3ef 8305 	mrs	r3, IPSR
 800916c:	613b      	str	r3, [r7, #16]
  return(result);
 800916e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10f      	bne.n	8009194 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009174:	f3ef 8310 	mrs	r3, PRIMASK
 8009178:	60fb      	str	r3, [r7, #12]
  return(result);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d105      	bne.n	800918c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009180:	f3ef 8311 	mrs	r3, BASEPRI
 8009184:	60bb      	str	r3, [r7, #8]
  return(result);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d007      	beq.n	800919c <osMutexRelease+0x50>
 800918c:	4b16      	ldr	r3, [pc, #88]	; (80091e8 <osMutexRelease+0x9c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d103      	bne.n	800919c <osMutexRelease+0x50>
    stat = osErrorISR;
 8009194:	f06f 0305 	mvn.w	r3, #5
 8009198:	61fb      	str	r3, [r7, #28]
 800919a:	e01f      	b.n	80091dc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d103      	bne.n	80091aa <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80091a2:	f06f 0303 	mvn.w	r3, #3
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e018      	b.n	80091dc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80091b0:	69b8      	ldr	r0, [r7, #24]
 80091b2:	f001 f96f 	bl	800a494 <xQueueGiveMutexRecursive>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d00f      	beq.n	80091dc <osMutexRelease+0x90>
        stat = osErrorResource;
 80091bc:	f06f 0302 	mvn.w	r3, #2
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	e00b      	b.n	80091dc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80091c4:	2300      	movs	r3, #0
 80091c6:	2200      	movs	r2, #0
 80091c8:	2100      	movs	r1, #0
 80091ca:	69b8      	ldr	r0, [r7, #24]
 80091cc:	f001 fa30 	bl	800a630 <xQueueGenericSend>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d002      	beq.n	80091dc <osMutexRelease+0x90>
        stat = osErrorResource;
 80091d6:	f06f 0302 	mvn.w	r3, #2
 80091da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80091dc:	69fb      	ldr	r3, [r7, #28]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	240000d0 	.word	0x240000d0

080091ec <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08c      	sub	sp, #48	; 0x30
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091fc:	f3ef 8305 	mrs	r3, IPSR
 8009200:	61bb      	str	r3, [r7, #24]
  return(result);
 8009202:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009204:	2b00      	cmp	r3, #0
 8009206:	f040 8087 	bne.w	8009318 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800920a:	f3ef 8310 	mrs	r3, PRIMASK
 800920e:	617b      	str	r3, [r7, #20]
  return(result);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009216:	f3ef 8311 	mrs	r3, BASEPRI
 800921a:	613b      	str	r3, [r7, #16]
  return(result);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <osSemaphoreNew+0x3e>
 8009222:	4b40      	ldr	r3, [pc, #256]	; (8009324 <osSemaphoreNew+0x138>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d076      	beq.n	8009318 <osSemaphoreNew+0x12c>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d073      	beq.n	8009318 <osSemaphoreNew+0x12c>
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	429a      	cmp	r2, r3
 8009236:	d86f      	bhi.n	8009318 <osSemaphoreNew+0x12c>
    mem = -1;
 8009238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800923c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d015      	beq.n	8009270 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d006      	beq.n	800925a <osSemaphoreNew+0x6e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	2b4f      	cmp	r3, #79	; 0x4f
 8009252:	d902      	bls.n	800925a <osSemaphoreNew+0x6e>
        mem = 1;
 8009254:	2301      	movs	r3, #1
 8009256:	623b      	str	r3, [r7, #32]
 8009258:	e00c      	b.n	8009274 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d108      	bne.n	8009274 <osSemaphoreNew+0x88>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <osSemaphoreNew+0x88>
          mem = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	623b      	str	r3, [r7, #32]
 800926e:	e001      	b.n	8009274 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800927a:	d04d      	beq.n	8009318 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d129      	bne.n	80092d6 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d10b      	bne.n	80092a0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	2303      	movs	r3, #3
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	2200      	movs	r2, #0
 8009294:	2100      	movs	r1, #0
 8009296:	2001      	movs	r0, #1
 8009298:	f000 ffda 	bl	800a250 <xQueueGenericCreateStatic>
 800929c:	6278      	str	r0, [r7, #36]	; 0x24
 800929e:	e005      	b.n	80092ac <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80092a0:	2203      	movs	r2, #3
 80092a2:	2100      	movs	r1, #0
 80092a4:	2001      	movs	r0, #1
 80092a6:	f001 f846 	bl	800a336 <xQueueGenericCreate>
 80092aa:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d022      	beq.n	80092f8 <osSemaphoreNew+0x10c>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01f      	beq.n	80092f8 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092b8:	2300      	movs	r3, #0
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c0:	f001 f9b6 	bl	800a630 <xQueueGenericSend>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d016      	beq.n	80092f8 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80092ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092cc:	f001 fe29 	bl	800af22 <vQueueDelete>
            hSemaphore = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
 80092d4:	e010      	b.n	80092f8 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d108      	bne.n	80092ee <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	461a      	mov	r2, r3
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f001 f93d 	bl	800a564 <xQueueCreateCountingSemaphoreStatic>
 80092ea:	6278      	str	r0, [r7, #36]	; 0x24
 80092ec:	e004      	b.n	80092f8 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f001 f96c 	bl	800a5ce <xQueueCreateCountingSemaphore>
 80092f6:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00c      	beq.n	8009318 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <osSemaphoreNew+0x120>
          name = attr->name;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	61fb      	str	r3, [r7, #28]
 800930a:	e001      	b.n	8009310 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009310:	69f9      	ldr	r1, [r7, #28]
 8009312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009314:	f001 ff50 	bl	800b1b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800931a:	4618      	mov	r0, r3
 800931c:	3728      	adds	r7, #40	; 0x28
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	240000d0 	.word	0x240000d0

08009328 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d103      	bne.n	8009348 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009340:	f06f 0303 	mvn.w	r3, #3
 8009344:	61fb      	str	r3, [r7, #28]
 8009346:	e04b      	b.n	80093e0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009348:	f3ef 8305 	mrs	r3, IPSR
 800934c:	617b      	str	r3, [r7, #20]
  return(result);
 800934e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10f      	bne.n	8009374 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009354:	f3ef 8310 	mrs	r3, PRIMASK
 8009358:	613b      	str	r3, [r7, #16]
  return(result);
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d105      	bne.n	800936c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009360:	f3ef 8311 	mrs	r3, BASEPRI
 8009364:	60fb      	str	r3, [r7, #12]
  return(result);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d026      	beq.n	80093ba <osSemaphoreAcquire+0x92>
 800936c:	4b1f      	ldr	r3, [pc, #124]	; (80093ec <osSemaphoreAcquire+0xc4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b02      	cmp	r3, #2
 8009372:	d122      	bne.n	80093ba <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800937a:	f06f 0303 	mvn.w	r3, #3
 800937e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009380:	e02d      	b.n	80093de <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009386:	f107 0308 	add.w	r3, r7, #8
 800938a:	461a      	mov	r2, r3
 800938c:	2100      	movs	r1, #0
 800938e:	69b8      	ldr	r0, [r7, #24]
 8009390:	f001 fd4a 	bl	800ae28 <xQueueReceiveFromISR>
 8009394:	4603      	mov	r3, r0
 8009396:	2b01      	cmp	r3, #1
 8009398:	d003      	beq.n	80093a2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800939a:	f06f 0302 	mvn.w	r3, #2
 800939e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80093a0:	e01d      	b.n	80093de <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01a      	beq.n	80093de <osSemaphoreAcquire+0xb6>
 80093a8:	4b11      	ldr	r3, [pc, #68]	; (80093f0 <osSemaphoreAcquire+0xc8>)
 80093aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80093b8:	e011      	b.n	80093de <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	69b8      	ldr	r0, [r7, #24]
 80093be:	f001 fc2b 	bl	800ac18 <xQueueSemaphoreTake>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d00b      	beq.n	80093e0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80093ce:	f06f 0301 	mvn.w	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]
 80093d4:	e004      	b.n	80093e0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80093d6:	f06f 0302 	mvn.w	r3, #2
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	e000      	b.n	80093e0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80093de:	bf00      	nop
      }
    }
  }

  return (stat);
 80093e0:	69fb      	ldr	r3, [r7, #28]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3720      	adds	r7, #32
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	240000d0 	.word	0x240000d0
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009400:	2300      	movs	r3, #0
 8009402:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d103      	bne.n	8009412 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800940a:	f06f 0303 	mvn.w	r3, #3
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	e03e      	b.n	8009490 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009412:	f3ef 8305 	mrs	r3, IPSR
 8009416:	617b      	str	r3, [r7, #20]
  return(result);
 8009418:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10f      	bne.n	800943e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800941e:	f3ef 8310 	mrs	r3, PRIMASK
 8009422:	613b      	str	r3, [r7, #16]
  return(result);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800942a:	f3ef 8311 	mrs	r3, BASEPRI
 800942e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d01e      	beq.n	8009474 <osSemaphoreRelease+0x80>
 8009436:	4b19      	ldr	r3, [pc, #100]	; (800949c <osSemaphoreRelease+0xa8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d11a      	bne.n	8009474 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009442:	f107 0308 	add.w	r3, r7, #8
 8009446:	4619      	mov	r1, r3
 8009448:	69b8      	ldr	r0, [r7, #24]
 800944a:	f001 fa7f 	bl	800a94c <xQueueGiveFromISR>
 800944e:	4603      	mov	r3, r0
 8009450:	2b01      	cmp	r3, #1
 8009452:	d003      	beq.n	800945c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009454:	f06f 0302 	mvn.w	r3, #2
 8009458:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800945a:	e018      	b.n	800948e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d015      	beq.n	800948e <osSemaphoreRelease+0x9a>
 8009462:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <osSemaphoreRelease+0xac>)
 8009464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009472:	e00c      	b.n	800948e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009474:	2300      	movs	r3, #0
 8009476:	2200      	movs	r2, #0
 8009478:	2100      	movs	r1, #0
 800947a:	69b8      	ldr	r0, [r7, #24]
 800947c:	f001 f8d8 	bl	800a630 <xQueueGenericSend>
 8009480:	4603      	mov	r3, r0
 8009482:	2b01      	cmp	r3, #1
 8009484:	d004      	beq.n	8009490 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009486:	f06f 0302 	mvn.w	r3, #2
 800948a:	61fb      	str	r3, [r7, #28]
 800948c:	e000      	b.n	8009490 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800948e:	bf00      	nop
    }
  }

  return (stat);
 8009490:	69fb      	ldr	r3, [r7, #28]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3720      	adds	r7, #32
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	240000d0 	.word	0x240000d0
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b08c      	sub	sp, #48	; 0x30
 80094a8:	af02      	add	r7, sp, #8
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80094b0:	2300      	movs	r3, #0
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b4:	f3ef 8305 	mrs	r3, IPSR
 80094b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80094ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d170      	bne.n	80095a2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094c0:	f3ef 8310 	mrs	r3, PRIMASK
 80094c4:	617b      	str	r3, [r7, #20]
  return(result);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d105      	bne.n	80094d8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094cc:	f3ef 8311 	mrs	r3, BASEPRI
 80094d0:	613b      	str	r3, [r7, #16]
  return(result);
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <osMessageQueueNew+0x3c>
 80094d8:	4b34      	ldr	r3, [pc, #208]	; (80095ac <osMessageQueueNew+0x108>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d060      	beq.n	80095a2 <osMessageQueueNew+0xfe>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d05d      	beq.n	80095a2 <osMessageQueueNew+0xfe>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d05a      	beq.n	80095a2 <osMessageQueueNew+0xfe>
    mem = -1;
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d029      	beq.n	800954c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d012      	beq.n	8009526 <osMessageQueueNew+0x82>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	2b4f      	cmp	r3, #79	; 0x4f
 8009506:	d90e      	bls.n	8009526 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00a      	beq.n	8009526 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	695a      	ldr	r2, [r3, #20]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	fb01 f303 	mul.w	r3, r1, r3
 800951c:	429a      	cmp	r2, r3
 800951e:	d302      	bcc.n	8009526 <osMessageQueueNew+0x82>
        mem = 1;
 8009520:	2301      	movs	r3, #1
 8009522:	623b      	str	r3, [r7, #32]
 8009524:	e014      	b.n	8009550 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d110      	bne.n	8009550 <osMessageQueueNew+0xac>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10c      	bne.n	8009550 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800953a:	2b00      	cmp	r3, #0
 800953c:	d108      	bne.n	8009550 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d104      	bne.n	8009550 <osMessageQueueNew+0xac>
          mem = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	623b      	str	r3, [r7, #32]
 800954a:	e001      	b.n	8009550 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d10c      	bne.n	8009570 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6899      	ldr	r1, [r3, #8]
 800955e:	2300      	movs	r3, #0
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	460b      	mov	r3, r1
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fe72 	bl	800a250 <xQueueGenericCreateStatic>
 800956c:	6278      	str	r0, [r7, #36]	; 0x24
 800956e:	e008      	b.n	8009582 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d105      	bne.n	8009582 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009576:	2200      	movs	r2, #0
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 fedb 	bl	800a336 <xQueueGenericCreate>
 8009580:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00c      	beq.n	80095a2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <osMessageQueueNew+0xf2>
        name = attr->name;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	61fb      	str	r3, [r7, #28]
 8009594:	e001      	b.n	800959a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800959a:	69f9      	ldr	r1, [r7, #28]
 800959c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800959e:	f001 fe0b 	bl	800b1b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3728      	adds	r7, #40	; 0x28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	240000d0 	.word	0x240000d0

080095b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	4613      	mov	r3, r2
 80095be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095c8:	f3ef 8305 	mrs	r3, IPSR
 80095cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80095ce:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10f      	bne.n	80095f4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095d4:	f3ef 8310 	mrs	r3, PRIMASK
 80095d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d105      	bne.n	80095ec <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095e0:	f3ef 8311 	mrs	r3, BASEPRI
 80095e4:	617b      	str	r3, [r7, #20]
  return(result);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d02c      	beq.n	8009646 <osMessageQueuePut+0x96>
 80095ec:	4b28      	ldr	r3, [pc, #160]	; (8009690 <osMessageQueuePut+0xe0>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d128      	bne.n	8009646 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d005      	beq.n	8009606 <osMessageQueuePut+0x56>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <osMessageQueuePut+0x56>
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009606:	f06f 0303 	mvn.w	r3, #3
 800960a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800960c:	e039      	b.n	8009682 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009612:	f107 0210 	add.w	r2, r7, #16
 8009616:	2300      	movs	r3, #0
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	6a38      	ldr	r0, [r7, #32]
 800961c:	f001 f902 	bl	800a824 <xQueueGenericSendFromISR>
 8009620:	4603      	mov	r3, r0
 8009622:	2b01      	cmp	r3, #1
 8009624:	d003      	beq.n	800962e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009626:	f06f 0302 	mvn.w	r3, #2
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800962c:	e029      	b.n	8009682 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d026      	beq.n	8009682 <osMessageQueuePut+0xd2>
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <osMessageQueuePut+0xe4>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009644:	e01d      	b.n	8009682 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <osMessageQueuePut+0xa2>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009652:	f06f 0303 	mvn.w	r3, #3
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
 8009658:	e014      	b.n	8009684 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800965a:	2300      	movs	r3, #0
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	68b9      	ldr	r1, [r7, #8]
 8009660:	6a38      	ldr	r0, [r7, #32]
 8009662:	f000 ffe5 	bl	800a630 <xQueueGenericSend>
 8009666:	4603      	mov	r3, r0
 8009668:	2b01      	cmp	r3, #1
 800966a:	d00b      	beq.n	8009684 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009672:	f06f 0301 	mvn.w	r3, #1
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
 8009678:	e004      	b.n	8009684 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800967a:	f06f 0302 	mvn.w	r3, #2
 800967e:	627b      	str	r3, [r7, #36]	; 0x24
 8009680:	e000      	b.n	8009684 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009682:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009686:	4618      	mov	r0, r3
 8009688:	3728      	adds	r7, #40	; 0x28
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	240000d0 	.word	0x240000d0
 8009694:	e000ed04 	.word	0xe000ed04

08009698 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	; 0x28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ae:	f3ef 8305 	mrs	r3, IPSR
 80096b2:	61fb      	str	r3, [r7, #28]
  return(result);
 80096b4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10f      	bne.n	80096da <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096ba:	f3ef 8310 	mrs	r3, PRIMASK
 80096be:	61bb      	str	r3, [r7, #24]
  return(result);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d105      	bne.n	80096d2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096c6:	f3ef 8311 	mrs	r3, BASEPRI
 80096ca:	617b      	str	r3, [r7, #20]
  return(result);
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d02c      	beq.n	800972c <osMessageQueueGet+0x94>
 80096d2:	4b28      	ldr	r3, [pc, #160]	; (8009774 <osMessageQueueGet+0xdc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d128      	bne.n	800972c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <osMessageQueueGet+0x54>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <osMessageQueueGet+0x54>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80096ec:	f06f 0303 	mvn.w	r3, #3
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096f2:	e038      	b.n	8009766 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80096f4:	2300      	movs	r3, #0
 80096f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80096f8:	f107 0310 	add.w	r3, r7, #16
 80096fc:	461a      	mov	r2, r3
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	6a38      	ldr	r0, [r7, #32]
 8009702:	f001 fb91 	bl	800ae28 <xQueueReceiveFromISR>
 8009706:	4603      	mov	r3, r0
 8009708:	2b01      	cmp	r3, #1
 800970a:	d003      	beq.n	8009714 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800970c:	f06f 0302 	mvn.w	r3, #2
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009712:	e028      	b.n	8009766 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d025      	beq.n	8009766 <osMessageQueueGet+0xce>
 800971a:	4b17      	ldr	r3, [pc, #92]	; (8009778 <osMessageQueueGet+0xe0>)
 800971c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800972a:	e01c      	b.n	8009766 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <osMessageQueueGet+0xa0>
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d103      	bne.n	8009740 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009738:	f06f 0303 	mvn.w	r3, #3
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
 800973e:	e013      	b.n	8009768 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	68b9      	ldr	r1, [r7, #8]
 8009744:	6a38      	ldr	r0, [r7, #32]
 8009746:	f001 f98b 	bl	800aa60 <xQueueReceive>
 800974a:	4603      	mov	r3, r0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d00b      	beq.n	8009768 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009756:	f06f 0301 	mvn.w	r3, #1
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
 800975c:	e004      	b.n	8009768 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800975e:	f06f 0302 	mvn.w	r3, #2
 8009762:	627b      	str	r3, [r7, #36]	; 0x24
 8009764:	e000      	b.n	8009768 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009766:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800976a:	4618      	mov	r0, r3
 800976c:	3728      	adds	r7, #40	; 0x28
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	240000d0 	.word	0x240000d0
 8009778:	e000ed04 	.word	0xe000ed04

0800977c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4a07      	ldr	r2, [pc, #28]	; (80097a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800978c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4a06      	ldr	r2, [pc, #24]	; (80097ac <vApplicationGetIdleTaskMemory+0x30>)
 8009792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2280      	movs	r2, #128	; 0x80
 8009798:	601a      	str	r2, [r3, #0]
}
 800979a:	bf00      	nop
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	240000d4 	.word	0x240000d4
 80097ac:	24000130 	.word	0x24000130

080097b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4a07      	ldr	r2, [pc, #28]	; (80097dc <vApplicationGetTimerTaskMemory+0x2c>)
 80097c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	4a06      	ldr	r2, [pc, #24]	; (80097e0 <vApplicationGetTimerTaskMemory+0x30>)
 80097c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097ce:	601a      	str	r2, [r3, #0]
}
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	24000330 	.word	0x24000330
 80097e0:	2400038c 	.word	0x2400038c

080097e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	; 0x28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097f0:	f001 ff9e 	bl	800b730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097f4:	4b57      	ldr	r3, [pc, #348]	; (8009954 <pvPortMalloc+0x170>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097fc:	f000 f90c 	bl	8009a18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009800:	4b55      	ldr	r3, [pc, #340]	; (8009958 <pvPortMalloc+0x174>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4013      	ands	r3, r2
 8009808:	2b00      	cmp	r3, #0
 800980a:	f040 808c 	bne.w	8009926 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01c      	beq.n	800984e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009814:	2208      	movs	r2, #8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4413      	add	r3, r2
 800981a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f003 0307 	and.w	r3, r3, #7
 8009822:	2b00      	cmp	r3, #0
 8009824:	d013      	beq.n	800984e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f023 0307 	bic.w	r3, r3, #7
 800982c:	3308      	adds	r3, #8
 800982e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e7fe      	b.n	800984c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d068      	beq.n	8009926 <pvPortMalloc+0x142>
 8009854:	4b41      	ldr	r3, [pc, #260]	; (800995c <pvPortMalloc+0x178>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	429a      	cmp	r2, r3
 800985c:	d863      	bhi.n	8009926 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800985e:	4b40      	ldr	r3, [pc, #256]	; (8009960 <pvPortMalloc+0x17c>)
 8009860:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009862:	4b3f      	ldr	r3, [pc, #252]	; (8009960 <pvPortMalloc+0x17c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009868:	e004      	b.n	8009874 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d903      	bls.n	8009886 <pvPortMalloc+0xa2>
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f1      	bne.n	800986a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009886:	4b33      	ldr	r3, [pc, #204]	; (8009954 <pvPortMalloc+0x170>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988c:	429a      	cmp	r2, r3
 800988e:	d04a      	beq.n	8009926 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2208      	movs	r2, #8
 8009896:	4413      	add	r3, r2
 8009898:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	1ad2      	subs	r2, r2, r3
 80098aa:	2308      	movs	r3, #8
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d91e      	bls.n	80098f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4413      	add	r3, r2
 80098b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f003 0307 	and.w	r3, r3, #7
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <pvPortMalloc+0xf4>
 80098c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	e7fe      	b.n	80098d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098ea:	69b8      	ldr	r0, [r7, #24]
 80098ec:	f000 f8f6 	bl	8009adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098f0:	4b1a      	ldr	r3, [pc, #104]	; (800995c <pvPortMalloc+0x178>)
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	4a18      	ldr	r2, [pc, #96]	; (800995c <pvPortMalloc+0x178>)
 80098fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098fe:	4b17      	ldr	r3, [pc, #92]	; (800995c <pvPortMalloc+0x178>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b18      	ldr	r3, [pc, #96]	; (8009964 <pvPortMalloc+0x180>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d203      	bcs.n	8009912 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <pvPortMalloc+0x178>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a15      	ldr	r2, [pc, #84]	; (8009964 <pvPortMalloc+0x180>)
 8009910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b10      	ldr	r3, [pc, #64]	; (8009958 <pvPortMalloc+0x174>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	431a      	orrs	r2, r3
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009926:	f001 ff11 	bl	800b74c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	2b00      	cmp	r3, #0
 8009932:	d009      	beq.n	8009948 <pvPortMalloc+0x164>
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e7fe      	b.n	8009946 <pvPortMalloc+0x162>
	return pvReturn;
 8009948:	69fb      	ldr	r3, [r7, #28]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3728      	adds	r7, #40	; 0x28
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	24004394 	.word	0x24004394
 8009958:	240043a0 	.word	0x240043a0
 800995c:	24004398 	.word	0x24004398
 8009960:	2400438c 	.word	0x2400438c
 8009964:	2400439c 	.word	0x2400439c

08009968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d046      	beq.n	8009a08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800997a:	2308      	movs	r3, #8
 800997c:	425b      	negs	r3, r3
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4413      	add	r3, r2
 8009982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	4b20      	ldr	r3, [pc, #128]	; (8009a10 <vPortFree+0xa8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4013      	ands	r3, r2
 8009992:	2b00      	cmp	r3, #0
 8009994:	d109      	bne.n	80099aa <vPortFree+0x42>
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	e7fe      	b.n	80099a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <vPortFree+0x5e>
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	60bb      	str	r3, [r7, #8]
 80099c4:	e7fe      	b.n	80099c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	4b11      	ldr	r3, [pc, #68]	; (8009a10 <vPortFree+0xa8>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4013      	ands	r3, r2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d019      	beq.n	8009a08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d115      	bne.n	8009a08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <vPortFree+0xa8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	43db      	mvns	r3, r3
 80099e6:	401a      	ands	r2, r3
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099ec:	f001 fea0 	bl	800b730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <vPortFree+0xac>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4413      	add	r3, r2
 80099fa:	4a06      	ldr	r2, [pc, #24]	; (8009a14 <vPortFree+0xac>)
 80099fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099fe:	6938      	ldr	r0, [r7, #16]
 8009a00:	f000 f86c 	bl	8009adc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a04:	f001 fea2 	bl	800b74c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a08:	bf00      	nop
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	240043a0 	.word	0x240043a0
 8009a14:	24004398 	.word	0x24004398

08009a18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a24:	4b27      	ldr	r3, [pc, #156]	; (8009ac4 <prvHeapInit+0xac>)
 8009a26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00c      	beq.n	8009a4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3307      	adds	r3, #7
 8009a36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 0307 	bic.w	r3, r3, #7
 8009a3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	4a1f      	ldr	r2, [pc, #124]	; (8009ac4 <prvHeapInit+0xac>)
 8009a48:	4413      	add	r3, r2
 8009a4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a50:	4a1d      	ldr	r2, [pc, #116]	; (8009ac8 <prvHeapInit+0xb0>)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a56:	4b1c      	ldr	r3, [pc, #112]	; (8009ac8 <prvHeapInit+0xb0>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4413      	add	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a64:	2208      	movs	r2, #8
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1a9b      	subs	r3, r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0307 	bic.w	r3, r3, #7
 8009a72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4a15      	ldr	r2, [pc, #84]	; (8009acc <prvHeapInit+0xb4>)
 8009a78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <prvHeapInit+0xb4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a82:	4b12      	ldr	r3, [pc, #72]	; (8009acc <prvHeapInit+0xb4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	1ad2      	subs	r2, r2, r3
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a98:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <prvHeapInit+0xb4>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <prvHeapInit+0xb8>)
 8009aa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	4a09      	ldr	r2, [pc, #36]	; (8009ad4 <prvHeapInit+0xbc>)
 8009aae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ab0:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <prvHeapInit+0xc0>)
 8009ab2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ab6:	601a      	str	r2, [r3, #0]
}
 8009ab8:	bf00      	nop
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	2400078c 	.word	0x2400078c
 8009ac8:	2400438c 	.word	0x2400438c
 8009acc:	24004394 	.word	0x24004394
 8009ad0:	2400439c 	.word	0x2400439c
 8009ad4:	24004398 	.word	0x24004398
 8009ad8:	240043a0 	.word	0x240043a0

08009adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ae4:	4b28      	ldr	r3, [pc, #160]	; (8009b88 <prvInsertBlockIntoFreeList+0xac>)
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	e002      	b.n	8009af0 <prvInsertBlockIntoFreeList+0x14>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d8f7      	bhi.n	8009aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4413      	add	r3, r2
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d108      	bne.n	8009b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	441a      	add	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	441a      	add	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d118      	bne.n	8009b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	4b15      	ldr	r3, [pc, #84]	; (8009b8c <prvInsertBlockIntoFreeList+0xb0>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d00d      	beq.n	8009b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	441a      	add	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	e008      	b.n	8009b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <prvInsertBlockIntoFreeList+0xb0>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e003      	b.n	8009b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d002      	beq.n	8009b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b7a:	bf00      	nop
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	2400438c 	.word	0x2400438c
 8009b8c:	24004394 	.word	0x24004394

08009b90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f103 0208 	add.w	r2, r3, #8
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ba8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f103 0208 	add.w	r2, r3, #8
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f103 0208 	add.w	r2, r3, #8
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	601a      	str	r2, [r3, #0]
}
 8009c26:	bf00      	nop
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c48:	d103      	bne.n	8009c52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e00c      	b.n	8009c6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3308      	adds	r3, #8
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	e002      	b.n	8009c60 <vListInsert+0x2e>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d2f6      	bcs.n	8009c5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	601a      	str	r2, [r3, #0]
}
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	6892      	ldr	r2, [r2, #8]
 8009cba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6852      	ldr	r2, [r2, #4]
 8009cc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d103      	bne.n	8009cd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	1e5a      	subs	r2, r3, #1
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3b04      	subs	r3, #4
 8009d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3b04      	subs	r3, #4
 8009d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f023 0201 	bic.w	r2, r3, #1
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3b04      	subs	r3, #4
 8009d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d28:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <pxPortInitialiseStack+0x64>)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3b14      	subs	r3, #20
 8009d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3b04      	subs	r3, #4
 8009d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f06f 0202 	mvn.w	r2, #2
 8009d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3b20      	subs	r3, #32
 8009d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	08009d61 	.word	0x08009d61

08009d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d6a:	4b11      	ldr	r3, [pc, #68]	; (8009db0 <prvTaskExitError+0x50>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d72:	d009      	beq.n	8009d88 <prvTaskExitError+0x28>
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	e7fe      	b.n	8009d86 <prvTaskExitError+0x26>
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d9a:	bf00      	nop
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0fc      	beq.n	8009d9c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009da2:	bf00      	nop
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	24000024 	.word	0x24000024
	...

08009dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009dc0:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <pxCurrentTCBConst2>)
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	6808      	ldr	r0, [r1, #0]
 8009dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dca:	f380 8809 	msr	PSP, r0
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f04f 0000 	mov.w	r0, #0
 8009dd6:	f380 8811 	msr	BASEPRI, r0
 8009dda:	4770      	bx	lr
 8009ddc:	f3af 8000 	nop.w

08009de0 <pxCurrentTCBConst2>:
 8009de0:	240043ac 	.word	0x240043ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop

08009de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009de8:	4808      	ldr	r0, [pc, #32]	; (8009e0c <prvPortStartFirstTask+0x24>)
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	6800      	ldr	r0, [r0, #0]
 8009dee:	f380 8808 	msr	MSP, r0
 8009df2:	f04f 0000 	mov.w	r0, #0
 8009df6:	f380 8814 	msr	CONTROL, r0
 8009dfa:	b662      	cpsie	i
 8009dfc:	b661      	cpsie	f
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	df00      	svc	0
 8009e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e0a:	bf00      	nop
 8009e0c:	e000ed08 	.word	0xe000ed08

08009e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e16:	4b44      	ldr	r3, [pc, #272]	; (8009f28 <xPortStartScheduler+0x118>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a44      	ldr	r2, [pc, #272]	; (8009f2c <xPortStartScheduler+0x11c>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d109      	bne.n	8009e34 <xPortStartScheduler+0x24>
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	613b      	str	r3, [r7, #16]
 8009e32:	e7fe      	b.n	8009e32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e34:	4b3c      	ldr	r3, [pc, #240]	; (8009f28 <xPortStartScheduler+0x118>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a3d      	ldr	r2, [pc, #244]	; (8009f30 <xPortStartScheduler+0x120>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d109      	bne.n	8009e52 <xPortStartScheduler+0x42>
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	e7fe      	b.n	8009e50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e52:	4b38      	ldr	r3, [pc, #224]	; (8009f34 <xPortStartScheduler+0x124>)
 8009e54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	22ff      	movs	r2, #255	; 0xff
 8009e62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	4b30      	ldr	r3, [pc, #192]	; (8009f38 <xPortStartScheduler+0x128>)
 8009e78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e7a:	4b30      	ldr	r3, [pc, #192]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009e7c:	2207      	movs	r2, #7
 8009e7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e80:	e009      	b.n	8009e96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009e82:	4b2e      	ldr	r3, [pc, #184]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	4a2c      	ldr	r2, [pc, #176]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009e8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9e:	2b80      	cmp	r3, #128	; 0x80
 8009ea0:	d0ef      	beq.n	8009e82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ea2:	4b26      	ldr	r3, [pc, #152]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f1c3 0307 	rsb	r3, r3, #7
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d009      	beq.n	8009ec2 <xPortStartScheduler+0xb2>
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60bb      	str	r3, [r7, #8]
 8009ec0:	e7fe      	b.n	8009ec0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ec2:	4b1e      	ldr	r3, [pc, #120]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	4a1c      	ldr	r2, [pc, #112]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009eca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ecc:	4b1b      	ldr	r3, [pc, #108]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ed6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ee0:	4b17      	ldr	r3, [pc, #92]	; (8009f40 <xPortStartScheduler+0x130>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <xPortStartScheduler+0x130>)
 8009ee6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009eea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009eec:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <xPortStartScheduler+0x130>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a13      	ldr	r2, [pc, #76]	; (8009f40 <xPortStartScheduler+0x130>)
 8009ef2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ef6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ef8:	f000 f8d6 	bl	800a0a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009efc:	4b11      	ldr	r3, [pc, #68]	; (8009f44 <xPortStartScheduler+0x134>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f02:	f000 f8f5 	bl	800a0f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f06:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <xPortStartScheduler+0x138>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a0f      	ldr	r2, [pc, #60]	; (8009f48 <xPortStartScheduler+0x138>)
 8009f0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f12:	f7ff ff69 	bl	8009de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f16:	f001 fd8f 	bl	800ba38 <vTaskSwitchContext>
	prvTaskExitError();
 8009f1a:	f7ff ff21 	bl	8009d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed00 	.word	0xe000ed00
 8009f2c:	410fc271 	.word	0x410fc271
 8009f30:	410fc270 	.word	0x410fc270
 8009f34:	e000e400 	.word	0xe000e400
 8009f38:	240043a4 	.word	0x240043a4
 8009f3c:	240043a8 	.word	0x240043a8
 8009f40:	e000ed20 	.word	0xe000ed20
 8009f44:	24000024 	.word	0x24000024
 8009f48:	e000ef34 	.word	0xe000ef34

08009f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f64:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <vPortEnterCritical+0x54>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	4a0d      	ldr	r2, [pc, #52]	; (8009fa0 <vPortEnterCritical+0x54>)
 8009f6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f6e:	4b0c      	ldr	r3, [pc, #48]	; (8009fa0 <vPortEnterCritical+0x54>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d10e      	bne.n	8009f94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f76:	4b0b      	ldr	r3, [pc, #44]	; (8009fa4 <vPortEnterCritical+0x58>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d009      	beq.n	8009f94 <vPortEnterCritical+0x48>
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	e7fe      	b.n	8009f92 <vPortEnterCritical+0x46>
	}
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	24000024 	.word	0x24000024
 8009fa4:	e000ed04 	.word	0xe000ed04

08009fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <vPortExitCritical+0x22>
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	e7fe      	b.n	8009fc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009fca:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	4a08      	ldr	r2, [pc, #32]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fd4:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d104      	bne.n	8009fe6 <vPortExitCritical+0x3e>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	24000024 	.word	0x24000024
	...

0800a000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a000:	f3ef 8009 	mrs	r0, PSP
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <pxCurrentTCBConst>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	f01e 0f10 	tst.w	lr, #16
 800a010:	bf08      	it	eq
 800a012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	6010      	str	r0, [r2, #0]
 800a01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a020:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a024:	f380 8811 	msr	BASEPRI, r0
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f001 fd02 	bl	800ba38 <vTaskSwitchContext>
 800a034:	f04f 0000 	mov.w	r0, #0
 800a038:	f380 8811 	msr	BASEPRI, r0
 800a03c:	bc09      	pop	{r0, r3}
 800a03e:	6819      	ldr	r1, [r3, #0]
 800a040:	6808      	ldr	r0, [r1, #0]
 800a042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a046:	f01e 0f10 	tst.w	lr, #16
 800a04a:	bf08      	it	eq
 800a04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a050:	f380 8809 	msr	PSP, r0
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	f3af 8000 	nop.w

0800a060 <pxCurrentTCBConst>:
 800a060:	240043ac 	.word	0x240043ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop

0800a068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a080:	f001 fc22 	bl	800b8c8 <xTaskIncrementTick>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a08a:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <SysTick_Handler+0x3c>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	2300      	movs	r3, #0
 800a094:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	e000ed04 	.word	0xe000ed04

0800a0a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <vPortSetupTimerInterrupt+0x34>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <vPortSetupTimerInterrupt+0x38>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <vPortSetupTimerInterrupt+0x3c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <vPortSetupTimerInterrupt+0x40>)
 800a0be:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c2:	099b      	lsrs	r3, r3, #6
 800a0c4:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <vPortSetupTimerInterrupt+0x44>)
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ca:	4b04      	ldr	r3, [pc, #16]	; (800a0dc <vPortSetupTimerInterrupt+0x34>)
 800a0cc:	2207      	movs	r2, #7
 800a0ce:	601a      	str	r2, [r3, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	e000e010 	.word	0xe000e010
 800a0e0:	e000e018 	.word	0xe000e018
 800a0e4:	24000000 	.word	0x24000000
 800a0e8:	10624dd3 	.word	0x10624dd3
 800a0ec:	e000e014 	.word	0xe000e014

0800a0f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a100 <vPortEnableVFP+0x10>
 800a0f4:	6801      	ldr	r1, [r0, #0]
 800a0f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0fa:	6001      	str	r1, [r0, #0]
 800a0fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0fe:	bf00      	nop
 800a100:	e000ed88 	.word	0xe000ed88

0800a104 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a10a:	f3ef 8305 	mrs	r3, IPSR
 800a10e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b0f      	cmp	r3, #15
 800a114:	d913      	bls.n	800a13e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a116:	4a16      	ldr	r2, [pc, #88]	; (800a170 <vPortValidateInterruptPriority+0x6c>)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4413      	add	r3, r2
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a120:	4b14      	ldr	r3, [pc, #80]	; (800a174 <vPortValidateInterruptPriority+0x70>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	7afa      	ldrb	r2, [r7, #11]
 800a126:	429a      	cmp	r2, r3
 800a128:	d209      	bcs.n	800a13e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	607b      	str	r3, [r7, #4]
 800a13c:	e7fe      	b.n	800a13c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a13e:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <vPortValidateInterruptPriority+0x74>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a146:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <vPortValidateInterruptPriority+0x78>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d909      	bls.n	800a162 <vPortValidateInterruptPriority+0x5e>
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	e7fe      	b.n	800a160 <vPortValidateInterruptPriority+0x5c>
	}
 800a162:	bf00      	nop
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	e000e3f0 	.word	0xe000e3f0
 800a174:	240043a4 	.word	0x240043a4
 800a178:	e000ed0c 	.word	0xe000ed0c
 800a17c:	240043a8 	.word	0x240043a8

0800a180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d109      	bne.n	800a1a8 <xQueueGenericReset+0x28>
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	60bb      	str	r3, [r7, #8]
 800a1a6:	e7fe      	b.n	800a1a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a1a8:	f7ff fed0 	bl	8009f4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b4:	68f9      	ldr	r1, [r7, #12]
 800a1b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	441a      	add	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1de:	fb01 f303 	mul.w	r3, r1, r3
 800a1e2:	441a      	add	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	22ff      	movs	r2, #255	; 0xff
 800a1ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	22ff      	movs	r2, #255	; 0xff
 800a1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d114      	bne.n	800a228 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d01a      	beq.n	800a23c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3310      	adds	r3, #16
 800a20a:	4618      	mov	r0, r3
 800a20c:	f001 fcbe 	bl	800bb8c <xTaskRemoveFromEventList>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d012      	beq.n	800a23c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a216:	4b0d      	ldr	r3, [pc, #52]	; (800a24c <xQueueGenericReset+0xcc>)
 800a218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	e009      	b.n	800a23c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3310      	adds	r3, #16
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff fcaf 	bl	8009b90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3324      	adds	r3, #36	; 0x24
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fcaa 	bl	8009b90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a23c:	f7ff feb4 	bl	8009fa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a240:	2301      	movs	r3, #1
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08e      	sub	sp, #56	; 0x38
 800a254:	af02      	add	r7, sp, #8
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d109      	bne.n	800a278 <xQueueGenericCreateStatic+0x28>
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	62bb      	str	r3, [r7, #40]	; 0x28
 800a276:	e7fe      	b.n	800a276 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <xQueueGenericCreateStatic+0x42>
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	627b      	str	r3, [r7, #36]	; 0x24
 800a290:	e7fe      	b.n	800a290 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <xQueueGenericCreateStatic+0x4e>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <xQueueGenericCreateStatic+0x52>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e000      	b.n	800a2a4 <xQueueGenericCreateStatic+0x54>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d109      	bne.n	800a2bc <xQueueGenericCreateStatic+0x6c>
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	623b      	str	r3, [r7, #32]
 800a2ba:	e7fe      	b.n	800a2ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d102      	bne.n	800a2c8 <xQueueGenericCreateStatic+0x78>
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <xQueueGenericCreateStatic+0x7c>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e000      	b.n	800a2ce <xQueueGenericCreateStatic+0x7e>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d109      	bne.n	800a2e6 <xQueueGenericCreateStatic+0x96>
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	e7fe      	b.n	800a2e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a2e6:	2350      	movs	r3, #80	; 0x50
 800a2e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b50      	cmp	r3, #80	; 0x50
 800a2ee:	d009      	beq.n	800a304 <xQueueGenericCreateStatic+0xb4>
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	61bb      	str	r3, [r7, #24]
 800a302:	e7fe      	b.n	800a302 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a304:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00d      	beq.n	800a32c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a318:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	4613      	mov	r3, r2
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 f844 	bl	800a3b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a32e:	4618      	mov	r0, r3
 800a330:	3730      	adds	r7, #48	; 0x30
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a336:	b580      	push	{r7, lr}
 800a338:	b08a      	sub	sp, #40	; 0x28
 800a33a:	af02      	add	r7, sp, #8
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	4613      	mov	r3, r2
 800a342:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d109      	bne.n	800a35e <xQueueGenericCreate+0x28>
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	613b      	str	r3, [r7, #16]
 800a35c:	e7fe      	b.n	800a35c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a364:	2300      	movs	r3, #0
 800a366:	61fb      	str	r3, [r7, #28]
 800a368:	e004      	b.n	800a374 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	fb02 f303 	mul.w	r3, r2, r3
 800a372:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	3350      	adds	r3, #80	; 0x50
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff fa33 	bl	80097e4 <pvPortMalloc>
 800a37e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d011      	beq.n	800a3aa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	3350      	adds	r3, #80	; 0x50
 800a38e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a398:	79fa      	ldrb	r2, [r7, #7]
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f805 	bl	800a3b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3aa:	69bb      	ldr	r3, [r7, #24]
	}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3720      	adds	r7, #32
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d103      	bne.n	800a3d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	e002      	b.n	800a3d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	69b8      	ldr	r0, [r7, #24]
 800a3e6:	f7ff fecb 	bl	800a180 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	78fa      	ldrb	r2, [r7, #3]
 800a3ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3f2:	bf00      	nop
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00e      	beq.n	800a426 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a41a:	2300      	movs	r3, #0
 800a41c:	2200      	movs	r2, #0
 800a41e:	2100      	movs	r1, #0
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f905 	bl	800a630 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a426:	bf00      	nop
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b086      	sub	sp, #24
 800a432:	af00      	add	r7, sp, #0
 800a434:	4603      	mov	r3, r0
 800a436:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a438:	2301      	movs	r3, #1
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	2300      	movs	r3, #0
 800a43e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	461a      	mov	r2, r3
 800a444:	6939      	ldr	r1, [r7, #16]
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	f7ff ff75 	bl	800a336 <xQueueGenericCreate>
 800a44c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7ff ffd3 	bl	800a3fa <prvInitialiseMutex>

		return xNewQueue;
 800a454:	68fb      	ldr	r3, [r7, #12]
	}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b088      	sub	sp, #32
 800a462:	af02      	add	r7, sp, #8
 800a464:	4603      	mov	r3, r0
 800a466:	6039      	str	r1, [r7, #0]
 800a468:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a46a:	2301      	movs	r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	2300      	movs	r3, #0
 800a470:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2200      	movs	r2, #0
 800a47a:	6939      	ldr	r1, [r7, #16]
 800a47c:	6978      	ldr	r0, [r7, #20]
 800a47e:	f7ff fee7 	bl	800a250 <xQueueGenericCreateStatic>
 800a482:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff ffb8 	bl	800a3fa <prvInitialiseMutex>

		return xNewQueue;
 800a48a:	68fb      	ldr	r3, [r7, #12]
	}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a494:	b590      	push	{r4, r7, lr}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d109      	bne.n	800a4ba <xQueueGiveMutexRecursive+0x26>
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e7fe      	b.n	800a4b8 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	689c      	ldr	r4, [r3, #8]
 800a4be:	f001 fd1b 	bl	800bef8 <xTaskGetCurrentTaskHandle>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	429c      	cmp	r4, r3
 800a4c6:	d111      	bne.n	800a4ec <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	1e5a      	subs	r2, r3, #1
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d105      	bne.n	800a4e6 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2100      	movs	r1, #0
 800a4e0:	6938      	ldr	r0, [r7, #16]
 800a4e2:	f000 f8a5 	bl	800a630 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	e001      	b.n	800a4f0 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a4f0:	697b      	ldr	r3, [r7, #20]
	}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd90      	pop	{r4, r7, pc}

0800a4fa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a4fa:	b590      	push	{r4, r7, lr}
 800a4fc:	b087      	sub	sp, #28
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <xQueueTakeMutexRecursive+0x28>
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e7fe      	b.n	800a520 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	689c      	ldr	r4, [r3, #8]
 800a526:	f001 fce7 	bl	800bef8 <xTaskGetCurrentTaskHandle>
 800a52a:	4603      	mov	r3, r0
 800a52c:	429c      	cmp	r4, r3
 800a52e:	d107      	bne.n	800a540 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a53a:	2301      	movs	r3, #1
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	e00c      	b.n	800a55a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6938      	ldr	r0, [r7, #16]
 800a544:	f000 fb68 	bl	800ac18 <xQueueSemaphoreTake>
 800a548:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d004      	beq.n	800a55a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	1c5a      	adds	r2, r3, #1
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a55a:	697b      	ldr	r3, [r7, #20]
	}
 800a55c:	4618      	mov	r0, r3
 800a55e:	371c      	adds	r7, #28
 800a560:	46bd      	mov	sp, r7
 800a562:	bd90      	pop	{r4, r7, pc}

0800a564 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08a      	sub	sp, #40	; 0x28
 800a568:	af02      	add	r7, sp, #8
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d109      	bne.n	800a58a <xQueueCreateCountingSemaphoreStatic+0x26>
 800a576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	61bb      	str	r3, [r7, #24]
 800a588:	e7fe      	b.n	800a588 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d909      	bls.n	800a5a6 <xQueueCreateCountingSemaphoreStatic+0x42>
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e7fe      	b.n	800a5a4 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fe4d 	bl	800a250 <xQueueGenericCreateStatic>
 800a5b6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
	}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b086      	sub	sp, #24
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d109      	bne.n	800a5f2 <xQueueCreateCountingSemaphore+0x24>
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	613b      	str	r3, [r7, #16]
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d909      	bls.n	800a60e <xQueueCreateCountingSemaphore+0x40>
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e7fe      	b.n	800a60c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a60e:	2202      	movs	r2, #2
 800a610:	2100      	movs	r1, #0
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fe8f 	bl	800a336 <xQueueGenericCreate>
 800a618:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a626:	697b      	ldr	r3, [r7, #20]
	}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08e      	sub	sp, #56	; 0x38
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a63e:	2300      	movs	r3, #0
 800a640:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d109      	bne.n	800a660 <xQueueGenericSend+0x30>
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a65e:	e7fe      	b.n	800a65e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <xQueueGenericSend+0x3e>
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <xQueueGenericSend+0x42>
 800a66e:	2301      	movs	r3, #1
 800a670:	e000      	b.n	800a674 <xQueueGenericSend+0x44>
 800a672:	2300      	movs	r3, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <xQueueGenericSend+0x5c>
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
 800a68a:	e7fe      	b.n	800a68a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d103      	bne.n	800a69a <xQueueGenericSend+0x6a>
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <xQueueGenericSend+0x6e>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e000      	b.n	800a6a0 <xQueueGenericSend+0x70>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d109      	bne.n	800a6b8 <xQueueGenericSend+0x88>
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	623b      	str	r3, [r7, #32]
 800a6b6:	e7fe      	b.n	800a6b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b8:	f001 fc2e 	bl	800bf18 <xTaskGetSchedulerState>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d102      	bne.n	800a6c8 <xQueueGenericSend+0x98>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <xQueueGenericSend+0x9c>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e000      	b.n	800a6ce <xQueueGenericSend+0x9e>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d109      	bne.n	800a6e6 <xQueueGenericSend+0xb6>
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	61fb      	str	r3, [r7, #28]
 800a6e4:	e7fe      	b.n	800a6e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e6:	f7ff fc31 	bl	8009f4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d302      	bcc.n	800a6fc <xQueueGenericSend+0xcc>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d129      	bne.n	800a750 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	68b9      	ldr	r1, [r7, #8]
 800a700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a702:	f000 fc48 	bl	800af96 <prvCopyDataToQueue>
 800a706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d010      	beq.n	800a732 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	3324      	adds	r3, #36	; 0x24
 800a714:	4618      	mov	r0, r3
 800a716:	f001 fa39 	bl	800bb8c <xTaskRemoveFromEventList>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d013      	beq.n	800a748 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a720:	4b3f      	ldr	r3, [pc, #252]	; (800a820 <xQueueGenericSend+0x1f0>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	e00a      	b.n	800a748 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a738:	4b39      	ldr	r3, [pc, #228]	; (800a820 <xQueueGenericSend+0x1f0>)
 800a73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a748:	f7ff fc2e 	bl	8009fa8 <vPortExitCritical>
				return pdPASS;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e063      	b.n	800a818 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d103      	bne.n	800a75e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a756:	f7ff fc27 	bl	8009fa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	e05c      	b.n	800a818 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a764:	f107 0314 	add.w	r3, r7, #20
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 fa71 	bl	800bc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a76e:	2301      	movs	r3, #1
 800a770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a772:	f7ff fc19 	bl	8009fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a776:	f000 ffdb 	bl	800b730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a77a:	f7ff fbe7 	bl	8009f4c <vPortEnterCritical>
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a784:	b25b      	sxtb	r3, r3
 800a786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a78a:	d103      	bne.n	800a794 <xQueueGenericSend+0x164>
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a79a:	b25b      	sxtb	r3, r3
 800a79c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7a0:	d103      	bne.n	800a7aa <xQueueGenericSend+0x17a>
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7aa:	f7ff fbfd 	bl	8009fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7ae:	1d3a      	adds	r2, r7, #4
 800a7b0:	f107 0314 	add.w	r3, r7, #20
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 fa60 	bl	800bc7c <xTaskCheckForTimeOut>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d124      	bne.n	800a80c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c4:	f000 fcdf 	bl	800b186 <prvIsQueueFull>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d018      	beq.n	800a800 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	3310      	adds	r3, #16
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 f98a 	bl	800baf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7de:	f000 fc6a 	bl	800b0b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7e2:	f000 ffb3 	bl	800b74c <xTaskResumeAll>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f47f af7c 	bne.w	800a6e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a7ee:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <xQueueGenericSend+0x1f0>)
 800a7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	e772      	b.n	800a6e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a802:	f000 fc58 	bl	800b0b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a806:	f000 ffa1 	bl	800b74c <xTaskResumeAll>
 800a80a:	e76c      	b.n	800a6e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a80e:	f000 fc52 	bl	800b0b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a812:	f000 ff9b 	bl	800b74c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3738      	adds	r7, #56	; 0x38
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08e      	sub	sp, #56	; 0x38
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d109      	bne.n	800a850 <xQueueGenericSendFromISR+0x2c>
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
 800a84e:	e7fe      	b.n	800a84e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d103      	bne.n	800a85e <xQueueGenericSendFromISR+0x3a>
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <xQueueGenericSendFromISR+0x3e>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <xQueueGenericSendFromISR+0x40>
 800a862:	2300      	movs	r3, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d109      	bne.n	800a87c <xQueueGenericSendFromISR+0x58>
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	623b      	str	r3, [r7, #32]
 800a87a:	e7fe      	b.n	800a87a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d103      	bne.n	800a88a <xQueueGenericSendFromISR+0x66>
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <xQueueGenericSendFromISR+0x6a>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e000      	b.n	800a890 <xQueueGenericSendFromISR+0x6c>
 800a88e:	2300      	movs	r3, #0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d109      	bne.n	800a8a8 <xQueueGenericSendFromISR+0x84>
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e7fe      	b.n	800a8a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8a8:	f7ff fc2c 	bl	800a104 <vPortValidateInterruptPriority>
	__asm volatile
 800a8ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	61ba      	str	r2, [r7, #24]
 800a8c2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a8c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d302      	bcc.n	800a8da <xQueueGenericSendFromISR+0xb6>
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d12c      	bne.n	800a934 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	68b9      	ldr	r1, [r7, #8]
 800a8e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ea:	f000 fb54 	bl	800af96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a8f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8f6:	d112      	bne.n	800a91e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d016      	beq.n	800a92e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	3324      	adds	r3, #36	; 0x24
 800a904:	4618      	mov	r0, r3
 800a906:	f001 f941 	bl	800bb8c <xTaskRemoveFromEventList>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00e      	beq.n	800a92e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00b      	beq.n	800a92e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e007      	b.n	800a92e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a91e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a922:	3301      	adds	r3, #1
 800a924:	b2db      	uxtb	r3, r3
 800a926:	b25a      	sxtb	r2, r3
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a92e:	2301      	movs	r3, #1
 800a930:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a932:	e001      	b.n	800a938 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a934:	2300      	movs	r3, #0
 800a936:	637b      	str	r3, [r7, #52]	; 0x34
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a944:	4618      	mov	r0, r3
 800a946:	3738      	adds	r7, #56	; 0x38
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08e      	sub	sp, #56	; 0x38
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d109      	bne.n	800a974 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	623b      	str	r3, [r7, #32]
 800a972:	e7fe      	b.n	800a972 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d009      	beq.n	800a990 <xQueueGiveFromISR+0x44>
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61fb      	str	r3, [r7, #28]
 800a98e:	e7fe      	b.n	800a98e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d103      	bne.n	800a9a0 <xQueueGiveFromISR+0x54>
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <xQueueGiveFromISR+0x58>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e000      	b.n	800a9a6 <xQueueGiveFromISR+0x5a>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d109      	bne.n	800a9be <xQueueGiveFromISR+0x72>
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	61bb      	str	r3, [r7, #24]
 800a9bc:	e7fe      	b.n	800a9bc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9be:	f7ff fba1 	bl	800a104 <vPortValidateInterruptPriority>
	__asm volatile
 800a9c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	617a      	str	r2, [r7, #20]
 800a9d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a9da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d22b      	bcs.n	800aa46 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa08:	d112      	bne.n	800aa30 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d016      	beq.n	800aa40 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	3324      	adds	r3, #36	; 0x24
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 f8b8 	bl	800bb8c <xTaskRemoveFromEventList>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00b      	beq.n	800aa40 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	e007      	b.n	800aa40 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa34:	3301      	adds	r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	b25a      	sxtb	r2, r3
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa40:	2301      	movs	r3, #1
 800aa42:	637b      	str	r3, [r7, #52]	; 0x34
 800aa44:	e001      	b.n	800aa4a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	637b      	str	r3, [r7, #52]	; 0x34
 800aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3738      	adds	r7, #56	; 0x38
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08c      	sub	sp, #48	; 0x30
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d109      	bne.n	800aa8e <xQueueReceive+0x2e>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	623b      	str	r3, [r7, #32]
 800aa8c:	e7fe      	b.n	800aa8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d103      	bne.n	800aa9c <xQueueReceive+0x3c>
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <xQueueReceive+0x40>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e000      	b.n	800aaa2 <xQueueReceive+0x42>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d109      	bne.n	800aaba <xQueueReceive+0x5a>
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	61fb      	str	r3, [r7, #28]
 800aab8:	e7fe      	b.n	800aab8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaba:	f001 fa2d 	bl	800bf18 <xTaskGetSchedulerState>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <xQueueReceive+0x6a>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <xQueueReceive+0x6e>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e000      	b.n	800aad0 <xQueueReceive+0x70>
 800aace:	2300      	movs	r3, #0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <xQueueReceive+0x88>
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	61bb      	str	r3, [r7, #24]
 800aae6:	e7fe      	b.n	800aae6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aae8:	f7ff fa30 	bl	8009f4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01f      	beq.n	800ab38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aafc:	f000 fab5 	bl	800b06a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	1e5a      	subs	r2, r3, #1
 800ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00f      	beq.n	800ab30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	3310      	adds	r3, #16
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 f839 	bl	800bb8c <xTaskRemoveFromEventList>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d007      	beq.n	800ab30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab20:	4b3c      	ldr	r3, [pc, #240]	; (800ac14 <xQueueReceive+0x1b4>)
 800ab22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab30:	f7ff fa3a 	bl	8009fa8 <vPortExitCritical>
				return pdPASS;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e069      	b.n	800ac0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d103      	bne.n	800ab46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab3e:	f7ff fa33 	bl	8009fa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e062      	b.n	800ac0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d106      	bne.n	800ab5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab4c:	f107 0310 	add.w	r3, r7, #16
 800ab50:	4618      	mov	r0, r3
 800ab52:	f001 f87d 	bl	800bc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab56:	2301      	movs	r3, #1
 800ab58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab5a:	f7ff fa25 	bl	8009fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab5e:	f000 fde7 	bl	800b730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab62:	f7ff f9f3 	bl	8009f4c <vPortEnterCritical>
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab6c:	b25b      	sxtb	r3, r3
 800ab6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab72:	d103      	bne.n	800ab7c <xQueueReceive+0x11c>
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab82:	b25b      	sxtb	r3, r3
 800ab84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab88:	d103      	bne.n	800ab92 <xQueueReceive+0x132>
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab92:	f7ff fa09 	bl	8009fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab96:	1d3a      	adds	r2, r7, #4
 800ab98:	f107 0310 	add.w	r3, r7, #16
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f001 f86c 	bl	800bc7c <xTaskCheckForTimeOut>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d123      	bne.n	800abf2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abac:	f000 fad5 	bl	800b15a <prvIsQueueEmpty>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d017      	beq.n	800abe6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	3324      	adds	r3, #36	; 0x24
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	4611      	mov	r1, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 ff96 	bl	800baf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abc6:	f000 fa76 	bl	800b0b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abca:	f000 fdbf 	bl	800b74c <xTaskResumeAll>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d189      	bne.n	800aae8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800abd4:	4b0f      	ldr	r3, [pc, #60]	; (800ac14 <xQueueReceive+0x1b4>)
 800abd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	e780      	b.n	800aae8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe8:	f000 fa65 	bl	800b0b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abec:	f000 fdae 	bl	800b74c <xTaskResumeAll>
 800abf0:	e77a      	b.n	800aae8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf4:	f000 fa5f 	bl	800b0b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abf8:	f000 fda8 	bl	800b74c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfe:	f000 faac 	bl	800b15a <prvIsQueueEmpty>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f43f af6f 	beq.w	800aae8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3730      	adds	r7, #48	; 0x30
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08e      	sub	sp, #56	; 0x38
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d109      	bne.n	800ac48 <xQueueSemaphoreTake+0x30>
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	623b      	str	r3, [r7, #32]
 800ac46:	e7fe      	b.n	800ac46 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d009      	beq.n	800ac64 <xQueueSemaphoreTake+0x4c>
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61fb      	str	r3, [r7, #28]
 800ac62:	e7fe      	b.n	800ac62 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac64:	f001 f958 	bl	800bf18 <xTaskGetSchedulerState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <xQueueSemaphoreTake+0x5c>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <xQueueSemaphoreTake+0x60>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <xQueueSemaphoreTake+0x62>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d109      	bne.n	800ac92 <xQueueSemaphoreTake+0x7a>
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	61bb      	str	r3, [r7, #24]
 800ac90:	e7fe      	b.n	800ac90 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac92:	f7ff f95b 	bl	8009f4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d024      	beq.n	800acec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	1e5a      	subs	r2, r3, #1
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d104      	bne.n	800acbc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800acb2:	f001 faa3 	bl	800c1fc <pvTaskIncrementMutexHeldCount>
 800acb6:	4602      	mov	r2, r0
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00f      	beq.n	800ace4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	3310      	adds	r3, #16
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 ff5f 	bl	800bb8c <xTaskRemoveFromEventList>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d007      	beq.n	800ace4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acd4:	4b53      	ldr	r3, [pc, #332]	; (800ae24 <xQueueSemaphoreTake+0x20c>)
 800acd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ace4:	f7ff f960 	bl	8009fa8 <vPortExitCritical>
				return pdPASS;
 800ace8:	2301      	movs	r3, #1
 800acea:	e096      	b.n	800ae1a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d110      	bne.n	800ad14 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d009      	beq.n	800ad0c <xQueueSemaphoreTake+0xf4>
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	e7fe      	b.n	800ad0a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad0c:	f7ff f94c 	bl	8009fa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad10:	2300      	movs	r3, #0
 800ad12:	e082      	b.n	800ae1a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad1a:	f107 030c 	add.w	r3, r7, #12
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 ff96 	bl	800bc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad28:	f7ff f93e 	bl	8009fa8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad2c:	f000 fd00 	bl	800b730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad30:	f7ff f90c 	bl	8009f4c <vPortEnterCritical>
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad3a:	b25b      	sxtb	r3, r3
 800ad3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad40:	d103      	bne.n	800ad4a <xQueueSemaphoreTake+0x132>
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad50:	b25b      	sxtb	r3, r3
 800ad52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad56:	d103      	bne.n	800ad60 <xQueueSemaphoreTake+0x148>
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad60:	f7ff f922 	bl	8009fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad64:	463a      	mov	r2, r7
 800ad66:	f107 030c 	add.w	r3, r7, #12
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 ff85 	bl	800bc7c <xTaskCheckForTimeOut>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d132      	bne.n	800adde <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad7a:	f000 f9ee 	bl	800b15a <prvIsQueueEmpty>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d026      	beq.n	800add2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d109      	bne.n	800ada0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800ad8c:	f7ff f8de 	bl	8009f4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f001 f8dd 	bl	800bf54 <xTaskPriorityInherit>
 800ad9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad9c:	f7ff f904 	bl	8009fa8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	4611      	mov	r1, r2
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 fea1 	bl	800baf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adb0:	f000 f981 	bl	800b0b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adb4:	f000 fcca 	bl	800b74c <xTaskResumeAll>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f47f af69 	bne.w	800ac92 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800adc0:	4b18      	ldr	r3, [pc, #96]	; (800ae24 <xQueueSemaphoreTake+0x20c>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	e75f      	b.n	800ac92 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800add2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800add4:	f000 f96f 	bl	800b0b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800add8:	f000 fcb8 	bl	800b74c <xTaskResumeAll>
 800addc:	e759      	b.n	800ac92 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ade0:	f000 f969 	bl	800b0b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ade4:	f000 fcb2 	bl	800b74c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adea:	f000 f9b6 	bl	800b15a <prvIsQueueEmpty>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f43f af4e 	beq.w	800ac92 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00d      	beq.n	800ae18 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800adfc:	f7ff f8a6 	bl	8009f4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae02:	f000 f8b0 	bl	800af66 <prvGetDisinheritPriorityAfterTimeout>
 800ae06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 f974 	bl	800c0fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae14:	f7ff f8c8 	bl	8009fa8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3738      	adds	r7, #56	; 0x38
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	e000ed04 	.word	0xe000ed04

0800ae28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08e      	sub	sp, #56	; 0x38
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <xQueueReceiveFromISR+0x2a>
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	623b      	str	r3, [r7, #32]
 800ae50:	e7fe      	b.n	800ae50 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d103      	bne.n	800ae60 <xQueueReceiveFromISR+0x38>
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <xQueueReceiveFromISR+0x3c>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <xQueueReceiveFromISR+0x3e>
 800ae64:	2300      	movs	r3, #0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d109      	bne.n	800ae7e <xQueueReceiveFromISR+0x56>
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	e7fe      	b.n	800ae7c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae7e:	f7ff f941 	bl	800a104 <vPortValidateInterruptPriority>
	__asm volatile
 800ae82:	f3ef 8211 	mrs	r2, BASEPRI
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	61ba      	str	r2, [r7, #24]
 800ae98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d02f      	beq.n	800af0a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeb8:	f000 f8d7 	bl	800b06a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	1e5a      	subs	r2, r3, #1
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aec4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aecc:	d112      	bne.n	800aef4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d016      	beq.n	800af04 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	3310      	adds	r3, #16
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fe56 	bl	800bb8c <xTaskRemoveFromEventList>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00e      	beq.n	800af04 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00b      	beq.n	800af04 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	601a      	str	r2, [r3, #0]
 800aef2:	e007      	b.n	800af04 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef8:	3301      	adds	r3, #1
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	b25a      	sxtb	r2, r3
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af04:	2301      	movs	r3, #1
 800af06:	637b      	str	r3, [r7, #52]	; 0x34
 800af08:	e001      	b.n	800af0e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	637b      	str	r3, [r7, #52]	; 0x34
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3738      	adds	r7, #56	; 0x38
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d109      	bne.n	800af48 <vQueueDelete+0x26>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	60bb      	str	r3, [r7, #8]
 800af46:	e7fe      	b.n	800af46 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 f95d 	bl	800b208 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af54:	2b00      	cmp	r3, #0
 800af56:	d102      	bne.n	800af5e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f7fe fd05 	bl	8009968 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	2b00      	cmp	r3, #0
 800af74:	d006      	beq.n	800af84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	e001      	b.n	800af88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af88:	68fb      	ldr	r3, [r7, #12]
	}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b086      	sub	sp, #24
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afa2:	2300      	movs	r3, #0
 800afa4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10d      	bne.n	800afd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d14d      	bne.n	800b058 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f001 f82f 	bl	800c024 <xTaskPriorityDisinherit>
 800afc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	609a      	str	r2, [r3, #8]
 800afce:	e043      	b.n	800b058 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d119      	bne.n	800b00a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6858      	ldr	r0, [r3, #4]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	461a      	mov	r2, r3
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	f00c f99a 	bl	801731a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	441a      	add	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	429a      	cmp	r2, r3
 800affe:	d32b      	bcc.n	800b058 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	605a      	str	r2, [r3, #4]
 800b008:	e026      	b.n	800b058 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	68d8      	ldr	r0, [r3, #12]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b012:	461a      	mov	r2, r3
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	f00c f980 	bl	801731a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	425b      	negs	r3, r3
 800b024:	441a      	add	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d207      	bcs.n	800b046 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	689a      	ldr	r2, [r3, #8]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	425b      	negs	r3, r3
 800b040:	441a      	add	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d105      	bne.n	800b058 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	3b01      	subs	r3, #1
 800b056:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b060:	697b      	ldr	r3, [r7, #20]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d018      	beq.n	800b0ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b084:	441a      	add	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	429a      	cmp	r2, r3
 800b094:	d303      	bcc.n	800b09e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68d9      	ldr	r1, [r3, #12]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	6838      	ldr	r0, [r7, #0]
 800b0aa:	f00c f936 	bl	801731a <memcpy>
	}
}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0be:	f7fe ff45 	bl	8009f4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0ca:	e011      	b.n	800b0f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3324      	adds	r3, #36	; 0x24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 fd57 	bl	800bb8c <xTaskRemoveFromEventList>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0e4:	f000 fe2a 	bl	800bd3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	dce9      	bgt.n	800b0cc <prvUnlockQueue+0x16>
 800b0f8:	e000      	b.n	800b0fc <prvUnlockQueue+0x46>
					break;
 800b0fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	22ff      	movs	r2, #255	; 0xff
 800b100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b104:	f7fe ff50 	bl	8009fa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b108:	f7fe ff20 	bl	8009f4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b112:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b114:	e011      	b.n	800b13a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d012      	beq.n	800b144 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3310      	adds	r3, #16
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fd32 	bl	800bb8c <xTaskRemoveFromEventList>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b12e:	f000 fe05 	bl	800bd3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	3b01      	subs	r3, #1
 800b136:	b2db      	uxtb	r3, r3
 800b138:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b13a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dce9      	bgt.n	800b116 <prvUnlockQueue+0x60>
 800b142:	e000      	b.n	800b146 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b144:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	22ff      	movs	r2, #255	; 0xff
 800b14a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b14e:	f7fe ff2b 	bl	8009fa8 <vPortExitCritical>
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b162:	f7fe fef3 	bl	8009f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b16e:	2301      	movs	r3, #1
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e001      	b.n	800b178 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b178:	f7fe ff16 	bl	8009fa8 <vPortExitCritical>

	return xReturn;
 800b17c:	68fb      	ldr	r3, [r7, #12]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b18e:	f7fe fedd 	bl	8009f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d102      	bne.n	800b1a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	e001      	b.n	800b1a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1a8:	f7fe fefe 	bl	8009fa8 <vPortExitCritical>

	return xReturn;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	e014      	b.n	800b1f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1c8:	4a0e      	ldr	r2, [pc, #56]	; (800b204 <vQueueAddToRegistry+0x4c>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10b      	bne.n	800b1ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1d4:	490b      	ldr	r1, [pc, #44]	; (800b204 <vQueueAddToRegistry+0x4c>)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1de:	4a09      	ldr	r2, [pc, #36]	; (800b204 <vQueueAddToRegistry+0x4c>)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1ea:	e005      	b.n	800b1f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	d9e7      	bls.n	800b1c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1f8:	bf00      	nop
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	2400525c 	.word	0x2400525c

0800b208 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b210:	2300      	movs	r3, #0
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	e016      	b.n	800b244 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b216:	4a10      	ldr	r2, [pc, #64]	; (800b258 <vQueueUnregisterQueue+0x50>)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	4413      	add	r3, r2
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	429a      	cmp	r2, r3
 800b224:	d10b      	bne.n	800b23e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b226:	4a0c      	ldr	r2, [pc, #48]	; (800b258 <vQueueUnregisterQueue+0x50>)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2100      	movs	r1, #0
 800b22c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b230:	4a09      	ldr	r2, [pc, #36]	; (800b258 <vQueueUnregisterQueue+0x50>)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	4413      	add	r3, r2
 800b238:	2200      	movs	r2, #0
 800b23a:	605a      	str	r2, [r3, #4]
				break;
 800b23c:	e005      	b.n	800b24a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b07      	cmp	r3, #7
 800b248:	d9e5      	bls.n	800b216 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b24a:	bf00      	nop
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	2400525c 	.word	0x2400525c

0800b25c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b26c:	f7fe fe6e 	bl	8009f4c <vPortEnterCritical>
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b276:	b25b      	sxtb	r3, r3
 800b278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b27c:	d103      	bne.n	800b286 <vQueueWaitForMessageRestricted+0x2a>
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28c:	b25b      	sxtb	r3, r3
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b292:	d103      	bne.n	800b29c <vQueueWaitForMessageRestricted+0x40>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b29c:	f7fe fe84 	bl	8009fa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d106      	bne.n	800b2b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	3324      	adds	r3, #36	; 0x24
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fc41 	bl	800bb38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2b6:	6978      	ldr	r0, [r7, #20]
 800b2b8:	f7ff fefd 	bl	800b0b6 <prvUnlockQueue>
	}
 800b2bc:	bf00      	nop
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08e      	sub	sp, #56	; 0x38
 800b2c8:	af04      	add	r7, sp, #16
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d109      	bne.n	800b2ec <xTaskCreateStatic+0x28>
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	623b      	str	r3, [r7, #32]
 800b2ea:	e7fe      	b.n	800b2ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d109      	bne.n	800b306 <xTaskCreateStatic+0x42>
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	e7fe      	b.n	800b304 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b306:	235c      	movs	r3, #92	; 0x5c
 800b308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b5c      	cmp	r3, #92	; 0x5c
 800b30e:	d009      	beq.n	800b324 <xTaskCreateStatic+0x60>
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	61bb      	str	r3, [r7, #24]
 800b322:	e7fe      	b.n	800b322 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b324:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01e      	beq.n	800b36a <xTaskCreateStatic+0xa6>
 800b32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d01b      	beq.n	800b36a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b33a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	2202      	movs	r2, #2
 800b340:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b344:	2300      	movs	r3, #0
 800b346:	9303      	str	r3, [sp, #12]
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	9302      	str	r3, [sp, #8]
 800b34c:	f107 0314 	add.w	r3, r7, #20
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 f850 	bl	800b402 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b364:	f000 f8dc 	bl	800b520 <prvAddNewTaskToReadyList>
 800b368:	e001      	b.n	800b36e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b36e:	697b      	ldr	r3, [r7, #20]
	}
 800b370:	4618      	mov	r0, r3
 800b372:	3728      	adds	r7, #40	; 0x28
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08c      	sub	sp, #48	; 0x30
 800b37c:	af04      	add	r7, sp, #16
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	4613      	mov	r3, r2
 800b386:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b388:	88fb      	ldrh	r3, [r7, #6]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fe fa29 	bl	80097e4 <pvPortMalloc>
 800b392:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00e      	beq.n	800b3b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b39a:	205c      	movs	r0, #92	; 0x5c
 800b39c:	f7fe fa22 	bl	80097e4 <pvPortMalloc>
 800b3a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d003      	beq.n	800b3b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	631a      	str	r2, [r3, #48]	; 0x30
 800b3ae:	e005      	b.n	800b3bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3b0:	6978      	ldr	r0, [r7, #20]
 800b3b2:	f7fe fad9 	bl	8009968 <vPortFree>
 800b3b6:	e001      	b.n	800b3bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d017      	beq.n	800b3f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3ca:	88fa      	ldrh	r2, [r7, #6]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9303      	str	r3, [sp, #12]
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	9302      	str	r3, [sp, #8]
 800b3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 f80e 	bl	800b402 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3e6:	69f8      	ldr	r0, [r7, #28]
 800b3e8:	f000 f89a 	bl	800b520 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	e002      	b.n	800b3f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
	}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b088      	sub	sp, #32
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	60b9      	str	r1, [r7, #8]
 800b40c:	607a      	str	r2, [r7, #4]
 800b40e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b412:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	461a      	mov	r2, r3
 800b41a:	21a5      	movs	r1, #165	; 0xa5
 800b41c:	f00b ffa1 	bl	8017362 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b42a:	440b      	add	r3, r1
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	f023 0307 	bic.w	r3, r3, #7
 800b438:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	f003 0307 	and.w	r3, r3, #7
 800b440:	2b00      	cmp	r3, #0
 800b442:	d009      	beq.n	800b458 <prvInitialiseNewTask+0x56>
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	617b      	str	r3, [r7, #20]
 800b456:	e7fe      	b.n	800b456 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d01f      	beq.n	800b49e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b45e:	2300      	movs	r3, #0
 800b460:	61fb      	str	r3, [r7, #28]
 800b462:	e012      	b.n	800b48a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	7819      	ldrb	r1, [r3, #0]
 800b46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	3334      	adds	r3, #52	; 0x34
 800b474:	460a      	mov	r2, r1
 800b476:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	4413      	add	r3, r2
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d006      	beq.n	800b492 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	3301      	adds	r3, #1
 800b488:	61fb      	str	r3, [r7, #28]
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	2b0f      	cmp	r3, #15
 800b48e:	d9e9      	bls.n	800b464 <prvInitialiseNewTask+0x62>
 800b490:	e000      	b.n	800b494 <prvInitialiseNewTask+0x92>
			{
				break;
 800b492:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b49c:	e003      	b.n	800b4a6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	2b37      	cmp	r3, #55	; 0x37
 800b4aa:	d901      	bls.n	800b4b0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4ac:	2337      	movs	r3, #55	; 0x37
 800b4ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4be:	2200      	movs	r2, #0
 800b4c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fb82 	bl	8009bd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	3318      	adds	r3, #24
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fe fb7d 	bl	8009bd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	68f9      	ldr	r1, [r7, #12]
 800b4fe:	69b8      	ldr	r0, [r7, #24]
 800b500:	f7fe fbfa 	bl	8009cf8 <pxPortInitialiseStack>
 800b504:	4602      	mov	r2, r0
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b516:	bf00      	nop
 800b518:	3720      	adds	r7, #32
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b528:	f7fe fd10 	bl	8009f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b52c:	4b2d      	ldr	r3, [pc, #180]	; (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	4a2c      	ldr	r2, [pc, #176]	; (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b534:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b536:	4b2c      	ldr	r3, [pc, #176]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b53e:	4a2a      	ldr	r2, [pc, #168]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b544:	4b27      	ldr	r3, [pc, #156]	; (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d110      	bne.n	800b56e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b54c:	f000 fc1a 	bl	800bd84 <prvInitialiseTaskLists>
 800b550:	e00d      	b.n	800b56e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b552:	4b26      	ldr	r3, [pc, #152]	; (800b5ec <prvAddNewTaskToReadyList+0xcc>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b55a:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	429a      	cmp	r2, r3
 800b566:	d802      	bhi.n	800b56e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b568:	4a1f      	ldr	r2, [pc, #124]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b56e:	4b20      	ldr	r3, [pc, #128]	; (800b5f0 <prvAddNewTaskToReadyList+0xd0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <prvAddNewTaskToReadyList+0xd0>)
 800b576:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b578:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <prvAddNewTaskToReadyList+0xd0>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b584:	4b1b      	ldr	r3, [pc, #108]	; (800b5f4 <prvAddNewTaskToReadyList+0xd4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d903      	bls.n	800b594 <prvAddNewTaskToReadyList+0x74>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	4a18      	ldr	r2, [pc, #96]	; (800b5f4 <prvAddNewTaskToReadyList+0xd4>)
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4a15      	ldr	r2, [pc, #84]	; (800b5f8 <prvAddNewTaskToReadyList+0xd8>)
 800b5a2:	441a      	add	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	f7fe fb1d 	bl	8009bea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5b0:	f7fe fcfa 	bl	8009fa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5b4:	4b0d      	ldr	r3, [pc, #52]	; (800b5ec <prvAddNewTaskToReadyList+0xcc>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00e      	beq.n	800b5da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5bc:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d207      	bcs.n	800b5da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <prvAddNewTaskToReadyList+0xdc>)
 800b5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5da:	bf00      	nop
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	24004880 	.word	0x24004880
 800b5e8:	240043ac 	.word	0x240043ac
 800b5ec:	2400488c 	.word	0x2400488c
 800b5f0:	2400489c 	.word	0x2400489c
 800b5f4:	24004888 	.word	0x24004888
 800b5f8:	240043b0 	.word	0x240043b0
 800b5fc:	e000ed04 	.word	0xe000ed04

0800b600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d016      	beq.n	800b640 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b612:	4b13      	ldr	r3, [pc, #76]	; (800b660 <vTaskDelay+0x60>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d009      	beq.n	800b62e <vTaskDelay+0x2e>
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	60bb      	str	r3, [r7, #8]
 800b62c:	e7fe      	b.n	800b62c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b62e:	f000 f87f 	bl	800b730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b632:	2100      	movs	r1, #0
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fdf5 	bl	800c224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b63a:	f000 f887 	bl	800b74c <xTaskResumeAll>
 800b63e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d107      	bne.n	800b656 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b646:	4b07      	ldr	r3, [pc, #28]	; (800b664 <vTaskDelay+0x64>)
 800b648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	240048a8 	.word	0x240048a8
 800b664:	e000ed04 	.word	0xe000ed04

0800b668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08a      	sub	sp, #40	; 0x28
 800b66c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b66e:	2300      	movs	r3, #0
 800b670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b672:	2300      	movs	r3, #0
 800b674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b676:	463a      	mov	r2, r7
 800b678:	1d39      	adds	r1, r7, #4
 800b67a:	f107 0308 	add.w	r3, r7, #8
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe f87c 	bl	800977c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	9202      	str	r2, [sp, #8]
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	2300      	movs	r3, #0
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	2300      	movs	r3, #0
 800b694:	460a      	mov	r2, r1
 800b696:	4920      	ldr	r1, [pc, #128]	; (800b718 <vTaskStartScheduler+0xb0>)
 800b698:	4820      	ldr	r0, [pc, #128]	; (800b71c <vTaskStartScheduler+0xb4>)
 800b69a:	f7ff fe13 	bl	800b2c4 <xTaskCreateStatic>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4b1f      	ldr	r3, [pc, #124]	; (800b720 <vTaskStartScheduler+0xb8>)
 800b6a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6a4:	4b1e      	ldr	r3, [pc, #120]	; (800b720 <vTaskStartScheduler+0xb8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	617b      	str	r3, [r7, #20]
 800b6b0:	e001      	b.n	800b6b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d102      	bne.n	800b6c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b6bc:	f000 fe06 	bl	800c2cc <xTimerCreateTimerTask>
 800b6c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d115      	bne.n	800b6f4 <vTaskStartScheduler+0x8c>
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6da:	4b12      	ldr	r3, [pc, #72]	; (800b724 <vTaskStartScheduler+0xbc>)
 800b6dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6e2:	4b11      	ldr	r3, [pc, #68]	; (800b728 <vTaskStartScheduler+0xc0>)
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6e8:	4b10      	ldr	r3, [pc, #64]	; (800b72c <vTaskStartScheduler+0xc4>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6ee:	f7fe fb8f 	bl	8009e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6f2:	e00d      	b.n	800b710 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6fa:	d109      	bne.n	800b710 <vTaskStartScheduler+0xa8>
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	60fb      	str	r3, [r7, #12]
 800b70e:	e7fe      	b.n	800b70e <vTaskStartScheduler+0xa6>
}
 800b710:	bf00      	nop
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	080185e8 	.word	0x080185e8
 800b71c:	0800bd55 	.word	0x0800bd55
 800b720:	240048a4 	.word	0x240048a4
 800b724:	240048a0 	.word	0x240048a0
 800b728:	2400488c 	.word	0x2400488c
 800b72c:	24004884 	.word	0x24004884

0800b730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b734:	4b04      	ldr	r3, [pc, #16]	; (800b748 <vTaskSuspendAll+0x18>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	4a03      	ldr	r2, [pc, #12]	; (800b748 <vTaskSuspendAll+0x18>)
 800b73c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b73e:	bf00      	nop
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	240048a8 	.word	0x240048a8

0800b74c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b75a:	4b41      	ldr	r3, [pc, #260]	; (800b860 <xTaskResumeAll+0x114>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <xTaskResumeAll+0x2a>
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	e7fe      	b.n	800b774 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b776:	f7fe fbe9 	bl	8009f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b77a:	4b39      	ldr	r3, [pc, #228]	; (800b860 <xTaskResumeAll+0x114>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3b01      	subs	r3, #1
 800b780:	4a37      	ldr	r2, [pc, #220]	; (800b860 <xTaskResumeAll+0x114>)
 800b782:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b784:	4b36      	ldr	r3, [pc, #216]	; (800b860 <xTaskResumeAll+0x114>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d162      	bne.n	800b852 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b78c:	4b35      	ldr	r3, [pc, #212]	; (800b864 <xTaskResumeAll+0x118>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d05e      	beq.n	800b852 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b794:	e02f      	b.n	800b7f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b796:	4b34      	ldr	r3, [pc, #208]	; (800b868 <xTaskResumeAll+0x11c>)
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3318      	adds	r3, #24
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fa7e 	bl	8009ca4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe fa79 	bl	8009ca4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b6:	4b2d      	ldr	r3, [pc, #180]	; (800b86c <xTaskResumeAll+0x120>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d903      	bls.n	800b7c6 <xTaskResumeAll+0x7a>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <xTaskResumeAll+0x120>)
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4a27      	ldr	r2, [pc, #156]	; (800b870 <xTaskResumeAll+0x124>)
 800b7d4:	441a      	add	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4610      	mov	r0, r2
 800b7de:	f7fe fa04 	bl	8009bea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e6:	4b23      	ldr	r3, [pc, #140]	; (800b874 <xTaskResumeAll+0x128>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d302      	bcc.n	800b7f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b7f0:	4b21      	ldr	r3, [pc, #132]	; (800b878 <xTaskResumeAll+0x12c>)
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7f6:	4b1c      	ldr	r3, [pc, #112]	; (800b868 <xTaskResumeAll+0x11c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1cb      	bne.n	800b796 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b804:	f000 fb58 	bl	800beb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b808:	4b1c      	ldr	r3, [pc, #112]	; (800b87c <xTaskResumeAll+0x130>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d010      	beq.n	800b836 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b814:	f000 f858 	bl	800b8c8 <xTaskIncrementTick>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b81e:	4b16      	ldr	r3, [pc, #88]	; (800b878 <xTaskResumeAll+0x12c>)
 800b820:	2201      	movs	r2, #1
 800b822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3b01      	subs	r3, #1
 800b828:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1f1      	bne.n	800b814 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b830:	4b12      	ldr	r3, [pc, #72]	; (800b87c <xTaskResumeAll+0x130>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b836:	4b10      	ldr	r3, [pc, #64]	; (800b878 <xTaskResumeAll+0x12c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d009      	beq.n	800b852 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b83e:	2301      	movs	r3, #1
 800b840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b842:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <xTaskResumeAll+0x134>)
 800b844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b852:	f7fe fba9 	bl	8009fa8 <vPortExitCritical>

	return xAlreadyYielded;
 800b856:	68bb      	ldr	r3, [r7, #8]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	240048a8 	.word	0x240048a8
 800b864:	24004880 	.word	0x24004880
 800b868:	24004840 	.word	0x24004840
 800b86c:	24004888 	.word	0x24004888
 800b870:	240043b0 	.word	0x240043b0
 800b874:	240043ac 	.word	0x240043ac
 800b878:	24004894 	.word	0x24004894
 800b87c:	24004890 	.word	0x24004890
 800b880:	e000ed04 	.word	0xe000ed04

0800b884 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b88a:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <xTaskGetTickCount+0x1c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b890:	687b      	ldr	r3, [r7, #4]
}
 800b892:	4618      	mov	r0, r3
 800b894:	370c      	adds	r7, #12
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	24004884 	.word	0x24004884

0800b8a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8aa:	f7fe fc2b 	bl	800a104 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b8b2:	4b04      	ldr	r3, [pc, #16]	; (800b8c4 <xTaskGetTickCountFromISR+0x20>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8b8:	683b      	ldr	r3, [r7, #0]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	24004884 	.word	0x24004884

0800b8c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8d2:	4b4e      	ldr	r3, [pc, #312]	; (800ba0c <xTaskIncrementTick+0x144>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f040 8088 	bne.w	800b9ec <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8dc:	4b4c      	ldr	r3, [pc, #304]	; (800ba10 <xTaskIncrementTick+0x148>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8e4:	4a4a      	ldr	r2, [pc, #296]	; (800ba10 <xTaskIncrementTick+0x148>)
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d11f      	bne.n	800b930 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8f0:	4b48      	ldr	r3, [pc, #288]	; (800ba14 <xTaskIncrementTick+0x14c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d009      	beq.n	800b90e <xTaskIncrementTick+0x46>
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	603b      	str	r3, [r7, #0]
 800b90c:	e7fe      	b.n	800b90c <xTaskIncrementTick+0x44>
 800b90e:	4b41      	ldr	r3, [pc, #260]	; (800ba14 <xTaskIncrementTick+0x14c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	4b40      	ldr	r3, [pc, #256]	; (800ba18 <xTaskIncrementTick+0x150>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a3e      	ldr	r2, [pc, #248]	; (800ba14 <xTaskIncrementTick+0x14c>)
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	4a3e      	ldr	r2, [pc, #248]	; (800ba18 <xTaskIncrementTick+0x150>)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6013      	str	r3, [r2, #0]
 800b922:	4b3e      	ldr	r3, [pc, #248]	; (800ba1c <xTaskIncrementTick+0x154>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3301      	adds	r3, #1
 800b928:	4a3c      	ldr	r2, [pc, #240]	; (800ba1c <xTaskIncrementTick+0x154>)
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	f000 fac4 	bl	800beb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b930:	4b3b      	ldr	r3, [pc, #236]	; (800ba20 <xTaskIncrementTick+0x158>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	429a      	cmp	r2, r3
 800b938:	d349      	bcc.n	800b9ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b93a:	4b36      	ldr	r3, [pc, #216]	; (800ba14 <xTaskIncrementTick+0x14c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d104      	bne.n	800b94e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b944:	4b36      	ldr	r3, [pc, #216]	; (800ba20 <xTaskIncrementTick+0x158>)
 800b946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b94a:	601a      	str	r2, [r3, #0]
					break;
 800b94c:	e03f      	b.n	800b9ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b94e:	4b31      	ldr	r3, [pc, #196]	; (800ba14 <xTaskIncrementTick+0x14c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	429a      	cmp	r2, r3
 800b964:	d203      	bcs.n	800b96e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b966:	4a2e      	ldr	r2, [pc, #184]	; (800ba20 <xTaskIncrementTick+0x158>)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b96c:	e02f      	b.n	800b9ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	3304      	adds	r3, #4
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe f996 	bl	8009ca4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	3318      	adds	r3, #24
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe f98d 	bl	8009ca4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98e:	4b25      	ldr	r3, [pc, #148]	; (800ba24 <xTaskIncrementTick+0x15c>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	429a      	cmp	r2, r3
 800b994:	d903      	bls.n	800b99e <xTaskIncrementTick+0xd6>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99a:	4a22      	ldr	r2, [pc, #136]	; (800ba24 <xTaskIncrementTick+0x15c>)
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4a1f      	ldr	r2, [pc, #124]	; (800ba28 <xTaskIncrementTick+0x160>)
 800b9ac:	441a      	add	r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	f7fe f918 	bl	8009bea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9be:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <xTaskIncrementTick+0x164>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d3b8      	bcc.n	800b93a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9cc:	e7b5      	b.n	800b93a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9ce:	4b17      	ldr	r3, [pc, #92]	; (800ba2c <xTaskIncrementTick+0x164>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d4:	4914      	ldr	r1, [pc, #80]	; (800ba28 <xTaskIncrementTick+0x160>)
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	440b      	add	r3, r1
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d907      	bls.n	800b9f6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	e004      	b.n	800b9f6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b9ec:	4b10      	ldr	r3, [pc, #64]	; (800ba30 <xTaskIncrementTick+0x168>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	4a0f      	ldr	r2, [pc, #60]	; (800ba30 <xTaskIncrementTick+0x168>)
 800b9f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ba34 <xTaskIncrementTick+0x16c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba02:	697b      	ldr	r3, [r7, #20]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	240048a8 	.word	0x240048a8
 800ba10:	24004884 	.word	0x24004884
 800ba14:	24004838 	.word	0x24004838
 800ba18:	2400483c 	.word	0x2400483c
 800ba1c:	24004898 	.word	0x24004898
 800ba20:	240048a0 	.word	0x240048a0
 800ba24:	24004888 	.word	0x24004888
 800ba28:	240043b0 	.word	0x240043b0
 800ba2c:	240043ac 	.word	0x240043ac
 800ba30:	24004890 	.word	0x24004890
 800ba34:	24004894 	.word	0x24004894

0800ba38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba3e:	4b27      	ldr	r3, [pc, #156]	; (800badc <vTaskSwitchContext+0xa4>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba46:	4b26      	ldr	r3, [pc, #152]	; (800bae0 <vTaskSwitchContext+0xa8>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba4c:	e040      	b.n	800bad0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ba4e:	4b24      	ldr	r3, [pc, #144]	; (800bae0 <vTaskSwitchContext+0xa8>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba54:	4b23      	ldr	r3, [pc, #140]	; (800bae4 <vTaskSwitchContext+0xac>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	e00f      	b.n	800ba7c <vTaskSwitchContext+0x44>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d109      	bne.n	800ba76 <vTaskSwitchContext+0x3e>
 800ba62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	607b      	str	r3, [r7, #4]
 800ba74:	e7fe      	b.n	800ba74 <vTaskSwitchContext+0x3c>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	491a      	ldr	r1, [pc, #104]	; (800bae8 <vTaskSwitchContext+0xb0>)
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	440b      	add	r3, r1
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0e5      	beq.n	800ba5c <vTaskSwitchContext+0x24>
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	4613      	mov	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	4413      	add	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4a13      	ldr	r2, [pc, #76]	; (800bae8 <vTaskSwitchContext+0xb0>)
 800ba9c:	4413      	add	r3, r2
 800ba9e:	60bb      	str	r3, [r7, #8]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	605a      	str	r2, [r3, #4]
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	3308      	adds	r3, #8
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d104      	bne.n	800bac0 <vTaskSwitchContext+0x88>
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	605a      	str	r2, [r3, #4]
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	4a09      	ldr	r2, [pc, #36]	; (800baec <vTaskSwitchContext+0xb4>)
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	4a06      	ldr	r2, [pc, #24]	; (800bae4 <vTaskSwitchContext+0xac>)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6013      	str	r3, [r2, #0]
}
 800bad0:	bf00      	nop
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	240048a8 	.word	0x240048a8
 800bae0:	24004894 	.word	0x24004894
 800bae4:	24004888 	.word	0x24004888
 800bae8:	240043b0 	.word	0x240043b0
 800baec:	240043ac 	.word	0x240043ac

0800baf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d109      	bne.n	800bb14 <vTaskPlaceOnEventList+0x24>
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	60fb      	str	r3, [r7, #12]
 800bb12:	e7fe      	b.n	800bb12 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb14:	4b07      	ldr	r3, [pc, #28]	; (800bb34 <vTaskPlaceOnEventList+0x44>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	3318      	adds	r3, #24
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7fe f888 	bl	8009c32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb22:	2101      	movs	r1, #1
 800bb24:	6838      	ldr	r0, [r7, #0]
 800bb26:	f000 fb7d 	bl	800c224 <prvAddCurrentTaskToDelayedList>
}
 800bb2a:	bf00      	nop
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	240043ac 	.word	0x240043ac

0800bb38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d109      	bne.n	800bb5e <vTaskPlaceOnEventListRestricted+0x26>
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	e7fe      	b.n	800bb5c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb5e:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <vTaskPlaceOnEventListRestricted+0x50>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3318      	adds	r3, #24
 800bb64:	4619      	mov	r1, r3
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7fe f83f 	bl	8009bea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800bb72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb78:	6879      	ldr	r1, [r7, #4]
 800bb7a:	68b8      	ldr	r0, [r7, #8]
 800bb7c:	f000 fb52 	bl	800c224 <prvAddCurrentTaskToDelayedList>
	}
 800bb80:	bf00      	nop
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	240043ac 	.word	0x240043ac

0800bb8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d109      	bne.n	800bbb6 <xTaskRemoveFromEventList+0x2a>
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	e7fe      	b.n	800bbb4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3318      	adds	r3, #24
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe f872 	bl	8009ca4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <xTaskRemoveFromEventList+0xac>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d11d      	bne.n	800bc04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe f869 	bl	8009ca4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	4b19      	ldr	r3, [pc, #100]	; (800bc3c <xTaskRemoveFromEventList+0xb0>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d903      	bls.n	800bbe6 <xTaskRemoveFromEventList+0x5a>
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe2:	4a16      	ldr	r2, [pc, #88]	; (800bc3c <xTaskRemoveFromEventList+0xb0>)
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbea:	4613      	mov	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4a13      	ldr	r2, [pc, #76]	; (800bc40 <xTaskRemoveFromEventList+0xb4>)
 800bbf4:	441a      	add	r2, r3
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	f7fd fff4 	bl	8009bea <vListInsertEnd>
 800bc02:	e005      	b.n	800bc10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	3318      	adds	r3, #24
 800bc08:	4619      	mov	r1, r3
 800bc0a:	480e      	ldr	r0, [pc, #56]	; (800bc44 <xTaskRemoveFromEventList+0xb8>)
 800bc0c:	f7fd ffed 	bl	8009bea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc14:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <xTaskRemoveFromEventList+0xbc>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d905      	bls.n	800bc2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc22:	4b0a      	ldr	r3, [pc, #40]	; (800bc4c <xTaskRemoveFromEventList+0xc0>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e001      	b.n	800bc2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc2e:	697b      	ldr	r3, [r7, #20]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	240048a8 	.word	0x240048a8
 800bc3c:	24004888 	.word	0x24004888
 800bc40:	240043b0 	.word	0x240043b0
 800bc44:	24004840 	.word	0x24004840
 800bc48:	240043ac 	.word	0x240043ac
 800bc4c:	24004894 	.word	0x24004894

0800bc50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <vTaskInternalSetTimeOutState+0x24>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc60:	4b05      	ldr	r3, [pc, #20]	; (800bc78 <vTaskInternalSetTimeOutState+0x28>)
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	605a      	str	r2, [r3, #4]
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	24004898 	.word	0x24004898
 800bc78:	24004884 	.word	0x24004884

0800bc7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d109      	bne.n	800bca0 <xTaskCheckForTimeOut+0x24>
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	613b      	str	r3, [r7, #16]
 800bc9e:	e7fe      	b.n	800bc9e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d109      	bne.n	800bcba <xTaskCheckForTimeOut+0x3e>
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e7fe      	b.n	800bcb8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bcba:	f7fe f947 	bl	8009f4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcbe:	4b1d      	ldr	r3, [pc, #116]	; (800bd34 <xTaskCheckForTimeOut+0xb8>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	69ba      	ldr	r2, [r7, #24]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcd6:	d102      	bne.n	800bcde <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	61fb      	str	r3, [r7, #28]
 800bcdc:	e023      	b.n	800bd26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <xTaskCheckForTimeOut+0xbc>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d007      	beq.n	800bcfa <xTaskCheckForTimeOut+0x7e>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d302      	bcc.n	800bcfa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	61fb      	str	r3, [r7, #28]
 800bcf8:	e015      	b.n	800bd26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d20b      	bcs.n	800bd1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	1ad2      	subs	r2, r2, r3
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7ff ff9d 	bl	800bc50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd16:	2300      	movs	r3, #0
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e004      	b.n	800bd26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd22:	2301      	movs	r3, #1
 800bd24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd26:	f7fe f93f 	bl	8009fa8 <vPortExitCritical>

	return xReturn;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3720      	adds	r7, #32
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	24004884 	.word	0x24004884
 800bd38:	24004898 	.word	0x24004898

0800bd3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd40:	4b03      	ldr	r3, [pc, #12]	; (800bd50 <vTaskMissedYield+0x14>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
}
 800bd46:	bf00      	nop
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	24004894 	.word	0x24004894

0800bd54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd5c:	f000 f852 	bl	800be04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd60:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <prvIdleTask+0x28>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d9f9      	bls.n	800bd5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd68:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <prvIdleTask+0x2c>)
 800bd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd78:	e7f0      	b.n	800bd5c <prvIdleTask+0x8>
 800bd7a:	bf00      	nop
 800bd7c:	240043b0 	.word	0x240043b0
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	607b      	str	r3, [r7, #4]
 800bd8e:	e00c      	b.n	800bdaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4a12      	ldr	r2, [pc, #72]	; (800bde4 <prvInitialiseTaskLists+0x60>)
 800bd9c:	4413      	add	r3, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fd fef6 	bl	8009b90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3301      	adds	r3, #1
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b37      	cmp	r3, #55	; 0x37
 800bdae:	d9ef      	bls.n	800bd90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdb0:	480d      	ldr	r0, [pc, #52]	; (800bde8 <prvInitialiseTaskLists+0x64>)
 800bdb2:	f7fd feed 	bl	8009b90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdb6:	480d      	ldr	r0, [pc, #52]	; (800bdec <prvInitialiseTaskLists+0x68>)
 800bdb8:	f7fd feea 	bl	8009b90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdbc:	480c      	ldr	r0, [pc, #48]	; (800bdf0 <prvInitialiseTaskLists+0x6c>)
 800bdbe:	f7fd fee7 	bl	8009b90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdc2:	480c      	ldr	r0, [pc, #48]	; (800bdf4 <prvInitialiseTaskLists+0x70>)
 800bdc4:	f7fd fee4 	bl	8009b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdc8:	480b      	ldr	r0, [pc, #44]	; (800bdf8 <prvInitialiseTaskLists+0x74>)
 800bdca:	f7fd fee1 	bl	8009b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdce:	4b0b      	ldr	r3, [pc, #44]	; (800bdfc <prvInitialiseTaskLists+0x78>)
 800bdd0:	4a05      	ldr	r2, [pc, #20]	; (800bde8 <prvInitialiseTaskLists+0x64>)
 800bdd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <prvInitialiseTaskLists+0x7c>)
 800bdd6:	4a05      	ldr	r2, [pc, #20]	; (800bdec <prvInitialiseTaskLists+0x68>)
 800bdd8:	601a      	str	r2, [r3, #0]
}
 800bdda:	bf00      	nop
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	240043b0 	.word	0x240043b0
 800bde8:	24004810 	.word	0x24004810
 800bdec:	24004824 	.word	0x24004824
 800bdf0:	24004840 	.word	0x24004840
 800bdf4:	24004854 	.word	0x24004854
 800bdf8:	2400486c 	.word	0x2400486c
 800bdfc:	24004838 	.word	0x24004838
 800be00:	2400483c 	.word	0x2400483c

0800be04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be0a:	e019      	b.n	800be40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be0c:	f7fe f89e 	bl	8009f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be10:	4b0f      	ldr	r3, [pc, #60]	; (800be50 <prvCheckTasksWaitingTermination+0x4c>)
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3304      	adds	r3, #4
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fd ff41 	bl	8009ca4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be22:	4b0c      	ldr	r3, [pc, #48]	; (800be54 <prvCheckTasksWaitingTermination+0x50>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3b01      	subs	r3, #1
 800be28:	4a0a      	ldr	r2, [pc, #40]	; (800be54 <prvCheckTasksWaitingTermination+0x50>)
 800be2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <prvCheckTasksWaitingTermination+0x54>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3b01      	subs	r3, #1
 800be32:	4a09      	ldr	r2, [pc, #36]	; (800be58 <prvCheckTasksWaitingTermination+0x54>)
 800be34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be36:	f7fe f8b7 	bl	8009fa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f80e 	bl	800be5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be40:	4b05      	ldr	r3, [pc, #20]	; (800be58 <prvCheckTasksWaitingTermination+0x54>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1e1      	bne.n	800be0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	24004854 	.word	0x24004854
 800be54:	24004880 	.word	0x24004880
 800be58:	24004868 	.word	0x24004868

0800be5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d108      	bne.n	800be80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be72:	4618      	mov	r0, r3
 800be74:	f7fd fd78 	bl	8009968 <vPortFree>
				vPortFree( pxTCB );
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7fd fd75 	bl	8009968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be7e:	e017      	b.n	800beb0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be86:	2b01      	cmp	r3, #1
 800be88:	d103      	bne.n	800be92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7fd fd6c 	bl	8009968 <vPortFree>
	}
 800be90:	e00e      	b.n	800beb0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d009      	beq.n	800beb0 <prvDeleteTCB+0x54>
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	60fb      	str	r3, [r7, #12]
 800beae:	e7fe      	b.n	800beae <prvDeleteTCB+0x52>
	}
 800beb0:	bf00      	nop
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bebe:	4b0c      	ldr	r3, [pc, #48]	; (800bef0 <prvResetNextTaskUnblockTime+0x38>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d104      	bne.n	800bed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bec8:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <prvResetNextTaskUnblockTime+0x3c>)
 800beca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bed0:	e008      	b.n	800bee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed2:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <prvResetNextTaskUnblockTime+0x38>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	4a04      	ldr	r2, [pc, #16]	; (800bef4 <prvResetNextTaskUnblockTime+0x3c>)
 800bee2:	6013      	str	r3, [r2, #0]
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr
 800bef0:	24004838 	.word	0x24004838
 800bef4:	240048a0 	.word	0x240048a0

0800bef8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800befe:	4b05      	ldr	r3, [pc, #20]	; (800bf14 <xTaskGetCurrentTaskHandle+0x1c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bf04:	687b      	ldr	r3, [r7, #4]
	}
 800bf06:	4618      	mov	r0, r3
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	240043ac 	.word	0x240043ac

0800bf18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <xTaskGetSchedulerState+0x34>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf26:	2301      	movs	r3, #1
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	e008      	b.n	800bf3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf2c:	4b08      	ldr	r3, [pc, #32]	; (800bf50 <xTaskGetSchedulerState+0x38>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d102      	bne.n	800bf3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf34:	2302      	movs	r3, #2
 800bf36:	607b      	str	r3, [r7, #4]
 800bf38:	e001      	b.n	800bf3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf3e:	687b      	ldr	r3, [r7, #4]
	}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	2400488c 	.word	0x2400488c
 800bf50:	240048a8 	.word	0x240048a8

0800bf54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf60:	2300      	movs	r3, #0
 800bf62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d051      	beq.n	800c00e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6e:	4b2a      	ldr	r3, [pc, #168]	; (800c018 <xTaskPriorityInherit+0xc4>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d241      	bcs.n	800bffc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	db06      	blt.n	800bf8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf80:	4b25      	ldr	r3, [pc, #148]	; (800c018 <xTaskPriorityInherit+0xc4>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6959      	ldr	r1, [r3, #20]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4a1f      	ldr	r2, [pc, #124]	; (800c01c <xTaskPriorityInherit+0xc8>)
 800bfa0:	4413      	add	r3, r2
 800bfa2:	4299      	cmp	r1, r3
 800bfa4:	d122      	bne.n	800bfec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fd fe7a 	bl	8009ca4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfb0:	4b19      	ldr	r3, [pc, #100]	; (800c018 <xTaskPriorityInherit+0xc4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbe:	4b18      	ldr	r3, [pc, #96]	; (800c020 <xTaskPriorityInherit+0xcc>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d903      	bls.n	800bfce <xTaskPriorityInherit+0x7a>
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfca:	4a15      	ldr	r2, [pc, #84]	; (800c020 <xTaskPriorityInherit+0xcc>)
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4a10      	ldr	r2, [pc, #64]	; (800c01c <xTaskPriorityInherit+0xc8>)
 800bfdc:	441a      	add	r2, r3
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	f7fd fe00 	bl	8009bea <vListInsertEnd>
 800bfea:	e004      	b.n	800bff6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfec:	4b0a      	ldr	r3, [pc, #40]	; (800c018 <xTaskPriorityInherit+0xc4>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bff6:	2301      	movs	r3, #1
 800bff8:	60fb      	str	r3, [r7, #12]
 800bffa:	e008      	b.n	800c00e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <xTaskPriorityInherit+0xc4>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	429a      	cmp	r2, r3
 800c008:	d201      	bcs.n	800c00e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c00a:	2301      	movs	r3, #1
 800c00c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c00e:	68fb      	ldr	r3, [r7, #12]
	}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	240043ac 	.word	0x240043ac
 800c01c:	240043b0 	.word	0x240043b0
 800c020:	24004888 	.word	0x24004888

0800c024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c030:	2300      	movs	r3, #0
 800c032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d054      	beq.n	800c0e4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c03a:	4b2d      	ldr	r3, [pc, #180]	; (800c0f0 <xTaskPriorityDisinherit+0xcc>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	429a      	cmp	r2, r3
 800c042:	d009      	beq.n	800c058 <xTaskPriorityDisinherit+0x34>
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e7fe      	b.n	800c056 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d109      	bne.n	800c074 <xTaskPriorityDisinherit+0x50>
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	60bb      	str	r3, [r7, #8]
 800c072:	e7fe      	b.n	800c072 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c078:	1e5a      	subs	r2, r3, #1
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c086:	429a      	cmp	r2, r3
 800c088:	d02c      	beq.n	800c0e4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d128      	bne.n	800c0e4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	3304      	adds	r3, #4
 800c096:	4618      	mov	r0, r3
 800c098:	f7fd fe04 	bl	8009ca4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b4:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <xTaskPriorityDisinherit+0xd0>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d903      	bls.n	800c0c4 <xTaskPriorityDisinherit+0xa0>
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c0:	4a0c      	ldr	r2, [pc, #48]	; (800c0f4 <xTaskPriorityDisinherit+0xd0>)
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4a09      	ldr	r2, [pc, #36]	; (800c0f8 <xTaskPriorityDisinherit+0xd4>)
 800c0d2:	441a      	add	r2, r3
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	4619      	mov	r1, r3
 800c0da:	4610      	mov	r0, r2
 800c0dc:	f7fd fd85 	bl	8009bea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0e4:	697b      	ldr	r3, [r7, #20]
	}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	240043ac 	.word	0x240043ac
 800c0f4:	24004888 	.word	0x24004888
 800c0f8:	240043b0 	.word	0x240043b0

0800c0fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c10a:	2301      	movs	r3, #1
 800c10c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d068      	beq.n	800c1e6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d109      	bne.n	800c130 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	e7fe      	b.n	800c12e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d902      	bls.n	800c140 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	61fb      	str	r3, [r7, #28]
 800c13e:	e002      	b.n	800c146 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c144:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14a:	69fa      	ldr	r2, [r7, #28]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d04a      	beq.n	800c1e6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	429a      	cmp	r2, r3
 800c158:	d145      	bne.n	800c1e6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c15a:	4b25      	ldr	r3, [pc, #148]	; (800c1f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	429a      	cmp	r2, r3
 800c162:	d109      	bne.n	800c178 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	60bb      	str	r3, [r7, #8]
 800c176:	e7fe      	b.n	800c176 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	69fa      	ldr	r2, [r7, #28]
 800c182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	db04      	blt.n	800c196 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	6959      	ldr	r1, [r3, #20]
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4a13      	ldr	r2, [pc, #76]	; (800c1f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c1a6:	4413      	add	r3, r2
 800c1a8:	4299      	cmp	r1, r3
 800c1aa:	d11c      	bne.n	800c1e6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fd fd77 	bl	8009ca4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	4b0f      	ldr	r3, [pc, #60]	; (800c1f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d903      	bls.n	800c1ca <vTaskPriorityDisinheritAfterTimeout+0xce>
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c6:	4a0c      	ldr	r2, [pc, #48]	; (800c1f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4a07      	ldr	r2, [pc, #28]	; (800c1f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c1d8:	441a      	add	r2, r3
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	f7fd fd02 	bl	8009bea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1e6:	bf00      	nop
 800c1e8:	3720      	adds	r7, #32
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	240043ac 	.word	0x240043ac
 800c1f4:	240043b0 	.word	0x240043b0
 800c1f8:	24004888 	.word	0x24004888

0800c1fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <pvTaskIncrementMutexHeldCount+0x24>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d004      	beq.n	800c212 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c208:	4b05      	ldr	r3, [pc, #20]	; (800c220 <pvTaskIncrementMutexHeldCount+0x24>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c20e:	3201      	adds	r2, #1
 800c210:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c212:	4b03      	ldr	r3, [pc, #12]	; (800c220 <pvTaskIncrementMutexHeldCount+0x24>)
 800c214:	681b      	ldr	r3, [r3, #0]
	}
 800c216:	4618      	mov	r0, r3
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	240043ac 	.word	0x240043ac

0800c224 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c22e:	4b21      	ldr	r3, [pc, #132]	; (800c2b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c234:	4b20      	ldr	r3, [pc, #128]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3304      	adds	r3, #4
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fd fd32 	bl	8009ca4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c246:	d10a      	bne.n	800c25e <prvAddCurrentTaskToDelayedList+0x3a>
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d007      	beq.n	800c25e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c24e:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3304      	adds	r3, #4
 800c254:	4619      	mov	r1, r3
 800c256:	4819      	ldr	r0, [pc, #100]	; (800c2bc <prvAddCurrentTaskToDelayedList+0x98>)
 800c258:	f7fd fcc7 	bl	8009bea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c25c:	e026      	b.n	800c2ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4413      	add	r3, r2
 800c264:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c266:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	429a      	cmp	r2, r3
 800c274:	d209      	bcs.n	800c28a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c276:	4b12      	ldr	r3, [pc, #72]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	4b0f      	ldr	r3, [pc, #60]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3304      	adds	r3, #4
 800c280:	4619      	mov	r1, r3
 800c282:	4610      	mov	r0, r2
 800c284:	f7fd fcd5 	bl	8009c32 <vListInsert>
}
 800c288:	e010      	b.n	800c2ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c28a:	4b0e      	ldr	r3, [pc, #56]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3304      	adds	r3, #4
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	f7fd fccb 	bl	8009c32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c29c:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d202      	bcs.n	800c2ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2a6:	4a08      	ldr	r2, [pc, #32]	; (800c2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	6013      	str	r3, [r2, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	24004884 	.word	0x24004884
 800c2b8:	240043ac 	.word	0x240043ac
 800c2bc:	2400486c 	.word	0x2400486c
 800c2c0:	2400483c 	.word	0x2400483c
 800c2c4:	24004838 	.word	0x24004838
 800c2c8:	240048a0 	.word	0x240048a0

0800c2cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08a      	sub	sp, #40	; 0x28
 800c2d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2d6:	f000 faff 	bl	800c8d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2da:	4b1c      	ldr	r3, [pc, #112]	; (800c34c <xTimerCreateTimerTask+0x80>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d021      	beq.n	800c326 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2ea:	1d3a      	adds	r2, r7, #4
 800c2ec:	f107 0108 	add.w	r1, r7, #8
 800c2f0:	f107 030c 	add.w	r3, r7, #12
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fd fa5b 	bl	80097b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	9202      	str	r2, [sp, #8]
 800c302:	9301      	str	r3, [sp, #4]
 800c304:	2302      	movs	r3, #2
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	2300      	movs	r3, #0
 800c30a:	460a      	mov	r2, r1
 800c30c:	4910      	ldr	r1, [pc, #64]	; (800c350 <xTimerCreateTimerTask+0x84>)
 800c30e:	4811      	ldr	r0, [pc, #68]	; (800c354 <xTimerCreateTimerTask+0x88>)
 800c310:	f7fe ffd8 	bl	800b2c4 <xTaskCreateStatic>
 800c314:	4602      	mov	r2, r0
 800c316:	4b10      	ldr	r3, [pc, #64]	; (800c358 <xTimerCreateTimerTask+0x8c>)
 800c318:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c31a:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <xTimerCreateTimerTask+0x8c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c322:	2301      	movs	r3, #1
 800c324:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d109      	bne.n	800c340 <xTimerCreateTimerTask+0x74>
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	613b      	str	r3, [r7, #16]
 800c33e:	e7fe      	b.n	800c33e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c340:	697b      	ldr	r3, [r7, #20]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	240048dc 	.word	0x240048dc
 800c350:	080185f0 	.word	0x080185f0
 800c354:	0800c48d 	.word	0x0800c48d
 800c358:	240048e0 	.word	0x240048e0

0800c35c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08a      	sub	sp, #40	; 0x28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d109      	bne.n	800c388 <xTimerGenericCommand+0x2c>
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	623b      	str	r3, [r7, #32]
 800c386:	e7fe      	b.n	800c386 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c388:	4b19      	ldr	r3, [pc, #100]	; (800c3f0 <xTimerGenericCommand+0x94>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d02a      	beq.n	800c3e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	2b05      	cmp	r3, #5
 800c3a0:	dc18      	bgt.n	800c3d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3a2:	f7ff fdb9 	bl	800bf18 <xTaskGetSchedulerState>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d109      	bne.n	800c3c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3ac:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <xTimerGenericCommand+0x94>)
 800c3ae:	6818      	ldr	r0, [r3, #0]
 800c3b0:	f107 0110 	add.w	r1, r7, #16
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b8:	f7fe f93a 	bl	800a630 <xQueueGenericSend>
 800c3bc:	6278      	str	r0, [r7, #36]	; 0x24
 800c3be:	e012      	b.n	800c3e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <xTimerGenericCommand+0x94>)
 800c3c2:	6818      	ldr	r0, [r3, #0]
 800c3c4:	f107 0110 	add.w	r1, r7, #16
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f7fe f930 	bl	800a630 <xQueueGenericSend>
 800c3d0:	6278      	str	r0, [r7, #36]	; 0x24
 800c3d2:	e008      	b.n	800c3e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3d4:	4b06      	ldr	r3, [pc, #24]	; (800c3f0 <xTimerGenericCommand+0x94>)
 800c3d6:	6818      	ldr	r0, [r3, #0]
 800c3d8:	f107 0110 	add.w	r1, r7, #16
 800c3dc:	2300      	movs	r3, #0
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	f7fe fa20 	bl	800a824 <xQueueGenericSendFromISR>
 800c3e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3728      	adds	r7, #40	; 0x28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	240048dc 	.word	0x240048dc

0800c3f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b088      	sub	sp, #32
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3fe:	4b22      	ldr	r3, [pc, #136]	; (800c488 <prvProcessExpiredTimer+0x94>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	3304      	adds	r3, #4
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fc49 	bl	8009ca4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c418:	f003 0304 	and.w	r3, r3, #4
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d021      	beq.n	800c464 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	699a      	ldr	r2, [r3, #24]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	18d1      	adds	r1, r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	6978      	ldr	r0, [r7, #20]
 800c42e:	f000 f8d1 	bl	800c5d4 <prvInsertTimerInActiveList>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01e      	beq.n	800c476 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c438:	2300      	movs	r3, #0
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	2300      	movs	r3, #0
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	2100      	movs	r1, #0
 800c442:	6978      	ldr	r0, [r7, #20]
 800c444:	f7ff ff8a 	bl	800c35c <xTimerGenericCommand>
 800c448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d112      	bne.n	800c476 <prvProcessExpiredTimer+0x82>
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	e7fe      	b.n	800c462 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c46a:	f023 0301 	bic.w	r3, r3, #1
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	6978      	ldr	r0, [r7, #20]
 800c47c:	4798      	blx	r3
}
 800c47e:	bf00      	nop
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	240048d4 	.word	0x240048d4

0800c48c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c494:	f107 0308 	add.w	r3, r7, #8
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 f857 	bl	800c54c <prvGetNextExpireTime>
 800c49e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 f803 	bl	800c4b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4aa:	f000 f8d5 	bl	800c658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4ae:	e7f1      	b.n	800c494 <prvTimerTask+0x8>

0800c4b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4ba:	f7ff f939 	bl	800b730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4be:	f107 0308 	add.w	r3, r7, #8
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 f866 	bl	800c594 <prvSampleTimeNow>
 800c4c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d130      	bne.n	800c532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10a      	bne.n	800c4ec <prvProcessTimerOrBlockTask+0x3c>
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d806      	bhi.n	800c4ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4de:	f7ff f935 	bl	800b74c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4e2:	68f9      	ldr	r1, [r7, #12]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7ff ff85 	bl	800c3f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4ea:	e024      	b.n	800c536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d008      	beq.n	800c504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4f2:	4b13      	ldr	r3, [pc, #76]	; (800c540 <prvProcessTimerOrBlockTask+0x90>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d101      	bne.n	800c500 <prvProcessTimerOrBlockTask+0x50>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e000      	b.n	800c502 <prvProcessTimerOrBlockTask+0x52>
 800c500:	2300      	movs	r3, #0
 800c502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c504:	4b0f      	ldr	r3, [pc, #60]	; (800c544 <prvProcessTimerOrBlockTask+0x94>)
 800c506:	6818      	ldr	r0, [r3, #0]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	f7fe fea3 	bl	800b25c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c516:	f7ff f919 	bl	800b74c <xTaskResumeAll>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10a      	bne.n	800c536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c520:	4b09      	ldr	r3, [pc, #36]	; (800c548 <prvProcessTimerOrBlockTask+0x98>)
 800c522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
}
 800c530:	e001      	b.n	800c536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c532:	f7ff f90b 	bl	800b74c <xTaskResumeAll>
}
 800c536:	bf00      	nop
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	240048d8 	.word	0x240048d8
 800c544:	240048dc 	.word	0x240048dc
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c554:	4b0e      	ldr	r3, [pc, #56]	; (800c590 <prvGetNextExpireTime+0x44>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <prvGetNextExpireTime+0x16>
 800c55e:	2201      	movs	r2, #1
 800c560:	e000      	b.n	800c564 <prvGetNextExpireTime+0x18>
 800c562:	2200      	movs	r2, #0
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d105      	bne.n	800c57c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c570:	4b07      	ldr	r3, [pc, #28]	; (800c590 <prvGetNextExpireTime+0x44>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	e001      	b.n	800c580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c57c:	2300      	movs	r3, #0
 800c57e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c580:	68fb      	ldr	r3, [r7, #12]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	240048d4 	.word	0x240048d4

0800c594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c59c:	f7ff f972 	bl	800b884 <xTaskGetTickCount>
 800c5a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5a2:	4b0b      	ldr	r3, [pc, #44]	; (800c5d0 <prvSampleTimeNow+0x3c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d205      	bcs.n	800c5b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5ac:	f000 f930 	bl	800c810 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	e002      	b.n	800c5be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5be:	4a04      	ldr	r2, [pc, #16]	; (800c5d0 <prvSampleTimeNow+0x3c>)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	240048e4 	.word	0x240048e4

0800c5d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d812      	bhi.n	800c620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	429a      	cmp	r2, r3
 800c606:	d302      	bcc.n	800c60e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c608:	2301      	movs	r3, #1
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	e01b      	b.n	800c646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c60e:	4b10      	ldr	r3, [pc, #64]	; (800c650 <prvInsertTimerInActiveList+0x7c>)
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3304      	adds	r3, #4
 800c616:	4619      	mov	r1, r3
 800c618:	4610      	mov	r0, r2
 800c61a:	f7fd fb0a 	bl	8009c32 <vListInsert>
 800c61e:	e012      	b.n	800c646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	d206      	bcs.n	800c636 <prvInsertTimerInActiveList+0x62>
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d302      	bcc.n	800c636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c630:	2301      	movs	r3, #1
 800c632:	617b      	str	r3, [r7, #20]
 800c634:	e007      	b.n	800c646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c636:	4b07      	ldr	r3, [pc, #28]	; (800c654 <prvInsertTimerInActiveList+0x80>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3304      	adds	r3, #4
 800c63e:	4619      	mov	r1, r3
 800c640:	4610      	mov	r0, r2
 800c642:	f7fd faf6 	bl	8009c32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c646:	697b      	ldr	r3, [r7, #20]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	240048d8 	.word	0x240048d8
 800c654:	240048d4 	.word	0x240048d4

0800c658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08e      	sub	sp, #56	; 0x38
 800c65c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c65e:	e0c6      	b.n	800c7ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	da17      	bge.n	800c696 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c666:	1d3b      	adds	r3, r7, #4
 800c668:	3304      	adds	r3, #4
 800c66a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <prvProcessReceivedCommands+0x2e>
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	e7fe      	b.n	800c684 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c68c:	6850      	ldr	r0, [r2, #4]
 800c68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c690:	6892      	ldr	r2, [r2, #8]
 800c692:	4611      	mov	r1, r2
 800c694:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f2c0 80a7 	blt.w	800c7ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d004      	beq.n	800c6b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fd faf8 	bl	8009ca4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6b4:	463b      	mov	r3, r7
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff ff6c 	bl	800c594 <prvSampleTimeNow>
 800c6bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b09      	cmp	r3, #9
 800c6c2:	f200 8094 	bhi.w	800c7ee <prvProcessReceivedCommands+0x196>
 800c6c6:	a201      	add	r2, pc, #4	; (adr r2, 800c6cc <prvProcessReceivedCommands+0x74>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c6f5 	.word	0x0800c6f5
 800c6d0:	0800c6f5 	.word	0x0800c6f5
 800c6d4:	0800c6f5 	.word	0x0800c6f5
 800c6d8:	0800c767 	.word	0x0800c767
 800c6dc:	0800c77b 	.word	0x0800c77b
 800c6e0:	0800c7c3 	.word	0x0800c7c3
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c6f5 	.word	0x0800c6f5
 800c6ec:	0800c767 	.word	0x0800c767
 800c6f0:	0800c77b 	.word	0x0800c77b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6fa:	f043 0301 	orr.w	r3, r3, #1
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	18d1      	adds	r1, r2, r3
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c714:	f7ff ff5e 	bl	800c5d4 <prvInsertTimerInActiveList>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d067      	beq.n	800c7ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d05c      	beq.n	800c7ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	441a      	add	r2, r3
 800c73c:	2300      	movs	r3, #0
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	2300      	movs	r3, #0
 800c742:	2100      	movs	r1, #0
 800c744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c746:	f7ff fe09 	bl	800c35c <xTimerGenericCommand>
 800c74a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d14d      	bne.n	800c7ee <prvProcessReceivedCommands+0x196>
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	61bb      	str	r3, [r7, #24]
 800c764:	e7fe      	b.n	800c764 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c76c:	f023 0301 	bic.w	r3, r3, #1
 800c770:	b2da      	uxtb	r2, r3
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c778:	e039      	b.n	800c7ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c780:	f043 0301 	orr.w	r3, r3, #1
 800c784:	b2da      	uxtb	r2, r3
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d109      	bne.n	800c7ae <prvProcessReceivedCommands+0x156>
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	617b      	str	r3, [r7, #20]
 800c7ac:	e7fe      	b.n	800c7ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	699a      	ldr	r2, [r3, #24]
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	18d1      	adds	r1, r2, r3
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7bc:	f7ff ff0a 	bl	800c5d4 <prvInsertTimerInActiveList>
					break;
 800c7c0:	e015      	b.n	800c7ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d2:	f7fd f8c9 	bl	8009968 <vPortFree>
 800c7d6:	e00a      	b.n	800c7ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7de:	f023 0301 	bic.w	r3, r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7ea:	e000      	b.n	800c7ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ee:	4b07      	ldr	r3, [pc, #28]	; (800c80c <prvProcessReceivedCommands+0x1b4>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	1d39      	adds	r1, r7, #4
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe f932 	bl	800aa60 <xQueueReceive>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f47f af2e 	bne.w	800c660 <prvProcessReceivedCommands+0x8>
	}
}
 800c804:	bf00      	nop
 800c806:	3730      	adds	r7, #48	; 0x30
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	240048dc 	.word	0x240048dc

0800c810 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c816:	e047      	b.n	800c8a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c818:	4b2d      	ldr	r3, [pc, #180]	; (800c8d0 <prvSwitchTimerLists+0xc0>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c822:	4b2b      	ldr	r3, [pc, #172]	; (800c8d0 <prvSwitchTimerLists+0xc0>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	3304      	adds	r3, #4
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd fa37 	bl	8009ca4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d02d      	beq.n	800c8a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	4413      	add	r3, r2
 800c854:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d90e      	bls.n	800c87c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c86a:	4b19      	ldr	r3, [pc, #100]	; (800c8d0 <prvSwitchTimerLists+0xc0>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3304      	adds	r3, #4
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7fd f9dc 	bl	8009c32 <vListInsert>
 800c87a:	e015      	b.n	800c8a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c87c:	2300      	movs	r3, #0
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	2300      	movs	r3, #0
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	2100      	movs	r1, #0
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f7ff fd68 	bl	800c35c <xTimerGenericCommand>
 800c88c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <prvSwitchTimerLists+0x98>
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	603b      	str	r3, [r7, #0]
 800c8a6:	e7fe      	b.n	800c8a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8a8:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <prvSwitchTimerLists+0xc0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1b2      	bne.n	800c818 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8b2:	4b07      	ldr	r3, [pc, #28]	; (800c8d0 <prvSwitchTimerLists+0xc0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8b8:	4b06      	ldr	r3, [pc, #24]	; (800c8d4 <prvSwitchTimerLists+0xc4>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a04      	ldr	r2, [pc, #16]	; (800c8d0 <prvSwitchTimerLists+0xc0>)
 800c8be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8c0:	4a04      	ldr	r2, [pc, #16]	; (800c8d4 <prvSwitchTimerLists+0xc4>)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	6013      	str	r3, [r2, #0]
}
 800c8c6:	bf00      	nop
 800c8c8:	3718      	adds	r7, #24
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	240048d4 	.word	0x240048d4
 800c8d4:	240048d8 	.word	0x240048d8

0800c8d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8de:	f7fd fb35 	bl	8009f4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8e2:	4b15      	ldr	r3, [pc, #84]	; (800c938 <prvCheckForValidListAndQueue+0x60>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d120      	bne.n	800c92c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8ea:	4814      	ldr	r0, [pc, #80]	; (800c93c <prvCheckForValidListAndQueue+0x64>)
 800c8ec:	f7fd f950 	bl	8009b90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8f0:	4813      	ldr	r0, [pc, #76]	; (800c940 <prvCheckForValidListAndQueue+0x68>)
 800c8f2:	f7fd f94d 	bl	8009b90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8f6:	4b13      	ldr	r3, [pc, #76]	; (800c944 <prvCheckForValidListAndQueue+0x6c>)
 800c8f8:	4a10      	ldr	r2, [pc, #64]	; (800c93c <prvCheckForValidListAndQueue+0x64>)
 800c8fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8fc:	4b12      	ldr	r3, [pc, #72]	; (800c948 <prvCheckForValidListAndQueue+0x70>)
 800c8fe:	4a10      	ldr	r2, [pc, #64]	; (800c940 <prvCheckForValidListAndQueue+0x68>)
 800c900:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c902:	2300      	movs	r3, #0
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	4b11      	ldr	r3, [pc, #68]	; (800c94c <prvCheckForValidListAndQueue+0x74>)
 800c908:	4a11      	ldr	r2, [pc, #68]	; (800c950 <prvCheckForValidListAndQueue+0x78>)
 800c90a:	2110      	movs	r1, #16
 800c90c:	200a      	movs	r0, #10
 800c90e:	f7fd fc9f 	bl	800a250 <xQueueGenericCreateStatic>
 800c912:	4602      	mov	r2, r0
 800c914:	4b08      	ldr	r3, [pc, #32]	; (800c938 <prvCheckForValidListAndQueue+0x60>)
 800c916:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c918:	4b07      	ldr	r3, [pc, #28]	; (800c938 <prvCheckForValidListAndQueue+0x60>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d005      	beq.n	800c92c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c920:	4b05      	ldr	r3, [pc, #20]	; (800c938 <prvCheckForValidListAndQueue+0x60>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	490b      	ldr	r1, [pc, #44]	; (800c954 <prvCheckForValidListAndQueue+0x7c>)
 800c926:	4618      	mov	r0, r3
 800c928:	f7fe fc46 	bl	800b1b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c92c:	f7fd fb3c 	bl	8009fa8 <vPortExitCritical>
}
 800c930:	bf00      	nop
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	240048dc 	.word	0x240048dc
 800c93c:	240048ac 	.word	0x240048ac
 800c940:	240048c0 	.word	0x240048c0
 800c944:	240048d4 	.word	0x240048d4
 800c948:	240048d8 	.word	0x240048d8
 800c94c:	24004988 	.word	0x24004988
 800c950:	240048e8 	.word	0x240048e8
 800c954:	080185f8 	.word	0x080185f8

0800c958 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	4603      	mov	r3, r0
 800c960:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c962:	88fb      	ldrh	r3, [r7, #6]
 800c964:	021b      	lsls	r3, r3, #8
 800c966:	b21a      	sxth	r2, r3
 800c968:	88fb      	ldrh	r3, [r7, #6]
 800c96a:	0a1b      	lsrs	r3, r3, #8
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	b21b      	sxth	r3, r3
 800c970:	4313      	orrs	r3, r2
 800c972:	b21b      	sxth	r3, r3
 800c974:	b29b      	uxth	r3, r3
}
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	061a      	lsls	r2, r3, #24
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	021b      	lsls	r3, r3, #8
 800c992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c996:	431a      	orrs	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	0a1b      	lsrs	r3, r3, #8
 800c99c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9a0:	431a      	orrs	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	0e1b      	lsrs	r3, r3, #24
 800c9a6:	4313      	orrs	r3, r2
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c9bc:	4915      	ldr	r1, [pc, #84]	; (800ca14 <etharp_free_entry+0x60>)
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	4413      	add	r3, r2
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	440b      	add	r3, r1
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d013      	beq.n	800c9f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c9d0:	4910      	ldr	r1, [pc, #64]	; (800ca14 <etharp_free_entry+0x60>)
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	4413      	add	r3, r2
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	440b      	add	r3, r1
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f003 ff4f 	bl	8010884 <pbuf_free>
    arp_table[i].q = NULL;
 800c9e6:	490b      	ldr	r1, [pc, #44]	; (800ca14 <etharp_free_entry+0x60>)
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	4413      	add	r3, r2
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	440b      	add	r3, r1
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c9f8:	4906      	ldr	r1, [pc, #24]	; (800ca14 <etharp_free_entry+0x60>)
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	4413      	add	r3, r2
 800ca02:	00db      	lsls	r3, r3, #3
 800ca04:	440b      	add	r3, r1
 800ca06:	3314      	adds	r3, #20
 800ca08:	2200      	movs	r2, #0
 800ca0a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ca0c:	bf00      	nop
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	240049d8 	.word	0x240049d8

0800ca18 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca1e:	2300      	movs	r3, #0
 800ca20:	607b      	str	r3, [r7, #4]
 800ca22:	e096      	b.n	800cb52 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ca24:	494f      	ldr	r1, [pc, #316]	; (800cb64 <etharp_tmr+0x14c>)
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	4413      	add	r3, r2
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	440b      	add	r3, r1
 800ca32:	3314      	adds	r3, #20
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ca38:	78fb      	ldrb	r3, [r7, #3]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 8086 	beq.w	800cb4c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ca40:	4948      	ldr	r1, [pc, #288]	; (800cb64 <etharp_tmr+0x14c>)
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	4613      	mov	r3, r2
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	4413      	add	r3, r2
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	440b      	add	r3, r1
 800ca4e:	3312      	adds	r3, #18
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	3301      	adds	r3, #1
 800ca54:	b298      	uxth	r0, r3
 800ca56:	4943      	ldr	r1, [pc, #268]	; (800cb64 <etharp_tmr+0x14c>)
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	4413      	add	r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	440b      	add	r3, r1
 800ca64:	3312      	adds	r3, #18
 800ca66:	4602      	mov	r2, r0
 800ca68:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ca6a:	493e      	ldr	r1, [pc, #248]	; (800cb64 <etharp_tmr+0x14c>)
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4413      	add	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	440b      	add	r3, r1
 800ca78:	3312      	adds	r3, #18
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ca80:	d215      	bcs.n	800caae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca82:	4938      	ldr	r1, [pc, #224]	; (800cb64 <etharp_tmr+0x14c>)
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	4613      	mov	r3, r2
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	4413      	add	r3, r2
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	440b      	add	r3, r1
 800ca90:	3314      	adds	r3, #20
 800ca92:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d10e      	bne.n	800cab6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ca98:	4932      	ldr	r1, [pc, #200]	; (800cb64 <etharp_tmr+0x14c>)
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	4413      	add	r3, r2
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	440b      	add	r3, r1
 800caa6:	3312      	adds	r3, #18
 800caa8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d903      	bls.n	800cab6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7ff ff80 	bl	800c9b4 <etharp_free_entry>
 800cab4:	e04a      	b.n	800cb4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cab6:	492b      	ldr	r1, [pc, #172]	; (800cb64 <etharp_tmr+0x14c>)
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	4613      	mov	r3, r2
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	4413      	add	r3, r2
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	440b      	add	r3, r1
 800cac4:	3314      	adds	r3, #20
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b03      	cmp	r3, #3
 800caca:	d10a      	bne.n	800cae2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cacc:	4925      	ldr	r1, [pc, #148]	; (800cb64 <etharp_tmr+0x14c>)
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4613      	mov	r3, r2
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	4413      	add	r3, r2
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	440b      	add	r3, r1
 800cada:	3314      	adds	r3, #20
 800cadc:	2204      	movs	r2, #4
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	e034      	b.n	800cb4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cae2:	4920      	ldr	r1, [pc, #128]	; (800cb64 <etharp_tmr+0x14c>)
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	4613      	mov	r3, r2
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	4413      	add	r3, r2
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	440b      	add	r3, r1
 800caf0:	3314      	adds	r3, #20
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d10a      	bne.n	800cb0e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800caf8:	491a      	ldr	r1, [pc, #104]	; (800cb64 <etharp_tmr+0x14c>)
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	4613      	mov	r3, r2
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	4413      	add	r3, r2
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	440b      	add	r3, r1
 800cb06:	3314      	adds	r3, #20
 800cb08:	2202      	movs	r2, #2
 800cb0a:	701a      	strb	r2, [r3, #0]
 800cb0c:	e01e      	b.n	800cb4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb0e:	4915      	ldr	r1, [pc, #84]	; (800cb64 <etharp_tmr+0x14c>)
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	4613      	mov	r3, r2
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	4413      	add	r3, r2
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	440b      	add	r3, r1
 800cb1c:	3314      	adds	r3, #20
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d113      	bne.n	800cb4c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cb24:	490f      	ldr	r1, [pc, #60]	; (800cb64 <etharp_tmr+0x14c>)
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	4613      	mov	r3, r2
 800cb2a:	005b      	lsls	r3, r3, #1
 800cb2c:	4413      	add	r3, r2
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	440b      	add	r3, r1
 800cb32:	3308      	adds	r3, #8
 800cb34:	6818      	ldr	r0, [r3, #0]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	4613      	mov	r3, r2
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	4413      	add	r3, r2
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <etharp_tmr+0x14c>)
 800cb42:	4413      	add	r3, r2
 800cb44:	3304      	adds	r3, #4
 800cb46:	4619      	mov	r1, r3
 800cb48:	f000 fe6e 	bl	800d828 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	607b      	str	r3, [r7, #4]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b09      	cmp	r3, #9
 800cb56:	f77f af65 	ble.w	800ca24 <etharp_tmr+0xc>
      }
    }
  }
}
 800cb5a:	bf00      	nop
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	240049d8 	.word	0x240049d8

0800cb68 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08a      	sub	sp, #40	; 0x28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	460b      	mov	r3, r1
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cb76:	230a      	movs	r3, #10
 800cb78:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cb7a:	230a      	movs	r3, #10
 800cb7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cb7e:	230a      	movs	r3, #10
 800cb80:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cb86:	230a      	movs	r3, #10
 800cb88:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	83bb      	strh	r3, [r7, #28]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	837b      	strh	r3, [r7, #26]
 800cb92:	2300      	movs	r3, #0
 800cb94:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb96:	2300      	movs	r3, #0
 800cb98:	843b      	strh	r3, [r7, #32]
 800cb9a:	e0ae      	b.n	800ccfa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cb9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cba0:	49a6      	ldr	r1, [pc, #664]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cba2:	4613      	mov	r3, r2
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	4413      	add	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	440b      	add	r3, r1
 800cbac:	3314      	adds	r3, #20
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cbb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cbb6:	2b0a      	cmp	r3, #10
 800cbb8:	d105      	bne.n	800cbc6 <etharp_find_entry+0x5e>
 800cbba:	7dfb      	ldrb	r3, [r7, #23]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d102      	bne.n	800cbc6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cbc0:	8c3b      	ldrh	r3, [r7, #32]
 800cbc2:	847b      	strh	r3, [r7, #34]	; 0x22
 800cbc4:	e095      	b.n	800ccf2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f000 8092 	beq.w	800ccf2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d009      	beq.n	800cbe8 <etharp_find_entry+0x80>
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d806      	bhi.n	800cbe8 <etharp_find_entry+0x80>
 800cbda:	4b99      	ldr	r3, [pc, #612]	; (800ce40 <etharp_find_entry+0x2d8>)
 800cbdc:	f44f 7292 	mov.w	r2, #292	; 0x124
 800cbe0:	4998      	ldr	r1, [pc, #608]	; (800ce44 <etharp_find_entry+0x2dc>)
 800cbe2:	4899      	ldr	r0, [pc, #612]	; (800ce48 <etharp_find_entry+0x2e0>)
 800cbe4:	f00a fbc6 	bl	8017374 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d020      	beq.n	800cc30 <etharp_find_entry+0xc8>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6819      	ldr	r1, [r3, #0]
 800cbf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbf6:	4891      	ldr	r0, [pc, #580]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	005b      	lsls	r3, r3, #1
 800cbfc:	4413      	add	r3, r2
 800cbfe:	00db      	lsls	r3, r3, #3
 800cc00:	4403      	add	r3, r0
 800cc02:	3304      	adds	r3, #4
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4299      	cmp	r1, r3
 800cc08:	d112      	bne.n	800cc30 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00c      	beq.n	800cc2a <etharp_find_entry+0xc2>
 800cc10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc14:	4989      	ldr	r1, [pc, #548]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cc16:	4613      	mov	r3, r2
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	4413      	add	r3, r2
 800cc1c:	00db      	lsls	r3, r3, #3
 800cc1e:	440b      	add	r3, r1
 800cc20:	3308      	adds	r3, #8
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d102      	bne.n	800cc30 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cc2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc2e:	e100      	b.n	800ce32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cc30:	7dfb      	ldrb	r3, [r7, #23]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d140      	bne.n	800ccb8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cc36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc3a:	4980      	ldr	r1, [pc, #512]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	4413      	add	r3, r2
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	440b      	add	r3, r1
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01a      	beq.n	800cc82 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cc4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc50:	497a      	ldr	r1, [pc, #488]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cc52:	4613      	mov	r3, r2
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	4413      	add	r3, r2
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	440b      	add	r3, r1
 800cc5c:	3312      	adds	r3, #18
 800cc5e:	881b      	ldrh	r3, [r3, #0]
 800cc60:	8bba      	ldrh	r2, [r7, #28]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d845      	bhi.n	800ccf2 <etharp_find_entry+0x18a>
            old_queue = i;
 800cc66:	8c3b      	ldrh	r3, [r7, #32]
 800cc68:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cc6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc6e:	4973      	ldr	r1, [pc, #460]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cc70:	4613      	mov	r3, r2
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	4413      	add	r3, r2
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	440b      	add	r3, r1
 800cc7a:	3312      	adds	r3, #18
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	83bb      	strh	r3, [r7, #28]
 800cc80:	e037      	b.n	800ccf2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cc82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc86:	496d      	ldr	r1, [pc, #436]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cc88:	4613      	mov	r3, r2
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	4413      	add	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	440b      	add	r3, r1
 800cc92:	3312      	adds	r3, #18
 800cc94:	881b      	ldrh	r3, [r3, #0]
 800cc96:	8b7a      	ldrh	r2, [r7, #26]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d82a      	bhi.n	800ccf2 <etharp_find_entry+0x18a>
            old_pending = i;
 800cc9c:	8c3b      	ldrh	r3, [r7, #32]
 800cc9e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cca0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cca4:	4965      	ldr	r1, [pc, #404]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cca6:	4613      	mov	r3, r2
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	4413      	add	r3, r2
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	440b      	add	r3, r1
 800ccb0:	3312      	adds	r3, #18
 800ccb2:	881b      	ldrh	r3, [r3, #0]
 800ccb4:	837b      	strh	r3, [r7, #26]
 800ccb6:	e01c      	b.n	800ccf2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ccb8:	7dfb      	ldrb	r3, [r7, #23]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d919      	bls.n	800ccf2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ccbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccc2:	495e      	ldr	r1, [pc, #376]	; (800ce3c <etharp_find_entry+0x2d4>)
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	440b      	add	r3, r1
 800ccce:	3312      	adds	r3, #18
 800ccd0:	881b      	ldrh	r3, [r3, #0]
 800ccd2:	8b3a      	ldrh	r2, [r7, #24]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d80c      	bhi.n	800ccf2 <etharp_find_entry+0x18a>
            old_stable = i;
 800ccd8:	8c3b      	ldrh	r3, [r7, #32]
 800ccda:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ccdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cce0:	4956      	ldr	r1, [pc, #344]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	440b      	add	r3, r1
 800ccec:	3312      	adds	r3, #18
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccf2:	8c3b      	ldrh	r3, [r7, #32]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	843b      	strh	r3, [r7, #32]
 800ccfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccfe:	2b09      	cmp	r3, #9
 800cd00:	f77f af4c 	ble.w	800cb9c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cd04:	7afb      	ldrb	r3, [r7, #11]
 800cd06:	f003 0302 	and.w	r3, r3, #2
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d108      	bne.n	800cd20 <etharp_find_entry+0x1b8>
 800cd0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd12:	2b0a      	cmp	r3, #10
 800cd14:	d107      	bne.n	800cd26 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cd16:	7afb      	ldrb	r3, [r7, #11]
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d102      	bne.n	800cd26 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cd20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd24:	e085      	b.n	800ce32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cd26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd2a:	2b09      	cmp	r3, #9
 800cd2c:	dc02      	bgt.n	800cd34 <etharp_find_entry+0x1cc>
    i = empty;
 800cd2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd30:	843b      	strh	r3, [r7, #32]
 800cd32:	e039      	b.n	800cda8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cd34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cd38:	2b09      	cmp	r3, #9
 800cd3a:	dc14      	bgt.n	800cd66 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cd3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd3e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cd40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd44:	493d      	ldr	r1, [pc, #244]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cd46:	4613      	mov	r3, r2
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	4413      	add	r3, r2
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	440b      	add	r3, r1
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d018      	beq.n	800cd88 <etharp_find_entry+0x220>
 800cd56:	4b3a      	ldr	r3, [pc, #232]	; (800ce40 <etharp_find_entry+0x2d8>)
 800cd58:	f240 126d 	movw	r2, #365	; 0x16d
 800cd5c:	493b      	ldr	r1, [pc, #236]	; (800ce4c <etharp_find_entry+0x2e4>)
 800cd5e:	483a      	ldr	r0, [pc, #232]	; (800ce48 <etharp_find_entry+0x2e0>)
 800cd60:	f00a fb08 	bl	8017374 <iprintf>
 800cd64:	e010      	b.n	800cd88 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cd66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cd6a:	2b09      	cmp	r3, #9
 800cd6c:	dc02      	bgt.n	800cd74 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cd6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd70:	843b      	strh	r3, [r7, #32]
 800cd72:	e009      	b.n	800cd88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cd74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cd78:	2b09      	cmp	r3, #9
 800cd7a:	dc02      	bgt.n	800cd82 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cd7c:	8bfb      	ldrh	r3, [r7, #30]
 800cd7e:	843b      	strh	r3, [r7, #32]
 800cd80:	e002      	b.n	800cd88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cd82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd86:	e054      	b.n	800ce32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd8c:	2b09      	cmp	r3, #9
 800cd8e:	dd06      	ble.n	800cd9e <etharp_find_entry+0x236>
 800cd90:	4b2b      	ldr	r3, [pc, #172]	; (800ce40 <etharp_find_entry+0x2d8>)
 800cd92:	f240 127f 	movw	r2, #383	; 0x17f
 800cd96:	492e      	ldr	r1, [pc, #184]	; (800ce50 <etharp_find_entry+0x2e8>)
 800cd98:	482b      	ldr	r0, [pc, #172]	; (800ce48 <etharp_find_entry+0x2e0>)
 800cd9a:	f00a faeb 	bl	8017374 <iprintf>
    etharp_free_entry(i);
 800cd9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7ff fe06 	bl	800c9b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cda8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cdac:	2b09      	cmp	r3, #9
 800cdae:	dd06      	ble.n	800cdbe <etharp_find_entry+0x256>
 800cdb0:	4b23      	ldr	r3, [pc, #140]	; (800ce40 <etharp_find_entry+0x2d8>)
 800cdb2:	f240 1283 	movw	r2, #387	; 0x183
 800cdb6:	4926      	ldr	r1, [pc, #152]	; (800ce50 <etharp_find_entry+0x2e8>)
 800cdb8:	4823      	ldr	r0, [pc, #140]	; (800ce48 <etharp_find_entry+0x2e0>)
 800cdba:	f00a fadb 	bl	8017374 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cdbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdc2:	491e      	ldr	r1, [pc, #120]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	4413      	add	r3, r2
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	440b      	add	r3, r1
 800cdce:	3314      	adds	r3, #20
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d006      	beq.n	800cde4 <etharp_find_entry+0x27c>
 800cdd6:	4b1a      	ldr	r3, [pc, #104]	; (800ce40 <etharp_find_entry+0x2d8>)
 800cdd8:	f240 1285 	movw	r2, #389	; 0x185
 800cddc:	491d      	ldr	r1, [pc, #116]	; (800ce54 <etharp_find_entry+0x2ec>)
 800cdde:	481a      	ldr	r0, [pc, #104]	; (800ce48 <etharp_find_entry+0x2e0>)
 800cde0:	f00a fac8 	bl	8017374 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00b      	beq.n	800ce02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cdea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6819      	ldr	r1, [r3, #0]
 800cdf2:	4812      	ldr	r0, [pc, #72]	; (800ce3c <etharp_find_entry+0x2d4>)
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	4403      	add	r3, r0
 800cdfe:	3304      	adds	r3, #4
 800ce00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ce02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce06:	490d      	ldr	r1, [pc, #52]	; (800ce3c <etharp_find_entry+0x2d4>)
 800ce08:	4613      	mov	r3, r2
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	4413      	add	r3, r2
 800ce0e:	00db      	lsls	r3, r3, #3
 800ce10:	440b      	add	r3, r1
 800ce12:	3312      	adds	r3, #18
 800ce14:	2200      	movs	r2, #0
 800ce16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ce18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce1c:	4907      	ldr	r1, [pc, #28]	; (800ce3c <etharp_find_entry+0x2d4>)
 800ce1e:	4613      	mov	r3, r2
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	4413      	add	r3, r2
 800ce24:	00db      	lsls	r3, r3, #3
 800ce26:	440b      	add	r3, r1
 800ce28:	3308      	adds	r3, #8
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ce2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3728      	adds	r7, #40	; 0x28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	240049d8 	.word	0x240049d8
 800ce40:	08018600 	.word	0x08018600
 800ce44:	0801866c 	.word	0x0801866c
 800ce48:	080186ac 	.word	0x080186ac
 800ce4c:	080186d4 	.word	0x080186d4
 800ce50:	080186ec 	.word	0x080186ec
 800ce54:	08018700 	.word	0x08018700

0800ce58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b088      	sub	sp, #32
 800ce5c:	af02      	add	r7, sp, #8
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce6c:	2b06      	cmp	r3, #6
 800ce6e:	d006      	beq.n	800ce7e <etharp_update_arp_entry+0x26>
 800ce70:	4b48      	ldr	r3, [pc, #288]	; (800cf94 <etharp_update_arp_entry+0x13c>)
 800ce72:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ce76:	4948      	ldr	r1, [pc, #288]	; (800cf98 <etharp_update_arp_entry+0x140>)
 800ce78:	4848      	ldr	r0, [pc, #288]	; (800cf9c <etharp_update_arp_entry+0x144>)
 800ce7a:	f00a fa7b 	bl	8017374 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d012      	beq.n	800ceaa <etharp_update_arp_entry+0x52>
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00e      	beq.n	800ceaa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68f9      	ldr	r1, [r7, #12]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f001 facc 	bl	800e430 <ip4_addr_isbroadcast_u32>
 800ce98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d105      	bne.n	800ceaa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cea6:	2be0      	cmp	r3, #224	; 0xe0
 800cea8:	d102      	bne.n	800ceb0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ceaa:	f06f 030f 	mvn.w	r3, #15
 800ceae:	e06c      	b.n	800cf8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	68b8      	ldr	r0, [r7, #8]
 800ceb8:	f7ff fe56 	bl	800cb68 <etharp_find_entry>
 800cebc:	4603      	mov	r3, r0
 800cebe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cec0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	da02      	bge.n	800cece <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cec8:	8afb      	ldrh	r3, [r7, #22]
 800ceca:	b25b      	sxtb	r3, r3
 800cecc:	e05d      	b.n	800cf8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cece:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ced2:	4933      	ldr	r1, [pc, #204]	; (800cfa0 <etharp_update_arp_entry+0x148>)
 800ced4:	4613      	mov	r3, r2
 800ced6:	005b      	lsls	r3, r3, #1
 800ced8:	4413      	add	r3, r2
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	440b      	add	r3, r1
 800cede:	3314      	adds	r3, #20
 800cee0:	2202      	movs	r2, #2
 800cee2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cee4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cee8:	492d      	ldr	r1, [pc, #180]	; (800cfa0 <etharp_update_arp_entry+0x148>)
 800ceea:	4613      	mov	r3, r2
 800ceec:	005b      	lsls	r3, r3, #1
 800ceee:	4413      	add	r3, r2
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	440b      	add	r3, r1
 800cef4:	3308      	adds	r3, #8
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cefa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cefe:	4613      	mov	r3, r2
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	4413      	add	r3, r2
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	3308      	adds	r3, #8
 800cf08:	4a25      	ldr	r2, [pc, #148]	; (800cfa0 <etharp_update_arp_entry+0x148>)
 800cf0a:	4413      	add	r3, r2
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	2206      	movs	r2, #6
 800cf10:	6879      	ldr	r1, [r7, #4]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f00a fa01 	bl	801731a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cf18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf1c:	4920      	ldr	r1, [pc, #128]	; (800cfa0 <etharp_update_arp_entry+0x148>)
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	440b      	add	r3, r1
 800cf28:	3312      	adds	r3, #18
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cf2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf32:	491b      	ldr	r1, [pc, #108]	; (800cfa0 <etharp_update_arp_entry+0x148>)
 800cf34:	4613      	mov	r3, r2
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	4413      	add	r3, r2
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	440b      	add	r3, r1
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d021      	beq.n	800cf88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cf44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf48:	4915      	ldr	r1, [pc, #84]	; (800cfa0 <etharp_update_arp_entry+0x148>)
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4413      	add	r3, r2
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	440b      	add	r3, r1
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cf58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf5c:	4910      	ldr	r1, [pc, #64]	; (800cfa0 <etharp_update_arp_entry+0x148>)
 800cf5e:	4613      	mov	r3, r2
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	4413      	add	r3, r2
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	440b      	add	r3, r1
 800cf68:	2200      	movs	r2, #0
 800cf6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cf72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6939      	ldr	r1, [r7, #16]
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 fcf3 	bl	800d968 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cf82:	6938      	ldr	r0, [r7, #16]
 800cf84:	f003 fc7e 	bl	8010884 <pbuf_free>
  }
  return ERR_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3718      	adds	r7, #24
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	08018600 	.word	0x08018600
 800cf98:	0801872c 	.word	0x0801872c
 800cf9c:	080186ac 	.word	0x080186ac
 800cfa0:	240049d8 	.word	0x240049d8

0800cfa4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfac:	2300      	movs	r3, #0
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	e01e      	b.n	800cff0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cfb2:	4913      	ldr	r1, [pc, #76]	; (800d000 <etharp_cleanup_netif+0x5c>)
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	4413      	add	r3, r2
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	440b      	add	r3, r1
 800cfc0:	3314      	adds	r3, #20
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cfc6:	7afb      	ldrb	r3, [r7, #11]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00e      	beq.n	800cfea <etharp_cleanup_netif+0x46>
 800cfcc:	490c      	ldr	r1, [pc, #48]	; (800d000 <etharp_cleanup_netif+0x5c>)
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	4413      	add	r3, r2
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	440b      	add	r3, r1
 800cfda:	3308      	adds	r3, #8
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d102      	bne.n	800cfea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f7ff fce5 	bl	800c9b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3301      	adds	r3, #1
 800cfee:	60fb      	str	r3, [r7, #12]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b09      	cmp	r3, #9
 800cff4:	dddd      	ble.n	800cfb2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cff6:	bf00      	nop
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	240049d8 	.word	0x240049d8

0800d004 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d004:	b5b0      	push	{r4, r5, r7, lr}
 800d006:	b08a      	sub	sp, #40	; 0x28
 800d008:	af04      	add	r7, sp, #16
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d107      	bne.n	800d024 <etharp_input+0x20>
 800d014:	4b3d      	ldr	r3, [pc, #244]	; (800d10c <etharp_input+0x108>)
 800d016:	f240 228a 	movw	r2, #650	; 0x28a
 800d01a:	493d      	ldr	r1, [pc, #244]	; (800d110 <etharp_input+0x10c>)
 800d01c:	483d      	ldr	r0, [pc, #244]	; (800d114 <etharp_input+0x110>)
 800d01e:	f00a f9a9 	bl	8017374 <iprintf>
 800d022:	e06f      	b.n	800d104 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d034:	d10c      	bne.n	800d050 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d03a:	2b06      	cmp	r3, #6
 800d03c:	d108      	bne.n	800d050 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d042:	2b04      	cmp	r3, #4
 800d044:	d104      	bne.n	800d050 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	885b      	ldrh	r3, [r3, #2]
 800d04a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d04c:	2b08      	cmp	r3, #8
 800d04e:	d003      	beq.n	800d058 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f003 fc17 	bl	8010884 <pbuf_free>
    return;
 800d056:	e055      	b.n	800d104 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	330e      	adds	r3, #14
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	3318      	adds	r3, #24
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	3304      	adds	r3, #4
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d102      	bne.n	800d078 <etharp_input+0x74>
    for_us = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]
 800d076:	e009      	b.n	800d08c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	3304      	adds	r3, #4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	429a      	cmp	r2, r3
 800d082:	bf0c      	ite	eq
 800d084:	2301      	moveq	r3, #1
 800d086:	2300      	movne	r3, #0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f103 0208 	add.w	r2, r3, #8
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <etharp_input+0x98>
 800d098:	2301      	movs	r3, #1
 800d09a:	e000      	b.n	800d09e <etharp_input+0x9a>
 800d09c:	2302      	movs	r3, #2
 800d09e:	f107 010c 	add.w	r1, r7, #12
 800d0a2:	6838      	ldr	r0, [r7, #0]
 800d0a4:	f7ff fed8 	bl	800ce58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	88db      	ldrh	r3, [r3, #6]
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0b2:	d003      	beq.n	800d0bc <etharp_input+0xb8>
 800d0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0b8:	d01e      	beq.n	800d0f8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d0ba:	e020      	b.n	800d0fe <etharp_input+0xfa>
      if (for_us) {
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d01c      	beq.n	800d0fc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d0d8:	693a      	ldr	r2, [r7, #16]
 800d0da:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d0dc:	2102      	movs	r1, #2
 800d0de:	9103      	str	r1, [sp, #12]
 800d0e0:	f107 010c 	add.w	r1, r7, #12
 800d0e4:	9102      	str	r1, [sp, #8]
 800d0e6:	9201      	str	r2, [sp, #4]
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	462b      	mov	r3, r5
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	6838      	ldr	r0, [r7, #0]
 800d0f2:	f000 faeb 	bl	800d6cc <etharp_raw>
      break;
 800d0f6:	e001      	b.n	800d0fc <etharp_input+0xf8>
      break;
 800d0f8:	bf00      	nop
 800d0fa:	e000      	b.n	800d0fe <etharp_input+0xfa>
      break;
 800d0fc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f003 fbc0 	bl	8010884 <pbuf_free>
}
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bdb0      	pop	{r4, r5, r7, pc}
 800d10a:	bf00      	nop
 800d10c:	08018600 	.word	0x08018600
 800d110:	08018784 	.word	0x08018784
 800d114:	080186ac 	.word	0x080186ac

0800d118 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af02      	add	r7, sp, #8
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	4613      	mov	r3, r2
 800d124:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d126:	79fa      	ldrb	r2, [r7, #7]
 800d128:	4944      	ldr	r1, [pc, #272]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d12a:	4613      	mov	r3, r2
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	4413      	add	r3, r2
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	440b      	add	r3, r1
 800d134:	3314      	adds	r3, #20
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d806      	bhi.n	800d14a <etharp_output_to_arp_index+0x32>
 800d13c:	4b40      	ldr	r3, [pc, #256]	; (800d240 <etharp_output_to_arp_index+0x128>)
 800d13e:	f240 22ef 	movw	r2, #751	; 0x2ef
 800d142:	4940      	ldr	r1, [pc, #256]	; (800d244 <etharp_output_to_arp_index+0x12c>)
 800d144:	4840      	ldr	r0, [pc, #256]	; (800d248 <etharp_output_to_arp_index+0x130>)
 800d146:	f00a f915 	bl	8017374 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d14a:	79fa      	ldrb	r2, [r7, #7]
 800d14c:	493b      	ldr	r1, [pc, #236]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d14e:	4613      	mov	r3, r2
 800d150:	005b      	lsls	r3, r3, #1
 800d152:	4413      	add	r3, r2
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	440b      	add	r3, r1
 800d158:	3314      	adds	r3, #20
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d153      	bne.n	800d208 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d160:	79fa      	ldrb	r2, [r7, #7]
 800d162:	4936      	ldr	r1, [pc, #216]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d164:	4613      	mov	r3, r2
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	4413      	add	r3, r2
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	440b      	add	r3, r1
 800d16e:	3312      	adds	r3, #18
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d176:	d919      	bls.n	800d1ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d178:	79fa      	ldrb	r2, [r7, #7]
 800d17a:	4613      	mov	r3, r2
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	4413      	add	r3, r2
 800d180:	00db      	lsls	r3, r3, #3
 800d182:	4a2e      	ldr	r2, [pc, #184]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d184:	4413      	add	r3, r2
 800d186:	3304      	adds	r3, #4
 800d188:	4619      	mov	r1, r3
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f000 fb4c 	bl	800d828 <etharp_request>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d138      	bne.n	800d208 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d196:	79fa      	ldrb	r2, [r7, #7]
 800d198:	4928      	ldr	r1, [pc, #160]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d19a:	4613      	mov	r3, r2
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	4413      	add	r3, r2
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3314      	adds	r3, #20
 800d1a6:	2203      	movs	r2, #3
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	e02d      	b.n	800d208 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d1ac:	79fa      	ldrb	r2, [r7, #7]
 800d1ae:	4923      	ldr	r1, [pc, #140]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	4413      	add	r3, r2
 800d1b6:	00db      	lsls	r3, r3, #3
 800d1b8:	440b      	add	r3, r1
 800d1ba:	3312      	adds	r3, #18
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d1c2:	d321      	bcc.n	800d208 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d1c4:	79fa      	ldrb	r2, [r7, #7]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	4413      	add	r3, r2
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	4a1b      	ldr	r2, [pc, #108]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d1d0:	4413      	add	r3, r2
 800d1d2:	1d19      	adds	r1, r3, #4
 800d1d4:	79fa      	ldrb	r2, [r7, #7]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	4413      	add	r3, r2
 800d1dc:	00db      	lsls	r3, r3, #3
 800d1de:	3308      	adds	r3, #8
 800d1e0:	4a16      	ldr	r2, [pc, #88]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d1e2:	4413      	add	r3, r2
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f000 fafb 	bl	800d7e4 <etharp_request_dst>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d109      	bne.n	800d208 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d1f4:	79fa      	ldrb	r2, [r7, #7]
 800d1f6:	4911      	ldr	r1, [pc, #68]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	005b      	lsls	r3, r3, #1
 800d1fc:	4413      	add	r3, r2
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	440b      	add	r3, r1
 800d202:	3314      	adds	r3, #20
 800d204:	2203      	movs	r2, #3
 800d206:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d20e:	79fa      	ldrb	r2, [r7, #7]
 800d210:	4613      	mov	r3, r2
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	4413      	add	r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	3308      	adds	r3, #8
 800d21a:	4a08      	ldr	r2, [pc, #32]	; (800d23c <etharp_output_to_arp_index+0x124>)
 800d21c:	4413      	add	r3, r2
 800d21e:	1d1a      	adds	r2, r3, #4
 800d220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	4613      	mov	r3, r2
 800d228:	460a      	mov	r2, r1
 800d22a:	68b9      	ldr	r1, [r7, #8]
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 fb9b 	bl	800d968 <ethernet_output>
 800d232:	4603      	mov	r3, r0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	240049d8 	.word	0x240049d8
 800d240:	08018600 	.word	0x08018600
 800d244:	080187a4 	.word	0x080187a4
 800d248:	080186ac 	.word	0x080186ac

0800d24c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af02      	add	r7, sp, #8
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <etharp_output+0x24>
 800d262:	4b73      	ldr	r3, [pc, #460]	; (800d430 <etharp_output+0x1e4>)
 800d264:	f240 321e 	movw	r2, #798	; 0x31e
 800d268:	4972      	ldr	r1, [pc, #456]	; (800d434 <etharp_output+0x1e8>)
 800d26a:	4873      	ldr	r0, [pc, #460]	; (800d438 <etharp_output+0x1ec>)
 800d26c:	f00a f882 	bl	8017374 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d106      	bne.n	800d284 <etharp_output+0x38>
 800d276:	4b6e      	ldr	r3, [pc, #440]	; (800d430 <etharp_output+0x1e4>)
 800d278:	f240 321f 	movw	r2, #799	; 0x31f
 800d27c:	496f      	ldr	r1, [pc, #444]	; (800d43c <etharp_output+0x1f0>)
 800d27e:	486e      	ldr	r0, [pc, #440]	; (800d438 <etharp_output+0x1ec>)
 800d280:	f00a f878 	bl	8017374 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d106      	bne.n	800d298 <etharp_output+0x4c>
 800d28a:	4b69      	ldr	r3, [pc, #420]	; (800d430 <etharp_output+0x1e4>)
 800d28c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d290:	496b      	ldr	r1, [pc, #428]	; (800d440 <etharp_output+0x1f4>)
 800d292:	4869      	ldr	r0, [pc, #420]	; (800d438 <etharp_output+0x1ec>)
 800d294:	f00a f86e 	bl	8017374 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68f9      	ldr	r1, [r7, #12]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f001 f8c6 	bl	800e430 <ip4_addr_isbroadcast_u32>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d002      	beq.n	800d2b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d2aa:	4b66      	ldr	r3, [pc, #408]	; (800d444 <etharp_output+0x1f8>)
 800d2ac:	61fb      	str	r3, [r7, #28]
 800d2ae:	e0af      	b.n	800d410 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2b8:	2be0      	cmp	r3, #224	; 0xe0
 800d2ba:	d118      	bne.n	800d2ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d2c4:	235e      	movs	r3, #94	; 0x5e
 800d2c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3302      	adds	r3, #2
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3303      	adds	r3, #3
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d2e6:	f107 0310 	add.w	r3, r7, #16
 800d2ea:	61fb      	str	r3, [r7, #28]
 800d2ec:	e090      	b.n	800d410 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	405a      	eors	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4013      	ands	r3, r2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d012      	beq.n	800d32c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d30c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d310:	4293      	cmp	r3, r2
 800d312:	d00b      	beq.n	800d32c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	330c      	adds	r3, #12
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	330c      	adds	r3, #12
 800d322:	61bb      	str	r3, [r7, #24]
 800d324:	e002      	b.n	800d32c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d326:	f06f 0303 	mvn.w	r3, #3
 800d32a:	e07d      	b.n	800d428 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d32c:	4b46      	ldr	r3, [pc, #280]	; (800d448 <etharp_output+0x1fc>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	4619      	mov	r1, r3
 800d332:	4a46      	ldr	r2, [pc, #280]	; (800d44c <etharp_output+0x200>)
 800d334:	460b      	mov	r3, r1
 800d336:	005b      	lsls	r3, r3, #1
 800d338:	440b      	add	r3, r1
 800d33a:	00db      	lsls	r3, r3, #3
 800d33c:	4413      	add	r3, r2
 800d33e:	3314      	adds	r3, #20
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d925      	bls.n	800d392 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d346:	4b40      	ldr	r3, [pc, #256]	; (800d448 <etharp_output+0x1fc>)
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	4619      	mov	r1, r3
 800d34c:	4a3f      	ldr	r2, [pc, #252]	; (800d44c <etharp_output+0x200>)
 800d34e:	460b      	mov	r3, r1
 800d350:	005b      	lsls	r3, r3, #1
 800d352:	440b      	add	r3, r1
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	4413      	add	r3, r2
 800d358:	3308      	adds	r3, #8
 800d35a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d117      	bne.n	800d392 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	4b38      	ldr	r3, [pc, #224]	; (800d448 <etharp_output+0x1fc>)
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	4618      	mov	r0, r3
 800d36c:	4937      	ldr	r1, [pc, #220]	; (800d44c <etharp_output+0x200>)
 800d36e:	4603      	mov	r3, r0
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	4403      	add	r3, r0
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	440b      	add	r3, r1
 800d378:	3304      	adds	r3, #4
 800d37a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d108      	bne.n	800d392 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d380:	4b31      	ldr	r3, [pc, #196]	; (800d448 <etharp_output+0x1fc>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	461a      	mov	r2, r3
 800d386:	68b9      	ldr	r1, [r7, #8]
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f7ff fec5 	bl	800d118 <etharp_output_to_arp_index>
 800d38e:	4603      	mov	r3, r0
 800d390:	e04a      	b.n	800d428 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d392:	2300      	movs	r3, #0
 800d394:	75fb      	strb	r3, [r7, #23]
 800d396:	e031      	b.n	800d3fc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d398:	7dfa      	ldrb	r2, [r7, #23]
 800d39a:	492c      	ldr	r1, [pc, #176]	; (800d44c <etharp_output+0x200>)
 800d39c:	4613      	mov	r3, r2
 800d39e:	005b      	lsls	r3, r3, #1
 800d3a0:	4413      	add	r3, r2
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	440b      	add	r3, r1
 800d3a6:	3314      	adds	r3, #20
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d923      	bls.n	800d3f6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d3ae:	7dfa      	ldrb	r2, [r7, #23]
 800d3b0:	4926      	ldr	r1, [pc, #152]	; (800d44c <etharp_output+0x200>)
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	005b      	lsls	r3, r3, #1
 800d3b6:	4413      	add	r3, r2
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3308      	adds	r3, #8
 800d3be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d117      	bne.n	800d3f6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	7dfa      	ldrb	r2, [r7, #23]
 800d3cc:	481f      	ldr	r0, [pc, #124]	; (800d44c <etharp_output+0x200>)
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	005b      	lsls	r3, r3, #1
 800d3d2:	4413      	add	r3, r2
 800d3d4:	00db      	lsls	r3, r3, #3
 800d3d6:	4403      	add	r3, r0
 800d3d8:	3304      	adds	r3, #4
 800d3da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d3dc:	4299      	cmp	r1, r3
 800d3de:	d10a      	bne.n	800d3f6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d3e0:	4a19      	ldr	r2, [pc, #100]	; (800d448 <etharp_output+0x1fc>)
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
 800d3e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	68b9      	ldr	r1, [r7, #8]
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f7ff fe93 	bl	800d118 <etharp_output_to_arp_index>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	e018      	b.n	800d428 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	75fb      	strb	r3, [r7, #23]
 800d3fc:	7dfb      	ldrb	r3, [r7, #23]
 800d3fe:	2b09      	cmp	r3, #9
 800d400:	d9ca      	bls.n	800d398 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	69b9      	ldr	r1, [r7, #24]
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f000 f822 	bl	800d450 <etharp_query>
 800d40c:	4603      	mov	r3, r0
 800d40e:	e00b      	b.n	800d428 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 faa1 	bl	800d968 <ethernet_output>
 800d426:	4603      	mov	r3, r0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	08018600 	.word	0x08018600
 800d434:	08018784 	.word	0x08018784
 800d438:	080186ac 	.word	0x080186ac
 800d43c:	080187d4 	.word	0x080187d4
 800d440:	08018774 	.word	0x08018774
 800d444:	0801b3fc 	.word	0x0801b3fc
 800d448:	24004ac8 	.word	0x24004ac8
 800d44c:	240049d8 	.word	0x240049d8

0800d450 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b08c      	sub	sp, #48	; 0x30
 800d454:	af02      	add	r7, sp, #8
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3326      	adds	r3, #38	; 0x26
 800d460:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d462:	23ff      	movs	r3, #255	; 0xff
 800d464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d468:	2300      	movs	r3, #0
 800d46a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	68f9      	ldr	r1, [r7, #12]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 ffdc 	bl	800e430 <ip4_addr_isbroadcast_u32>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10c      	bne.n	800d498 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d486:	2be0      	cmp	r3, #224	; 0xe0
 800d488:	d006      	beq.n	800d498 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d003      	beq.n	800d498 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d102      	bne.n	800d49e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d498:	f06f 030f 	mvn.w	r3, #15
 800d49c:	e102      	b.n	800d6a4 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	68b8      	ldr	r0, [r7, #8]
 800d4a4:	f7ff fb60 	bl	800cb68 <etharp_find_entry>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d4ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	da02      	bge.n	800d4ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d4b4:	8a7b      	ldrh	r3, [r7, #18]
 800d4b6:	b25b      	sxtb	r3, r3
 800d4b8:	e0f4      	b.n	800d6a4 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d4ba:	8a7b      	ldrh	r3, [r7, #18]
 800d4bc:	2b7e      	cmp	r3, #126	; 0x7e
 800d4be:	d906      	bls.n	800d4ce <etharp_query+0x7e>
 800d4c0:	4b7a      	ldr	r3, [pc, #488]	; (800d6ac <etharp_query+0x25c>)
 800d4c2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d4c6:	497a      	ldr	r1, [pc, #488]	; (800d6b0 <etharp_query+0x260>)
 800d4c8:	487a      	ldr	r0, [pc, #488]	; (800d6b4 <etharp_query+0x264>)
 800d4ca:	f009 ff53 	bl	8017374 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d4ce:	8a7b      	ldrh	r3, [r7, #18]
 800d4d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d4d2:	7c7a      	ldrb	r2, [r7, #17]
 800d4d4:	4978      	ldr	r1, [pc, #480]	; (800d6b8 <etharp_query+0x268>)
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	4413      	add	r3, r2
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	440b      	add	r3, r1
 800d4e0:	3314      	adds	r3, #20
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d115      	bne.n	800d514 <etharp_query+0xc4>
    is_new_entry = 1;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d4ec:	7c7a      	ldrb	r2, [r7, #17]
 800d4ee:	4972      	ldr	r1, [pc, #456]	; (800d6b8 <etharp_query+0x268>)
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	4413      	add	r3, r2
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	440b      	add	r3, r1
 800d4fa:	3314      	adds	r3, #20
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d500:	7c7a      	ldrb	r2, [r7, #17]
 800d502:	496d      	ldr	r1, [pc, #436]	; (800d6b8 <etharp_query+0x268>)
 800d504:	4613      	mov	r3, r2
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	4413      	add	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	440b      	add	r3, r1
 800d50e:	3308      	adds	r3, #8
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d514:	7c7a      	ldrb	r2, [r7, #17]
 800d516:	4968      	ldr	r1, [pc, #416]	; (800d6b8 <etharp_query+0x268>)
 800d518:	4613      	mov	r3, r2
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	4413      	add	r3, r2
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	440b      	add	r3, r1
 800d522:	3314      	adds	r3, #20
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d011      	beq.n	800d54e <etharp_query+0xfe>
 800d52a:	7c7a      	ldrb	r2, [r7, #17]
 800d52c:	4962      	ldr	r1, [pc, #392]	; (800d6b8 <etharp_query+0x268>)
 800d52e:	4613      	mov	r3, r2
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	4413      	add	r3, r2
 800d534:	00db      	lsls	r3, r3, #3
 800d536:	440b      	add	r3, r1
 800d538:	3314      	adds	r3, #20
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d806      	bhi.n	800d54e <etharp_query+0xfe>
 800d540:	4b5a      	ldr	r3, [pc, #360]	; (800d6ac <etharp_query+0x25c>)
 800d542:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d546:	495d      	ldr	r1, [pc, #372]	; (800d6bc <etharp_query+0x26c>)
 800d548:	485a      	ldr	r0, [pc, #360]	; (800d6b4 <etharp_query+0x264>)
 800d54a:	f009 ff13 	bl	8017374 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d102      	bne.n	800d55a <etharp_query+0x10a>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10c      	bne.n	800d574 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d55a:	68b9      	ldr	r1, [r7, #8]
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	f000 f963 	bl	800d828 <etharp_request>
 800d562:	4603      	mov	r3, r0
 800d564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d102      	bne.n	800d574 <etharp_query+0x124>
      return result;
 800d56e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d572:	e097      	b.n	800d6a4 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d106      	bne.n	800d588 <etharp_query+0x138>
 800d57a:	4b4c      	ldr	r3, [pc, #304]	; (800d6ac <etharp_query+0x25c>)
 800d57c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d580:	494f      	ldr	r1, [pc, #316]	; (800d6c0 <etharp_query+0x270>)
 800d582:	484c      	ldr	r0, [pc, #304]	; (800d6b4 <etharp_query+0x264>)
 800d584:	f009 fef6 	bl	8017374 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d588:	7c7a      	ldrb	r2, [r7, #17]
 800d58a:	494b      	ldr	r1, [pc, #300]	; (800d6b8 <etharp_query+0x268>)
 800d58c:	4613      	mov	r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	4413      	add	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	440b      	add	r3, r1
 800d596:	3314      	adds	r3, #20
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d918      	bls.n	800d5d0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d59e:	4a49      	ldr	r2, [pc, #292]	; (800d6c4 <etharp_query+0x274>)
 800d5a0:	7c7b      	ldrb	r3, [r7, #17]
 800d5a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d5a4:	7c7a      	ldrb	r2, [r7, #17]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	4413      	add	r3, r2
 800d5ac:	00db      	lsls	r3, r3, #3
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	4a41      	ldr	r2, [pc, #260]	; (800d6b8 <etharp_query+0x268>)
 800d5b2:	4413      	add	r3, r2
 800d5b4:	1d1a      	adds	r2, r3, #4
 800d5b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	4613      	mov	r3, r2
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	6879      	ldr	r1, [r7, #4]
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 f9d0 	bl	800d968 <ethernet_output>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5ce:	e067      	b.n	800d6a0 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d5d0:	7c7a      	ldrb	r2, [r7, #17]
 800d5d2:	4939      	ldr	r1, [pc, #228]	; (800d6b8 <etharp_query+0x268>)
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	4413      	add	r3, r2
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	440b      	add	r3, r1
 800d5de:	3314      	adds	r3, #20
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d15c      	bne.n	800d6a0 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d5ee:	e01c      	b.n	800d62a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	895a      	ldrh	r2, [r3, #10]
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	891b      	ldrh	r3, [r3, #8]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d10a      	bne.n	800d612 <etharp_query+0x1c2>
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d006      	beq.n	800d612 <etharp_query+0x1c2>
 800d604:	4b29      	ldr	r3, [pc, #164]	; (800d6ac <etharp_query+0x25c>)
 800d606:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d60a:	492f      	ldr	r1, [pc, #188]	; (800d6c8 <etharp_query+0x278>)
 800d60c:	4829      	ldr	r0, [pc, #164]	; (800d6b4 <etharp_query+0x264>)
 800d60e:	f009 feb1 	bl	8017374 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	7b1b      	ldrb	r3, [r3, #12]
 800d616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d002      	beq.n	800d624 <etharp_query+0x1d4>
        copy_needed = 1;
 800d61e:	2301      	movs	r3, #1
 800d620:	61bb      	str	r3, [r7, #24]
        break;
 800d622:	e005      	b.n	800d630 <etharp_query+0x1e0>
      }
      p = p->next;
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1df      	bne.n	800d5f0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d007      	beq.n	800d646 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d63c:	200e      	movs	r0, #14
 800d63e:	f003 fb99 	bl	8010d74 <pbuf_clone>
 800d642:	61f8      	str	r0, [r7, #28]
 800d644:	e004      	b.n	800d650 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d64a:	69f8      	ldr	r0, [r7, #28]
 800d64c:	f003 f9c0 	bl	80109d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d021      	beq.n	800d69a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d656:	7c7a      	ldrb	r2, [r7, #17]
 800d658:	4917      	ldr	r1, [pc, #92]	; (800d6b8 <etharp_query+0x268>)
 800d65a:	4613      	mov	r3, r2
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	4413      	add	r3, r2
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	440b      	add	r3, r1
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d66a:	7c7a      	ldrb	r2, [r7, #17]
 800d66c:	4912      	ldr	r1, [pc, #72]	; (800d6b8 <etharp_query+0x268>)
 800d66e:	4613      	mov	r3, r2
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	4413      	add	r3, r2
 800d674:	00db      	lsls	r3, r3, #3
 800d676:	440b      	add	r3, r1
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f003 f902 	bl	8010884 <pbuf_free>
      }
      arp_table[i].q = p;
 800d680:	7c7a      	ldrb	r2, [r7, #17]
 800d682:	490d      	ldr	r1, [pc, #52]	; (800d6b8 <etharp_query+0x268>)
 800d684:	4613      	mov	r3, r2
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	4413      	add	r3, r2
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	440b      	add	r3, r1
 800d68e:	69fa      	ldr	r2, [r7, #28]
 800d690:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d698:	e002      	b.n	800d6a0 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d69a:	23ff      	movs	r3, #255	; 0xff
 800d69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d6a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3728      	adds	r7, #40	; 0x28
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	08018600 	.word	0x08018600
 800d6b0:	080187e0 	.word	0x080187e0
 800d6b4:	080186ac 	.word	0x080186ac
 800d6b8:	240049d8 	.word	0x240049d8
 800d6bc:	080187f0 	.word	0x080187f0
 800d6c0:	080187d4 	.word	0x080187d4
 800d6c4:	24004ac8 	.word	0x24004ac8
 800d6c8:	08018818 	.word	0x08018818

0800d6cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08a      	sub	sp, #40	; 0x28
 800d6d0:	af02      	add	r7, sp, #8
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d106      	bne.n	800d6f2 <etharp_raw+0x26>
 800d6e4:	4b3a      	ldr	r3, [pc, #232]	; (800d7d0 <etharp_raw+0x104>)
 800d6e6:	f240 4257 	movw	r2, #1111	; 0x457
 800d6ea:	493a      	ldr	r1, [pc, #232]	; (800d7d4 <etharp_raw+0x108>)
 800d6ec:	483a      	ldr	r0, [pc, #232]	; (800d7d8 <etharp_raw+0x10c>)
 800d6ee:	f009 fe41 	bl	8017374 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d6f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d6f6:	211c      	movs	r1, #28
 800d6f8:	200e      	movs	r0, #14
 800d6fa:	f002 fde3 	bl	80102c4 <pbuf_alloc>
 800d6fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d102      	bne.n	800d70c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d70a:	e05d      	b.n	800d7c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	895b      	ldrh	r3, [r3, #10]
 800d710:	2b1b      	cmp	r3, #27
 800d712:	d806      	bhi.n	800d722 <etharp_raw+0x56>
 800d714:	4b2e      	ldr	r3, [pc, #184]	; (800d7d0 <etharp_raw+0x104>)
 800d716:	f240 4263 	movw	r2, #1123	; 0x463
 800d71a:	4930      	ldr	r1, [pc, #192]	; (800d7dc <etharp_raw+0x110>)
 800d71c:	482e      	ldr	r0, [pc, #184]	; (800d7d8 <etharp_raw+0x10c>)
 800d71e:	f009 fe29 	bl	8017374 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d728:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff f914 	bl	800c958 <lwip_htons>
 800d730:	4603      	mov	r3, r0
 800d732:	461a      	mov	r2, r3
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d73e:	2b06      	cmp	r3, #6
 800d740:	d006      	beq.n	800d750 <etharp_raw+0x84>
 800d742:	4b23      	ldr	r3, [pc, #140]	; (800d7d0 <etharp_raw+0x104>)
 800d744:	f240 426a 	movw	r2, #1130	; 0x46a
 800d748:	4925      	ldr	r1, [pc, #148]	; (800d7e0 <etharp_raw+0x114>)
 800d74a:	4823      	ldr	r0, [pc, #140]	; (800d7d8 <etharp_raw+0x10c>)
 800d74c:	f009 fe12 	bl	8017374 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	3308      	adds	r3, #8
 800d754:	2206      	movs	r2, #6
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f009 fdde 	bl	801731a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	3312      	adds	r3, #18
 800d762:	2206      	movs	r2, #6
 800d764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d766:	4618      	mov	r0, r3
 800d768:	f009 fdd7 	bl	801731a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	330e      	adds	r3, #14
 800d770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d772:	6812      	ldr	r2, [r2, #0]
 800d774:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	3318      	adds	r3, #24
 800d77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77c:	6812      	ldr	r2, [r2, #0]
 800d77e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	2200      	movs	r2, #0
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	2200      	movs	r2, #0
 800d788:	f042 0201 	orr.w	r2, r2, #1
 800d78c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	2200      	movs	r2, #0
 800d792:	f042 0208 	orr.w	r2, r2, #8
 800d796:	709a      	strb	r2, [r3, #2]
 800d798:	2200      	movs	r2, #0
 800d79a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	2206      	movs	r2, #6
 800d7a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2204      	movs	r2, #4
 800d7a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d7a8:	f640 0306 	movw	r3, #2054	; 0x806
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	69b9      	ldr	r1, [r7, #24]
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f000 f8d7 	bl	800d968 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d7ba:	69b8      	ldr	r0, [r7, #24]
 800d7bc:	f003 f862 	bl	8010884 <pbuf_free>
  p = NULL;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d7c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3720      	adds	r7, #32
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	08018600 	.word	0x08018600
 800d7d4:	08018784 	.word	0x08018784
 800d7d8:	080186ac 	.word	0x080186ac
 800d7dc:	08018834 	.word	0x08018834
 800d7e0:	08018868 	.word	0x08018868

0800d7e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af04      	add	r7, sp, #16
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d800:	2201      	movs	r2, #1
 800d802:	9203      	str	r2, [sp, #12]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	9202      	str	r2, [sp, #8]
 800d808:	4a06      	ldr	r2, [pc, #24]	; (800d824 <etharp_request_dst+0x40>)
 800d80a:	9201      	str	r2, [sp, #4]
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	4603      	mov	r3, r0
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f7ff ff5a 	bl	800d6cc <etharp_raw>
 800d818:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	0801b404 	.word	0x0801b404

0800d828 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d832:	4a05      	ldr	r2, [pc, #20]	; (800d848 <etharp_request+0x20>)
 800d834:	6839      	ldr	r1, [r7, #0]
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f7ff ffd4 	bl	800d7e4 <etharp_request_dst>
 800d83c:	4603      	mov	r3, r0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	0801b3fc 	.word	0x0801b3fc

0800d84c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b086      	sub	sp, #24
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d856:	230e      	movs	r3, #14
 800d858:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	895b      	ldrh	r3, [r3, #10]
 800d85e:	2b0e      	cmp	r3, #14
 800d860:	d96e      	bls.n	800d940 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7bdb      	ldrb	r3, [r3, #15]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d106      	bne.n	800d878 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d870:	3301      	adds	r3, #1
 800d872:	b2da      	uxtb	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	7b1a      	ldrb	r2, [r3, #12]
 800d882:	7b5b      	ldrb	r3, [r3, #13]
 800d884:	021b      	lsls	r3, r3, #8
 800d886:	4313      	orrs	r3, r2
 800d888:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d023      	beq.n	800d8de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d10f      	bne.n	800d8be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	785b      	ldrb	r3, [r3, #1]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d11b      	bne.n	800d8de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d8aa:	2b5e      	cmp	r3, #94	; 0x5e
 800d8ac:	d117      	bne.n	800d8de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	7b5b      	ldrb	r3, [r3, #13]
 800d8b2:	f043 0310 	orr.w	r3, r3, #16
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	735a      	strb	r2, [r3, #13]
 800d8bc:	e00f      	b.n	800d8de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	2206      	movs	r2, #6
 800d8c2:	4928      	ldr	r1, [pc, #160]	; (800d964 <ethernet_input+0x118>)
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f009 fd19 	bl	80172fc <memcmp>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d106      	bne.n	800d8de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7b5b      	ldrb	r3, [r3, #13]
 800d8d4:	f043 0308 	orr.w	r3, r3, #8
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d8de:	89fb      	ldrh	r3, [r7, #14]
 800d8e0:	2b08      	cmp	r3, #8
 800d8e2:	d003      	beq.n	800d8ec <ethernet_input+0xa0>
 800d8e4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d8e8:	d014      	beq.n	800d914 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d8ea:	e032      	b.n	800d952 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8f2:	f003 0308 	and.w	r3, r3, #8
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d024      	beq.n	800d944 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d8fa:	8afb      	ldrh	r3, [r7, #22]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f002 ff3a 	bl	8010778 <pbuf_remove_header>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d11e      	bne.n	800d948 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d90a:	6839      	ldr	r1, [r7, #0]
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fb95 	bl	800e03c <ip4_input>
      break;
 800d912:	e013      	b.n	800d93c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d91a:	f003 0308 	and.w	r3, r3, #8
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d014      	beq.n	800d94c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d922:	8afb      	ldrh	r3, [r7, #22]
 800d924:	4619      	mov	r1, r3
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f002 ff26 	bl	8010778 <pbuf_remove_header>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10e      	bne.n	800d950 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff fb65 	bl	800d004 <etharp_input>
      break;
 800d93a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	e00c      	b.n	800d95a <ethernet_input+0x10e>
    goto free_and_return;
 800d940:	bf00      	nop
 800d942:	e006      	b.n	800d952 <ethernet_input+0x106>
        goto free_and_return;
 800d944:	bf00      	nop
 800d946:	e004      	b.n	800d952 <ethernet_input+0x106>
        goto free_and_return;
 800d948:	bf00      	nop
 800d94a:	e002      	b.n	800d952 <ethernet_input+0x106>
        goto free_and_return;
 800d94c:	bf00      	nop
 800d94e:	e000      	b.n	800d952 <ethernet_input+0x106>
        goto free_and_return;
 800d950:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f002 ff96 	bl	8010884 <pbuf_free>
  return ERR_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3718      	adds	r7, #24
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	0801b3fc 	.word	0x0801b3fc

0800d968 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d968:	b580      	push	{r7, lr}
 800d96a:	b086      	sub	sp, #24
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d976:	8c3b      	ldrh	r3, [r7, #32]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fe ffed 	bl	800c958 <lwip_htons>
 800d97e:	4603      	mov	r3, r0
 800d980:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d982:	210e      	movs	r1, #14
 800d984:	68b8      	ldr	r0, [r7, #8]
 800d986:	f002 fee7 	bl	8010758 <pbuf_add_header>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d125      	bne.n	800d9dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	8afa      	ldrh	r2, [r7, #22]
 800d99a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	2206      	movs	r2, #6
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f009 fcb9 	bl	801731a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	3306      	adds	r3, #6
 800d9ac:	2206      	movs	r2, #6
 800d9ae:	6879      	ldr	r1, [r7, #4]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f009 fcb2 	bl	801731a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9bc:	2b06      	cmp	r3, #6
 800d9be:	d006      	beq.n	800d9ce <ethernet_output+0x66>
 800d9c0:	4b0a      	ldr	r3, [pc, #40]	; (800d9ec <ethernet_output+0x84>)
 800d9c2:	f240 1233 	movw	r2, #307	; 0x133
 800d9c6:	490a      	ldr	r1, [pc, #40]	; (800d9f0 <ethernet_output+0x88>)
 800d9c8:	480a      	ldr	r0, [pc, #40]	; (800d9f4 <ethernet_output+0x8c>)
 800d9ca:	f009 fcd3 	bl	8017374 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	699b      	ldr	r3, [r3, #24]
 800d9d2:	68b9      	ldr	r1, [r7, #8]
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	4798      	blx	r3
 800d9d8:	4603      	mov	r3, r0
 800d9da:	e002      	b.n	800d9e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d9dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d9de:	f06f 0301 	mvn.w	r3, #1
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	080188ac 	.word	0x080188ac
 800d9f0:	08018914 	.word	0x08018914
 800d9f4:	08018948 	.word	0x08018948

0800d9f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08e      	sub	sp, #56	; 0x38
 800d9fc:	af04      	add	r7, sp, #16
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800da02:	4b87      	ldr	r3, [pc, #540]	; (800dc20 <icmp_input+0x228>)
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	f003 030f 	and.w	r3, r3, #15
 800da10:	b2db      	uxtb	r3, r3
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	b2db      	uxtb	r3, r3
 800da16:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800da18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da1a:	2b13      	cmp	r3, #19
 800da1c:	f240 80e8 	bls.w	800dbf0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	895b      	ldrh	r3, [r3, #10]
 800da24:	2b03      	cmp	r3, #3
 800da26:	f240 80e5 	bls.w	800dbf4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800da34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 80d2 	beq.w	800dbe2 <icmp_input+0x1ea>
 800da3e:	2b08      	cmp	r3, #8
 800da40:	f040 80d2 	bne.w	800dbe8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800da44:	4b77      	ldr	r3, [pc, #476]	; (800dc24 <icmp_input+0x22c>)
 800da46:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da48:	4b75      	ldr	r3, [pc, #468]	; (800dc20 <icmp_input+0x228>)
 800da4a:	695b      	ldr	r3, [r3, #20]
 800da4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da50:	2be0      	cmp	r3, #224	; 0xe0
 800da52:	f000 80d6 	beq.w	800dc02 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da56:	4b72      	ldr	r3, [pc, #456]	; (800dc20 <icmp_input+0x228>)
 800da58:	695a      	ldr	r2, [r3, #20]
 800da5a:	4b71      	ldr	r3, [pc, #452]	; (800dc20 <icmp_input+0x228>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4619      	mov	r1, r3
 800da60:	4610      	mov	r0, r2
 800da62:	f000 fce5 	bl	800e430 <ip4_addr_isbroadcast_u32>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f040 80cc 	bne.w	800dc06 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	891b      	ldrh	r3, [r3, #8]
 800da72:	2b07      	cmp	r3, #7
 800da74:	f240 80c0 	bls.w	800dbf8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f9e0 	bl	800de3e <inet_chksum_pbuf>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d003      	beq.n	800da8c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f002 fefd 	bl	8010884 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800da8a:	e0c5      	b.n	800dc18 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da8e:	330e      	adds	r3, #14
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f002 fe60 	bl	8010758 <pbuf_add_header>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d04b      	beq.n	800db36 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	891a      	ldrh	r2, [r3, #8]
 800daa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daa4:	4413      	add	r3, r2
 800daa6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	891b      	ldrh	r3, [r3, #8]
 800daac:	8b7a      	ldrh	r2, [r7, #26]
 800daae:	429a      	cmp	r2, r3
 800dab0:	f0c0 80ab 	bcc.w	800dc0a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dab4:	8b7b      	ldrh	r3, [r7, #26]
 800dab6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800daba:	4619      	mov	r1, r3
 800dabc:	200e      	movs	r0, #14
 800dabe:	f002 fc01 	bl	80102c4 <pbuf_alloc>
 800dac2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f000 80a1 	beq.w	800dc0e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	895b      	ldrh	r3, [r3, #10]
 800dad0:	461a      	mov	r2, r3
 800dad2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dad4:	3308      	adds	r3, #8
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d203      	bcs.n	800dae2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dada:	6978      	ldr	r0, [r7, #20]
 800dadc:	f002 fed2 	bl	8010884 <pbuf_free>
          goto icmperr;
 800dae0:	e096      	b.n	800dc10 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daea:	4618      	mov	r0, r3
 800daec:	f009 fc15 	bl	801731a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800daf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daf2:	4619      	mov	r1, r3
 800daf4:	6978      	ldr	r0, [r7, #20]
 800daf6:	f002 fe3f 	bl	8010778 <pbuf_remove_header>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d009      	beq.n	800db14 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800db00:	4b49      	ldr	r3, [pc, #292]	; (800dc28 <icmp_input+0x230>)
 800db02:	22b6      	movs	r2, #182	; 0xb6
 800db04:	4949      	ldr	r1, [pc, #292]	; (800dc2c <icmp_input+0x234>)
 800db06:	484a      	ldr	r0, [pc, #296]	; (800dc30 <icmp_input+0x238>)
 800db08:	f009 fc34 	bl	8017374 <iprintf>
          pbuf_free(r);
 800db0c:	6978      	ldr	r0, [r7, #20]
 800db0e:	f002 feb9 	bl	8010884 <pbuf_free>
          goto icmperr;
 800db12:	e07d      	b.n	800dc10 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800db14:	6879      	ldr	r1, [r7, #4]
 800db16:	6978      	ldr	r0, [r7, #20]
 800db18:	f002 ffe8 	bl	8010aec <pbuf_copy>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d003      	beq.n	800db2a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800db22:	6978      	ldr	r0, [r7, #20]
 800db24:	f002 feae 	bl	8010884 <pbuf_free>
          goto icmperr;
 800db28:	e072      	b.n	800dc10 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f002 feaa 	bl	8010884 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	607b      	str	r3, [r7, #4]
 800db34:	e00f      	b.n	800db56 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db38:	330e      	adds	r3, #14
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f002 fe1b 	bl	8010778 <pbuf_remove_header>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d006      	beq.n	800db56 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db48:	4b37      	ldr	r3, [pc, #220]	; (800dc28 <icmp_input+0x230>)
 800db4a:	22c7      	movs	r2, #199	; 0xc7
 800db4c:	4939      	ldr	r1, [pc, #228]	; (800dc34 <icmp_input+0x23c>)
 800db4e:	4838      	ldr	r0, [pc, #224]	; (800dc30 <icmp_input+0x238>)
 800db50:	f009 fc10 	bl	8017374 <iprintf>
          goto icmperr;
 800db54:	e05c      	b.n	800dc10 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800db5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f002 fdf9 	bl	8010758 <pbuf_add_header>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d13c      	bne.n	800dbe6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800db7a:	4b29      	ldr	r3, [pc, #164]	; (800dc20 <icmp_input+0x228>)
 800db7c:	691a      	ldr	r2, [r3, #16]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2200      	movs	r2, #0
 800db86:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	885b      	ldrh	r3, [r3, #2]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800db92:	4293      	cmp	r3, r2
 800db94:	d907      	bls.n	800dba6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	885b      	ldrh	r3, [r3, #2]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	3309      	adds	r3, #9
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	805a      	strh	r2, [r3, #2]
 800dba4:	e006      	b.n	800dbb4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	885b      	ldrh	r3, [r3, #2]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	3308      	adds	r3, #8
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	22ff      	movs	r2, #255	; 0xff
 800dbb8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	729a      	strb	r2, [r3, #10]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	9302      	str	r3, [sp, #8]
 800dbc8:	2301      	movs	r3, #1
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	23ff      	movs	r3, #255	; 0xff
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	69f9      	ldr	r1, [r7, #28]
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fb52 	bl	800e280 <ip4_output_if>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dbe0:	e001      	b.n	800dbe6 <icmp_input+0x1ee>
      break;
 800dbe2:	bf00      	nop
 800dbe4:	e000      	b.n	800dbe8 <icmp_input+0x1f0>
      break;
 800dbe6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f002 fe4b 	bl	8010884 <pbuf_free>
  return;
 800dbee:	e013      	b.n	800dc18 <icmp_input+0x220>
    goto lenerr;
 800dbf0:	bf00      	nop
 800dbf2:	e002      	b.n	800dbfa <icmp_input+0x202>
    goto lenerr;
 800dbf4:	bf00      	nop
 800dbf6:	e000      	b.n	800dbfa <icmp_input+0x202>
        goto lenerr;
 800dbf8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f002 fe42 	bl	8010884 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dc00:	e00a      	b.n	800dc18 <icmp_input+0x220>
        goto icmperr;
 800dc02:	bf00      	nop
 800dc04:	e004      	b.n	800dc10 <icmp_input+0x218>
        goto icmperr;
 800dc06:	bf00      	nop
 800dc08:	e002      	b.n	800dc10 <icmp_input+0x218>
          goto icmperr;
 800dc0a:	bf00      	nop
 800dc0c:	e000      	b.n	800dc10 <icmp_input+0x218>
          goto icmperr;
 800dc0e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f002 fe37 	bl	8010884 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dc16:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dc18:	3728      	adds	r7, #40	; 0x28
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	2400529c 	.word	0x2400529c
 800dc24:	240052b0 	.word	0x240052b0
 800dc28:	08018970 	.word	0x08018970
 800dc2c:	080189d8 	.word	0x080189d8
 800dc30:	08018a10 	.word	0x08018a10
 800dc34:	08018a38 	.word	0x08018a38

0800dc38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dc44:	78fb      	ldrb	r3, [r7, #3]
 800dc46:	461a      	mov	r2, r3
 800dc48:	2103      	movs	r1, #3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f814 	bl	800dc78 <icmp_send_response>
}
 800dc50:	bf00      	nop
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	461a      	mov	r2, r3
 800dc68:	210b      	movs	r1, #11
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f804 	bl	800dc78 <icmp_send_response>
}
 800dc70:	bf00      	nop
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b08c      	sub	sp, #48	; 0x30
 800dc7c:	af04      	add	r7, sp, #16
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	460b      	mov	r3, r1
 800dc82:	70fb      	strb	r3, [r7, #3]
 800dc84:	4613      	mov	r3, r2
 800dc86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dc88:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc8c:	2124      	movs	r1, #36	; 0x24
 800dc8e:	2022      	movs	r0, #34	; 0x22
 800dc90:	f002 fb18 	bl	80102c4 <pbuf_alloc>
 800dc94:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d056      	beq.n	800dd4a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	895b      	ldrh	r3, [r3, #10]
 800dca0:	2b23      	cmp	r3, #35	; 0x23
 800dca2:	d806      	bhi.n	800dcb2 <icmp_send_response+0x3a>
 800dca4:	4b2b      	ldr	r3, [pc, #172]	; (800dd54 <icmp_send_response+0xdc>)
 800dca6:	f240 1269 	movw	r2, #361	; 0x169
 800dcaa:	492b      	ldr	r1, [pc, #172]	; (800dd58 <icmp_send_response+0xe0>)
 800dcac:	482b      	ldr	r0, [pc, #172]	; (800dd5c <icmp_send_response+0xe4>)
 800dcae:	f009 fb61 	bl	8017374 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	78fa      	ldrb	r2, [r7, #3]
 800dcc2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	78ba      	ldrb	r2, [r7, #2]
 800dcc8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2200      	movs	r2, #0
 800dcce:	711a      	strb	r2, [r3, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	719a      	strb	r2, [r3, #6]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f103 0008 	add.w	r0, r3, #8
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	221c      	movs	r2, #28
 800dcec:	4619      	mov	r1, r3
 800dcee:	f009 fb14 	bl	801731a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dcf8:	f107 030c 	add.w	r3, r7, #12
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 f903 	bl	800df08 <ip4_route>
 800dd02:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d01b      	beq.n	800dd42 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	709a      	strb	r2, [r3, #2]
 800dd10:	2200      	movs	r2, #0
 800dd12:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	895b      	ldrh	r3, [r3, #10]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6978      	ldr	r0, [r7, #20]
 800dd1c:	f000 f87d 	bl	800de1a <inet_chksum>
 800dd20:	4603      	mov	r3, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dd28:	f107 020c 	add.w	r2, r7, #12
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	9302      	str	r3, [sp, #8]
 800dd30:	2301      	movs	r3, #1
 800dd32:	9301      	str	r3, [sp, #4]
 800dd34:	2300      	movs	r3, #0
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	23ff      	movs	r3, #255	; 0xff
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	69f8      	ldr	r0, [r7, #28]
 800dd3e:	f000 fa9f 	bl	800e280 <ip4_output_if>
  }
  pbuf_free(q);
 800dd42:	69f8      	ldr	r0, [r7, #28]
 800dd44:	f002 fd9e 	bl	8010884 <pbuf_free>
 800dd48:	e000      	b.n	800dd4c <icmp_send_response+0xd4>
    return;
 800dd4a:	bf00      	nop
}
 800dd4c:	3720      	adds	r7, #32
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	08018970 	.word	0x08018970
 800dd58:	08018a6c 	.word	0x08018a6c
 800dd5c:	08018a10 	.word	0x08018a10

0800dd60 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b089      	sub	sp, #36	; 0x24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	f003 0301 	and.w	r3, r3, #1
 800dd7c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00d      	beq.n	800dda0 <lwip_standard_chksum+0x40>
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	dd0a      	ble.n	800dda0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800dd8a:	69fa      	ldr	r2, [r7, #28]
 800dd8c:	1c53      	adds	r3, r2, #1
 800dd8e:	61fb      	str	r3, [r7, #28]
 800dd90:	f107 030e 	add.w	r3, r7, #14
 800dd94:	3301      	adds	r3, #1
 800dd96:	7812      	ldrb	r2, [r2, #0]
 800dd98:	701a      	strb	r2, [r3, #0]
    len--;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800dda4:	e00a      	b.n	800ddbc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	1c9a      	adds	r2, r3, #2
 800ddaa:	61ba      	str	r2, [r7, #24]
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	3b02      	subs	r3, #2
 800ddba:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	dcf1      	bgt.n	800dda6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	dd04      	ble.n	800ddd2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ddc8:	f107 030e 	add.w	r3, r7, #14
 800ddcc:	69ba      	ldr	r2, [r7, #24]
 800ddce:	7812      	ldrb	r2, [r2, #0]
 800ddd0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ddd2:	89fb      	ldrh	r3, [r7, #14]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	4413      	add	r3, r2
 800ddda:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	0c1a      	lsrs	r2, r3, #16
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	4413      	add	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	0c1a      	lsrs	r2, r3, #16
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	4413      	add	r3, r2
 800ddf2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d007      	beq.n	800de0a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	021b      	lsls	r3, r3, #8
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	0a1b      	lsrs	r3, r3, #8
 800de04:	b2db      	uxtb	r3, r3
 800de06:	4313      	orrs	r3, r2
 800de08:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	b29b      	uxth	r3, r3
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3724      	adds	r7, #36	; 0x24
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr

0800de1a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b082      	sub	sp, #8
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	460b      	mov	r3, r1
 800de24:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800de26:	887b      	ldrh	r3, [r7, #2]
 800de28:	4619      	mov	r1, r3
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7ff ff98 	bl	800dd60 <lwip_standard_chksum>
 800de30:	4603      	mov	r3, r0
 800de32:	43db      	mvns	r3, r3
 800de34:	b29b      	uxth	r3, r3
}
 800de36:	4618      	mov	r0, r3
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b086      	sub	sp, #24
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	613b      	str	r3, [r7, #16]
 800de52:	e02b      	b.n	800deac <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	895b      	ldrh	r3, [r3, #10]
 800de5c:	4619      	mov	r1, r3
 800de5e:	4610      	mov	r0, r2
 800de60:	f7ff ff7e 	bl	800dd60 <lwip_standard_chksum>
 800de64:	4603      	mov	r3, r0
 800de66:	461a      	mov	r2, r3
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	4413      	add	r3, r2
 800de6c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	0c1a      	lsrs	r2, r3, #16
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	b29b      	uxth	r3, r3
 800de76:	4413      	add	r3, r2
 800de78:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	895b      	ldrh	r3, [r3, #10]
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	b29b      	uxth	r3, r3
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00e      	beq.n	800dea6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	bf0c      	ite	eq
 800de8e:	2301      	moveq	r3, #1
 800de90:	2300      	movne	r3, #0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	021b      	lsls	r3, r3, #8
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	0a1b      	lsrs	r3, r3, #8
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	4313      	orrs	r3, r2
 800dea4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	613b      	str	r3, [r7, #16]
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1d0      	bne.n	800de54 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d007      	beq.n	800dec8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	021b      	lsls	r3, r3, #8
 800debc:	b29a      	uxth	r2, r3
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	0a1b      	lsrs	r3, r3, #8
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	4313      	orrs	r3, r2
 800dec6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	b29b      	uxth	r3, r3
 800decc:	43db      	mvns	r3, r3
 800dece:	b29b      	uxth	r3, r3
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3718      	adds	r7, #24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800dede:	2300      	movs	r3, #0
 800dee0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800dee2:	f002 ffef 	bl	8010ec4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800dee6:	f001 f9e3 	bl	800f2b0 <mem_init>
  memp_init();
 800deea:	f001 fd47 	bl	800f97c <memp_init>
  pbuf_init();
  netif_init();
 800deee:	f001 fe53 	bl	800fb98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800def2:	f008 fcd5 	bl	80168a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800def6:	f003 f861 	bl	8010fbc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800defa:	f008 fc19 	bl	8016730 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
	...

0800df08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800df10:	4b33      	ldr	r3, [pc, #204]	; (800dfe0 <ip4_route+0xd8>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	e036      	b.n	800df86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df1e:	f003 0301 	and.w	r3, r3, #1
 800df22:	b2db      	uxtb	r3, r3
 800df24:	2b00      	cmp	r3, #0
 800df26:	d02b      	beq.n	800df80 <ip4_route+0x78>
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df2e:	089b      	lsrs	r3, r3, #2
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	b2db      	uxtb	r3, r3
 800df36:	2b00      	cmp	r3, #0
 800df38:	d022      	beq.n	800df80 <ip4_route+0x78>
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3304      	adds	r3, #4
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d01d      	beq.n	800df80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	3304      	adds	r3, #4
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	405a      	eors	r2, r3
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3308      	adds	r3, #8
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4013      	ands	r3, r2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	e038      	b.n	800dfd2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df66:	f003 0302 	and.w	r3, r3, #2
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d108      	bne.n	800df80 <ip4_route+0x78>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	330c      	adds	r3, #12
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d101      	bne.n	800df80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	e028      	b.n	800dfd2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1c5      	bne.n	800df18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df8c:	4b15      	ldr	r3, [pc, #84]	; (800dfe4 <ip4_route+0xdc>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d01a      	beq.n	800dfca <ip4_route+0xc2>
 800df94:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <ip4_route+0xdc>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d012      	beq.n	800dfca <ip4_route+0xc2>
 800dfa4:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <ip4_route+0xdc>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfac:	f003 0304 	and.w	r3, r3, #4
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00a      	beq.n	800dfca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dfb4:	4b0b      	ldr	r3, [pc, #44]	; (800dfe4 <ip4_route+0xdc>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d004      	beq.n	800dfca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b7f      	cmp	r3, #127	; 0x7f
 800dfc8:	d101      	bne.n	800dfce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	e001      	b.n	800dfd2 <ip4_route+0xca>
  }

  return netif_default;
 800dfce:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <ip4_route+0xdc>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	2400834c 	.word	0x2400834c
 800dfe4:	24008350 	.word	0x24008350

0800dfe8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dff6:	f003 0301 	and.w	r3, r3, #1
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d016      	beq.n	800e02e <ip4_input_accept+0x46>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3304      	adds	r3, #4
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d011      	beq.n	800e02e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e00a:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <ip4_input_accept+0x50>)
 800e00c:	695a      	ldr	r2, [r3, #20]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	3304      	adds	r3, #4
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	429a      	cmp	r2, r3
 800e016:	d008      	beq.n	800e02a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e018:	4b07      	ldr	r3, [pc, #28]	; (800e038 <ip4_input_accept+0x50>)
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	6879      	ldr	r1, [r7, #4]
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 fa06 	bl	800e430 <ip4_addr_isbroadcast_u32>
 800e024:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e026:	2b00      	cmp	r3, #0
 800e028:	d001      	beq.n	800e02e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e000      	b.n	800e030 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e02e:	2300      	movs	r3, #0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	2400529c 	.word	0x2400529c

0800e03c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b086      	sub	sp, #24
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	091b      	lsrs	r3, r3, #4
 800e052:	b2db      	uxtb	r3, r3
 800e054:	2b04      	cmp	r3, #4
 800e056:	d004      	beq.n	800e062 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f002 fc13 	bl	8010884 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e05e:	2300      	movs	r3, #0
 800e060:	e105      	b.n	800e26e <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	f003 030f 	and.w	r3, r3, #15
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	885b      	ldrh	r3, [r3, #2]
 800e076:	b29b      	uxth	r3, r3
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fe fc6d 	bl	800c958 <lwip_htons>
 800e07e:	4603      	mov	r3, r0
 800e080:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	891b      	ldrh	r3, [r3, #8]
 800e086:	89ba      	ldrh	r2, [r7, #12]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d204      	bcs.n	800e096 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e08c:	89bb      	ldrh	r3, [r7, #12]
 800e08e:	4619      	mov	r1, r3
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f002 fa71 	bl	8010578 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	895b      	ldrh	r3, [r3, #10]
 800e09a:	89fa      	ldrh	r2, [r7, #14]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d807      	bhi.n	800e0b0 <ip4_input+0x74>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	891b      	ldrh	r3, [r3, #8]
 800e0a4:	89ba      	ldrh	r2, [r7, #12]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d802      	bhi.n	800e0b0 <ip4_input+0x74>
 800e0aa:	89fb      	ldrh	r3, [r7, #14]
 800e0ac:	2b13      	cmp	r3, #19
 800e0ae:	d804      	bhi.n	800e0ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f002 fbe7 	bl	8010884 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e0d9      	b.n	800e26e <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	4a6e      	ldr	r2, [pc, #440]	; (800e278 <ip4_input+0x23c>)
 800e0c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	4a6c      	ldr	r2, [pc, #432]	; (800e278 <ip4_input+0x23c>)
 800e0c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e0ca:	4b6b      	ldr	r3, [pc, #428]	; (800e278 <ip4_input+0x23c>)
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0d2:	2be0      	cmp	r3, #224	; 0xe0
 800e0d4:	d112      	bne.n	800e0fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0dc:	f003 0301 	and.w	r3, r3, #1
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d007      	beq.n	800e0f6 <ip4_input+0xba>
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <ip4_input+0xba>
      netif = inp;
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	613b      	str	r3, [r7, #16]
 800e0f4:	e02a      	b.n	800e14c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	613b      	str	r3, [r7, #16]
 800e0fa:	e027      	b.n	800e14c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e0fc:	6838      	ldr	r0, [r7, #0]
 800e0fe:	f7ff ff73 	bl	800dfe8 <ip4_input_accept>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <ip4_input+0xd2>
      netif = inp;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	613b      	str	r3, [r7, #16]
 800e10c:	e01e      	b.n	800e14c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e112:	4b59      	ldr	r3, [pc, #356]	; (800e278 <ip4_input+0x23c>)
 800e114:	695b      	ldr	r3, [r3, #20]
 800e116:	b2db      	uxtb	r3, r3
 800e118:	2b7f      	cmp	r3, #127	; 0x7f
 800e11a:	d017      	beq.n	800e14c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e11c:	4b57      	ldr	r3, [pc, #348]	; (800e27c <ip4_input+0x240>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	613b      	str	r3, [r7, #16]
 800e122:	e00e      	b.n	800e142 <ip4_input+0x106>
          if (netif == inp) {
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d006      	beq.n	800e13a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e12c:	6938      	ldr	r0, [r7, #16]
 800e12e:	f7ff ff5b 	bl	800dfe8 <ip4_input_accept>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d108      	bne.n	800e14a <ip4_input+0x10e>
 800e138:	e000      	b.n	800e13c <ip4_input+0x100>
            continue;
 800e13a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	613b      	str	r3, [r7, #16]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1ed      	bne.n	800e124 <ip4_input+0xe8>
 800e148:	e000      	b.n	800e14c <ip4_input+0x110>
            break;
 800e14a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e14c:	4b4a      	ldr	r3, [pc, #296]	; (800e278 <ip4_input+0x23c>)
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	6839      	ldr	r1, [r7, #0]
 800e152:	4618      	mov	r0, r3
 800e154:	f000 f96c 	bl	800e430 <ip4_addr_isbroadcast_u32>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d105      	bne.n	800e16a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e15e:	4b46      	ldr	r3, [pc, #280]	; (800e278 <ip4_input+0x23c>)
 800e160:	691b      	ldr	r3, [r3, #16]
 800e162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e166:	2be0      	cmp	r3, #224	; 0xe0
 800e168:	d104      	bne.n	800e174 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f002 fb8a 	bl	8010884 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	e07c      	b.n	800e26e <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d104      	bne.n	800e184 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f002 fb82 	bl	8010884 <pbuf_free>
    return ERR_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	e074      	b.n	800e26e <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	88db      	ldrh	r3, [r3, #6]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	461a      	mov	r2, r3
 800e18c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e190:	4013      	ands	r3, r2
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00b      	beq.n	800e1ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fc90 	bl	800eabc <ip4_reass>
 800e19c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d101      	bne.n	800e1a8 <ip4_input+0x16c>
      return ERR_OK;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	e062      	b.n	800e26e <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e1ae:	4a32      	ldr	r2, [pc, #200]	; (800e278 <ip4_input+0x23c>)
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e1b4:	4a30      	ldr	r2, [pc, #192]	; (800e278 <ip4_input+0x23c>)
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e1ba:	4a2f      	ldr	r2, [pc, #188]	; (800e278 <ip4_input+0x23c>)
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	f003 030f 	and.w	r3, r3, #15
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	4b29      	ldr	r3, [pc, #164]	; (800e278 <ip4_input+0x23c>)
 800e1d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e1d4:	89fb      	ldrh	r3, [r7, #14]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f002 facd 	bl	8010778 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	7a5b      	ldrb	r3, [r3, #9]
 800e1e2:	2b06      	cmp	r3, #6
 800e1e4:	d009      	beq.n	800e1fa <ip4_input+0x1be>
 800e1e6:	2b11      	cmp	r3, #17
 800e1e8:	d002      	beq.n	800e1f0 <ip4_input+0x1b4>
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d00a      	beq.n	800e204 <ip4_input+0x1c8>
 800e1ee:	e00e      	b.n	800e20e <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f008 fc02 	bl	80169fc <udp_input>
        break;
 800e1f8:	e026      	b.n	800e248 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f004 fa6b 	bl	80126d8 <tcp_input>
        break;
 800e202:	e021      	b.n	800e248 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff fbf6 	bl	800d9f8 <icmp_input>
        break;
 800e20c:	e01c      	b.n	800e248 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e20e:	4b1a      	ldr	r3, [pc, #104]	; (800e278 <ip4_input+0x23c>)
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	6939      	ldr	r1, [r7, #16]
 800e214:	4618      	mov	r0, r3
 800e216:	f000 f90b 	bl	800e430 <ip4_addr_isbroadcast_u32>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10f      	bne.n	800e240 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e220:	4b15      	ldr	r3, [pc, #84]	; (800e278 <ip4_input+0x23c>)
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e228:	2be0      	cmp	r3, #224	; 0xe0
 800e22a:	d009      	beq.n	800e240 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e22c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f002 fb13 	bl	801085e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e238:	2102      	movs	r1, #2
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7ff fcfc 	bl	800dc38 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f002 fb1f 	bl	8010884 <pbuf_free>
        break;
 800e246:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e248:	4b0b      	ldr	r3, [pc, #44]	; (800e278 <ip4_input+0x23c>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e24e:	4b0a      	ldr	r3, [pc, #40]	; (800e278 <ip4_input+0x23c>)
 800e250:	2200      	movs	r2, #0
 800e252:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e254:	4b08      	ldr	r3, [pc, #32]	; (800e278 <ip4_input+0x23c>)
 800e256:	2200      	movs	r2, #0
 800e258:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e25a:	4b07      	ldr	r3, [pc, #28]	; (800e278 <ip4_input+0x23c>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e260:	4b05      	ldr	r3, [pc, #20]	; (800e278 <ip4_input+0x23c>)
 800e262:	2200      	movs	r2, #0
 800e264:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e266:	4b04      	ldr	r3, [pc, #16]	; (800e278 <ip4_input+0x23c>)
 800e268:	2200      	movs	r2, #0
 800e26a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	2400529c 	.word	0x2400529c
 800e27c:	2400834c 	.word	0x2400834c

0800e280 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08a      	sub	sp, #40	; 0x28
 800e284:	af04      	add	r7, sp, #16
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d009      	beq.n	800e2ac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d003      	beq.n	800e2a6 <ip4_output_if+0x26>
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d102      	bne.n	800e2ac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e2ac:	78fa      	ldrb	r2, [r7, #3]
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	9302      	str	r3, [sp, #8]
 800e2b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2b6:	9301      	str	r3, [sp, #4]
 800e2b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	6979      	ldr	r1, [r7, #20]
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f000 f805 	bl	800e2d4 <ip4_output_if_src>
 800e2ca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	7b9b      	ldrb	r3, [r3, #14]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d006      	beq.n	800e2f8 <ip4_output_if_src+0x24>
 800e2ea:	4b4b      	ldr	r3, [pc, #300]	; (800e418 <ip4_output_if_src+0x144>)
 800e2ec:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e2f0:	494a      	ldr	r1, [pc, #296]	; (800e41c <ip4_output_if_src+0x148>)
 800e2f2:	484b      	ldr	r0, [pc, #300]	; (800e420 <ip4_output_if_src+0x14c>)
 800e2f4:	f009 f83e 	bl	8017374 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d060      	beq.n	800e3c0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e2fe:	2314      	movs	r3, #20
 800e300:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e302:	2114      	movs	r1, #20
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f002 fa27 	bl	8010758 <pbuf_add_header>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e310:	f06f 0301 	mvn.w	r3, #1
 800e314:	e07c      	b.n	800e410 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	895b      	ldrh	r3, [r3, #10]
 800e320:	2b13      	cmp	r3, #19
 800e322:	d806      	bhi.n	800e332 <ip4_output_if_src+0x5e>
 800e324:	4b3c      	ldr	r3, [pc, #240]	; (800e418 <ip4_output_if_src+0x144>)
 800e326:	f240 3289 	movw	r2, #905	; 0x389
 800e32a:	493e      	ldr	r1, [pc, #248]	; (800e424 <ip4_output_if_src+0x150>)
 800e32c:	483c      	ldr	r0, [pc, #240]	; (800e420 <ip4_output_if_src+0x14c>)
 800e32e:	f009 f821 	bl	8017374 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	78fa      	ldrb	r2, [r7, #3]
 800e336:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e33e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e348:	8b7b      	ldrh	r3, [r7, #26]
 800e34a:	089b      	lsrs	r3, r3, #2
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e354:	b2da      	uxtb	r2, r3
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e360:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	891b      	ldrh	r3, [r3, #8]
 800e366:	4618      	mov	r0, r3
 800e368:	f7fe faf6 	bl	800c958 <lwip_htons>
 800e36c:	4603      	mov	r3, r0
 800e36e:	461a      	mov	r2, r3
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	2200      	movs	r2, #0
 800e378:	719a      	strb	r2, [r3, #6]
 800e37a:	2200      	movs	r2, #0
 800e37c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e37e:	4b2a      	ldr	r3, [pc, #168]	; (800e428 <ip4_output_if_src+0x154>)
 800e380:	881b      	ldrh	r3, [r3, #0]
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe fae8 	bl	800c958 <lwip_htons>
 800e388:	4603      	mov	r3, r0
 800e38a:	461a      	mov	r2, r3
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e390:	4b25      	ldr	r3, [pc, #148]	; (800e428 <ip4_output_if_src+0x154>)
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	3301      	adds	r3, #1
 800e396:	b29a      	uxth	r2, r3
 800e398:	4b23      	ldr	r3, [pc, #140]	; (800e428 <ip4_output_if_src+0x154>)
 800e39a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d104      	bne.n	800e3ac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e3a2:	4b22      	ldr	r3, [pc, #136]	; (800e42c <ip4_output_if_src+0x158>)
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	60da      	str	r2, [r3, #12]
 800e3aa:	e003      	b.n	800e3b4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	729a      	strb	r2, [r3, #10]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	72da      	strb	r2, [r3, #11]
 800e3be:	e00f      	b.n	800e3e0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	895b      	ldrh	r3, [r3, #10]
 800e3c4:	2b13      	cmp	r3, #19
 800e3c6:	d802      	bhi.n	800e3ce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e3c8:	f06f 0301 	mvn.w	r3, #1
 800e3cc:	e020      	b.n	800e410 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e3da:	f107 0314 	add.w	r3, r7, #20
 800e3de:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00c      	beq.n	800e402 <ip4_output_if_src+0x12e>
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	891a      	ldrh	r2, [r3, #8]
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d906      	bls.n	800e402 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 fd4b 	bl	800ee94 <ip4_frag>
 800e3fe:	4603      	mov	r3, r0
 800e400:	e006      	b.n	800e410 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	68f9      	ldr	r1, [r7, #12]
 800e40a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e40c:	4798      	blx	r3
 800e40e:	4603      	mov	r3, r0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3720      	adds	r7, #32
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	08018a98 	.word	0x08018a98
 800e41c:	08018b00 	.word	0x08018b00
 800e420:	08018b0c 	.word	0x08018b0c
 800e424:	08018b34 	.word	0x08018b34
 800e428:	24004aca 	.word	0x24004aca
 800e42c:	0801b40c 	.word	0x0801b40c

0800e430 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e444:	d002      	beq.n	800e44c <ip4_addr_isbroadcast_u32+0x1c>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e02a      	b.n	800e4a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	e021      	b.n	800e4a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	3304      	adds	r3, #4
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d101      	bne.n	800e472 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e46e:	2300      	movs	r3, #0
 800e470:	e019      	b.n	800e4a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	3304      	adds	r3, #4
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	405a      	eors	r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	3308      	adds	r3, #8
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4013      	ands	r3, r2
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10d      	bne.n	800e4a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	3308      	adds	r3, #8
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	43da      	mvns	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	3308      	adds	r3, #8
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d101      	bne.n	800e4a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e000      	b.n	800e4a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e4a4:	2300      	movs	r3, #0
  }
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
	...

0800e4b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e4be:	4b12      	ldr	r3, [pc, #72]	; (800e508 <ip_reass_tmr+0x54>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e4c4:	e018      	b.n	800e4f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	7fdb      	ldrb	r3, [r3, #31]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00b      	beq.n	800e4e6 <ip_reass_tmr+0x32>
      r->timer--;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	7fdb      	ldrb	r3, [r3, #31]
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e008      	b.n	800e4f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e4f0:	68b9      	ldr	r1, [r7, #8]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f80a 	bl	800e50c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1e3      	bne.n	800e4c6 <ip_reass_tmr+0x12>
    }
  }
}
 800e4fe:	bf00      	nop
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	24004acc 	.word	0x24004acc

0800e50c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d105      	bne.n	800e52e <ip_reass_free_complete_datagram+0x22>
 800e522:	4b45      	ldr	r3, [pc, #276]	; (800e638 <ip_reass_free_complete_datagram+0x12c>)
 800e524:	22ab      	movs	r2, #171	; 0xab
 800e526:	4945      	ldr	r1, [pc, #276]	; (800e63c <ip_reass_free_complete_datagram+0x130>)
 800e528:	4845      	ldr	r0, [pc, #276]	; (800e640 <ip_reass_free_complete_datagram+0x134>)
 800e52a:	f008 ff23 	bl	8017374 <iprintf>
  if (prev != NULL) {
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00a      	beq.n	800e54a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d005      	beq.n	800e54a <ip_reass_free_complete_datagram+0x3e>
 800e53e:	4b3e      	ldr	r3, [pc, #248]	; (800e638 <ip_reass_free_complete_datagram+0x12c>)
 800e540:	22ad      	movs	r2, #173	; 0xad
 800e542:	4940      	ldr	r1, [pc, #256]	; (800e644 <ip_reass_free_complete_datagram+0x138>)
 800e544:	483e      	ldr	r0, [pc, #248]	; (800e640 <ip_reass_free_complete_datagram+0x134>)
 800e546:	f008 ff15 	bl	8017374 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	889b      	ldrh	r3, [r3, #4]
 800e556:	b29b      	uxth	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d12a      	bne.n	800e5b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	6858      	ldr	r0, [r3, #4]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	3308      	adds	r3, #8
 800e572:	2214      	movs	r2, #20
 800e574:	4619      	mov	r1, r3
 800e576:	f008 fed0 	bl	801731a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e57a:	2101      	movs	r1, #1
 800e57c:	69b8      	ldr	r0, [r7, #24]
 800e57e:	f7ff fb6b 	bl	800dc58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e582:	69b8      	ldr	r0, [r7, #24]
 800e584:	f002 fa0c 	bl	80109a0 <pbuf_clen>
 800e588:	4603      	mov	r3, r0
 800e58a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e58c:	8bfa      	ldrh	r2, [r7, #30]
 800e58e:	8a7b      	ldrh	r3, [r7, #18]
 800e590:	4413      	add	r3, r2
 800e592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e596:	db05      	blt.n	800e5a4 <ip_reass_free_complete_datagram+0x98>
 800e598:	4b27      	ldr	r3, [pc, #156]	; (800e638 <ip_reass_free_complete_datagram+0x12c>)
 800e59a:	22bc      	movs	r2, #188	; 0xbc
 800e59c:	492a      	ldr	r1, [pc, #168]	; (800e648 <ip_reass_free_complete_datagram+0x13c>)
 800e59e:	4828      	ldr	r0, [pc, #160]	; (800e640 <ip_reass_free_complete_datagram+0x134>)
 800e5a0:	f008 fee8 	bl	8017374 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e5a4:	8bfa      	ldrh	r2, [r7, #30]
 800e5a6:	8a7b      	ldrh	r3, [r7, #18]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e5ac:	69b8      	ldr	r0, [r7, #24]
 800e5ae:	f002 f969 	bl	8010884 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e5b8:	e01f      	b.n	800e5fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f002 f9e8 	bl	80109a0 <pbuf_clen>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e5d4:	8bfa      	ldrh	r2, [r7, #30]
 800e5d6:	8a7b      	ldrh	r3, [r7, #18]
 800e5d8:	4413      	add	r3, r2
 800e5da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5de:	db05      	blt.n	800e5ec <ip_reass_free_complete_datagram+0xe0>
 800e5e0:	4b15      	ldr	r3, [pc, #84]	; (800e638 <ip_reass_free_complete_datagram+0x12c>)
 800e5e2:	22cc      	movs	r2, #204	; 0xcc
 800e5e4:	4918      	ldr	r1, [pc, #96]	; (800e648 <ip_reass_free_complete_datagram+0x13c>)
 800e5e6:	4816      	ldr	r0, [pc, #88]	; (800e640 <ip_reass_free_complete_datagram+0x134>)
 800e5e8:	f008 fec4 	bl	8017374 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e5ec:	8bfa      	ldrh	r2, [r7, #30]
 800e5ee:	8a7b      	ldrh	r3, [r7, #18]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f002 f945 	bl	8010884 <pbuf_free>
  while (p != NULL) {
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1dc      	bne.n	800e5ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f8c2 	bl	800e78c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e608:	4b10      	ldr	r3, [pc, #64]	; (800e64c <ip_reass_free_complete_datagram+0x140>)
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	8bfa      	ldrh	r2, [r7, #30]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d905      	bls.n	800e61e <ip_reass_free_complete_datagram+0x112>
 800e612:	4b09      	ldr	r3, [pc, #36]	; (800e638 <ip_reass_free_complete_datagram+0x12c>)
 800e614:	22d2      	movs	r2, #210	; 0xd2
 800e616:	490e      	ldr	r1, [pc, #56]	; (800e650 <ip_reass_free_complete_datagram+0x144>)
 800e618:	4809      	ldr	r0, [pc, #36]	; (800e640 <ip_reass_free_complete_datagram+0x134>)
 800e61a:	f008 feab 	bl	8017374 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e61e:	4b0b      	ldr	r3, [pc, #44]	; (800e64c <ip_reass_free_complete_datagram+0x140>)
 800e620:	881a      	ldrh	r2, [r3, #0]
 800e622:	8bfb      	ldrh	r3, [r7, #30]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	b29a      	uxth	r2, r3
 800e628:	4b08      	ldr	r3, [pc, #32]	; (800e64c <ip_reass_free_complete_datagram+0x140>)
 800e62a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e62c:	8bfb      	ldrh	r3, [r7, #30]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3720      	adds	r7, #32
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	08018b64 	.word	0x08018b64
 800e63c:	08018bd0 	.word	0x08018bd0
 800e640:	08018bdc 	.word	0x08018bdc
 800e644:	08018c04 	.word	0x08018c04
 800e648:	08018c18 	.word	0x08018c18
 800e64c:	24004ad0 	.word	0x24004ad0
 800e650:	08018c38 	.word	0x08018c38

0800e654 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b08a      	sub	sp, #40	; 0x28
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e65e:	2300      	movs	r3, #0
 800e660:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e662:	2300      	movs	r3, #0
 800e664:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e666:	2300      	movs	r3, #0
 800e668:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e66a:	2300      	movs	r3, #0
 800e66c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e66e:	2300      	movs	r3, #0
 800e670:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e672:	4b28      	ldr	r3, [pc, #160]	; (800e714 <ip_reass_remove_oldest_datagram+0xc0>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e678:	e030      	b.n	800e6dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	695a      	ldr	r2, [r3, #20]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	429a      	cmp	r2, r3
 800e684:	d10c      	bne.n	800e6a0 <ip_reass_remove_oldest_datagram+0x4c>
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	699a      	ldr	r2, [r3, #24]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	691b      	ldr	r3, [r3, #16]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d106      	bne.n	800e6a0 <ip_reass_remove_oldest_datagram+0x4c>
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	899a      	ldrh	r2, [r3, #12]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	889b      	ldrh	r3, [r3, #4]
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d014      	beq.n	800e6ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d104      	bne.n	800e6b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	61bb      	str	r3, [r7, #24]
 800e6b4:	e009      	b.n	800e6ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	7fda      	ldrb	r2, [r3, #31]
 800e6ba:	6a3b      	ldr	r3, [r7, #32]
 800e6bc:	7fdb      	ldrb	r3, [r3, #31]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d803      	bhi.n	800e6ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d001      	beq.n	800e6d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1cb      	bne.n	800e67a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d008      	beq.n	800e6fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e6e8:	69b9      	ldr	r1, [r7, #24]
 800e6ea:	6a38      	ldr	r0, [r7, #32]
 800e6ec:	f7ff ff0e 	bl	800e50c <ip_reass_free_complete_datagram>
 800e6f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	da02      	bge.n	800e708 <ip_reass_remove_oldest_datagram+0xb4>
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	2b01      	cmp	r3, #1
 800e706:	dcac      	bgt.n	800e662 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e708:	697b      	ldr	r3, [r7, #20]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3728      	adds	r7, #40	; 0x28
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	24004acc 	.word	0x24004acc

0800e718 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e722:	2004      	movs	r0, #4
 800e724:	f001 f998 	bl	800fa58 <memp_malloc>
 800e728:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d110      	bne.n	800e752 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e730:	6839      	ldr	r1, [r7, #0]
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7ff ff8e 	bl	800e654 <ip_reass_remove_oldest_datagram>
 800e738:	4602      	mov	r2, r0
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	4293      	cmp	r3, r2
 800e73e:	dc03      	bgt.n	800e748 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e740:	2004      	movs	r0, #4
 800e742:	f001 f989 	bl	800fa58 <memp_malloc>
 800e746:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d101      	bne.n	800e752 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e74e:	2300      	movs	r3, #0
 800e750:	e016      	b.n	800e780 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e752:	2220      	movs	r2, #32
 800e754:	2100      	movs	r1, #0
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f008 fe03 	bl	8017362 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	220f      	movs	r2, #15
 800e760:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e762:	4b09      	ldr	r3, [pc, #36]	; (800e788 <ip_reass_enqueue_new_datagram+0x70>)
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e76a:	4a07      	ldr	r2, [pc, #28]	; (800e788 <ip_reass_enqueue_new_datagram+0x70>)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	3308      	adds	r3, #8
 800e774:	2214      	movs	r2, #20
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	4618      	mov	r0, r3
 800e77a:	f008 fdce 	bl	801731a <memcpy>
  return ipr;
 800e77e:	68fb      	ldr	r3, [r7, #12]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	24004acc 	.word	0x24004acc

0800e78c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e796:	4b10      	ldr	r3, [pc, #64]	; (800e7d8 <ip_reass_dequeue_datagram+0x4c>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d104      	bne.n	800e7aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a0c      	ldr	r2, [pc, #48]	; (800e7d8 <ip_reass_dequeue_datagram+0x4c>)
 800e7a6:	6013      	str	r3, [r2, #0]
 800e7a8:	e00d      	b.n	800e7c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d106      	bne.n	800e7be <ip_reass_dequeue_datagram+0x32>
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <ip_reass_dequeue_datagram+0x50>)
 800e7b2:	f240 1245 	movw	r2, #325	; 0x145
 800e7b6:	490a      	ldr	r1, [pc, #40]	; (800e7e0 <ip_reass_dequeue_datagram+0x54>)
 800e7b8:	480a      	ldr	r0, [pc, #40]	; (800e7e4 <ip_reass_dequeue_datagram+0x58>)
 800e7ba:	f008 fddb 	bl	8017374 <iprintf>
    prev->next = ipr->next;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e7c6:	6879      	ldr	r1, [r7, #4]
 800e7c8:	2004      	movs	r0, #4
 800e7ca:	f001 f9bb 	bl	800fb44 <memp_free>
}
 800e7ce:	bf00      	nop
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	24004acc 	.word	0x24004acc
 800e7dc:	08018b64 	.word	0x08018b64
 800e7e0:	08018c5c 	.word	0x08018c5c
 800e7e4:	08018bdc 	.word	0x08018bdc

0800e7e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08c      	sub	sp, #48	; 0x30
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	885b      	ldrh	r3, [r3, #2]
 800e806:	b29b      	uxth	r3, r3
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fe f8a5 	bl	800c958 <lwip_htons>
 800e80e:	4603      	mov	r3, r0
 800e810:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	f003 030f 	and.w	r3, r3, #15
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e820:	7e7b      	ldrb	r3, [r7, #25]
 800e822:	b29b      	uxth	r3, r3
 800e824:	8b7a      	ldrh	r2, [r7, #26]
 800e826:	429a      	cmp	r2, r3
 800e828:	d202      	bcs.n	800e830 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e82a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e82e:	e135      	b.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e830:	7e7b      	ldrb	r3, [r7, #25]
 800e832:	b29b      	uxth	r3, r3
 800e834:	8b7a      	ldrh	r2, [r7, #26]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	88db      	ldrh	r3, [r3, #6]
 800e83e:	b29b      	uxth	r3, r3
 800e840:	4618      	mov	r0, r3
 800e842:	f7fe f889 	bl	800c958 <lwip_htons>
 800e846:	4603      	mov	r3, r0
 800e848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	00db      	lsls	r3, r3, #3
 800e850:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	2200      	movs	r2, #0
 800e85c:	701a      	strb	r2, [r3, #0]
 800e85e:	2200      	movs	r2, #0
 800e860:	705a      	strb	r2, [r3, #1]
 800e862:	2200      	movs	r2, #0
 800e864:	709a      	strb	r2, [r3, #2]
 800e866:	2200      	movs	r2, #0
 800e868:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86c:	8afa      	ldrh	r2, [r7, #22]
 800e86e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e870:	8afa      	ldrh	r2, [r7, #22]
 800e872:	8b7b      	ldrh	r3, [r7, #26]
 800e874:	4413      	add	r3, r2
 800e876:	b29a      	uxth	r2, r3
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	88db      	ldrh	r3, [r3, #6]
 800e880:	b29b      	uxth	r3, r3
 800e882:	8afa      	ldrh	r2, [r7, #22]
 800e884:	429a      	cmp	r2, r3
 800e886:	d902      	bls.n	800e88e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e88c:	e106      	b.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	627b      	str	r3, [r7, #36]	; 0x24
 800e894:	e068      	b.n	800e968 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89e:	889b      	ldrh	r3, [r3, #4]
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	889b      	ldrh	r3, [r3, #4]
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d235      	bcs.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d020      	beq.n	800e8fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	889b      	ldrh	r3, [r3, #4]
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	88db      	ldrh	r3, [r3, #6]
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d307      	bcc.n	800e8d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	88db      	ldrh	r3, [r3, #6]
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	889b      	ldrh	r3, [r3, #4]
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d902      	bls.n	800e8de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8dc:	e0de      	b.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	68ba      	ldr	r2, [r7, #8]
 800e8e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	88db      	ldrh	r3, [r3, #6]
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ec:	889b      	ldrh	r3, [r3, #4]
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d03d      	beq.n	800e970 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e8f8:	e03a      	b.n	800e970 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fc:	88db      	ldrh	r3, [r3, #6]
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	889b      	ldrh	r3, [r3, #4]
 800e904:	b29b      	uxth	r3, r3
 800e906:	429a      	cmp	r2, r3
 800e908:	d902      	bls.n	800e910 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e90a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e90e:	e0c5      	b.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	605a      	str	r2, [r3, #4]
      break;
 800e916:	e02b      	b.n	800e970 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91a:	889b      	ldrh	r3, [r3, #4]
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	889b      	ldrh	r3, [r3, #4]
 800e922:	b29b      	uxth	r3, r3
 800e924:	429a      	cmp	r2, r3
 800e926:	d102      	bne.n	800e92e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e92c:	e0b6      	b.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e930:	889b      	ldrh	r3, [r3, #4]
 800e932:	b29a      	uxth	r2, r3
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	88db      	ldrh	r3, [r3, #6]
 800e938:	b29b      	uxth	r3, r3
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d202      	bcs.n	800e944 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e93e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e942:	e0ab      	b.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	2b00      	cmp	r3, #0
 800e948:	d009      	beq.n	800e95e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94c:	88db      	ldrh	r3, [r3, #6]
 800e94e:	b29a      	uxth	r2, r3
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	889b      	ldrh	r3, [r3, #4]
 800e954:	b29b      	uxth	r3, r3
 800e956:	429a      	cmp	r2, r3
 800e958:	d001      	beq.n	800e95e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d193      	bne.n	800e896 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e96e:	e000      	b.n	800e972 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e970:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	d12d      	bne.n	800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d01c      	beq.n	800e9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	88db      	ldrh	r3, [r3, #6]
 800e982:	b29a      	uxth	r2, r3
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	889b      	ldrh	r3, [r3, #4]
 800e988:	b29b      	uxth	r3, r3
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d906      	bls.n	800e99c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e98e:	4b45      	ldr	r3, [pc, #276]	; (800eaa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e990:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e994:	4944      	ldr	r1, [pc, #272]	; (800eaa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e996:	4845      	ldr	r0, [pc, #276]	; (800eaac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e998:	f008 fcec 	bl	8017374 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	88db      	ldrh	r3, [r3, #6]
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	889b      	ldrh	r3, [r3, #4]
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d010      	beq.n	800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	623b      	str	r3, [r7, #32]
 800e9b6:	e00d      	b.n	800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d006      	beq.n	800e9ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e9c0:	4b38      	ldr	r3, [pc, #224]	; (800eaa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9c2:	f240 12bf 	movw	r2, #447	; 0x1bf
 800e9c6:	493a      	ldr	r1, [pc, #232]	; (800eab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e9c8:	4838      	ldr	r0, [pc, #224]	; (800eaac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9ca:	f008 fcd3 	bl	8017374 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d105      	bne.n	800e9e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	7f9b      	ldrb	r3, [r3, #30]
 800e9de:	f003 0301 	and.w	r3, r3, #1
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d059      	beq.n	800ea9a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e9e6:	6a3b      	ldr	r3, [r7, #32]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d04f      	beq.n	800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d006      	beq.n	800ea02 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	889b      	ldrh	r3, [r3, #4]
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d002      	beq.n	800ea08 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	623b      	str	r3, [r7, #32]
 800ea06:	e041      	b.n	800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea12:	e012      	b.n	800ea3a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ea1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1c:	88db      	ldrh	r3, [r3, #6]
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	889b      	ldrh	r3, [r3, #4]
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d002      	beq.n	800ea30 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	623b      	str	r3, [r7, #32]
            break;
 800ea2e:	e007      	b.n	800ea40 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ea34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1e9      	bne.n	800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ea40:	6a3b      	ldr	r3, [r7, #32]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d022      	beq.n	800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d106      	bne.n	800ea5c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ea4e:	4b15      	ldr	r3, [pc, #84]	; (800eaa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea50:	f240 12df 	movw	r2, #479	; 0x1df
 800ea54:	4917      	ldr	r1, [pc, #92]	; (800eab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ea56:	4815      	ldr	r0, [pc, #84]	; (800eaac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea58:	f008 fc8c 	bl	8017374 <iprintf>
          LWIP_ASSERT("sanity check",
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d106      	bne.n	800ea76 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ea68:	4b0e      	ldr	r3, [pc, #56]	; (800eaa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ea6e:	4911      	ldr	r1, [pc, #68]	; (800eab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ea70:	480e      	ldr	r0, [pc, #56]	; (800eaac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea72:	f008 fc7f 	bl	8017374 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ea76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d006      	beq.n	800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ea7e:	4b09      	ldr	r3, [pc, #36]	; (800eaa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea80:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ea84:	490c      	ldr	r1, [pc, #48]	; (800eab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ea86:	4809      	ldr	r0, [pc, #36]	; (800eaac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea88:	f008 fc74 	bl	8017374 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ea8c:	6a3b      	ldr	r3, [r7, #32]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	bf14      	ite	ne
 800ea92:	2301      	movne	r3, #1
 800ea94:	2300      	moveq	r3, #0
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	e000      	b.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3730      	adds	r7, #48	; 0x30
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	08018b64 	.word	0x08018b64
 800eaa8:	08018c78 	.word	0x08018c78
 800eaac:	08018bdc 	.word	0x08018bdc
 800eab0:	08018c98 	.word	0x08018c98
 800eab4:	08018cd0 	.word	0x08018cd0
 800eab8:	08018ce0 	.word	0x08018ce0

0800eabc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08e      	sub	sp, #56	; 0x38
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	f003 030f 	and.w	r3, r3, #15
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	2b14      	cmp	r3, #20
 800eada:	f040 8167 	bne.w	800edac <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	88db      	ldrh	r3, [r3, #6]
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fd ff37 	bl	800c958 <lwip_htons>
 800eaea:	4603      	mov	r3, r0
 800eaec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	885b      	ldrh	r3, [r3, #2]
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7fd ff2b 	bl	800c958 <lwip_htons>
 800eb02:	4603      	mov	r3, r0
 800eb04:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800eb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	f003 030f 	and.w	r3, r3, #15
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800eb16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	f0c0 8146 	bcc.w	800edb0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800eb24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f001 ff35 	bl	80109a0 <pbuf_clen>
 800eb36:	4603      	mov	r3, r0
 800eb38:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eb3a:	4ba3      	ldr	r3, [pc, #652]	; (800edc8 <ip4_reass+0x30c>)
 800eb3c:	881b      	ldrh	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	8c3b      	ldrh	r3, [r7, #32]
 800eb42:	4413      	add	r3, r2
 800eb44:	2b0a      	cmp	r3, #10
 800eb46:	dd10      	ble.n	800eb6a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eb48:	8c3b      	ldrh	r3, [r7, #32]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb4e:	f7ff fd81 	bl	800e654 <ip_reass_remove_oldest_datagram>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f000 812d 	beq.w	800edb4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eb5a:	4b9b      	ldr	r3, [pc, #620]	; (800edc8 <ip4_reass+0x30c>)
 800eb5c:	881b      	ldrh	r3, [r3, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	8c3b      	ldrh	r3, [r7, #32]
 800eb62:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eb64:	2b0a      	cmp	r3, #10
 800eb66:	f300 8125 	bgt.w	800edb4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb6a:	4b98      	ldr	r3, [pc, #608]	; (800edcc <ip4_reass+0x310>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	633b      	str	r3, [r7, #48]	; 0x30
 800eb70:	e015      	b.n	800eb9e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	695a      	ldr	r2, [r3, #20]
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d10c      	bne.n	800eb98 <ip4_reass+0xdc>
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	699a      	ldr	r2, [r3, #24]
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	691b      	ldr	r3, [r3, #16]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d106      	bne.n	800eb98 <ip4_reass+0xdc>
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	899a      	ldrh	r2, [r3, #12]
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	889b      	ldrh	r3, [r3, #4]
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d006      	beq.n	800eba6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	633b      	str	r3, [r7, #48]	; 0x30
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1e6      	bne.n	800eb72 <ip4_reass+0xb6>
 800eba4:	e000      	b.n	800eba8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eba6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d109      	bne.n	800ebc2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ebae:	8c3b      	ldrh	r3, [r7, #32]
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebb4:	f7ff fdb0 	bl	800e718 <ip_reass_enqueue_new_datagram>
 800ebb8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d11c      	bne.n	800ebfa <ip4_reass+0x13e>
      goto nullreturn;
 800ebc0:	e0f9      	b.n	800edb6 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	88db      	ldrh	r3, [r3, #6]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fd fec5 	bl	800c958 <lwip_htons>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d110      	bne.n	800ebfa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebda:	89db      	ldrh	r3, [r3, #14]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fd febb 	bl	800c958 <lwip_htons>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d006      	beq.n	800ebfa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	3308      	adds	r3, #8
 800ebf0:	2214      	movs	r2, #20
 800ebf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f008 fb90 	bl	801731a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ebfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfc:	88db      	ldrh	r3, [r3, #6]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	f003 0320 	and.w	r3, r3, #32
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	bf0c      	ite	eq
 800ec08:	2301      	moveq	r3, #1
 800ec0a:	2300      	movne	r3, #0
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00e      	beq.n	800ec34 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec1a:	4413      	add	r3, r2
 800ec1c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ec1e:	8b7a      	ldrh	r2, [r7, #26]
 800ec20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec22:	429a      	cmp	r2, r3
 800ec24:	f0c0 80a0 	bcc.w	800ed68 <ip4_reass+0x2ac>
 800ec28:	8b7b      	ldrh	r3, [r7, #26]
 800ec2a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	f200 809a 	bhi.w	800ed68 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ec34:	69fa      	ldr	r2, [r7, #28]
 800ec36:	6879      	ldr	r1, [r7, #4]
 800ec38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec3a:	f7ff fdd5 	bl	800e7e8 <ip_reass_chain_frag_into_datagram_and_validate>
 800ec3e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec46:	f000 8091 	beq.w	800ed6c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ec4a:	4b5f      	ldr	r3, [pc, #380]	; (800edc8 <ip4_reass+0x30c>)
 800ec4c:	881a      	ldrh	r2, [r3, #0]
 800ec4e:	8c3b      	ldrh	r3, [r7, #32]
 800ec50:	4413      	add	r3, r2
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	4b5c      	ldr	r3, [pc, #368]	; (800edc8 <ip4_reass+0x30c>)
 800ec56:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00d      	beq.n	800ec7a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec62:	4413      	add	r3, r2
 800ec64:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec68:	8a7a      	ldrh	r2, [r7, #18]
 800ec6a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	7f9b      	ldrb	r3, [r3, #30]
 800ec70:	f043 0301 	orr.w	r3, r3, #1
 800ec74:	b2da      	uxtb	r2, r3
 800ec76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec78:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d171      	bne.n	800ed64 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ec80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec82:	8b9b      	ldrh	r3, [r3, #28]
 800ec84:	3314      	adds	r3, #20
 800ec86:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ec88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	3308      	adds	r3, #8
 800ec9e:	2214      	movs	r2, #20
 800eca0:	4619      	mov	r1, r3
 800eca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eca4:	f008 fb39 	bl	801731a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eca8:	8a3b      	ldrh	r3, [r7, #16]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fd fe54 	bl	800c958 <lwip_htons>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ecb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecba:	2200      	movs	r2, #0
 800ecbc:	719a      	strb	r2, [r3, #6]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	729a      	strb	r2, [r3, #10]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ecd2:	e00d      	b.n	800ecf0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ecda:	2114      	movs	r1, #20
 800ecdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecde:	f001 fd4b 	bl	8010778 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ece2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f001 fe9b 	bl	8010a20 <pbuf_cat>
      r = iprh->next_pbuf;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ecf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1ee      	bne.n	800ecd4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ecf6:	4b35      	ldr	r3, [pc, #212]	; (800edcc <ip4_reass+0x310>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d102      	bne.n	800ed06 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ed00:	2300      	movs	r3, #0
 800ed02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed04:	e010      	b.n	800ed28 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed06:	4b31      	ldr	r3, [pc, #196]	; (800edcc <ip4_reass+0x310>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed0c:	e007      	b.n	800ed1e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ed0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d006      	beq.n	800ed26 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1f4      	bne.n	800ed0e <ip4_reass+0x252>
 800ed24:	e000      	b.n	800ed28 <ip4_reass+0x26c>
          break;
 800ed26:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ed28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed2c:	f7ff fd2e 	bl	800e78c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f001 fe35 	bl	80109a0 <pbuf_clen>
 800ed36:	4603      	mov	r3, r0
 800ed38:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ed3a:	4b23      	ldr	r3, [pc, #140]	; (800edc8 <ip4_reass+0x30c>)
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	8c3a      	ldrh	r2, [r7, #32]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d906      	bls.n	800ed52 <ip4_reass+0x296>
 800ed44:	4b22      	ldr	r3, [pc, #136]	; (800edd0 <ip4_reass+0x314>)
 800ed46:	f240 229b 	movw	r2, #667	; 0x29b
 800ed4a:	4922      	ldr	r1, [pc, #136]	; (800edd4 <ip4_reass+0x318>)
 800ed4c:	4822      	ldr	r0, [pc, #136]	; (800edd8 <ip4_reass+0x31c>)
 800ed4e:	f008 fb11 	bl	8017374 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ed52:	4b1d      	ldr	r3, [pc, #116]	; (800edc8 <ip4_reass+0x30c>)
 800ed54:	881a      	ldrh	r2, [r3, #0]
 800ed56:	8c3b      	ldrh	r3, [r7, #32]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	4b1a      	ldr	r3, [pc, #104]	; (800edc8 <ip4_reass+0x30c>)
 800ed5e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	e02c      	b.n	800edbe <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ed64:	2300      	movs	r3, #0
 800ed66:	e02a      	b.n	800edbe <ip4_reass+0x302>

nullreturn_ipr:
 800ed68:	bf00      	nop
 800ed6a:	e000      	b.n	800ed6e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800ed6c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d106      	bne.n	800ed82 <ip4_reass+0x2c6>
 800ed74:	4b16      	ldr	r3, [pc, #88]	; (800edd0 <ip4_reass+0x314>)
 800ed76:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ed7a:	4918      	ldr	r1, [pc, #96]	; (800eddc <ip4_reass+0x320>)
 800ed7c:	4816      	ldr	r0, [pc, #88]	; (800edd8 <ip4_reass+0x31c>)
 800ed7e:	f008 faf9 	bl	8017374 <iprintf>
  if (ipr->p == NULL) {
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d114      	bne.n	800edb4 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ed8a:	4b10      	ldr	r3, [pc, #64]	; (800edcc <ip4_reass+0x310>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d006      	beq.n	800eda2 <ip4_reass+0x2e6>
 800ed94:	4b0e      	ldr	r3, [pc, #56]	; (800edd0 <ip4_reass+0x314>)
 800ed96:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ed9a:	4911      	ldr	r1, [pc, #68]	; (800ede0 <ip4_reass+0x324>)
 800ed9c:	480e      	ldr	r0, [pc, #56]	; (800edd8 <ip4_reass+0x31c>)
 800ed9e:	f008 fae9 	bl	8017374 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800eda2:	2100      	movs	r1, #0
 800eda4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eda6:	f7ff fcf1 	bl	800e78c <ip_reass_dequeue_datagram>
 800edaa:	e004      	b.n	800edb6 <ip4_reass+0x2fa>
    goto nullreturn;
 800edac:	bf00      	nop
 800edae:	e002      	b.n	800edb6 <ip4_reass+0x2fa>
    goto nullreturn;
 800edb0:	bf00      	nop
 800edb2:	e000      	b.n	800edb6 <ip4_reass+0x2fa>
  }

nullreturn:
 800edb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f001 fd64 	bl	8010884 <pbuf_free>
  return NULL;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3738      	adds	r7, #56	; 0x38
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	24004ad0 	.word	0x24004ad0
 800edcc:	24004acc 	.word	0x24004acc
 800edd0:	08018b64 	.word	0x08018b64
 800edd4:	08018d04 	.word	0x08018d04
 800edd8:	08018bdc 	.word	0x08018bdc
 800eddc:	08018d20 	.word	0x08018d20
 800ede0:	08018d2c 	.word	0x08018d2c

0800ede4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ede8:	2005      	movs	r0, #5
 800edea:	f000 fe35 	bl	800fa58 <memp_malloc>
 800edee:	4603      	mov	r3, r0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d106      	bne.n	800ee10 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ee02:	4b07      	ldr	r3, [pc, #28]	; (800ee20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ee04:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ee08:	4906      	ldr	r1, [pc, #24]	; (800ee24 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ee0a:	4807      	ldr	r0, [pc, #28]	; (800ee28 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ee0c:	f008 fab2 	bl	8017374 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ee10:	6879      	ldr	r1, [r7, #4]
 800ee12:	2005      	movs	r0, #5
 800ee14:	f000 fe96 	bl	800fb44 <memp_free>
}
 800ee18:	bf00      	nop
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	08018b64 	.word	0x08018b64
 800ee24:	08018d4c 	.word	0x08018d4c
 800ee28:	08018bdc 	.word	0x08018bdc

0800ee2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d106      	bne.n	800ee4c <ipfrag_free_pbuf_custom+0x20>
 800ee3e:	4b11      	ldr	r3, [pc, #68]	; (800ee84 <ipfrag_free_pbuf_custom+0x58>)
 800ee40:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ee44:	4910      	ldr	r1, [pc, #64]	; (800ee88 <ipfrag_free_pbuf_custom+0x5c>)
 800ee46:	4811      	ldr	r0, [pc, #68]	; (800ee8c <ipfrag_free_pbuf_custom+0x60>)
 800ee48:	f008 fa94 	bl	8017374 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ee4c:	68fa      	ldr	r2, [r7, #12]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d006      	beq.n	800ee62 <ipfrag_free_pbuf_custom+0x36>
 800ee54:	4b0b      	ldr	r3, [pc, #44]	; (800ee84 <ipfrag_free_pbuf_custom+0x58>)
 800ee56:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ee5a:	490d      	ldr	r1, [pc, #52]	; (800ee90 <ipfrag_free_pbuf_custom+0x64>)
 800ee5c:	480b      	ldr	r0, [pc, #44]	; (800ee8c <ipfrag_free_pbuf_custom+0x60>)
 800ee5e:	f008 fa89 	bl	8017374 <iprintf>
  if (pcr->original != NULL) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	695b      	ldr	r3, [r3, #20]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d004      	beq.n	800ee74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	695b      	ldr	r3, [r3, #20]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f001 fd08 	bl	8010884 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7ff ffbd 	bl	800edf4 <ip_frag_free_pbuf_custom_ref>
}
 800ee7a:	bf00      	nop
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	08018b64 	.word	0x08018b64
 800ee88:	08018d58 	.word	0x08018d58
 800ee8c:	08018bdc 	.word	0x08018bdc
 800ee90:	08018d64 	.word	0x08018d64

0800ee94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b094      	sub	sp, #80	; 0x50
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eeaa:	3b14      	subs	r3, #20
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	da00      	bge.n	800eeb2 <ip4_frag+0x1e>
 800eeb0:	3307      	adds	r3, #7
 800eeb2:	10db      	asrs	r3, r3, #3
 800eeb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800eeb6:	2314      	movs	r3, #20
 800eeb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800eec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	f003 030f 	and.w	r3, r3, #15
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b14      	cmp	r3, #20
 800eed4:	d002      	beq.n	800eedc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800eed6:	f06f 0305 	mvn.w	r3, #5
 800eeda:	e10f      	b.n	800f0fc <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	895b      	ldrh	r3, [r3, #10]
 800eee0:	2b13      	cmp	r3, #19
 800eee2:	d809      	bhi.n	800eef8 <ip4_frag+0x64>
 800eee4:	4b87      	ldr	r3, [pc, #540]	; (800f104 <ip4_frag+0x270>)
 800eee6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800eeea:	4987      	ldr	r1, [pc, #540]	; (800f108 <ip4_frag+0x274>)
 800eeec:	4887      	ldr	r0, [pc, #540]	; (800f10c <ip4_frag+0x278>)
 800eeee:	f008 fa41 	bl	8017374 <iprintf>
 800eef2:	f06f 0305 	mvn.w	r3, #5
 800eef6:	e101      	b.n	800f0fc <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800eef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefa:	88db      	ldrh	r3, [r3, #6]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fd fd2a 	bl	800c958 <lwip_htons>
 800ef04:	4603      	mov	r3, r0
 800ef06:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ef08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ef12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef18:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	891b      	ldrh	r3, [r3, #8]
 800ef1e:	3b14      	subs	r3, #20
 800ef20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ef24:	e0e0      	b.n	800f0e8 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ef26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef28:	00db      	lsls	r3, r3, #3
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef30:	4293      	cmp	r3, r2
 800ef32:	bf28      	it	cs
 800ef34:	4613      	movcs	r3, r2
 800ef36:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ef38:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef3c:	2114      	movs	r1, #20
 800ef3e:	200e      	movs	r0, #14
 800ef40:	f001 f9c0 	bl	80102c4 <pbuf_alloc>
 800ef44:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f000 80d4 	beq.w	800f0f6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	895b      	ldrh	r3, [r3, #10]
 800ef52:	2b13      	cmp	r3, #19
 800ef54:	d806      	bhi.n	800ef64 <ip4_frag+0xd0>
 800ef56:	4b6b      	ldr	r3, [pc, #428]	; (800f104 <ip4_frag+0x270>)
 800ef58:	f240 3225 	movw	r2, #805	; 0x325
 800ef5c:	496c      	ldr	r1, [pc, #432]	; (800f110 <ip4_frag+0x27c>)
 800ef5e:	486b      	ldr	r0, [pc, #428]	; (800f10c <ip4_frag+0x278>)
 800ef60:	f008 fa08 	bl	8017374 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	2214      	movs	r2, #20
 800ef6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f008 f9d4 	bl	801731a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ef78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ef7e:	e064      	b.n	800f04a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	895a      	ldrh	r2, [r3, #10]
 800ef84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef86:	1ad3      	subs	r3, r2, r3
 800ef88:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	895b      	ldrh	r3, [r3, #10]
 800ef8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d906      	bls.n	800efa2 <ip4_frag+0x10e>
 800ef94:	4b5b      	ldr	r3, [pc, #364]	; (800f104 <ip4_frag+0x270>)
 800ef96:	f240 322d 	movw	r2, #813	; 0x32d
 800ef9a:	495e      	ldr	r1, [pc, #376]	; (800f114 <ip4_frag+0x280>)
 800ef9c:	485b      	ldr	r0, [pc, #364]	; (800f10c <ip4_frag+0x278>)
 800ef9e:	f008 f9e9 	bl	8017374 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800efa2:	8bfa      	ldrh	r2, [r7, #30]
 800efa4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800efa8:	4293      	cmp	r3, r2
 800efaa:	bf28      	it	cs
 800efac:	4613      	movcs	r3, r2
 800efae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800efb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d105      	bne.n	800efc6 <ip4_frag+0x132>
        poff = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	60fb      	str	r3, [r7, #12]
        continue;
 800efc4:	e041      	b.n	800f04a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800efc6:	f7ff ff0d 	bl	800ede4 <ip_frag_alloc_pbuf_custom_ref>
 800efca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d103      	bne.n	800efda <ip4_frag+0x146>
        pbuf_free(rambuf);
 800efd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efd4:	f001 fc56 	bl	8010884 <pbuf_free>
        goto memerr;
 800efd8:	e08e      	b.n	800f0f8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800efda:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800efe0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efe2:	4413      	add	r3, r2
 800efe4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800efe8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800efec:	9201      	str	r2, [sp, #4]
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	4603      	mov	r3, r0
 800eff2:	2241      	movs	r2, #65	; 0x41
 800eff4:	2000      	movs	r0, #0
 800eff6:	f001 fa8b 	bl	8010510 <pbuf_alloced_custom>
 800effa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f002:	69b8      	ldr	r0, [r7, #24]
 800f004:	f7ff fef6 	bl	800edf4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f00a:	f001 fc3b 	bl	8010884 <pbuf_free>
        goto memerr;
 800f00e:	e073      	b.n	800f0f8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f001 fcdd 	bl	80109d0 <pbuf_ref>
      pcr->original = p;
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	4a3e      	ldr	r2, [pc, #248]	; (800f118 <ip4_frag+0x284>)
 800f020:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f022:	6979      	ldr	r1, [r7, #20]
 800f024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f026:	f001 fcfb 	bl	8010a20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f02a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f02e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f038:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d004      	beq.n	800f04a <ip4_frag+0x1b6>
        poff = 0;
 800f040:	2300      	movs	r3, #0
 800f042:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f04a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d196      	bne.n	800ef80 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f052:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f054:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f058:	4413      	add	r3, r2
 800f05a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f05c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f064:	3b14      	subs	r3, #20
 800f066:	429a      	cmp	r2, r3
 800f068:	bfd4      	ite	le
 800f06a:	2301      	movle	r3, #1
 800f06c:	2300      	movgt	r3, #0
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f072:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f076:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f07a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d002      	beq.n	800f088 <ip4_frag+0x1f4>
 800f082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f084:	2b00      	cmp	r3, #0
 800f086:	d003      	beq.n	800f090 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f088:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f08a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f08e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f090:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f092:	4618      	mov	r0, r3
 800f094:	f7fd fc60 	bl	800c958 <lwip_htons>
 800f098:	4603      	mov	r3, r0
 800f09a:	461a      	mov	r2, r3
 800f09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f0a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0a2:	3314      	adds	r3, #20
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fd fc56 	bl	800c958 <lwip_htons>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	729a      	strb	r2, [r3, #10]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	695b      	ldr	r3, [r3, #20]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0c6:	68b8      	ldr	r0, [r7, #8]
 800f0c8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f0ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0cc:	f001 fbda 	bl	8010884 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f0d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f0dc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f0e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f0e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f47f af1a 	bne.w	800ef26 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e002      	b.n	800f0fc <ip4_frag+0x268>
      goto memerr;
 800f0f6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3748      	adds	r7, #72	; 0x48
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	08018b64 	.word	0x08018b64
 800f108:	08018d70 	.word	0x08018d70
 800f10c:	08018bdc 	.word	0x08018bdc
 800f110:	08018d8c 	.word	0x08018d8c
 800f114:	08018dac 	.word	0x08018dac
 800f118:	0800ee2d 	.word	0x0800ee2d

0800f11c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f126:	4b05      	ldr	r3, [pc, #20]	; (800f13c <ptr_to_mem+0x20>)
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	88fb      	ldrh	r3, [r7, #6]
 800f12c:	4413      	add	r3, r2
}
 800f12e:	4618      	mov	r0, r3
 800f130:	370c      	adds	r7, #12
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	24004ad4 	.word	0x24004ad4

0800f140 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a05      	ldr	r2, [pc, #20]	; (800f160 <mem_to_ptr+0x20>)
 800f14c:	6812      	ldr	r2, [r2, #0]
 800f14e:	1a9b      	subs	r3, r3, r2
 800f150:	b29b      	uxth	r3, r3
}
 800f152:	4618      	mov	r0, r3
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	24004ad4 	.word	0x24004ad4

0800f164 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f164:	b590      	push	{r4, r7, lr}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f16c:	4b47      	ldr	r3, [pc, #284]	; (800f28c <plug_holes+0x128>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	429a      	cmp	r2, r3
 800f174:	d206      	bcs.n	800f184 <plug_holes+0x20>
 800f176:	4b46      	ldr	r3, [pc, #280]	; (800f290 <plug_holes+0x12c>)
 800f178:	f240 12df 	movw	r2, #479	; 0x1df
 800f17c:	4945      	ldr	r1, [pc, #276]	; (800f294 <plug_holes+0x130>)
 800f17e:	4846      	ldr	r0, [pc, #280]	; (800f298 <plug_holes+0x134>)
 800f180:	f008 f8f8 	bl	8017374 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f184:	4b45      	ldr	r3, [pc, #276]	; (800f29c <plug_holes+0x138>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d306      	bcc.n	800f19c <plug_holes+0x38>
 800f18e:	4b40      	ldr	r3, [pc, #256]	; (800f290 <plug_holes+0x12c>)
 800f190:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f194:	4942      	ldr	r1, [pc, #264]	; (800f2a0 <plug_holes+0x13c>)
 800f196:	4840      	ldr	r0, [pc, #256]	; (800f298 <plug_holes+0x134>)
 800f198:	f008 f8ec 	bl	8017374 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	791b      	ldrb	r3, [r3, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d006      	beq.n	800f1b2 <plug_holes+0x4e>
 800f1a4:	4b3a      	ldr	r3, [pc, #232]	; (800f290 <plug_holes+0x12c>)
 800f1a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f1aa:	493e      	ldr	r1, [pc, #248]	; (800f2a4 <plug_holes+0x140>)
 800f1ac:	483a      	ldr	r0, [pc, #232]	; (800f298 <plug_holes+0x134>)
 800f1ae:	f008 f8e1 	bl	8017374 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	881b      	ldrh	r3, [r3, #0]
 800f1b6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d906      	bls.n	800f1cc <plug_holes+0x68>
 800f1be:	4b34      	ldr	r3, [pc, #208]	; (800f290 <plug_holes+0x12c>)
 800f1c0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f1c4:	4938      	ldr	r1, [pc, #224]	; (800f2a8 <plug_holes+0x144>)
 800f1c6:	4834      	ldr	r0, [pc, #208]	; (800f298 <plug_holes+0x134>)
 800f1c8:	f008 f8d4 	bl	8017374 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	881b      	ldrh	r3, [r3, #0]
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7ff ffa3 	bl	800f11c <ptr_to_mem>
 800f1d6:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d025      	beq.n	800f22c <plug_holes+0xc8>
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	791b      	ldrb	r3, [r3, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d121      	bne.n	800f22c <plug_holes+0xc8>
 800f1e8:	4b2c      	ldr	r3, [pc, #176]	; (800f29c <plug_holes+0x138>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d01c      	beq.n	800f22c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f1f2:	4b2e      	ldr	r3, [pc, #184]	; (800f2ac <plug_holes+0x148>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d102      	bne.n	800f202 <plug_holes+0x9e>
      lfree = mem;
 800f1fc:	4a2b      	ldr	r2, [pc, #172]	; (800f2ac <plug_holes+0x148>)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	881a      	ldrh	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	881b      	ldrh	r3, [r3, #0]
 800f20e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f212:	4293      	cmp	r3, r2
 800f214:	d00a      	beq.n	800f22c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7ff ff7e 	bl	800f11c <ptr_to_mem>
 800f220:	4604      	mov	r4, r0
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff ff8c 	bl	800f140 <mem_to_ptr>
 800f228:	4603      	mov	r3, r0
 800f22a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	885b      	ldrh	r3, [r3, #2]
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ff73 	bl	800f11c <ptr_to_mem>
 800f236:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d020      	beq.n	800f282 <plug_holes+0x11e>
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	791b      	ldrb	r3, [r3, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d11c      	bne.n	800f282 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f248:	4b18      	ldr	r3, [pc, #96]	; (800f2ac <plug_holes+0x148>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d102      	bne.n	800f258 <plug_holes+0xf4>
      lfree = pmem;
 800f252:	4a16      	ldr	r2, [pc, #88]	; (800f2ac <plug_holes+0x148>)
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	881a      	ldrh	r2, [r3, #0]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	881b      	ldrh	r3, [r3, #0]
 800f264:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f268:	4293      	cmp	r3, r2
 800f26a:	d00a      	beq.n	800f282 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	881b      	ldrh	r3, [r3, #0]
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff ff53 	bl	800f11c <ptr_to_mem>
 800f276:	4604      	mov	r4, r0
 800f278:	68b8      	ldr	r0, [r7, #8]
 800f27a:	f7ff ff61 	bl	800f140 <mem_to_ptr>
 800f27e:	4603      	mov	r3, r0
 800f280:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f282:	bf00      	nop
 800f284:	3714      	adds	r7, #20
 800f286:	46bd      	mov	sp, r7
 800f288:	bd90      	pop	{r4, r7, pc}
 800f28a:	bf00      	nop
 800f28c:	24004ad4 	.word	0x24004ad4
 800f290:	08018dbc 	.word	0x08018dbc
 800f294:	08018e20 	.word	0x08018e20
 800f298:	08018e38 	.word	0x08018e38
 800f29c:	24004ad8 	.word	0x24004ad8
 800f2a0:	08018e60 	.word	0x08018e60
 800f2a4:	08018e7c 	.word	0x08018e7c
 800f2a8:	08018e98 	.word	0x08018e98
 800f2ac:	24004ae0 	.word	0x24004ae0

0800f2b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f2b6:	4b1d      	ldr	r3, [pc, #116]	; (800f32c <mem_init+0x7c>)
 800f2b8:	4a1d      	ldr	r2, [pc, #116]	; (800f330 <mem_init+0x80>)
 800f2ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f2bc:	4b1b      	ldr	r3, [pc, #108]	; (800f32c <mem_init+0x7c>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f2c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f2d6:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800f2da:	f7ff ff1f 	bl	800f11c <ptr_to_mem>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	4b14      	ldr	r3, [pc, #80]	; (800f334 <mem_init+0x84>)
 800f2e2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800f2e4:	4b13      	ldr	r3, [pc, #76]	; (800f334 <mem_init+0x84>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f2ec:	4b11      	ldr	r3, [pc, #68]	; (800f334 <mem_init+0x84>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f2f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f2f6:	4b0f      	ldr	r3, [pc, #60]	; (800f334 <mem_init+0x84>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f2fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f300:	4b0a      	ldr	r3, [pc, #40]	; (800f32c <mem_init+0x7c>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	4a0c      	ldr	r2, [pc, #48]	; (800f338 <mem_init+0x88>)
 800f306:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f308:	480c      	ldr	r0, [pc, #48]	; (800f33c <mem_init+0x8c>)
 800f30a:	f001 fde7 	bl	8010edc <sys_mutex_new>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d006      	beq.n	800f322 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f314:	4b0a      	ldr	r3, [pc, #40]	; (800f340 <mem_init+0x90>)
 800f316:	f240 221f 	movw	r2, #543	; 0x21f
 800f31a:	490a      	ldr	r1, [pc, #40]	; (800f344 <mem_init+0x94>)
 800f31c:	480a      	ldr	r0, [pc, #40]	; (800f348 <mem_init+0x98>)
 800f31e:	f008 f829 	bl	8017374 <iprintf>
  }
}
 800f322:	bf00      	nop
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	24004ad4 	.word	0x24004ad4
 800f330:	30044000 	.word	0x30044000
 800f334:	24004ad8 	.word	0x24004ad8
 800f338:	24004ae0 	.word	0x24004ae0
 800f33c:	24004adc 	.word	0x24004adc
 800f340:	08018dbc 	.word	0x08018dbc
 800f344:	08018ec4 	.word	0x08018ec4
 800f348:	08018e38 	.word	0x08018e38

0800f34c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff fef3 	bl	800f140 <mem_to_ptr>
 800f35a:	4603      	mov	r3, r0
 800f35c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	4618      	mov	r0, r3
 800f364:	f7ff feda 	bl	800f11c <ptr_to_mem>
 800f368:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	885b      	ldrh	r3, [r3, #2]
 800f36e:	4618      	mov	r0, r3
 800f370:	f7ff fed4 	bl	800f11c <ptr_to_mem>
 800f374:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f37e:	4293      	cmp	r3, r2
 800f380:	d819      	bhi.n	800f3b6 <mem_link_valid+0x6a>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	885b      	ldrh	r3, [r3, #2]
 800f386:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d813      	bhi.n	800f3b6 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f392:	8afa      	ldrh	r2, [r7, #22]
 800f394:	429a      	cmp	r2, r3
 800f396:	d004      	beq.n	800f3a2 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	8afa      	ldrh	r2, [r7, #22]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d109      	bne.n	800f3b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f3a2:	4b08      	ldr	r3, [pc, #32]	; (800f3c4 <mem_link_valid+0x78>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d006      	beq.n	800f3ba <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	885b      	ldrh	r3, [r3, #2]
 800f3b0:	8afa      	ldrh	r2, [r7, #22]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d001      	beq.n	800f3ba <mem_link_valid+0x6e>
    return 0;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	e000      	b.n	800f3bc <mem_link_valid+0x70>
  }
  return 1;
 800f3ba:	2301      	movs	r3, #1
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	24004ad8 	.word	0x24004ad8

0800f3c8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d070      	beq.n	800f4b8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f003 0303 	and.w	r3, r3, #3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d00d      	beq.n	800f3fc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f3e0:	4b37      	ldr	r3, [pc, #220]	; (800f4c0 <mem_free+0xf8>)
 800f3e2:	f240 2273 	movw	r2, #627	; 0x273
 800f3e6:	4937      	ldr	r1, [pc, #220]	; (800f4c4 <mem_free+0xfc>)
 800f3e8:	4837      	ldr	r0, [pc, #220]	; (800f4c8 <mem_free+0x100>)
 800f3ea:	f007 ffc3 	bl	8017374 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f3ee:	f001 fdc7 	bl	8010f80 <sys_arch_protect>
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f001 fdd1 	bl	8010f9c <sys_arch_unprotect>
    return;
 800f3fa:	e05e      	b.n	800f4ba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	3b08      	subs	r3, #8
 800f400:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f402:	4b32      	ldr	r3, [pc, #200]	; (800f4cc <mem_free+0x104>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	69fa      	ldr	r2, [r7, #28]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d306      	bcc.n	800f41a <mem_free+0x52>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f103 020c 	add.w	r2, r3, #12
 800f412:	4b2f      	ldr	r3, [pc, #188]	; (800f4d0 <mem_free+0x108>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	429a      	cmp	r2, r3
 800f418:	d90d      	bls.n	800f436 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f41a:	4b29      	ldr	r3, [pc, #164]	; (800f4c0 <mem_free+0xf8>)
 800f41c:	f240 227f 	movw	r2, #639	; 0x27f
 800f420:	492c      	ldr	r1, [pc, #176]	; (800f4d4 <mem_free+0x10c>)
 800f422:	4829      	ldr	r0, [pc, #164]	; (800f4c8 <mem_free+0x100>)
 800f424:	f007 ffa6 	bl	8017374 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f428:	f001 fdaa 	bl	8010f80 <sys_arch_protect>
 800f42c:	6138      	str	r0, [r7, #16]
 800f42e:	6938      	ldr	r0, [r7, #16]
 800f430:	f001 fdb4 	bl	8010f9c <sys_arch_unprotect>
    return;
 800f434:	e041      	b.n	800f4ba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f436:	4828      	ldr	r0, [pc, #160]	; (800f4d8 <mem_free+0x110>)
 800f438:	f001 fd66 	bl	8010f08 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	791b      	ldrb	r3, [r3, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d110      	bne.n	800f466 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f444:	4b1e      	ldr	r3, [pc, #120]	; (800f4c0 <mem_free+0xf8>)
 800f446:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f44a:	4924      	ldr	r1, [pc, #144]	; (800f4dc <mem_free+0x114>)
 800f44c:	481e      	ldr	r0, [pc, #120]	; (800f4c8 <mem_free+0x100>)
 800f44e:	f007 ff91 	bl	8017374 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f452:	4821      	ldr	r0, [pc, #132]	; (800f4d8 <mem_free+0x110>)
 800f454:	f001 fd67 	bl	8010f26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f458:	f001 fd92 	bl	8010f80 <sys_arch_protect>
 800f45c:	6178      	str	r0, [r7, #20]
 800f45e:	6978      	ldr	r0, [r7, #20]
 800f460:	f001 fd9c 	bl	8010f9c <sys_arch_unprotect>
    return;
 800f464:	e029      	b.n	800f4ba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f466:	69f8      	ldr	r0, [r7, #28]
 800f468:	f7ff ff70 	bl	800f34c <mem_link_valid>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d110      	bne.n	800f494 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f472:	4b13      	ldr	r3, [pc, #76]	; (800f4c0 <mem_free+0xf8>)
 800f474:	f240 2295 	movw	r2, #661	; 0x295
 800f478:	4919      	ldr	r1, [pc, #100]	; (800f4e0 <mem_free+0x118>)
 800f47a:	4813      	ldr	r0, [pc, #76]	; (800f4c8 <mem_free+0x100>)
 800f47c:	f007 ff7a 	bl	8017374 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f480:	4815      	ldr	r0, [pc, #84]	; (800f4d8 <mem_free+0x110>)
 800f482:	f001 fd50 	bl	8010f26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f486:	f001 fd7b 	bl	8010f80 <sys_arch_protect>
 800f48a:	61b8      	str	r0, [r7, #24]
 800f48c:	69b8      	ldr	r0, [r7, #24]
 800f48e:	f001 fd85 	bl	8010f9c <sys_arch_unprotect>
    return;
 800f492:	e012      	b.n	800f4ba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	2200      	movs	r2, #0
 800f498:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f49a:	4b12      	ldr	r3, [pc, #72]	; (800f4e4 <mem_free+0x11c>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	69fa      	ldr	r2, [r7, #28]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d202      	bcs.n	800f4aa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f4a4:	4a0f      	ldr	r2, [pc, #60]	; (800f4e4 <mem_free+0x11c>)
 800f4a6:	69fb      	ldr	r3, [r7, #28]
 800f4a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f4aa:	69f8      	ldr	r0, [r7, #28]
 800f4ac:	f7ff fe5a 	bl	800f164 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f4b0:	4809      	ldr	r0, [pc, #36]	; (800f4d8 <mem_free+0x110>)
 800f4b2:	f001 fd38 	bl	8010f26 <sys_mutex_unlock>
 800f4b6:	e000      	b.n	800f4ba <mem_free+0xf2>
    return;
 800f4b8:	bf00      	nop
}
 800f4ba:	3720      	adds	r7, #32
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	08018dbc 	.word	0x08018dbc
 800f4c4:	08018ee0 	.word	0x08018ee0
 800f4c8:	08018e38 	.word	0x08018e38
 800f4cc:	24004ad4 	.word	0x24004ad4
 800f4d0:	24004ad8 	.word	0x24004ad8
 800f4d4:	08018f04 	.word	0x08018f04
 800f4d8:	24004adc 	.word	0x24004adc
 800f4dc:	08018f20 	.word	0x08018f20
 800f4e0:	08018f48 	.word	0x08018f48
 800f4e4:	24004ae0 	.word	0x24004ae0

0800f4e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b088      	sub	sp, #32
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f4f4:	887b      	ldrh	r3, [r7, #2]
 800f4f6:	3303      	adds	r3, #3
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	f023 0303 	bic.w	r3, r3, #3
 800f4fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f500:	8bfb      	ldrh	r3, [r7, #30]
 800f502:	2b0b      	cmp	r3, #11
 800f504:	d801      	bhi.n	800f50a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f506:	230c      	movs	r3, #12
 800f508:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f50a:	8bfb      	ldrh	r3, [r7, #30]
 800f50c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f510:	4293      	cmp	r3, r2
 800f512:	d803      	bhi.n	800f51c <mem_trim+0x34>
 800f514:	8bfa      	ldrh	r2, [r7, #30]
 800f516:	887b      	ldrh	r3, [r7, #2]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d201      	bcs.n	800f520 <mem_trim+0x38>
    return NULL;
 800f51c:	2300      	movs	r3, #0
 800f51e:	e0dc      	b.n	800f6da <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f520:	4b70      	ldr	r3, [pc, #448]	; (800f6e4 <mem_trim+0x1fc>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	429a      	cmp	r2, r3
 800f528:	d304      	bcc.n	800f534 <mem_trim+0x4c>
 800f52a:	4b6f      	ldr	r3, [pc, #444]	; (800f6e8 <mem_trim+0x200>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	429a      	cmp	r2, r3
 800f532:	d306      	bcc.n	800f542 <mem_trim+0x5a>
 800f534:	4b6d      	ldr	r3, [pc, #436]	; (800f6ec <mem_trim+0x204>)
 800f536:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f53a:	496d      	ldr	r1, [pc, #436]	; (800f6f0 <mem_trim+0x208>)
 800f53c:	486d      	ldr	r0, [pc, #436]	; (800f6f4 <mem_trim+0x20c>)
 800f53e:	f007 ff19 	bl	8017374 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f542:	4b68      	ldr	r3, [pc, #416]	; (800f6e4 <mem_trim+0x1fc>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d304      	bcc.n	800f556 <mem_trim+0x6e>
 800f54c:	4b66      	ldr	r3, [pc, #408]	; (800f6e8 <mem_trim+0x200>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	429a      	cmp	r2, r3
 800f554:	d307      	bcc.n	800f566 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f556:	f001 fd13 	bl	8010f80 <sys_arch_protect>
 800f55a:	60b8      	str	r0, [r7, #8]
 800f55c:	68b8      	ldr	r0, [r7, #8]
 800f55e:	f001 fd1d 	bl	8010f9c <sys_arch_unprotect>
    return rmem;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	e0b9      	b.n	800f6da <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3b08      	subs	r3, #8
 800f56a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f56c:	69b8      	ldr	r0, [r7, #24]
 800f56e:	f7ff fde7 	bl	800f140 <mem_to_ptr>
 800f572:	4603      	mov	r3, r0
 800f574:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	881a      	ldrh	r2, [r3, #0]
 800f57a:	8afb      	ldrh	r3, [r7, #22]
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	b29b      	uxth	r3, r3
 800f580:	3b08      	subs	r3, #8
 800f582:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f584:	8bfa      	ldrh	r2, [r7, #30]
 800f586:	8abb      	ldrh	r3, [r7, #20]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d906      	bls.n	800f59a <mem_trim+0xb2>
 800f58c:	4b57      	ldr	r3, [pc, #348]	; (800f6ec <mem_trim+0x204>)
 800f58e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f592:	4959      	ldr	r1, [pc, #356]	; (800f6f8 <mem_trim+0x210>)
 800f594:	4857      	ldr	r0, [pc, #348]	; (800f6f4 <mem_trim+0x20c>)
 800f596:	f007 feed 	bl	8017374 <iprintf>
  if (newsize > size) {
 800f59a:	8bfa      	ldrh	r2, [r7, #30]
 800f59c:	8abb      	ldrh	r3, [r7, #20]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d901      	bls.n	800f5a6 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	e099      	b.n	800f6da <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800f5a6:	8bfa      	ldrh	r2, [r7, #30]
 800f5a8:	8abb      	ldrh	r3, [r7, #20]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d101      	bne.n	800f5b2 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	e093      	b.n	800f6da <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f5b2:	4852      	ldr	r0, [pc, #328]	; (800f6fc <mem_trim+0x214>)
 800f5b4:	f001 fca8 	bl	8010f08 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7ff fdad 	bl	800f11c <ptr_to_mem>
 800f5c2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	791b      	ldrb	r3, [r3, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d141      	bne.n	800f650 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d106      	bne.n	800f5e6 <mem_trim+0xfe>
 800f5d8:	4b44      	ldr	r3, [pc, #272]	; (800f6ec <mem_trim+0x204>)
 800f5da:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f5de:	4948      	ldr	r1, [pc, #288]	; (800f700 <mem_trim+0x218>)
 800f5e0:	4844      	ldr	r0, [pc, #272]	; (800f6f4 <mem_trim+0x20c>)
 800f5e2:	f007 fec7 	bl	8017374 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f5ec:	8afa      	ldrh	r2, [r7, #22]
 800f5ee:	8bfb      	ldrh	r3, [r7, #30]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	3308      	adds	r3, #8
 800f5f6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f5f8:	4b42      	ldr	r3, [pc, #264]	; (800f704 <mem_trim+0x21c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	693a      	ldr	r2, [r7, #16]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d106      	bne.n	800f610 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800f602:	89fb      	ldrh	r3, [r7, #14]
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff fd89 	bl	800f11c <ptr_to_mem>
 800f60a:	4602      	mov	r2, r0
 800f60c:	4b3d      	ldr	r3, [pc, #244]	; (800f704 <mem_trim+0x21c>)
 800f60e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f610:	89fb      	ldrh	r3, [r7, #14]
 800f612:	4618      	mov	r0, r3
 800f614:	f7ff fd82 	bl	800f11c <ptr_to_mem>
 800f618:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	2200      	movs	r2, #0
 800f61e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	89ba      	ldrh	r2, [r7, #12]
 800f624:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	8afa      	ldrh	r2, [r7, #22]
 800f62a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	89fa      	ldrh	r2, [r7, #14]
 800f630:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	881b      	ldrh	r3, [r3, #0]
 800f636:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d049      	beq.n	800f6d2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	4618      	mov	r0, r3
 800f644:	f7ff fd6a 	bl	800f11c <ptr_to_mem>
 800f648:	4602      	mov	r2, r0
 800f64a:	89fb      	ldrh	r3, [r7, #14]
 800f64c:	8053      	strh	r3, [r2, #2]
 800f64e:	e040      	b.n	800f6d2 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f650:	8bfb      	ldrh	r3, [r7, #30]
 800f652:	f103 0214 	add.w	r2, r3, #20
 800f656:	8abb      	ldrh	r3, [r7, #20]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d83a      	bhi.n	800f6d2 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f65c:	8afa      	ldrh	r2, [r7, #22]
 800f65e:	8bfb      	ldrh	r3, [r7, #30]
 800f660:	4413      	add	r3, r2
 800f662:	b29b      	uxth	r3, r3
 800f664:	3308      	adds	r3, #8
 800f666:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	881b      	ldrh	r3, [r3, #0]
 800f66c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f670:	4293      	cmp	r3, r2
 800f672:	d106      	bne.n	800f682 <mem_trim+0x19a>
 800f674:	4b1d      	ldr	r3, [pc, #116]	; (800f6ec <mem_trim+0x204>)
 800f676:	f240 3216 	movw	r2, #790	; 0x316
 800f67a:	4921      	ldr	r1, [pc, #132]	; (800f700 <mem_trim+0x218>)
 800f67c:	481d      	ldr	r0, [pc, #116]	; (800f6f4 <mem_trim+0x20c>)
 800f67e:	f007 fe79 	bl	8017374 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f682:	89fb      	ldrh	r3, [r7, #14]
 800f684:	4618      	mov	r0, r3
 800f686:	f7ff fd49 	bl	800f11c <ptr_to_mem>
 800f68a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f68c:	4b1d      	ldr	r3, [pc, #116]	; (800f704 <mem_trim+0x21c>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	429a      	cmp	r2, r3
 800f694:	d202      	bcs.n	800f69c <mem_trim+0x1b4>
      lfree = mem2;
 800f696:	4a1b      	ldr	r2, [pc, #108]	; (800f704 <mem_trim+0x21c>)
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	881a      	ldrh	r2, [r3, #0]
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	8afa      	ldrh	r2, [r7, #22]
 800f6ae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	89fa      	ldrh	r2, [r7, #14]
 800f6b4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d007      	beq.n	800f6d2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	881b      	ldrh	r3, [r3, #0]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7ff fd28 	bl	800f11c <ptr_to_mem>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	89fb      	ldrh	r3, [r7, #14]
 800f6d0:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f6d2:	480a      	ldr	r0, [pc, #40]	; (800f6fc <mem_trim+0x214>)
 800f6d4:	f001 fc27 	bl	8010f26 <sys_mutex_unlock>
  return rmem;
 800f6d8:	687b      	ldr	r3, [r7, #4]
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3720      	adds	r7, #32
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	24004ad4 	.word	0x24004ad4
 800f6e8:	24004ad8 	.word	0x24004ad8
 800f6ec:	08018dbc 	.word	0x08018dbc
 800f6f0:	08018f7c 	.word	0x08018f7c
 800f6f4:	08018e38 	.word	0x08018e38
 800f6f8:	08018f94 	.word	0x08018f94
 800f6fc:	24004adc 	.word	0x24004adc
 800f700:	08018fb4 	.word	0x08018fb4
 800f704:	24004ae0 	.word	0x24004ae0

0800f708 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b088      	sub	sp, #32
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <mem_malloc+0x14>
    return NULL;
 800f718:	2300      	movs	r3, #0
 800f71a:	e0e6      	b.n	800f8ea <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f71c:	88fb      	ldrh	r3, [r7, #6]
 800f71e:	3303      	adds	r3, #3
 800f720:	b29b      	uxth	r3, r3
 800f722:	f023 0303 	bic.w	r3, r3, #3
 800f726:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f728:	8bbb      	ldrh	r3, [r7, #28]
 800f72a:	2b0b      	cmp	r3, #11
 800f72c:	d801      	bhi.n	800f732 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f72e:	230c      	movs	r3, #12
 800f730:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f732:	8bbb      	ldrh	r3, [r7, #28]
 800f734:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f738:	4293      	cmp	r3, r2
 800f73a:	d803      	bhi.n	800f744 <mem_malloc+0x3c>
 800f73c:	8bba      	ldrh	r2, [r7, #28]
 800f73e:	88fb      	ldrh	r3, [r7, #6]
 800f740:	429a      	cmp	r2, r3
 800f742:	d201      	bcs.n	800f748 <mem_malloc+0x40>
    return NULL;
 800f744:	2300      	movs	r3, #0
 800f746:	e0d0      	b.n	800f8ea <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f748:	486a      	ldr	r0, [pc, #424]	; (800f8f4 <mem_malloc+0x1ec>)
 800f74a:	f001 fbdd 	bl	8010f08 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f74e:	4b6a      	ldr	r3, [pc, #424]	; (800f8f8 <mem_malloc+0x1f0>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4618      	mov	r0, r3
 800f754:	f7ff fcf4 	bl	800f140 <mem_to_ptr>
 800f758:	4603      	mov	r3, r0
 800f75a:	83fb      	strh	r3, [r7, #30]
 800f75c:	e0b9      	b.n	800f8d2 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f75e:	8bfb      	ldrh	r3, [r7, #30]
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff fcdb 	bl	800f11c <ptr_to_mem>
 800f766:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	791b      	ldrb	r3, [r3, #4]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f040 80a9 	bne.w	800f8c4 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	8bfb      	ldrh	r3, [r7, #30]
 800f77a:	1ad3      	subs	r3, r2, r3
 800f77c:	f1a3 0208 	sub.w	r2, r3, #8
 800f780:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f782:	429a      	cmp	r2, r3
 800f784:	f0c0 809e 	bcc.w	800f8c4 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	461a      	mov	r2, r3
 800f78e:	8bfb      	ldrh	r3, [r7, #30]
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	f1a3 0208 	sub.w	r2, r3, #8
 800f796:	8bbb      	ldrh	r3, [r7, #28]
 800f798:	3314      	adds	r3, #20
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d335      	bcc.n	800f80a <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f79e:	8bfa      	ldrh	r2, [r7, #30]
 800f7a0:	8bbb      	ldrh	r3, [r7, #28]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f7aa:	8a7b      	ldrh	r3, [r7, #18]
 800f7ac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d106      	bne.n	800f7c2 <mem_malloc+0xba>
 800f7b4:	4b51      	ldr	r3, [pc, #324]	; (800f8fc <mem_malloc+0x1f4>)
 800f7b6:	f240 3287 	movw	r2, #903	; 0x387
 800f7ba:	4951      	ldr	r1, [pc, #324]	; (800f900 <mem_malloc+0x1f8>)
 800f7bc:	4851      	ldr	r0, [pc, #324]	; (800f904 <mem_malloc+0x1fc>)
 800f7be:	f007 fdd9 	bl	8017374 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f7c2:	8a7b      	ldrh	r3, [r7, #18]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7ff fca9 	bl	800f11c <ptr_to_mem>
 800f7ca:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	881a      	ldrh	r2, [r3, #0]
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	8bfa      	ldrh	r2, [r7, #30]
 800f7de:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	8a7a      	ldrh	r2, [r7, #18]
 800f7e4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	881b      	ldrh	r3, [r3, #0]
 800f7f0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d00b      	beq.n	800f810 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	881b      	ldrh	r3, [r3, #0]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7ff fc8d 	bl	800f11c <ptr_to_mem>
 800f802:	4602      	mov	r2, r0
 800f804:	8a7b      	ldrh	r3, [r7, #18]
 800f806:	8053      	strh	r3, [r2, #2]
 800f808:	e002      	b.n	800f810 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2201      	movs	r2, #1
 800f80e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f810:	4b39      	ldr	r3, [pc, #228]	; (800f8f8 <mem_malloc+0x1f0>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	697a      	ldr	r2, [r7, #20]
 800f816:	429a      	cmp	r2, r3
 800f818:	d127      	bne.n	800f86a <mem_malloc+0x162>
          struct mem *cur = lfree;
 800f81a:	4b37      	ldr	r3, [pc, #220]	; (800f8f8 <mem_malloc+0x1f0>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f820:	e005      	b.n	800f82e <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff fc78 	bl	800f11c <ptr_to_mem>
 800f82c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	791b      	ldrb	r3, [r3, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d004      	beq.n	800f840 <mem_malloc+0x138>
 800f836:	4b34      	ldr	r3, [pc, #208]	; (800f908 <mem_malloc+0x200>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	69ba      	ldr	r2, [r7, #24]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d1f0      	bne.n	800f822 <mem_malloc+0x11a>
          }
          lfree = cur;
 800f840:	4a2d      	ldr	r2, [pc, #180]	; (800f8f8 <mem_malloc+0x1f0>)
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f846:	4b2c      	ldr	r3, [pc, #176]	; (800f8f8 <mem_malloc+0x1f0>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	4b2f      	ldr	r3, [pc, #188]	; (800f908 <mem_malloc+0x200>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d00b      	beq.n	800f86a <mem_malloc+0x162>
 800f852:	4b29      	ldr	r3, [pc, #164]	; (800f8f8 <mem_malloc+0x1f0>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	791b      	ldrb	r3, [r3, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d006      	beq.n	800f86a <mem_malloc+0x162>
 800f85c:	4b27      	ldr	r3, [pc, #156]	; (800f8fc <mem_malloc+0x1f4>)
 800f85e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f862:	492a      	ldr	r1, [pc, #168]	; (800f90c <mem_malloc+0x204>)
 800f864:	4827      	ldr	r0, [pc, #156]	; (800f904 <mem_malloc+0x1fc>)
 800f866:	f007 fd85 	bl	8017374 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f86a:	4822      	ldr	r0, [pc, #136]	; (800f8f4 <mem_malloc+0x1ec>)
 800f86c:	f001 fb5b 	bl	8010f26 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f870:	8bba      	ldrh	r2, [r7, #28]
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	4413      	add	r3, r2
 800f876:	3308      	adds	r3, #8
 800f878:	4a23      	ldr	r2, [pc, #140]	; (800f908 <mem_malloc+0x200>)
 800f87a:	6812      	ldr	r2, [r2, #0]
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d906      	bls.n	800f88e <mem_malloc+0x186>
 800f880:	4b1e      	ldr	r3, [pc, #120]	; (800f8fc <mem_malloc+0x1f4>)
 800f882:	f240 32ba 	movw	r2, #954	; 0x3ba
 800f886:	4922      	ldr	r1, [pc, #136]	; (800f910 <mem_malloc+0x208>)
 800f888:	481e      	ldr	r0, [pc, #120]	; (800f904 <mem_malloc+0x1fc>)
 800f88a:	f007 fd73 	bl	8017374 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	f003 0303 	and.w	r3, r3, #3
 800f894:	2b00      	cmp	r3, #0
 800f896:	d006      	beq.n	800f8a6 <mem_malloc+0x19e>
 800f898:	4b18      	ldr	r3, [pc, #96]	; (800f8fc <mem_malloc+0x1f4>)
 800f89a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800f89e:	491d      	ldr	r1, [pc, #116]	; (800f914 <mem_malloc+0x20c>)
 800f8a0:	4818      	ldr	r0, [pc, #96]	; (800f904 <mem_malloc+0x1fc>)
 800f8a2:	f007 fd67 	bl	8017374 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f003 0303 	and.w	r3, r3, #3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d006      	beq.n	800f8be <mem_malloc+0x1b6>
 800f8b0:	4b12      	ldr	r3, [pc, #72]	; (800f8fc <mem_malloc+0x1f4>)
 800f8b2:	f240 32be 	movw	r2, #958	; 0x3be
 800f8b6:	4918      	ldr	r1, [pc, #96]	; (800f918 <mem_malloc+0x210>)
 800f8b8:	4812      	ldr	r0, [pc, #72]	; (800f904 <mem_malloc+0x1fc>)
 800f8ba:	f007 fd5b 	bl	8017374 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	3308      	adds	r3, #8
 800f8c2:	e012      	b.n	800f8ea <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800f8c4:	8bfb      	ldrh	r3, [r7, #30]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7ff fc28 	bl	800f11c <ptr_to_mem>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	881b      	ldrh	r3, [r3, #0]
 800f8d0:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f8d2:	8bfa      	ldrh	r2, [r7, #30]
 800f8d4:	8bb9      	ldrh	r1, [r7, #28]
 800f8d6:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800f8da:	1a5b      	subs	r3, r3, r1
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	f4ff af3e 	bcc.w	800f75e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f8e2:	4804      	ldr	r0, [pc, #16]	; (800f8f4 <mem_malloc+0x1ec>)
 800f8e4:	f001 fb1f 	bl	8010f26 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3720      	adds	r7, #32
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	24004adc 	.word	0x24004adc
 800f8f8:	24004ae0 	.word	0x24004ae0
 800f8fc:	08018dbc 	.word	0x08018dbc
 800f900:	08018fb4 	.word	0x08018fb4
 800f904:	08018e38 	.word	0x08018e38
 800f908:	24004ad8 	.word	0x24004ad8
 800f90c:	08018fc8 	.word	0x08018fc8
 800f910:	08018fe4 	.word	0x08018fe4
 800f914:	08019014 	.word	0x08019014
 800f918:	08019044 	.word	0x08019044

0800f91c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	2200      	movs	r2, #0
 800f92a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	3303      	adds	r3, #3
 800f932:	f023 0303 	bic.w	r3, r3, #3
 800f936:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f938:	2300      	movs	r3, #0
 800f93a:	60fb      	str	r3, [r7, #12]
 800f93c:	e011      	b.n	800f962 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	689b      	ldr	r3, [r3, #8]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	461a      	mov	r2, r3
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	4413      	add	r3, r2
 800f95a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	3301      	adds	r3, #1
 800f960:	60fb      	str	r3, [r7, #12]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	885b      	ldrh	r3, [r3, #2]
 800f966:	461a      	mov	r2, r3
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	4293      	cmp	r3, r2
 800f96c:	dbe7      	blt.n	800f93e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f96e:	bf00      	nop
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
	...

0800f97c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f982:	2300      	movs	r3, #0
 800f984:	80fb      	strh	r3, [r7, #6]
 800f986:	e009      	b.n	800f99c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f988:	88fb      	ldrh	r3, [r7, #6]
 800f98a:	4a08      	ldr	r2, [pc, #32]	; (800f9ac <memp_init+0x30>)
 800f98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f990:	4618      	mov	r0, r3
 800f992:	f7ff ffc3 	bl	800f91c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f996:	88fb      	ldrh	r3, [r7, #6]
 800f998:	3301      	adds	r3, #1
 800f99a:	80fb      	strh	r3, [r7, #6]
 800f99c:	88fb      	ldrh	r3, [r7, #6]
 800f99e:	2b0c      	cmp	r3, #12
 800f9a0:	d9f2      	bls.n	800f988 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f9a2:	bf00      	nop
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	0801b4ac 	.word	0x0801b4ac

0800f9b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f9b8:	f001 fae2 	bl	8010f80 <sys_arch_protect>
 800f9bc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d015      	beq.n	800f9f8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	68ba      	ldr	r2, [r7, #8]
 800f9d2:	6812      	ldr	r2, [r2, #0]
 800f9d4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	f003 0303 	and.w	r3, r3, #3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d006      	beq.n	800f9ee <do_memp_malloc_pool+0x3e>
 800f9e0:	4b09      	ldr	r3, [pc, #36]	; (800fa08 <do_memp_malloc_pool+0x58>)
 800f9e2:	f240 1219 	movw	r2, #281	; 0x119
 800f9e6:	4909      	ldr	r1, [pc, #36]	; (800fa0c <do_memp_malloc_pool+0x5c>)
 800f9e8:	4809      	ldr	r0, [pc, #36]	; (800fa10 <do_memp_malloc_pool+0x60>)
 800f9ea:	f007 fcc3 	bl	8017374 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f9ee:	68f8      	ldr	r0, [r7, #12]
 800f9f0:	f001 fad4 	bl	8010f9c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	e003      	b.n	800fa00 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f001 facf 	bl	8010f9c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f9fe:	2300      	movs	r3, #0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	08019068 	.word	0x08019068
 800fa0c:	080190cc 	.word	0x080190cc
 800fa10:	080190f0 	.word	0x080190f0

0800fa14 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d106      	bne.n	800fa30 <memp_malloc_pool+0x1c>
 800fa22:	4b0a      	ldr	r3, [pc, #40]	; (800fa4c <memp_malloc_pool+0x38>)
 800fa24:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800fa28:	4909      	ldr	r1, [pc, #36]	; (800fa50 <memp_malloc_pool+0x3c>)
 800fa2a:	480a      	ldr	r0, [pc, #40]	; (800fa54 <memp_malloc_pool+0x40>)
 800fa2c:	f007 fca2 	bl	8017374 <iprintf>
  if (desc == NULL) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d101      	bne.n	800fa3a <memp_malloc_pool+0x26>
    return NULL;
 800fa36:	2300      	movs	r3, #0
 800fa38:	e003      	b.n	800fa42 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7ff ffb8 	bl	800f9b0 <do_memp_malloc_pool>
 800fa40:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	08019068 	.word	0x08019068
 800fa50:	08019118 	.word	0x08019118
 800fa54:	080190f0 	.word	0x080190f0

0800fa58 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	4603      	mov	r3, r0
 800fa60:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	2b0c      	cmp	r3, #12
 800fa66:	d908      	bls.n	800fa7a <memp_malloc+0x22>
 800fa68:	4b0a      	ldr	r3, [pc, #40]	; (800fa94 <memp_malloc+0x3c>)
 800fa6a:	f240 1257 	movw	r2, #343	; 0x157
 800fa6e:	490a      	ldr	r1, [pc, #40]	; (800fa98 <memp_malloc+0x40>)
 800fa70:	480a      	ldr	r0, [pc, #40]	; (800fa9c <memp_malloc+0x44>)
 800fa72:	f007 fc7f 	bl	8017374 <iprintf>
 800fa76:	2300      	movs	r3, #0
 800fa78:	e008      	b.n	800fa8c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fa7a:	79fb      	ldrb	r3, [r7, #7]
 800fa7c:	4a08      	ldr	r2, [pc, #32]	; (800faa0 <memp_malloc+0x48>)
 800fa7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7ff ff94 	bl	800f9b0 <do_memp_malloc_pool>
 800fa88:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3710      	adds	r7, #16
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	08019068 	.word	0x08019068
 800fa98:	0801912c 	.word	0x0801912c
 800fa9c:	080190f0 	.word	0x080190f0
 800faa0:	0801b4ac 	.word	0x0801b4ac

0800faa4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	f003 0303 	and.w	r3, r3, #3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d006      	beq.n	800fac6 <do_memp_free_pool+0x22>
 800fab8:	4b0d      	ldr	r3, [pc, #52]	; (800faf0 <do_memp_free_pool+0x4c>)
 800faba:	f240 126d 	movw	r2, #365	; 0x16d
 800fabe:	490d      	ldr	r1, [pc, #52]	; (800faf4 <do_memp_free_pool+0x50>)
 800fac0:	480d      	ldr	r0, [pc, #52]	; (800faf8 <do_memp_free_pool+0x54>)
 800fac2:	f007 fc57 	bl	8017374 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800faca:	f001 fa59 	bl	8010f80 <sys_arch_protect>
 800face:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	689b      	ldr	r3, [r3, #8]
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fae2:	68b8      	ldr	r0, [r7, #8]
 800fae4:	f001 fa5a 	bl	8010f9c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fae8:	bf00      	nop
 800faea:	3710      	adds	r7, #16
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	08019068 	.word	0x08019068
 800faf4:	0801914c 	.word	0x0801914c
 800faf8:	080190f0 	.word	0x080190f0

0800fafc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <memp_free_pool+0x1e>
 800fb0c:	4b0a      	ldr	r3, [pc, #40]	; (800fb38 <memp_free_pool+0x3c>)
 800fb0e:	f240 1295 	movw	r2, #405	; 0x195
 800fb12:	490a      	ldr	r1, [pc, #40]	; (800fb3c <memp_free_pool+0x40>)
 800fb14:	480a      	ldr	r0, [pc, #40]	; (800fb40 <memp_free_pool+0x44>)
 800fb16:	f007 fc2d 	bl	8017374 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d007      	beq.n	800fb30 <memp_free_pool+0x34>
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d004      	beq.n	800fb30 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7ff ffbb 	bl	800faa4 <do_memp_free_pool>
 800fb2e:	e000      	b.n	800fb32 <memp_free_pool+0x36>
    return;
 800fb30:	bf00      	nop
}
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	08019068 	.word	0x08019068
 800fb3c:	08019118 	.word	0x08019118
 800fb40:	080190f0 	.word	0x080190f0

0800fb44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	6039      	str	r1, [r7, #0]
 800fb4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fb50:	79fb      	ldrb	r3, [r7, #7]
 800fb52:	2b0c      	cmp	r3, #12
 800fb54:	d907      	bls.n	800fb66 <memp_free+0x22>
 800fb56:	4b0c      	ldr	r3, [pc, #48]	; (800fb88 <memp_free+0x44>)
 800fb58:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fb5c:	490b      	ldr	r1, [pc, #44]	; (800fb8c <memp_free+0x48>)
 800fb5e:	480c      	ldr	r0, [pc, #48]	; (800fb90 <memp_free+0x4c>)
 800fb60:	f007 fc08 	bl	8017374 <iprintf>
 800fb64:	e00c      	b.n	800fb80 <memp_free+0x3c>

  if (mem == NULL) {
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d008      	beq.n	800fb7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fb6c:	79fb      	ldrb	r3, [r7, #7]
 800fb6e:	4a09      	ldr	r2, [pc, #36]	; (800fb94 <memp_free+0x50>)
 800fb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb74:	6839      	ldr	r1, [r7, #0]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7ff ff94 	bl	800faa4 <do_memp_free_pool>
 800fb7c:	e000      	b.n	800fb80 <memp_free+0x3c>
    return;
 800fb7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	08019068 	.word	0x08019068
 800fb8c:	0801916c 	.word	0x0801916c
 800fb90:	080190f0 	.word	0x080190f0
 800fb94:	0801b4ac 	.word	0x0801b4ac

0800fb98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fb9c:	bf00      	nop
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
	...

0800fba8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
 800fbb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d108      	bne.n	800fbce <netif_add+0x26>
 800fbbc:	4b57      	ldr	r3, [pc, #348]	; (800fd1c <netif_add+0x174>)
 800fbbe:	f240 1227 	movw	r2, #295	; 0x127
 800fbc2:	4957      	ldr	r1, [pc, #348]	; (800fd20 <netif_add+0x178>)
 800fbc4:	4857      	ldr	r0, [pc, #348]	; (800fd24 <netif_add+0x17c>)
 800fbc6:	f007 fbd5 	bl	8017374 <iprintf>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	e0a2      	b.n	800fd14 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d108      	bne.n	800fbe6 <netif_add+0x3e>
 800fbd4:	4b51      	ldr	r3, [pc, #324]	; (800fd1c <netif_add+0x174>)
 800fbd6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fbda:	4953      	ldr	r1, [pc, #332]	; (800fd28 <netif_add+0x180>)
 800fbdc:	4851      	ldr	r0, [pc, #324]	; (800fd24 <netif_add+0x17c>)
 800fbde:	f007 fbc9 	bl	8017374 <iprintf>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	e096      	b.n	800fd14 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d101      	bne.n	800fbf0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fbec:	4b4f      	ldr	r3, [pc, #316]	; (800fd2c <netif_add+0x184>)
 800fbee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d101      	bne.n	800fbfa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fbf6:	4b4d      	ldr	r3, [pc, #308]	; (800fd2c <netif_add+0x184>)
 800fbf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d101      	bne.n	800fc04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fc00:	4b4a      	ldr	r3, [pc, #296]	; (800fd2c <netif_add+0x184>)
 800fc02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2200      	movs	r2, #0
 800fc08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2200      	movs	r2, #0
 800fc14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	4a45      	ldr	r2, [pc, #276]	; (800fd30 <netif_add+0x188>)
 800fc1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2200      	movs	r2, #0
 800fc26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6a3a      	ldr	r2, [r7, #32]
 800fc34:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fc36:	4b3f      	ldr	r3, [pc, #252]	; (800fd34 <netif_add+0x18c>)
 800fc38:	781a      	ldrb	r2, [r3, #0]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc44:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	68b9      	ldr	r1, [r7, #8]
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 f913 	bl	800fe78 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	4798      	blx	r3
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <netif_add+0xba>
    return NULL;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	e058      	b.n	800fd14 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc68:	2bff      	cmp	r3, #255	; 0xff
 800fc6a:	d103      	bne.n	800fc74 <netif_add+0xcc>
        netif->num = 0;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800fc74:	2300      	movs	r3, #0
 800fc76:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc78:	4b2f      	ldr	r3, [pc, #188]	; (800fd38 <netif_add+0x190>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	617b      	str	r3, [r7, #20]
 800fc7e:	e02b      	b.n	800fcd8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fc80:	697a      	ldr	r2, [r7, #20]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d106      	bne.n	800fc96 <netif_add+0xee>
 800fc88:	4b24      	ldr	r3, [pc, #144]	; (800fd1c <netif_add+0x174>)
 800fc8a:	f240 128b 	movw	r2, #395	; 0x18b
 800fc8e:	492b      	ldr	r1, [pc, #172]	; (800fd3c <netif_add+0x194>)
 800fc90:	4824      	ldr	r0, [pc, #144]	; (800fd24 <netif_add+0x17c>)
 800fc92:	f007 fb6f 	bl	8017374 <iprintf>
        num_netifs++;
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	2bff      	cmp	r3, #255	; 0xff
 800fca0:	dd06      	ble.n	800fcb0 <netif_add+0x108>
 800fca2:	4b1e      	ldr	r3, [pc, #120]	; (800fd1c <netif_add+0x174>)
 800fca4:	f240 128d 	movw	r2, #397	; 0x18d
 800fca8:	4925      	ldr	r1, [pc, #148]	; (800fd40 <netif_add+0x198>)
 800fcaa:	481e      	ldr	r0, [pc, #120]	; (800fd24 <netif_add+0x17c>)
 800fcac:	f007 fb62 	bl	8017374 <iprintf>
        if (netif2->num == netif->num) {
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d108      	bne.n	800fcd2 <netif_add+0x12a>
          netif->num++;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800fcd0:	e005      	b.n	800fcde <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	617b      	str	r3, [r7, #20]
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d1d0      	bne.n	800fc80 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d1be      	bne.n	800fc62 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcea:	2bfe      	cmp	r3, #254	; 0xfe
 800fcec:	d103      	bne.n	800fcf6 <netif_add+0x14e>
    netif_num = 0;
 800fcee:	4b11      	ldr	r3, [pc, #68]	; (800fd34 <netif_add+0x18c>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
 800fcf4:	e006      	b.n	800fd04 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	4b0c      	ldr	r3, [pc, #48]	; (800fd34 <netif_add+0x18c>)
 800fd02:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fd04:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <netif_add+0x190>)
 800fd06:	681a      	ldr	r2, [r3, #0]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fd0c:	4a0a      	ldr	r2, [pc, #40]	; (800fd38 <netif_add+0x190>)
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fd12:	68fb      	ldr	r3, [r7, #12]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3718      	adds	r7, #24
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	08019188 	.word	0x08019188
 800fd20:	0801924c 	.word	0x0801924c
 800fd24:	08019208 	.word	0x08019208
 800fd28:	08019268 	.word	0x08019268
 800fd2c:	0801b40c 	.word	0x0801b40c
 800fd30:	08010153 	.word	0x08010153
 800fd34:	24004b18 	.word	0x24004b18
 800fd38:	2400834c 	.word	0x2400834c
 800fd3c:	0801928c 	.word	0x0801928c
 800fd40:	080192a0 	.word	0x080192a0

0800fd44 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f002 fc6f 	bl	8012634 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fd56:	6839      	ldr	r1, [r7, #0]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f007 fa7b 	bl	8017254 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fd5e:	bf00      	nop
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
	...

0800fd68 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b086      	sub	sp, #24
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d106      	bne.n	800fd88 <netif_do_set_ipaddr+0x20>
 800fd7a:	4b1d      	ldr	r3, [pc, #116]	; (800fdf0 <netif_do_set_ipaddr+0x88>)
 800fd7c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fd80:	491c      	ldr	r1, [pc, #112]	; (800fdf4 <netif_do_set_ipaddr+0x8c>)
 800fd82:	481d      	ldr	r0, [pc, #116]	; (800fdf8 <netif_do_set_ipaddr+0x90>)
 800fd84:	f007 faf6 	bl	8017374 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d106      	bne.n	800fd9c <netif_do_set_ipaddr+0x34>
 800fd8e:	4b18      	ldr	r3, [pc, #96]	; (800fdf0 <netif_do_set_ipaddr+0x88>)
 800fd90:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fd94:	4917      	ldr	r1, [pc, #92]	; (800fdf4 <netif_do_set_ipaddr+0x8c>)
 800fd96:	4818      	ldr	r0, [pc, #96]	; (800fdf8 <netif_do_set_ipaddr+0x90>)
 800fd98:	f007 faec 	bl	8017374 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	3304      	adds	r3, #4
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d01c      	beq.n	800fde4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fdba:	f107 0314 	add.w	r3, r7, #20
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f7ff ffbf 	bl	800fd44 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d002      	beq.n	800fdd2 <netif_do_set_ipaddr+0x6a>
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	e000      	b.n	800fdd4 <netif_do_set_ipaddr+0x6c>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fdd8:	2101      	movs	r1, #1
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f000 f8d2 	bl	800ff84 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fde0:	2301      	movs	r3, #1
 800fde2:	e000      	b.n	800fde6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3718      	adds	r7, #24
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	08019188 	.word	0x08019188
 800fdf4:	080192d0 	.word	0x080192d0
 800fdf8:	08019208 	.word	0x08019208

0800fdfc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b085      	sub	sp, #20
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	681a      	ldr	r2, [r3, #0]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	3308      	adds	r3, #8
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d00a      	beq.n	800fe2c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d002      	beq.n	800fe22 <netif_do_set_netmask+0x26>
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	e000      	b.n	800fe24 <netif_do_set_netmask+0x28>
 800fe22:	2300      	movs	r3, #0
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fe28:	2301      	movs	r3, #1
 800fe2a:	e000      	b.n	800fe2e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3714      	adds	r7, #20
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr

0800fe3a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fe3a:	b480      	push	{r7}
 800fe3c:	b085      	sub	sp, #20
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	60f8      	str	r0, [r7, #12]
 800fe42:	60b9      	str	r1, [r7, #8]
 800fe44:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	330c      	adds	r3, #12
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d00a      	beq.n	800fe6a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d002      	beq.n	800fe60 <netif_do_set_gw+0x26>
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	e000      	b.n	800fe62 <netif_do_set_gw+0x28>
 800fe60:	2300      	movs	r3, #0
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fe66:	2301      	movs	r3, #1
 800fe68:	e000      	b.n	800fe6c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3714      	adds	r7, #20
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b088      	sub	sp, #32
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fe94:	4b1c      	ldr	r3, [pc, #112]	; (800ff08 <netif_set_addr+0x90>)
 800fe96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d101      	bne.n	800fea2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fe9e:	4b1a      	ldr	r3, [pc, #104]	; (800ff08 <netif_set_addr+0x90>)
 800fea0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fea8:	4b17      	ldr	r3, [pc, #92]	; (800ff08 <netif_set_addr+0x90>)
 800feaa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <netif_set_addr+0x42>
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d101      	bne.n	800febe <netif_set_addr+0x46>
 800feba:	2301      	movs	r3, #1
 800febc:	e000      	b.n	800fec0 <netif_set_addr+0x48>
 800febe:	2300      	movs	r3, #0
 800fec0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d006      	beq.n	800fed6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fec8:	f107 0310 	add.w	r3, r7, #16
 800fecc:	461a      	mov	r2, r3
 800fece:	68b9      	ldr	r1, [r7, #8]
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7ff ff49 	bl	800fd68 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fed6:	69fa      	ldr	r2, [r7, #28]
 800fed8:	6879      	ldr	r1, [r7, #4]
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7ff ff8e 	bl	800fdfc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fee0:	69ba      	ldr	r2, [r7, #24]
 800fee2:	6839      	ldr	r1, [r7, #0]
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f7ff ffa8 	bl	800fe3a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d106      	bne.n	800fefe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fef0:	f107 0310 	add.w	r3, r7, #16
 800fef4:	461a      	mov	r2, r3
 800fef6:	68b9      	ldr	r1, [r7, #8]
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f7ff ff35 	bl	800fd68 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fefe:	bf00      	nop
 800ff00:	3720      	adds	r7, #32
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	0801b40c 	.word	0x0801b40c

0800ff0c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ff14:	4a04      	ldr	r2, [pc, #16]	; (800ff28 <netif_set_default+0x1c>)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ff1a:	bf00      	nop
 800ff1c:	370c      	adds	r7, #12
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	24008350 	.word	0x24008350

0800ff2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d107      	bne.n	800ff4a <netif_set_up+0x1e>
 800ff3a:	4b0f      	ldr	r3, [pc, #60]	; (800ff78 <netif_set_up+0x4c>)
 800ff3c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ff40:	490e      	ldr	r1, [pc, #56]	; (800ff7c <netif_set_up+0x50>)
 800ff42:	480f      	ldr	r0, [pc, #60]	; (800ff80 <netif_set_up+0x54>)
 800ff44:	f007 fa16 	bl	8017374 <iprintf>
 800ff48:	e013      	b.n	800ff72 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff50:	f003 0301 	and.w	r3, r3, #1
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10c      	bne.n	800ff72 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff5e:	f043 0301 	orr.w	r3, r3, #1
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ff6a:	2103      	movs	r1, #3
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 f809 	bl	800ff84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	08019188 	.word	0x08019188
 800ff7c:	08019340 	.word	0x08019340
 800ff80:	08019208 	.word	0x08019208

0800ff84 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d106      	bne.n	800ffa4 <netif_issue_reports+0x20>
 800ff96:	4b18      	ldr	r3, [pc, #96]	; (800fff8 <netif_issue_reports+0x74>)
 800ff98:	f240 326d 	movw	r2, #877	; 0x36d
 800ff9c:	4917      	ldr	r1, [pc, #92]	; (800fffc <netif_issue_reports+0x78>)
 800ff9e:	4818      	ldr	r0, [pc, #96]	; (8010000 <netif_issue_reports+0x7c>)
 800ffa0:	f007 f9e8 	bl	8017374 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffaa:	f003 0304 	and.w	r3, r3, #4
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d01e      	beq.n	800fff0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffb8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d017      	beq.n	800fff0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	f003 0301 	and.w	r3, r3, #1
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d013      	beq.n	800fff2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	3304      	adds	r3, #4
 800ffce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00e      	beq.n	800fff2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffda:	f003 0308 	and.w	r3, r3, #8
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d007      	beq.n	800fff2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7fd fc1d 	bl	800d828 <etharp_request>
 800ffee:	e000      	b.n	800fff2 <netif_issue_reports+0x6e>
    return;
 800fff0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	08019188 	.word	0x08019188
 800fffc:	0801935c 	.word	0x0801935c
 8010000:	08019208 	.word	0x08019208

08010004 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d107      	bne.n	8010022 <netif_set_down+0x1e>
 8010012:	4b12      	ldr	r3, [pc, #72]	; (801005c <netif_set_down+0x58>)
 8010014:	f240 329b 	movw	r2, #923	; 0x39b
 8010018:	4911      	ldr	r1, [pc, #68]	; (8010060 <netif_set_down+0x5c>)
 801001a:	4812      	ldr	r0, [pc, #72]	; (8010064 <netif_set_down+0x60>)
 801001c:	f007 f9aa 	bl	8017374 <iprintf>
 8010020:	e019      	b.n	8010056 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	2b00      	cmp	r3, #0
 801002e:	d012      	beq.n	8010056 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010036:	f023 0301 	bic.w	r3, r3, #1
 801003a:	b2da      	uxtb	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010048:	f003 0308 	and.w	r3, r3, #8
 801004c:	2b00      	cmp	r3, #0
 801004e:	d002      	beq.n	8010056 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7fc ffa7 	bl	800cfa4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	08019188 	.word	0x08019188
 8010060:	08019380 	.word	0x08019380
 8010064:	08019208 	.word	0x08019208

08010068 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d107      	bne.n	8010086 <netif_set_link_up+0x1e>
 8010076:	4b13      	ldr	r3, [pc, #76]	; (80100c4 <netif_set_link_up+0x5c>)
 8010078:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801007c:	4912      	ldr	r1, [pc, #72]	; (80100c8 <netif_set_link_up+0x60>)
 801007e:	4813      	ldr	r0, [pc, #76]	; (80100cc <netif_set_link_up+0x64>)
 8010080:	f007 f978 	bl	8017374 <iprintf>
 8010084:	e01b      	b.n	80100be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801008c:	f003 0304 	and.w	r3, r3, #4
 8010090:	2b00      	cmp	r3, #0
 8010092:	d114      	bne.n	80100be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801009a:	f043 0304 	orr.w	r3, r3, #4
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80100a6:	2103      	movs	r1, #3
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7ff ff6b 	bl	800ff84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	69db      	ldr	r3, [r3, #28]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d003      	beq.n	80100be <netif_set_link_up+0x56>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	69db      	ldr	r3, [r3, #28]
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	08019188 	.word	0x08019188
 80100c8:	080193a0 	.word	0x080193a0
 80100cc:	08019208 	.word	0x08019208

080100d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d107      	bne.n	80100ee <netif_set_link_down+0x1e>
 80100de:	4b11      	ldr	r3, [pc, #68]	; (8010124 <netif_set_link_down+0x54>)
 80100e0:	f240 4206 	movw	r2, #1030	; 0x406
 80100e4:	4910      	ldr	r1, [pc, #64]	; (8010128 <netif_set_link_down+0x58>)
 80100e6:	4811      	ldr	r0, [pc, #68]	; (801012c <netif_set_link_down+0x5c>)
 80100e8:	f007 f944 	bl	8017374 <iprintf>
 80100ec:	e017      	b.n	801011e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100f4:	f003 0304 	and.w	r3, r3, #4
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d010      	beq.n	801011e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010102:	f023 0304 	bic.w	r3, r3, #4
 8010106:	b2da      	uxtb	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	69db      	ldr	r3, [r3, #28]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d003      	beq.n	801011e <netif_set_link_down+0x4e>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	69db      	ldr	r3, [r3, #28]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801011e:	3708      	adds	r7, #8
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	08019188 	.word	0x08019188
 8010128:	080193c4 	.word	0x080193c4
 801012c:	08019208 	.word	0x08019208

08010130 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	683a      	ldr	r2, [r7, #0]
 8010144:	61da      	str	r2, [r3, #28]
  }
}
 8010146:	bf00      	nop
 8010148:	370c      	adds	r7, #12
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr

08010152 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010152:	b480      	push	{r7}
 8010154:	b085      	sub	sp, #20
 8010156:	af00      	add	r7, sp, #0
 8010158:	60f8      	str	r0, [r7, #12]
 801015a:	60b9      	str	r1, [r7, #8]
 801015c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801015e:	f06f 030b 	mvn.w	r3, #11
}
 8010162:	4618      	mov	r0, r3
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
	...

08010170 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010170:	b480      	push	{r7}
 8010172:	b085      	sub	sp, #20
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d013      	beq.n	80101a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010180:	4b0d      	ldr	r3, [pc, #52]	; (80101b8 <netif_get_by_index+0x48>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	e00c      	b.n	80101a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801018e:	3301      	adds	r3, #1
 8010190:	b2db      	uxtb	r3, r3
 8010192:	79fa      	ldrb	r2, [r7, #7]
 8010194:	429a      	cmp	r2, r3
 8010196:	d101      	bne.n	801019c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	e006      	b.n	80101aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	60fb      	str	r3, [r7, #12]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1ef      	bne.n	8010188 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3714      	adds	r7, #20
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
 80101b6:	bf00      	nop
 80101b8:	2400834c 	.word	0x2400834c

080101bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80101c2:	f000 fedd 	bl	8010f80 <sys_arch_protect>
 80101c6:	6038      	str	r0, [r7, #0]
 80101c8:	4b0d      	ldr	r3, [pc, #52]	; (8010200 <pbuf_free_ooseq+0x44>)
 80101ca:	2200      	movs	r2, #0
 80101cc:	701a      	strb	r2, [r3, #0]
 80101ce:	6838      	ldr	r0, [r7, #0]
 80101d0:	f000 fee4 	bl	8010f9c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80101d4:	4b0b      	ldr	r3, [pc, #44]	; (8010204 <pbuf_free_ooseq+0x48>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	607b      	str	r3, [r7, #4]
 80101da:	e00a      	b.n	80101f2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d003      	beq.n	80101ec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f002 fa63 	bl	80126b0 <tcp_free_ooseq>
      return;
 80101ea:	e005      	b.n	80101f8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	607b      	str	r3, [r7, #4]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1f1      	bne.n	80101dc <pbuf_free_ooseq+0x20>
    }
  }
}
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	24008354 	.word	0x24008354
 8010204:	24008364 	.word	0x24008364

08010208 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010210:	f7ff ffd4 	bl	80101bc <pbuf_free_ooseq>
}
 8010214:	bf00      	nop
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010222:	f000 fead 	bl	8010f80 <sys_arch_protect>
 8010226:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010228:	4b0f      	ldr	r3, [pc, #60]	; (8010268 <pbuf_pool_is_empty+0x4c>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801022e:	4b0e      	ldr	r3, [pc, #56]	; (8010268 <pbuf_pool_is_empty+0x4c>)
 8010230:	2201      	movs	r2, #1
 8010232:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 feb1 	bl	8010f9c <sys_arch_unprotect>

  if (!queued) {
 801023a:	78fb      	ldrb	r3, [r7, #3]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10f      	bne.n	8010260 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010240:	2100      	movs	r1, #0
 8010242:	480a      	ldr	r0, [pc, #40]	; (801026c <pbuf_pool_is_empty+0x50>)
 8010244:	f006 f906 	bl	8016454 <tcpip_try_callback>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d008      	beq.n	8010260 <pbuf_pool_is_empty+0x44>
 801024e:	f000 fe97 	bl	8010f80 <sys_arch_protect>
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	4b04      	ldr	r3, [pc, #16]	; (8010268 <pbuf_pool_is_empty+0x4c>)
 8010256:	2200      	movs	r2, #0
 8010258:	701a      	strb	r2, [r3, #0]
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 fe9e 	bl	8010f9c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010260:	bf00      	nop
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	24008354 	.word	0x24008354
 801026c:	08010209 	.word	0x08010209

08010270 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	4611      	mov	r1, r2
 801027c:	461a      	mov	r2, r3
 801027e:	460b      	mov	r3, r1
 8010280:	80fb      	strh	r3, [r7, #6]
 8010282:	4613      	mov	r3, r2
 8010284:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2200      	movs	r2, #0
 801028a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	88fa      	ldrh	r2, [r7, #6]
 8010296:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	88ba      	ldrh	r2, [r7, #4]
 801029c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801029e:	8b3b      	ldrh	r3, [r7, #24]
 80102a0:	b2da      	uxtb	r2, r3
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	7f3a      	ldrb	r2, [r7, #28]
 80102aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2201      	movs	r2, #1
 80102b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2200      	movs	r2, #0
 80102b6:	73da      	strb	r2, [r3, #15]
}
 80102b8:	bf00      	nop
 80102ba:	3714      	adds	r7, #20
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b08c      	sub	sp, #48	; 0x30
 80102c8:	af02      	add	r7, sp, #8
 80102ca:	4603      	mov	r3, r0
 80102cc:	71fb      	strb	r3, [r7, #7]
 80102ce:	460b      	mov	r3, r1
 80102d0:	80bb      	strh	r3, [r7, #4]
 80102d2:	4613      	mov	r3, r2
 80102d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80102da:	887b      	ldrh	r3, [r7, #2]
 80102dc:	2b41      	cmp	r3, #65	; 0x41
 80102de:	d00b      	beq.n	80102f8 <pbuf_alloc+0x34>
 80102e0:	2b41      	cmp	r3, #65	; 0x41
 80102e2:	dc02      	bgt.n	80102ea <pbuf_alloc+0x26>
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d007      	beq.n	80102f8 <pbuf_alloc+0x34>
 80102e8:	e0c2      	b.n	8010470 <pbuf_alloc+0x1ac>
 80102ea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80102ee:	d00b      	beq.n	8010308 <pbuf_alloc+0x44>
 80102f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80102f4:	d070      	beq.n	80103d8 <pbuf_alloc+0x114>
 80102f6:	e0bb      	b.n	8010470 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80102f8:	887a      	ldrh	r2, [r7, #2]
 80102fa:	88bb      	ldrh	r3, [r7, #4]
 80102fc:	4619      	mov	r1, r3
 80102fe:	2000      	movs	r0, #0
 8010300:	f000 f8d2 	bl	80104a8 <pbuf_alloc_reference>
 8010304:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010306:	e0bd      	b.n	8010484 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010308:	2300      	movs	r3, #0
 801030a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801030c:	2300      	movs	r3, #0
 801030e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010310:	88bb      	ldrh	r3, [r7, #4]
 8010312:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010314:	200c      	movs	r0, #12
 8010316:	f7ff fb9f 	bl	800fa58 <memp_malloc>
 801031a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d109      	bne.n	8010336 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8010322:	f7ff ff7b 	bl	801021c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <pbuf_alloc+0x6e>
            pbuf_free(p);
 801032c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801032e:	f000 faa9 	bl	8010884 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010332:	2300      	movs	r3, #0
 8010334:	e0a7      	b.n	8010486 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010338:	3303      	adds	r3, #3
 801033a:	b29b      	uxth	r3, r3
 801033c:	f023 0303 	bic.w	r3, r3, #3
 8010340:	b29b      	uxth	r3, r3
 8010342:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010346:	b29b      	uxth	r3, r3
 8010348:	8b7a      	ldrh	r2, [r7, #26]
 801034a:	4293      	cmp	r3, r2
 801034c:	bf28      	it	cs
 801034e:	4613      	movcs	r3, r2
 8010350:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010354:	3310      	adds	r3, #16
 8010356:	693a      	ldr	r2, [r7, #16]
 8010358:	4413      	add	r3, r2
 801035a:	3303      	adds	r3, #3
 801035c:	f023 0303 	bic.w	r3, r3, #3
 8010360:	4618      	mov	r0, r3
 8010362:	89f9      	ldrh	r1, [r7, #14]
 8010364:	8b7a      	ldrh	r2, [r7, #26]
 8010366:	2300      	movs	r3, #0
 8010368:	9301      	str	r3, [sp, #4]
 801036a:	887b      	ldrh	r3, [r7, #2]
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	460b      	mov	r3, r1
 8010370:	4601      	mov	r1, r0
 8010372:	6938      	ldr	r0, [r7, #16]
 8010374:	f7ff ff7c 	bl	8010270 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	f003 0303 	and.w	r3, r3, #3
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <pbuf_alloc+0xce>
 8010384:	4b42      	ldr	r3, [pc, #264]	; (8010490 <pbuf_alloc+0x1cc>)
 8010386:	f240 1201 	movw	r2, #257	; 0x101
 801038a:	4942      	ldr	r1, [pc, #264]	; (8010494 <pbuf_alloc+0x1d0>)
 801038c:	4842      	ldr	r0, [pc, #264]	; (8010498 <pbuf_alloc+0x1d4>)
 801038e:	f006 fff1 	bl	8017374 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010394:	3303      	adds	r3, #3
 8010396:	f023 0303 	bic.w	r3, r3, #3
 801039a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801039e:	d106      	bne.n	80103ae <pbuf_alloc+0xea>
 80103a0:	4b3b      	ldr	r3, [pc, #236]	; (8010490 <pbuf_alloc+0x1cc>)
 80103a2:	f240 1203 	movw	r2, #259	; 0x103
 80103a6:	493d      	ldr	r1, [pc, #244]	; (801049c <pbuf_alloc+0x1d8>)
 80103a8:	483b      	ldr	r0, [pc, #236]	; (8010498 <pbuf_alloc+0x1d4>)
 80103aa:	f006 ffe3 	bl	8017374 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80103ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d102      	bne.n	80103ba <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	627b      	str	r3, [r7, #36]	; 0x24
 80103b8:	e002      	b.n	80103c0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	693a      	ldr	r2, [r7, #16]
 80103be:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80103c4:	8b7a      	ldrh	r2, [r7, #26]
 80103c6:	89fb      	ldrh	r3, [r7, #14]
 80103c8:	1ad3      	subs	r3, r2, r3
 80103ca:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80103cc:	2300      	movs	r3, #0
 80103ce:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80103d0:	8b7b      	ldrh	r3, [r7, #26]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d19e      	bne.n	8010314 <pbuf_alloc+0x50>
      break;
 80103d6:	e055      	b.n	8010484 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80103d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103da:	3303      	adds	r3, #3
 80103dc:	b29b      	uxth	r3, r3
 80103de:	f023 0303 	bic.w	r3, r3, #3
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	88bb      	ldrh	r3, [r7, #4]
 80103e6:	3303      	adds	r3, #3
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	f023 0303 	bic.w	r3, r3, #3
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	4413      	add	r3, r2
 80103f2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80103f4:	8b3b      	ldrh	r3, [r7, #24]
 80103f6:	3310      	adds	r3, #16
 80103f8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80103fa:	8b3a      	ldrh	r2, [r7, #24]
 80103fc:	88bb      	ldrh	r3, [r7, #4]
 80103fe:	3303      	adds	r3, #3
 8010400:	f023 0303 	bic.w	r3, r3, #3
 8010404:	429a      	cmp	r2, r3
 8010406:	d306      	bcc.n	8010416 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010408:	8afa      	ldrh	r2, [r7, #22]
 801040a:	88bb      	ldrh	r3, [r7, #4]
 801040c:	3303      	adds	r3, #3
 801040e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010412:	429a      	cmp	r2, r3
 8010414:	d201      	bcs.n	801041a <pbuf_alloc+0x156>
        return NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	e035      	b.n	8010486 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801041a:	8afb      	ldrh	r3, [r7, #22]
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff f973 	bl	800f708 <mem_malloc>
 8010422:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	2b00      	cmp	r3, #0
 8010428:	d101      	bne.n	801042e <pbuf_alloc+0x16a>
        return NULL;
 801042a:	2300      	movs	r3, #0
 801042c:	e02b      	b.n	8010486 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801042e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010430:	3310      	adds	r3, #16
 8010432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010434:	4413      	add	r3, r2
 8010436:	3303      	adds	r3, #3
 8010438:	f023 0303 	bic.w	r3, r3, #3
 801043c:	4618      	mov	r0, r3
 801043e:	88b9      	ldrh	r1, [r7, #4]
 8010440:	88ba      	ldrh	r2, [r7, #4]
 8010442:	2300      	movs	r3, #0
 8010444:	9301      	str	r3, [sp, #4]
 8010446:	887b      	ldrh	r3, [r7, #2]
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	460b      	mov	r3, r1
 801044c:	4601      	mov	r1, r0
 801044e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010450:	f7ff ff0e 	bl	8010270 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	f003 0303 	and.w	r3, r3, #3
 801045c:	2b00      	cmp	r3, #0
 801045e:	d010      	beq.n	8010482 <pbuf_alloc+0x1be>
 8010460:	4b0b      	ldr	r3, [pc, #44]	; (8010490 <pbuf_alloc+0x1cc>)
 8010462:	f240 1223 	movw	r2, #291	; 0x123
 8010466:	490e      	ldr	r1, [pc, #56]	; (80104a0 <pbuf_alloc+0x1dc>)
 8010468:	480b      	ldr	r0, [pc, #44]	; (8010498 <pbuf_alloc+0x1d4>)
 801046a:	f006 ff83 	bl	8017374 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801046e:	e008      	b.n	8010482 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010470:	4b07      	ldr	r3, [pc, #28]	; (8010490 <pbuf_alloc+0x1cc>)
 8010472:	f240 1227 	movw	r2, #295	; 0x127
 8010476:	490b      	ldr	r1, [pc, #44]	; (80104a4 <pbuf_alloc+0x1e0>)
 8010478:	4807      	ldr	r0, [pc, #28]	; (8010498 <pbuf_alloc+0x1d4>)
 801047a:	f006 ff7b 	bl	8017374 <iprintf>
      return NULL;
 801047e:	2300      	movs	r3, #0
 8010480:	e001      	b.n	8010486 <pbuf_alloc+0x1c2>
      break;
 8010482:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010486:	4618      	mov	r0, r3
 8010488:	3728      	adds	r7, #40	; 0x28
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	080193e8 	.word	0x080193e8
 8010494:	0801944c 	.word	0x0801944c
 8010498:	0801947c 	.word	0x0801947c
 801049c:	080194a4 	.word	0x080194a4
 80104a0:	080194d8 	.word	0x080194d8
 80104a4:	08019504 	.word	0x08019504

080104a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af02      	add	r7, sp, #8
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	460b      	mov	r3, r1
 80104b2:	807b      	strh	r3, [r7, #2]
 80104b4:	4613      	mov	r3, r2
 80104b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80104b8:	883b      	ldrh	r3, [r7, #0]
 80104ba:	2b41      	cmp	r3, #65	; 0x41
 80104bc:	d009      	beq.n	80104d2 <pbuf_alloc_reference+0x2a>
 80104be:	883b      	ldrh	r3, [r7, #0]
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d006      	beq.n	80104d2 <pbuf_alloc_reference+0x2a>
 80104c4:	4b0f      	ldr	r3, [pc, #60]	; (8010504 <pbuf_alloc_reference+0x5c>)
 80104c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80104ca:	490f      	ldr	r1, [pc, #60]	; (8010508 <pbuf_alloc_reference+0x60>)
 80104cc:	480f      	ldr	r0, [pc, #60]	; (801050c <pbuf_alloc_reference+0x64>)
 80104ce:	f006 ff51 	bl	8017374 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80104d2:	200b      	movs	r0, #11
 80104d4:	f7ff fac0 	bl	800fa58 <memp_malloc>
 80104d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d101      	bne.n	80104e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80104e0:	2300      	movs	r3, #0
 80104e2:	e00b      	b.n	80104fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80104e4:	8879      	ldrh	r1, [r7, #2]
 80104e6:	887a      	ldrh	r2, [r7, #2]
 80104e8:	2300      	movs	r3, #0
 80104ea:	9301      	str	r3, [sp, #4]
 80104ec:	883b      	ldrh	r3, [r7, #0]
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	460b      	mov	r3, r1
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7ff febb 	bl	8010270 <pbuf_init_alloced_pbuf>
  return p;
 80104fa:	68fb      	ldr	r3, [r7, #12]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	080193e8 	.word	0x080193e8
 8010508:	08019520 	.word	0x08019520
 801050c:	0801947c 	.word	0x0801947c

08010510 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b088      	sub	sp, #32
 8010514:	af02      	add	r7, sp, #8
 8010516:	607b      	str	r3, [r7, #4]
 8010518:	4603      	mov	r3, r0
 801051a:	73fb      	strb	r3, [r7, #15]
 801051c:	460b      	mov	r3, r1
 801051e:	81bb      	strh	r3, [r7, #12]
 8010520:	4613      	mov	r3, r2
 8010522:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010524:	7bfb      	ldrb	r3, [r7, #15]
 8010526:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010528:	8a7b      	ldrh	r3, [r7, #18]
 801052a:	3303      	adds	r3, #3
 801052c:	f023 0203 	bic.w	r2, r3, #3
 8010530:	89bb      	ldrh	r3, [r7, #12]
 8010532:	441a      	add	r2, r3
 8010534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010536:	429a      	cmp	r2, r3
 8010538:	d901      	bls.n	801053e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801053a:	2300      	movs	r3, #0
 801053c:	e018      	b.n	8010570 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801053e:	6a3b      	ldr	r3, [r7, #32]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d007      	beq.n	8010554 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010544:	8a7b      	ldrh	r3, [r7, #18]
 8010546:	3303      	adds	r3, #3
 8010548:	f023 0303 	bic.w	r3, r3, #3
 801054c:	6a3a      	ldr	r2, [r7, #32]
 801054e:	4413      	add	r3, r2
 8010550:	617b      	str	r3, [r7, #20]
 8010552:	e001      	b.n	8010558 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010554:	2300      	movs	r3, #0
 8010556:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	89b9      	ldrh	r1, [r7, #12]
 801055c:	89ba      	ldrh	r2, [r7, #12]
 801055e:	2302      	movs	r3, #2
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	897b      	ldrh	r3, [r7, #10]
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	460b      	mov	r3, r1
 8010568:	6979      	ldr	r1, [r7, #20]
 801056a:	f7ff fe81 	bl	8010270 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801056e:	687b      	ldr	r3, [r7, #4]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	460b      	mov	r3, r1
 8010582:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d106      	bne.n	8010598 <pbuf_realloc+0x20>
 801058a:	4b3a      	ldr	r3, [pc, #232]	; (8010674 <pbuf_realloc+0xfc>)
 801058c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010590:	4939      	ldr	r1, [pc, #228]	; (8010678 <pbuf_realloc+0x100>)
 8010592:	483a      	ldr	r0, [pc, #232]	; (801067c <pbuf_realloc+0x104>)
 8010594:	f006 feee 	bl	8017374 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	891b      	ldrh	r3, [r3, #8]
 801059c:	887a      	ldrh	r2, [r7, #2]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d264      	bcs.n	801066c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	891a      	ldrh	r2, [r3, #8]
 80105a6:	887b      	ldrh	r3, [r7, #2]
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80105ac:	887b      	ldrh	r3, [r7, #2]
 80105ae:	817b      	strh	r3, [r7, #10]
  q = p;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80105b4:	e018      	b.n	80105e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	895b      	ldrh	r3, [r3, #10]
 80105ba:	897a      	ldrh	r2, [r7, #10]
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	891a      	ldrh	r2, [r3, #8]
 80105c4:	893b      	ldrh	r3, [r7, #8]
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d106      	bne.n	80105e8 <pbuf_realloc+0x70>
 80105da:	4b26      	ldr	r3, [pc, #152]	; (8010674 <pbuf_realloc+0xfc>)
 80105dc:	f240 12af 	movw	r2, #431	; 0x1af
 80105e0:	4927      	ldr	r1, [pc, #156]	; (8010680 <pbuf_realloc+0x108>)
 80105e2:	4826      	ldr	r0, [pc, #152]	; (801067c <pbuf_realloc+0x104>)
 80105e4:	f006 fec6 	bl	8017374 <iprintf>
  while (rem_len > q->len) {
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	895b      	ldrh	r3, [r3, #10]
 80105ec:	897a      	ldrh	r2, [r7, #10]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d8e1      	bhi.n	80105b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	7b1b      	ldrb	r3, [r3, #12]
 80105f6:	f003 030f 	and.w	r3, r3, #15
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d122      	bne.n	8010644 <pbuf_realloc+0xcc>
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	895b      	ldrh	r3, [r3, #10]
 8010602:	897a      	ldrh	r2, [r7, #10]
 8010604:	429a      	cmp	r2, r3
 8010606:	d01d      	beq.n	8010644 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	7b5b      	ldrb	r3, [r3, #13]
 801060c:	f003 0302 	and.w	r3, r3, #2
 8010610:	2b00      	cmp	r3, #0
 8010612:	d117      	bne.n	8010644 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	461a      	mov	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	b29a      	uxth	r2, r3
 8010620:	897b      	ldrh	r3, [r7, #10]
 8010622:	4413      	add	r3, r2
 8010624:	b29b      	uxth	r3, r3
 8010626:	4619      	mov	r1, r3
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	f7fe ff5d 	bl	800f4e8 <mem_trim>
 801062e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d106      	bne.n	8010644 <pbuf_realloc+0xcc>
 8010636:	4b0f      	ldr	r3, [pc, #60]	; (8010674 <pbuf_realloc+0xfc>)
 8010638:	f240 12bd 	movw	r2, #445	; 0x1bd
 801063c:	4911      	ldr	r1, [pc, #68]	; (8010684 <pbuf_realloc+0x10c>)
 801063e:	480f      	ldr	r0, [pc, #60]	; (801067c <pbuf_realloc+0x104>)
 8010640:	f006 fe98 	bl	8017374 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	897a      	ldrh	r2, [r7, #10]
 8010648:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	895a      	ldrh	r2, [r3, #10]
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d004      	beq.n	8010664 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	4618      	mov	r0, r3
 8010660:	f000 f910 	bl	8010884 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2200      	movs	r2, #0
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	e000      	b.n	801066e <pbuf_realloc+0xf6>
    return;
 801066c:	bf00      	nop

}
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	080193e8 	.word	0x080193e8
 8010678:	08019534 	.word	0x08019534
 801067c:	0801947c 	.word	0x0801947c
 8010680:	0801954c 	.word	0x0801954c
 8010684:	08019564 	.word	0x08019564

08010688 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	4613      	mov	r3, r2
 8010694:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d106      	bne.n	80106aa <pbuf_add_header_impl+0x22>
 801069c:	4b2b      	ldr	r3, [pc, #172]	; (801074c <pbuf_add_header_impl+0xc4>)
 801069e:	f240 12df 	movw	r2, #479	; 0x1df
 80106a2:	492b      	ldr	r1, [pc, #172]	; (8010750 <pbuf_add_header_impl+0xc8>)
 80106a4:	482b      	ldr	r0, [pc, #172]	; (8010754 <pbuf_add_header_impl+0xcc>)
 80106a6:	f006 fe65 	bl	8017374 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d003      	beq.n	80106b8 <pbuf_add_header_impl+0x30>
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106b6:	d301      	bcc.n	80106bc <pbuf_add_header_impl+0x34>
    return 1;
 80106b8:	2301      	movs	r3, #1
 80106ba:	e043      	b.n	8010744 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d101      	bne.n	80106c6 <pbuf_add_header_impl+0x3e>
    return 0;
 80106c2:	2300      	movs	r3, #0
 80106c4:	e03e      	b.n	8010744 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	891a      	ldrh	r2, [r3, #8]
 80106ce:	8a7b      	ldrh	r3, [r7, #18]
 80106d0:	4413      	add	r3, r2
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	8a7a      	ldrh	r2, [r7, #18]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d901      	bls.n	80106de <pbuf_add_header_impl+0x56>
    return 1;
 80106da:	2301      	movs	r3, #1
 80106dc:	e032      	b.n	8010744 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	7b1b      	ldrb	r3, [r3, #12]
 80106e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80106e4:	8a3b      	ldrh	r3, [r7, #16]
 80106e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00c      	beq.n	8010708 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	425b      	negs	r3, r3
 80106f6:	4413      	add	r3, r2
 80106f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	3310      	adds	r3, #16
 80106fe:	697a      	ldr	r2, [r7, #20]
 8010700:	429a      	cmp	r2, r3
 8010702:	d20d      	bcs.n	8010720 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010704:	2301      	movs	r3, #1
 8010706:	e01d      	b.n	8010744 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010708:	79fb      	ldrb	r3, [r7, #7]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d006      	beq.n	801071c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	685a      	ldr	r2, [r3, #4]
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	425b      	negs	r3, r3
 8010716:	4413      	add	r3, r2
 8010718:	617b      	str	r3, [r7, #20]
 801071a:	e001      	b.n	8010720 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801071c:	2301      	movs	r3, #1
 801071e:	e011      	b.n	8010744 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	895a      	ldrh	r2, [r3, #10]
 801072a:	8a7b      	ldrh	r3, [r7, #18]
 801072c:	4413      	add	r3, r2
 801072e:	b29a      	uxth	r2, r3
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	891a      	ldrh	r2, [r3, #8]
 8010738:	8a7b      	ldrh	r3, [r7, #18]
 801073a:	4413      	add	r3, r2
 801073c:	b29a      	uxth	r2, r3
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	811a      	strh	r2, [r3, #8]


  return 0;
 8010742:	2300      	movs	r3, #0
}
 8010744:	4618      	mov	r0, r3
 8010746:	3718      	adds	r7, #24
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	080193e8 	.word	0x080193e8
 8010750:	08019580 	.word	0x08019580
 8010754:	0801947c 	.word	0x0801947c

08010758 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010762:	2200      	movs	r2, #0
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff ff8e 	bl	8010688 <pbuf_add_header_impl>
 801076c:	4603      	mov	r3, r0
}
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
	...

08010778 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <pbuf_remove_header+0x1e>
 8010788:	4b20      	ldr	r3, [pc, #128]	; (801080c <pbuf_remove_header+0x94>)
 801078a:	f240 224b 	movw	r2, #587	; 0x24b
 801078e:	4920      	ldr	r1, [pc, #128]	; (8010810 <pbuf_remove_header+0x98>)
 8010790:	4820      	ldr	r0, [pc, #128]	; (8010814 <pbuf_remove_header+0x9c>)
 8010792:	f006 fdef 	bl	8017374 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d003      	beq.n	80107a4 <pbuf_remove_header+0x2c>
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107a2:	d301      	bcc.n	80107a8 <pbuf_remove_header+0x30>
    return 1;
 80107a4:	2301      	movs	r3, #1
 80107a6:	e02c      	b.n	8010802 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <pbuf_remove_header+0x3a>
    return 0;
 80107ae:	2300      	movs	r3, #0
 80107b0:	e027      	b.n	8010802 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	895b      	ldrh	r3, [r3, #10]
 80107ba:	89fa      	ldrh	r2, [r7, #14]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d908      	bls.n	80107d2 <pbuf_remove_header+0x5a>
 80107c0:	4b12      	ldr	r3, [pc, #72]	; (801080c <pbuf_remove_header+0x94>)
 80107c2:	f240 2255 	movw	r2, #597	; 0x255
 80107c6:	4914      	ldr	r1, [pc, #80]	; (8010818 <pbuf_remove_header+0xa0>)
 80107c8:	4812      	ldr	r0, [pc, #72]	; (8010814 <pbuf_remove_header+0x9c>)
 80107ca:	f006 fdd3 	bl	8017374 <iprintf>
 80107ce:	2301      	movs	r3, #1
 80107d0:	e017      	b.n	8010802 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	685a      	ldr	r2, [r3, #4]
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	441a      	add	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	895a      	ldrh	r2, [r3, #10]
 80107e8:	89fb      	ldrh	r3, [r7, #14]
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	891a      	ldrh	r2, [r3, #8]
 80107f6:	89fb      	ldrh	r3, [r7, #14]
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3710      	adds	r7, #16
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	080193e8 	.word	0x080193e8
 8010810:	08019580 	.word	0x08019580
 8010814:	0801947c 	.word	0x0801947c
 8010818:	0801958c 	.word	0x0801958c

0801081c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	460b      	mov	r3, r1
 8010826:	807b      	strh	r3, [r7, #2]
 8010828:	4613      	mov	r3, r2
 801082a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801082c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010830:	2b00      	cmp	r3, #0
 8010832:	da08      	bge.n	8010846 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010834:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010838:	425b      	negs	r3, r3
 801083a:	4619      	mov	r1, r3
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f7ff ff9b 	bl	8010778 <pbuf_remove_header>
 8010842:	4603      	mov	r3, r0
 8010844:	e007      	b.n	8010856 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010846:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801084a:	787a      	ldrb	r2, [r7, #1]
 801084c:	4619      	mov	r1, r3
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f7ff ff1a 	bl	8010688 <pbuf_add_header_impl>
 8010854:	4603      	mov	r3, r0
  }
}
 8010856:	4618      	mov	r0, r3
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}

0801085e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801085e:	b580      	push	{r7, lr}
 8010860:	b082      	sub	sp, #8
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
 8010866:	460b      	mov	r3, r1
 8010868:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801086a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801086e:	2201      	movs	r2, #1
 8010870:	4619      	mov	r1, r3
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f7ff ffd2 	bl	801081c <pbuf_header_impl>
 8010878:	4603      	mov	r3, r0
}
 801087a:	4618      	mov	r0, r3
 801087c:	3708      	adds	r7, #8
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
	...

08010884 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b088      	sub	sp, #32
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d10b      	bne.n	80108aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d106      	bne.n	80108a6 <pbuf_free+0x22>
 8010898:	4b3b      	ldr	r3, [pc, #236]	; (8010988 <pbuf_free+0x104>)
 801089a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801089e:	493b      	ldr	r1, [pc, #236]	; (801098c <pbuf_free+0x108>)
 80108a0:	483b      	ldr	r0, [pc, #236]	; (8010990 <pbuf_free+0x10c>)
 80108a2:	f006 fd67 	bl	8017374 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80108a6:	2300      	movs	r3, #0
 80108a8:	e069      	b.n	801097e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80108aa:	2300      	movs	r3, #0
 80108ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80108ae:	e062      	b.n	8010976 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80108b0:	f000 fb66 	bl	8010f80 <sys_arch_protect>
 80108b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	7b9b      	ldrb	r3, [r3, #14]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d106      	bne.n	80108cc <pbuf_free+0x48>
 80108be:	4b32      	ldr	r3, [pc, #200]	; (8010988 <pbuf_free+0x104>)
 80108c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80108c4:	4933      	ldr	r1, [pc, #204]	; (8010994 <pbuf_free+0x110>)
 80108c6:	4832      	ldr	r0, [pc, #200]	; (8010990 <pbuf_free+0x10c>)
 80108c8:	f006 fd54 	bl	8017374 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	7b9b      	ldrb	r3, [r3, #14]
 80108d0:	3b01      	subs	r3, #1
 80108d2:	b2da      	uxtb	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	739a      	strb	r2, [r3, #14]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	7b9b      	ldrb	r3, [r3, #14]
 80108dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80108de:	69b8      	ldr	r0, [r7, #24]
 80108e0:	f000 fb5c 	bl	8010f9c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80108e4:	7dfb      	ldrb	r3, [r7, #23]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d143      	bne.n	8010972 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	7b1b      	ldrb	r3, [r3, #12]
 80108f4:	f003 030f 	and.w	r3, r3, #15
 80108f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	7b5b      	ldrb	r3, [r3, #13]
 80108fe:	f003 0302 	and.w	r3, r3, #2
 8010902:	2b00      	cmp	r3, #0
 8010904:	d011      	beq.n	801092a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	691b      	ldr	r3, [r3, #16]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <pbuf_free+0x9c>
 8010912:	4b1d      	ldr	r3, [pc, #116]	; (8010988 <pbuf_free+0x104>)
 8010914:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010918:	491f      	ldr	r1, [pc, #124]	; (8010998 <pbuf_free+0x114>)
 801091a:	481d      	ldr	r0, [pc, #116]	; (8010990 <pbuf_free+0x10c>)
 801091c:	f006 fd2a 	bl	8017374 <iprintf>
        pc->custom_free_function(p);
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	691b      	ldr	r3, [r3, #16]
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	4798      	blx	r3
 8010928:	e01d      	b.n	8010966 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801092a:	7bfb      	ldrb	r3, [r7, #15]
 801092c:	2b02      	cmp	r3, #2
 801092e:	d104      	bne.n	801093a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010930:	6879      	ldr	r1, [r7, #4]
 8010932:	200c      	movs	r0, #12
 8010934:	f7ff f906 	bl	800fb44 <memp_free>
 8010938:	e015      	b.n	8010966 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801093a:	7bfb      	ldrb	r3, [r7, #15]
 801093c:	2b01      	cmp	r3, #1
 801093e:	d104      	bne.n	801094a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010940:	6879      	ldr	r1, [r7, #4]
 8010942:	200b      	movs	r0, #11
 8010944:	f7ff f8fe 	bl	800fb44 <memp_free>
 8010948:	e00d      	b.n	8010966 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d103      	bne.n	8010958 <pbuf_free+0xd4>
          mem_free(p);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7fe fd39 	bl	800f3c8 <mem_free>
 8010956:	e006      	b.n	8010966 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010958:	4b0b      	ldr	r3, [pc, #44]	; (8010988 <pbuf_free+0x104>)
 801095a:	f240 320f 	movw	r2, #783	; 0x30f
 801095e:	490f      	ldr	r1, [pc, #60]	; (801099c <pbuf_free+0x118>)
 8010960:	480b      	ldr	r0, [pc, #44]	; (8010990 <pbuf_free+0x10c>)
 8010962:	f006 fd07 	bl	8017374 <iprintf>
        }
      }
      count++;
 8010966:	7ffb      	ldrb	r3, [r7, #31]
 8010968:	3301      	adds	r3, #1
 801096a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	607b      	str	r3, [r7, #4]
 8010970:	e001      	b.n	8010976 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010972:	2300      	movs	r3, #0
 8010974:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d199      	bne.n	80108b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801097c:	7ffb      	ldrb	r3, [r7, #31]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3720      	adds	r7, #32
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	080193e8 	.word	0x080193e8
 801098c:	08019580 	.word	0x08019580
 8010990:	0801947c 	.word	0x0801947c
 8010994:	080195ac 	.word	0x080195ac
 8010998:	080195c4 	.word	0x080195c4
 801099c:	080195e8 	.word	0x080195e8

080109a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80109a8:	2300      	movs	r3, #0
 80109aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80109ac:	e005      	b.n	80109ba <pbuf_clen+0x1a>
    ++len;
 80109ae:	89fb      	ldrh	r3, [r7, #14]
 80109b0:	3301      	adds	r3, #1
 80109b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d1f6      	bne.n	80109ae <pbuf_clen+0xe>
  }
  return len;
 80109c0:	89fb      	ldrh	r3, [r7, #14]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3714      	adds	r7, #20
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr
	...

080109d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d016      	beq.n	8010a0c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80109de:	f000 facf 	bl	8010f80 <sys_arch_protect>
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	7b9b      	ldrb	r3, [r3, #14]
 80109e8:	3301      	adds	r3, #1
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	739a      	strb	r2, [r3, #14]
 80109f0:	68f8      	ldr	r0, [r7, #12]
 80109f2:	f000 fad3 	bl	8010f9c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	7b9b      	ldrb	r3, [r3, #14]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d106      	bne.n	8010a0c <pbuf_ref+0x3c>
 80109fe:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <pbuf_ref+0x44>)
 8010a00:	f240 3242 	movw	r2, #834	; 0x342
 8010a04:	4904      	ldr	r1, [pc, #16]	; (8010a18 <pbuf_ref+0x48>)
 8010a06:	4805      	ldr	r0, [pc, #20]	; (8010a1c <pbuf_ref+0x4c>)
 8010a08:	f006 fcb4 	bl	8017374 <iprintf>
  }
}
 8010a0c:	bf00      	nop
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	080193e8 	.word	0x080193e8
 8010a18:	080195fc 	.word	0x080195fc
 8010a1c:	0801947c 	.word	0x0801947c

08010a20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d002      	beq.n	8010a36 <pbuf_cat+0x16>
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d107      	bne.n	8010a46 <pbuf_cat+0x26>
 8010a36:	4b20      	ldr	r3, [pc, #128]	; (8010ab8 <pbuf_cat+0x98>)
 8010a38:	f240 325a 	movw	r2, #858	; 0x35a
 8010a3c:	491f      	ldr	r1, [pc, #124]	; (8010abc <pbuf_cat+0x9c>)
 8010a3e:	4820      	ldr	r0, [pc, #128]	; (8010ac0 <pbuf_cat+0xa0>)
 8010a40:	f006 fc98 	bl	8017374 <iprintf>
 8010a44:	e034      	b.n	8010ab0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	60fb      	str	r3, [r7, #12]
 8010a4a:	e00a      	b.n	8010a62 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	891a      	ldrh	r2, [r3, #8]
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	891b      	ldrh	r3, [r3, #8]
 8010a54:	4413      	add	r3, r2
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	60fb      	str	r3, [r7, #12]
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1f0      	bne.n	8010a4c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	891a      	ldrh	r2, [r3, #8]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	895b      	ldrh	r3, [r3, #10]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d006      	beq.n	8010a84 <pbuf_cat+0x64>
 8010a76:	4b10      	ldr	r3, [pc, #64]	; (8010ab8 <pbuf_cat+0x98>)
 8010a78:	f240 3262 	movw	r2, #866	; 0x362
 8010a7c:	4911      	ldr	r1, [pc, #68]	; (8010ac4 <pbuf_cat+0xa4>)
 8010a7e:	4810      	ldr	r0, [pc, #64]	; (8010ac0 <pbuf_cat+0xa0>)
 8010a80:	f006 fc78 	bl	8017374 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d006      	beq.n	8010a9a <pbuf_cat+0x7a>
 8010a8c:	4b0a      	ldr	r3, [pc, #40]	; (8010ab8 <pbuf_cat+0x98>)
 8010a8e:	f240 3263 	movw	r2, #867	; 0x363
 8010a92:	490d      	ldr	r1, [pc, #52]	; (8010ac8 <pbuf_cat+0xa8>)
 8010a94:	480a      	ldr	r0, [pc, #40]	; (8010ac0 <pbuf_cat+0xa0>)
 8010a96:	f006 fc6d 	bl	8017374 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	891a      	ldrh	r2, [r3, #8]
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	891b      	ldrh	r3, [r3, #8]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	683a      	ldr	r2, [r7, #0]
 8010aae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	080193e8 	.word	0x080193e8
 8010abc:	08019610 	.word	0x08019610
 8010ac0:	0801947c 	.word	0x0801947c
 8010ac4:	08019648 	.word	0x08019648
 8010ac8:	08019678 	.word	0x08019678

08010acc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010ad6:	6839      	ldr	r1, [r7, #0]
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7ff ffa1 	bl	8010a20 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010ade:	6838      	ldr	r0, [r7, #0]
 8010ae0:	f7ff ff76 	bl	80109d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010ae4:	bf00      	nop
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b086      	sub	sp, #24
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010af6:	2300      	movs	r3, #0
 8010af8:	617b      	str	r3, [r7, #20]
 8010afa:	2300      	movs	r3, #0
 8010afc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d008      	beq.n	8010b16 <pbuf_copy+0x2a>
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d005      	beq.n	8010b16 <pbuf_copy+0x2a>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	891a      	ldrh	r2, [r3, #8]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	891b      	ldrh	r3, [r3, #8]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d209      	bcs.n	8010b2a <pbuf_copy+0x3e>
 8010b16:	4b57      	ldr	r3, [pc, #348]	; (8010c74 <pbuf_copy+0x188>)
 8010b18:	f240 32ca 	movw	r2, #970	; 0x3ca
 8010b1c:	4956      	ldr	r1, [pc, #344]	; (8010c78 <pbuf_copy+0x18c>)
 8010b1e:	4857      	ldr	r0, [pc, #348]	; (8010c7c <pbuf_copy+0x190>)
 8010b20:	f006 fc28 	bl	8017374 <iprintf>
 8010b24:	f06f 030f 	mvn.w	r3, #15
 8010b28:	e09f      	b.n	8010c6a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	895b      	ldrh	r3, [r3, #10]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	1ad2      	subs	r2, r2, r3
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	895b      	ldrh	r3, [r3, #10]
 8010b38:	4619      	mov	r1, r3
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	1acb      	subs	r3, r1, r3
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d306      	bcc.n	8010b50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	895b      	ldrh	r3, [r3, #10]
 8010b46:	461a      	mov	r2, r3
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	1ad3      	subs	r3, r2, r3
 8010b4c:	60fb      	str	r3, [r7, #12]
 8010b4e:	e005      	b.n	8010b5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	895b      	ldrh	r3, [r3, #10]
 8010b54:	461a      	mov	r2, r3
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	685a      	ldr	r2, [r3, #4]
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	18d0      	adds	r0, r2, r3
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	4413      	add	r3, r2
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	4619      	mov	r1, r3
 8010b70:	f006 fbd3 	bl	801731a <memcpy>
    offset_to += len;
 8010b74:	697a      	ldr	r2, [r7, #20]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	4413      	add	r3, r2
 8010b7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010b7c:	693a      	ldr	r2, [r7, #16]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	4413      	add	r3, r2
 8010b82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	895b      	ldrh	r3, [r3, #10]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d906      	bls.n	8010b9e <pbuf_copy+0xb2>
 8010b90:	4b38      	ldr	r3, [pc, #224]	; (8010c74 <pbuf_copy+0x188>)
 8010b92:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010b96:	493a      	ldr	r1, [pc, #232]	; (8010c80 <pbuf_copy+0x194>)
 8010b98:	4838      	ldr	r0, [pc, #224]	; (8010c7c <pbuf_copy+0x190>)
 8010b9a:	f006 fbeb 	bl	8017374 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	895b      	ldrh	r3, [r3, #10]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d906      	bls.n	8010bb8 <pbuf_copy+0xcc>
 8010baa:	4b32      	ldr	r3, [pc, #200]	; (8010c74 <pbuf_copy+0x188>)
 8010bac:	f240 32da 	movw	r2, #986	; 0x3da
 8010bb0:	4934      	ldr	r1, [pc, #208]	; (8010c84 <pbuf_copy+0x198>)
 8010bb2:	4832      	ldr	r0, [pc, #200]	; (8010c7c <pbuf_copy+0x190>)
 8010bb4:	f006 fbde 	bl	8017374 <iprintf>
    if (offset_from >= p_from->len) {
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	895b      	ldrh	r3, [r3, #10]
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d304      	bcc.n	8010bce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	895b      	ldrh	r3, [r3, #10]
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d114      	bne.n	8010c04 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d10c      	bne.n	8010c04 <pbuf_copy+0x118>
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d009      	beq.n	8010c04 <pbuf_copy+0x118>
 8010bf0:	4b20      	ldr	r3, [pc, #128]	; (8010c74 <pbuf_copy+0x188>)
 8010bf2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010bf6:	4924      	ldr	r1, [pc, #144]	; (8010c88 <pbuf_copy+0x19c>)
 8010bf8:	4820      	ldr	r0, [pc, #128]	; (8010c7c <pbuf_copy+0x190>)
 8010bfa:	f006 fbbb 	bl	8017374 <iprintf>
 8010bfe:	f06f 030f 	mvn.w	r3, #15
 8010c02:	e032      	b.n	8010c6a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d013      	beq.n	8010c32 <pbuf_copy+0x146>
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	895a      	ldrh	r2, [r3, #10]
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	891b      	ldrh	r3, [r3, #8]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d10d      	bne.n	8010c32 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d009      	beq.n	8010c32 <pbuf_copy+0x146>
 8010c1e:	4b15      	ldr	r3, [pc, #84]	; (8010c74 <pbuf_copy+0x188>)
 8010c20:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8010c24:	4919      	ldr	r1, [pc, #100]	; (8010c8c <pbuf_copy+0x1a0>)
 8010c26:	4815      	ldr	r0, [pc, #84]	; (8010c7c <pbuf_copy+0x190>)
 8010c28:	f006 fba4 	bl	8017374 <iprintf>
 8010c2c:	f06f 0305 	mvn.w	r3, #5
 8010c30:	e01b      	b.n	8010c6a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d013      	beq.n	8010c60 <pbuf_copy+0x174>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	895a      	ldrh	r2, [r3, #10]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	891b      	ldrh	r3, [r3, #8]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d10d      	bne.n	8010c60 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d009      	beq.n	8010c60 <pbuf_copy+0x174>
 8010c4c:	4b09      	ldr	r3, [pc, #36]	; (8010c74 <pbuf_copy+0x188>)
 8010c4e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8010c52:	490e      	ldr	r1, [pc, #56]	; (8010c8c <pbuf_copy+0x1a0>)
 8010c54:	4809      	ldr	r0, [pc, #36]	; (8010c7c <pbuf_copy+0x190>)
 8010c56:	f006 fb8d 	bl	8017374 <iprintf>
 8010c5a:	f06f 0305 	mvn.w	r3, #5
 8010c5e:	e004      	b.n	8010c6a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f47f af61 	bne.w	8010b2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010c68:	2300      	movs	r3, #0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3718      	adds	r7, #24
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	080193e8 	.word	0x080193e8
 8010c78:	080196c4 	.word	0x080196c4
 8010c7c:	0801947c 	.word	0x0801947c
 8010c80:	080196f4 	.word	0x080196f4
 8010c84:	0801970c 	.word	0x0801970c
 8010c88:	08019728 	.word	0x08019728
 8010c8c:	08019738 	.word	0x08019738

08010c90 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b088      	sub	sp, #32
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	80fb      	strh	r3, [r7, #6]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010caa:	2300      	movs	r3, #0
 8010cac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d108      	bne.n	8010cc6 <pbuf_copy_partial+0x36>
 8010cb4:	4b2b      	ldr	r3, [pc, #172]	; (8010d64 <pbuf_copy_partial+0xd4>)
 8010cb6:	f240 420a 	movw	r2, #1034	; 0x40a
 8010cba:	492b      	ldr	r1, [pc, #172]	; (8010d68 <pbuf_copy_partial+0xd8>)
 8010cbc:	482b      	ldr	r0, [pc, #172]	; (8010d6c <pbuf_copy_partial+0xdc>)
 8010cbe:	f006 fb59 	bl	8017374 <iprintf>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	e04a      	b.n	8010d5c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d108      	bne.n	8010cde <pbuf_copy_partial+0x4e>
 8010ccc:	4b25      	ldr	r3, [pc, #148]	; (8010d64 <pbuf_copy_partial+0xd4>)
 8010cce:	f240 420b 	movw	r2, #1035	; 0x40b
 8010cd2:	4927      	ldr	r1, [pc, #156]	; (8010d70 <pbuf_copy_partial+0xe0>)
 8010cd4:	4825      	ldr	r0, [pc, #148]	; (8010d6c <pbuf_copy_partial+0xdc>)
 8010cd6:	f006 fb4d 	bl	8017374 <iprintf>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	e03e      	b.n	8010d5c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	61fb      	str	r3, [r7, #28]
 8010ce2:	e034      	b.n	8010d4e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010ce4:	88bb      	ldrh	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00a      	beq.n	8010d00 <pbuf_copy_partial+0x70>
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	895b      	ldrh	r3, [r3, #10]
 8010cee:	88ba      	ldrh	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d305      	bcc.n	8010d00 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	895b      	ldrh	r3, [r3, #10]
 8010cf8:	88ba      	ldrh	r2, [r7, #4]
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	80bb      	strh	r3, [r7, #4]
 8010cfe:	e023      	b.n	8010d48 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	895a      	ldrh	r2, [r3, #10]
 8010d04:	88bb      	ldrh	r3, [r7, #4]
 8010d06:	1ad3      	subs	r3, r2, r3
 8010d08:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010d0a:	8b3a      	ldrh	r2, [r7, #24]
 8010d0c:	88fb      	ldrh	r3, [r7, #6]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d901      	bls.n	8010d16 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010d12:	88fb      	ldrh	r3, [r7, #6]
 8010d14:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010d16:	8b7b      	ldrh	r3, [r7, #26]
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	18d0      	adds	r0, r2, r3
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	685a      	ldr	r2, [r3, #4]
 8010d20:	88bb      	ldrh	r3, [r7, #4]
 8010d22:	4413      	add	r3, r2
 8010d24:	8b3a      	ldrh	r2, [r7, #24]
 8010d26:	4619      	mov	r1, r3
 8010d28:	f006 faf7 	bl	801731a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010d2c:	8afa      	ldrh	r2, [r7, #22]
 8010d2e:	8b3b      	ldrh	r3, [r7, #24]
 8010d30:	4413      	add	r3, r2
 8010d32:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010d34:	8b7a      	ldrh	r2, [r7, #26]
 8010d36:	8b3b      	ldrh	r3, [r7, #24]
 8010d38:	4413      	add	r3, r2
 8010d3a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010d3c:	88fa      	ldrh	r2, [r7, #6]
 8010d3e:	8b3b      	ldrh	r3, [r7, #24]
 8010d40:	1ad3      	subs	r3, r2, r3
 8010d42:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010d48:	69fb      	ldr	r3, [r7, #28]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	61fb      	str	r3, [r7, #28]
 8010d4e:	88fb      	ldrh	r3, [r7, #6]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d002      	beq.n	8010d5a <pbuf_copy_partial+0xca>
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1c4      	bne.n	8010ce4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010d5a:	8afb      	ldrh	r3, [r7, #22]
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3720      	adds	r7, #32
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	080193e8 	.word	0x080193e8
 8010d68:	08019764 	.word	0x08019764
 8010d6c:	0801947c 	.word	0x0801947c
 8010d70:	08019784 	.word	0x08019784

08010d74 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	603a      	str	r2, [r7, #0]
 8010d7e:	71fb      	strb	r3, [r7, #7]
 8010d80:	460b      	mov	r3, r1
 8010d82:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	8919      	ldrh	r1, [r3, #8]
 8010d88:	88ba      	ldrh	r2, [r7, #4]
 8010d8a:	79fb      	ldrb	r3, [r7, #7]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7ff fa99 	bl	80102c4 <pbuf_alloc>
 8010d92:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d101      	bne.n	8010d9e <pbuf_clone+0x2a>
    return NULL;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	e011      	b.n	8010dc2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010d9e:	6839      	ldr	r1, [r7, #0]
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f7ff fea3 	bl	8010aec <pbuf_copy>
 8010da6:	4603      	mov	r3, r0
 8010da8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010daa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d006      	beq.n	8010dc0 <pbuf_clone+0x4c>
 8010db2:	4b06      	ldr	r3, [pc, #24]	; (8010dcc <pbuf_clone+0x58>)
 8010db4:	f240 5224 	movw	r2, #1316	; 0x524
 8010db8:	4905      	ldr	r1, [pc, #20]	; (8010dd0 <pbuf_clone+0x5c>)
 8010dba:	4806      	ldr	r0, [pc, #24]	; (8010dd4 <pbuf_clone+0x60>)
 8010dbc:	f006 fada 	bl	8017374 <iprintf>
  return q;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3710      	adds	r7, #16
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	080193e8 	.word	0x080193e8
 8010dd0:	08019890 	.word	0x08019890
 8010dd4:	0801947c 	.word	0x0801947c

08010dd8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	2200      	movs	r2, #0
 8010de6:	2104      	movs	r1, #4
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7f8 fb5b 	bl	80094a4 <osMessageQueueNew>
 8010dee:	4602      	mov	r2, r0
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d102      	bne.n	8010e02 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8010dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e00:	e000      	b.n	8010e04 <sys_mbox_new+0x2c>

  return ERR_OK;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6818      	ldr	r0, [r3, #0]
 8010e1a:	4639      	mov	r1, r7
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f7f8 fbc6 	bl	80095b0 <osMessageQueuePut>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d102      	bne.n	8010e30 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	73fb      	strb	r3, [r7, #15]
 8010e2e:	e001      	b.n	8010e34 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8010e30:	23ff      	movs	r3, #255	; 0xff
 8010e32:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b086      	sub	sp, #24
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	60f8      	str	r0, [r7, #12]
 8010e48:	60b9      	str	r1, [r7, #8]
 8010e4a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8010e4c:	f7f7 ff8a 	bl	8008d64 <osKernelGetTickCount>
 8010e50:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d013      	beq.n	8010e80 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	6818      	ldr	r0, [r3, #0]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	68b9      	ldr	r1, [r7, #8]
 8010e62:	f7f8 fc19 	bl	8009698 <osMessageQueueGet>
 8010e66:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d105      	bne.n	8010e7a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8010e6e:	f7f7 ff79 	bl	8008d64 <osKernelGetTickCount>
 8010e72:	4602      	mov	r2, r0
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	e00f      	b.n	8010e9a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e7e:	e00c      	b.n	8010e9a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	6818      	ldr	r0, [r3, #0]
 8010e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e88:	2200      	movs	r2, #0
 8010e8a:	68b9      	ldr	r1, [r7, #8]
 8010e8c:	f7f8 fc04 	bl	8009698 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8010e90:	f7f7 ff68 	bl	8008d64 <osKernelGetTickCount>
 8010e94:	4602      	mov	r2, r0
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3718      	adds	r7, #24
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010ea2:	b480      	push	{r7}
 8010ea4:	b083      	sub	sp, #12
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d101      	bne.n	8010eb6 <sys_mbox_valid+0x14>
    return 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e000      	b.n	8010eb8 <sys_mbox_valid+0x16>
  else
    return 1;
 8010eb6:	2301      	movs	r3, #1
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	370c      	adds	r7, #12
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8010ec8:	2000      	movs	r0, #0
 8010eca:	f7f8 f847 	bl	8008f5c <osMutexNew>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	4b01      	ldr	r3, [pc, #4]	; (8010ed8 <sys_init+0x14>)
 8010ed2:	601a      	str	r2, [r3, #0]
#endif
}
 8010ed4:	bf00      	nop
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	2400835c 	.word	0x2400835c

08010edc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	f7f8 f839 	bl	8008f5c <osMutexNew>
 8010eea:	4602      	mov	r2, r0
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d102      	bne.n	8010efe <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010efc:	e000      	b.n	8010f00 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7f8 f8b9 	bl	8009090 <osMutexAcquire>
#endif
}
 8010f1e:	bf00      	nop
 8010f20:	3708      	adds	r7, #8
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}

08010f26 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b082      	sub	sp, #8
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7f8 f90a 	bl	800914c <osMutexRelease>
}
 8010f38:	bf00      	nop
 8010f3a:	3708      	adds	r7, #8
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b08e      	sub	sp, #56	; 0x38
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
 8010f4c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8010f4e:	f107 0314 	add.w	r3, r7, #20
 8010f52:	2224      	movs	r2, #36	; 0x24
 8010f54:	2100      	movs	r1, #0
 8010f56:	4618      	mov	r0, r3
 8010f58:	f006 fa03 	bl	8017362 <memset>
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	617b      	str	r3, [r7, #20]
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f66:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8010f68:	f107 0314 	add.w	r3, r7, #20
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	6879      	ldr	r1, [r7, #4]
 8010f70:	68b8      	ldr	r0, [r7, #8]
 8010f72:	f7f7 ff1f 	bl	8008db4 <osThreadNew>
 8010f76:	4603      	mov	r3, r0
#endif
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3738      	adds	r7, #56	; 0x38
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8010f84:	4b04      	ldr	r3, [pc, #16]	; (8010f98 <sys_arch_protect+0x18>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7f8 f87f 	bl	8009090 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8010f92:	2301      	movs	r3, #1
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	2400835c 	.word	0x2400835c

08010f9c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010fa4:	4b04      	ldr	r3, [pc, #16]	; (8010fb8 <sys_arch_unprotect+0x1c>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f8 f8cf 	bl	800914c <osMutexRelease>
}
 8010fae:	bf00      	nop
 8010fb0:	3708      	adds	r7, #8
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	2400835c 	.word	0x2400835c

08010fbc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010fc0:	f006 f9f0 	bl	80173a4 <rand>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	4b01      	ldr	r3, [pc, #4]	; (8010fdc <tcp_init+0x20>)
 8010fd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010fd8:	bf00      	nop
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	24000028 	.word	0x24000028

08010fe0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	7d1b      	ldrb	r3, [r3, #20]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d105      	bne.n	8010ffc <tcp_free+0x1c>
 8010ff0:	4b06      	ldr	r3, [pc, #24]	; (801100c <tcp_free+0x2c>)
 8010ff2:	22d4      	movs	r2, #212	; 0xd4
 8010ff4:	4906      	ldr	r1, [pc, #24]	; (8011010 <tcp_free+0x30>)
 8010ff6:	4807      	ldr	r0, [pc, #28]	; (8011014 <tcp_free+0x34>)
 8010ff8:	f006 f9bc 	bl	8017374 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010ffc:	6879      	ldr	r1, [r7, #4]
 8010ffe:	2001      	movs	r0, #1
 8011000:	f7fe fda0 	bl	800fb44 <memp_free>
}
 8011004:	bf00      	nop
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	0801991c 	.word	0x0801991c
 8011010:	08019980 	.word	0x08019980
 8011014:	08019994 	.word	0x08019994

08011018 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	7d1b      	ldrb	r3, [r3, #20]
 8011024:	2b01      	cmp	r3, #1
 8011026:	d105      	bne.n	8011034 <tcp_free_listen+0x1c>
 8011028:	4b06      	ldr	r3, [pc, #24]	; (8011044 <tcp_free_listen+0x2c>)
 801102a:	22df      	movs	r2, #223	; 0xdf
 801102c:	4906      	ldr	r1, [pc, #24]	; (8011048 <tcp_free_listen+0x30>)
 801102e:	4807      	ldr	r0, [pc, #28]	; (801104c <tcp_free_listen+0x34>)
 8011030:	f006 f9a0 	bl	8017374 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011034:	6879      	ldr	r1, [r7, #4]
 8011036:	2002      	movs	r0, #2
 8011038:	f7fe fd84 	bl	800fb44 <memp_free>
}
 801103c:	bf00      	nop
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	0801991c 	.word	0x0801991c
 8011048:	080199bc 	.word	0x080199bc
 801104c:	08019994 	.word	0x08019994

08011050 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011054:	f000 fe98 	bl	8011d88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011058:	4b07      	ldr	r3, [pc, #28]	; (8011078 <tcp_tmr+0x28>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	3301      	adds	r3, #1
 801105e:	b2da      	uxtb	r2, r3
 8011060:	4b05      	ldr	r3, [pc, #20]	; (8011078 <tcp_tmr+0x28>)
 8011062:	701a      	strb	r2, [r3, #0]
 8011064:	4b04      	ldr	r3, [pc, #16]	; (8011078 <tcp_tmr+0x28>)
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	f003 0301 	and.w	r3, r3, #1
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011070:	f000 fb4c 	bl	801170c <tcp_slowtmr>
  }
}
 8011074:	bf00      	nop
 8011076:	bd80      	pop	{r7, pc}
 8011078:	24004b19 	.word	0x24004b19

0801107c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d105      	bne.n	8011098 <tcp_remove_listener+0x1c>
 801108c:	4b0d      	ldr	r3, [pc, #52]	; (80110c4 <tcp_remove_listener+0x48>)
 801108e:	22ff      	movs	r2, #255	; 0xff
 8011090:	490d      	ldr	r1, [pc, #52]	; (80110c8 <tcp_remove_listener+0x4c>)
 8011092:	480e      	ldr	r0, [pc, #56]	; (80110cc <tcp_remove_listener+0x50>)
 8011094:	f006 f96e 	bl	8017374 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	60fb      	str	r3, [r7, #12]
 801109c:	e00a      	b.n	80110b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d102      	bne.n	80110ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2200      	movs	r2, #0
 80110ac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	60fb      	str	r3, [r7, #12]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1f1      	bne.n	801109e <tcp_remove_listener+0x22>
    }
  }
}
 80110ba:	bf00      	nop
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	0801991c 	.word	0x0801991c
 80110c8:	080199d8 	.word	0x080199d8
 80110cc:	08019994 	.word	0x08019994

080110d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d106      	bne.n	80110ec <tcp_listen_closed+0x1c>
 80110de:	4b14      	ldr	r3, [pc, #80]	; (8011130 <tcp_listen_closed+0x60>)
 80110e0:	f240 1211 	movw	r2, #273	; 0x111
 80110e4:	4913      	ldr	r1, [pc, #76]	; (8011134 <tcp_listen_closed+0x64>)
 80110e6:	4814      	ldr	r0, [pc, #80]	; (8011138 <tcp_listen_closed+0x68>)
 80110e8:	f006 f944 	bl	8017374 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	7d1b      	ldrb	r3, [r3, #20]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d006      	beq.n	8011102 <tcp_listen_closed+0x32>
 80110f4:	4b0e      	ldr	r3, [pc, #56]	; (8011130 <tcp_listen_closed+0x60>)
 80110f6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80110fa:	4910      	ldr	r1, [pc, #64]	; (801113c <tcp_listen_closed+0x6c>)
 80110fc:	480e      	ldr	r0, [pc, #56]	; (8011138 <tcp_listen_closed+0x68>)
 80110fe:	f006 f939 	bl	8017374 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011102:	2301      	movs	r3, #1
 8011104:	60fb      	str	r3, [r7, #12]
 8011106:	e00b      	b.n	8011120 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011108:	4a0d      	ldr	r2, [pc, #52]	; (8011140 <tcp_listen_closed+0x70>)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	6879      	ldr	r1, [r7, #4]
 8011114:	4618      	mov	r0, r3
 8011116:	f7ff ffb1 	bl	801107c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	3301      	adds	r3, #1
 801111e:	60fb      	str	r3, [r7, #12]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	2b03      	cmp	r3, #3
 8011124:	d9f0      	bls.n	8011108 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011126:	bf00      	nop
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	0801991c 	.word	0x0801991c
 8011134:	08019a00 	.word	0x08019a00
 8011138:	08019994 	.word	0x08019994
 801113c:	08019a0c 	.word	0x08019a0c
 8011140:	0801b4f8 	.word	0x0801b4f8

08011144 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011144:	b5b0      	push	{r4, r5, r7, lr}
 8011146:	b088      	sub	sp, #32
 8011148:	af04      	add	r7, sp, #16
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	460b      	mov	r3, r1
 801114e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d106      	bne.n	8011164 <tcp_close_shutdown+0x20>
 8011156:	4b61      	ldr	r3, [pc, #388]	; (80112dc <tcp_close_shutdown+0x198>)
 8011158:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801115c:	4960      	ldr	r1, [pc, #384]	; (80112e0 <tcp_close_shutdown+0x19c>)
 801115e:	4861      	ldr	r0, [pc, #388]	; (80112e4 <tcp_close_shutdown+0x1a0>)
 8011160:	f006 f908 	bl	8017374 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011164:	78fb      	ldrb	r3, [r7, #3]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d066      	beq.n	8011238 <tcp_close_shutdown+0xf4>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	7d1b      	ldrb	r3, [r3, #20]
 801116e:	2b04      	cmp	r3, #4
 8011170:	d003      	beq.n	801117a <tcp_close_shutdown+0x36>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	7d1b      	ldrb	r3, [r3, #20]
 8011176:	2b07      	cmp	r3, #7
 8011178:	d15e      	bne.n	8011238 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801117e:	2b00      	cmp	r3, #0
 8011180:	d104      	bne.n	801118c <tcp_close_shutdown+0x48>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011186:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801118a:	d055      	beq.n	8011238 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	8b5b      	ldrh	r3, [r3, #26]
 8011190:	f003 0310 	and.w	r3, r3, #16
 8011194:	2b00      	cmp	r3, #0
 8011196:	d106      	bne.n	80111a6 <tcp_close_shutdown+0x62>
 8011198:	4b50      	ldr	r3, [pc, #320]	; (80112dc <tcp_close_shutdown+0x198>)
 801119a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801119e:	4952      	ldr	r1, [pc, #328]	; (80112e8 <tcp_close_shutdown+0x1a4>)
 80111a0:	4850      	ldr	r0, [pc, #320]	; (80112e4 <tcp_close_shutdown+0x1a0>)
 80111a2:	f006 f8e7 	bl	8017374 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80111ae:	687d      	ldr	r5, [r7, #4]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	3304      	adds	r3, #4
 80111b4:	687a      	ldr	r2, [r7, #4]
 80111b6:	8ad2      	ldrh	r2, [r2, #22]
 80111b8:	6879      	ldr	r1, [r7, #4]
 80111ba:	8b09      	ldrh	r1, [r1, #24]
 80111bc:	9102      	str	r1, [sp, #8]
 80111be:	9201      	str	r2, [sp, #4]
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	462b      	mov	r3, r5
 80111c4:	4622      	mov	r2, r4
 80111c6:	4601      	mov	r1, r0
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f004 fe91 	bl	8015ef0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f001 f8ba 	bl	8012348 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80111d4:	4b45      	ldr	r3, [pc, #276]	; (80112ec <tcp_close_shutdown+0x1a8>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	687a      	ldr	r2, [r7, #4]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d105      	bne.n	80111ea <tcp_close_shutdown+0xa6>
 80111de:	4b43      	ldr	r3, [pc, #268]	; (80112ec <tcp_close_shutdown+0x1a8>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	4a41      	ldr	r2, [pc, #260]	; (80112ec <tcp_close_shutdown+0x1a8>)
 80111e6:	6013      	str	r3, [r2, #0]
 80111e8:	e013      	b.n	8011212 <tcp_close_shutdown+0xce>
 80111ea:	4b40      	ldr	r3, [pc, #256]	; (80112ec <tcp_close_shutdown+0x1a8>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	60fb      	str	r3, [r7, #12]
 80111f0:	e00c      	b.n	801120c <tcp_close_shutdown+0xc8>
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d104      	bne.n	8011206 <tcp_close_shutdown+0xc2>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	68da      	ldr	r2, [r3, #12]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	60da      	str	r2, [r3, #12]
 8011204:	e005      	b.n	8011212 <tcp_close_shutdown+0xce>
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	60fb      	str	r3, [r7, #12]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d1ef      	bne.n	80111f2 <tcp_close_shutdown+0xae>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2200      	movs	r2, #0
 8011216:	60da      	str	r2, [r3, #12]
 8011218:	4b35      	ldr	r3, [pc, #212]	; (80112f0 <tcp_close_shutdown+0x1ac>)
 801121a:	2201      	movs	r2, #1
 801121c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801121e:	4b35      	ldr	r3, [pc, #212]	; (80112f4 <tcp_close_shutdown+0x1b0>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	429a      	cmp	r2, r3
 8011226:	d102      	bne.n	801122e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011228:	f003 fd4c 	bl	8014cc4 <tcp_trigger_input_pcb_close>
 801122c:	e002      	b.n	8011234 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7ff fed6 	bl	8010fe0 <tcp_free>
      }
      return ERR_OK;
 8011234:	2300      	movs	r3, #0
 8011236:	e04d      	b.n	80112d4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	7d1b      	ldrb	r3, [r3, #20]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d02d      	beq.n	801129c <tcp_close_shutdown+0x158>
 8011240:	2b02      	cmp	r3, #2
 8011242:	d036      	beq.n	80112b2 <tcp_close_shutdown+0x16e>
 8011244:	2b00      	cmp	r3, #0
 8011246:	d13f      	bne.n	80112c8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	8adb      	ldrh	r3, [r3, #22]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d021      	beq.n	8011294 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011250:	4b29      	ldr	r3, [pc, #164]	; (80112f8 <tcp_close_shutdown+0x1b4>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	429a      	cmp	r2, r3
 8011258:	d105      	bne.n	8011266 <tcp_close_shutdown+0x122>
 801125a:	4b27      	ldr	r3, [pc, #156]	; (80112f8 <tcp_close_shutdown+0x1b4>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	4a25      	ldr	r2, [pc, #148]	; (80112f8 <tcp_close_shutdown+0x1b4>)
 8011262:	6013      	str	r3, [r2, #0]
 8011264:	e013      	b.n	801128e <tcp_close_shutdown+0x14a>
 8011266:	4b24      	ldr	r3, [pc, #144]	; (80112f8 <tcp_close_shutdown+0x1b4>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	60bb      	str	r3, [r7, #8]
 801126c:	e00c      	b.n	8011288 <tcp_close_shutdown+0x144>
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	429a      	cmp	r2, r3
 8011276:	d104      	bne.n	8011282 <tcp_close_shutdown+0x13e>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	68da      	ldr	r2, [r3, #12]
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	60da      	str	r2, [r3, #12]
 8011280:	e005      	b.n	801128e <tcp_close_shutdown+0x14a>
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	60bb      	str	r3, [r7, #8]
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d1ef      	bne.n	801126e <tcp_close_shutdown+0x12a>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2200      	movs	r2, #0
 8011292:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f7ff fea3 	bl	8010fe0 <tcp_free>
      break;
 801129a:	e01a      	b.n	80112d2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ff17 	bl	80110d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80112a2:	6879      	ldr	r1, [r7, #4]
 80112a4:	4815      	ldr	r0, [pc, #84]	; (80112fc <tcp_close_shutdown+0x1b8>)
 80112a6:	f001 f89f 	bl	80123e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff feb4 	bl	8011018 <tcp_free_listen>
      break;
 80112b0:	e00f      	b.n	80112d2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80112b2:	6879      	ldr	r1, [r7, #4]
 80112b4:	480d      	ldr	r0, [pc, #52]	; (80112ec <tcp_close_shutdown+0x1a8>)
 80112b6:	f001 f897 	bl	80123e8 <tcp_pcb_remove>
 80112ba:	4b0d      	ldr	r3, [pc, #52]	; (80112f0 <tcp_close_shutdown+0x1ac>)
 80112bc:	2201      	movs	r2, #1
 80112be:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7ff fe8d 	bl	8010fe0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80112c6:	e004      	b.n	80112d2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 f819 	bl	8011300 <tcp_close_shutdown_fin>
 80112ce:	4603      	mov	r3, r0
 80112d0:	e000      	b.n	80112d4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80112d2:	2300      	movs	r3, #0
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bdb0      	pop	{r4, r5, r7, pc}
 80112dc:	0801991c 	.word	0x0801991c
 80112e0:	08019a24 	.word	0x08019a24
 80112e4:	08019994 	.word	0x08019994
 80112e8:	08019a44 	.word	0x08019a44
 80112ec:	24008364 	.word	0x24008364
 80112f0:	24008360 	.word	0x24008360
 80112f4:	24008378 	.word	0x24008378
 80112f8:	24008370 	.word	0x24008370
 80112fc:	2400836c 	.word	0x2400836c

08011300 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d106      	bne.n	801131c <tcp_close_shutdown_fin+0x1c>
 801130e:	4b2c      	ldr	r3, [pc, #176]	; (80113c0 <tcp_close_shutdown_fin+0xc0>)
 8011310:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011314:	492b      	ldr	r1, [pc, #172]	; (80113c4 <tcp_close_shutdown_fin+0xc4>)
 8011316:	482c      	ldr	r0, [pc, #176]	; (80113c8 <tcp_close_shutdown_fin+0xc8>)
 8011318:	f006 f82c 	bl	8017374 <iprintf>

  switch (pcb->state) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	7d1b      	ldrb	r3, [r3, #20]
 8011320:	2b04      	cmp	r3, #4
 8011322:	d010      	beq.n	8011346 <tcp_close_shutdown_fin+0x46>
 8011324:	2b07      	cmp	r3, #7
 8011326:	d01b      	beq.n	8011360 <tcp_close_shutdown_fin+0x60>
 8011328:	2b03      	cmp	r3, #3
 801132a:	d126      	bne.n	801137a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f003 fedb 	bl	80150e8 <tcp_send_fin>
 8011332:	4603      	mov	r3, r0
 8011334:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d11f      	bne.n	801137e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2205      	movs	r2, #5
 8011342:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011344:	e01b      	b.n	801137e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f003 fece 	bl	80150e8 <tcp_send_fin>
 801134c:	4603      	mov	r3, r0
 801134e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d114      	bne.n	8011382 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2205      	movs	r2, #5
 801135c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801135e:	e010      	b.n	8011382 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f003 fec1 	bl	80150e8 <tcp_send_fin>
 8011366:	4603      	mov	r3, r0
 8011368:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d109      	bne.n	8011386 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2209      	movs	r2, #9
 8011376:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011378:	e005      	b.n	8011386 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	e01c      	b.n	80113b8 <tcp_close_shutdown_fin+0xb8>
      break;
 801137e:	bf00      	nop
 8011380:	e002      	b.n	8011388 <tcp_close_shutdown_fin+0x88>
      break;
 8011382:	bf00      	nop
 8011384:	e000      	b.n	8011388 <tcp_close_shutdown_fin+0x88>
      break;
 8011386:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d103      	bne.n	8011398 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f003 ffe7 	bl	8015364 <tcp_output>
 8011396:	e00d      	b.n	80113b4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8011398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801139c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113a0:	d108      	bne.n	80113b4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	8b5b      	ldrh	r3, [r3, #26]
 80113a6:	f043 0308 	orr.w	r3, r3, #8
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80113b0:	2300      	movs	r3, #0
 80113b2:	e001      	b.n	80113b8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80113b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	0801991c 	.word	0x0801991c
 80113c4:	08019a00 	.word	0x08019a00
 80113c8:	08019994 	.word	0x08019994

080113cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d109      	bne.n	80113ee <tcp_close+0x22>
 80113da:	4b0f      	ldr	r3, [pc, #60]	; (8011418 <tcp_close+0x4c>)
 80113dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80113e0:	490e      	ldr	r1, [pc, #56]	; (801141c <tcp_close+0x50>)
 80113e2:	480f      	ldr	r0, [pc, #60]	; (8011420 <tcp_close+0x54>)
 80113e4:	f005 ffc6 	bl	8017374 <iprintf>
 80113e8:	f06f 030f 	mvn.w	r3, #15
 80113ec:	e00f      	b.n	801140e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	7d1b      	ldrb	r3, [r3, #20]
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d006      	beq.n	8011404 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	8b5b      	ldrh	r3, [r3, #26]
 80113fa:	f043 0310 	orr.w	r3, r3, #16
 80113fe:	b29a      	uxth	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011404:	2101      	movs	r1, #1
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7ff fe9c 	bl	8011144 <tcp_close_shutdown>
 801140c:	4603      	mov	r3, r0
}
 801140e:	4618      	mov	r0, r3
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	0801991c 	.word	0x0801991c
 801141c:	08019a60 	.word	0x08019a60
 8011420:	08019994 	.word	0x08019994

08011424 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b08e      	sub	sp, #56	; 0x38
 8011428:	af04      	add	r7, sp, #16
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d107      	bne.n	8011444 <tcp_abandon+0x20>
 8011434:	4b52      	ldr	r3, [pc, #328]	; (8011580 <tcp_abandon+0x15c>)
 8011436:	f240 223d 	movw	r2, #573	; 0x23d
 801143a:	4952      	ldr	r1, [pc, #328]	; (8011584 <tcp_abandon+0x160>)
 801143c:	4852      	ldr	r0, [pc, #328]	; (8011588 <tcp_abandon+0x164>)
 801143e:	f005 ff99 	bl	8017374 <iprintf>
 8011442:	e099      	b.n	8011578 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	7d1b      	ldrb	r3, [r3, #20]
 8011448:	2b01      	cmp	r3, #1
 801144a:	d106      	bne.n	801145a <tcp_abandon+0x36>
 801144c:	4b4c      	ldr	r3, [pc, #304]	; (8011580 <tcp_abandon+0x15c>)
 801144e:	f240 2241 	movw	r2, #577	; 0x241
 8011452:	494e      	ldr	r1, [pc, #312]	; (801158c <tcp_abandon+0x168>)
 8011454:	484c      	ldr	r0, [pc, #304]	; (8011588 <tcp_abandon+0x164>)
 8011456:	f005 ff8d 	bl	8017374 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	7d1b      	ldrb	r3, [r3, #20]
 801145e:	2b0a      	cmp	r3, #10
 8011460:	d107      	bne.n	8011472 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011462:	6879      	ldr	r1, [r7, #4]
 8011464:	484a      	ldr	r0, [pc, #296]	; (8011590 <tcp_abandon+0x16c>)
 8011466:	f000 ffbf 	bl	80123e8 <tcp_pcb_remove>
    tcp_free(pcb);
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7ff fdb8 	bl	8010fe0 <tcp_free>
 8011470:	e082      	b.n	8011578 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011472:	2300      	movs	r3, #0
 8011474:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011476:	2300      	movs	r3, #0
 8011478:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801147e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011484:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801148c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	691b      	ldr	r3, [r3, #16]
 8011492:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	7d1b      	ldrb	r3, [r3, #20]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d126      	bne.n	80114ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	8adb      	ldrh	r3, [r3, #22]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d02e      	beq.n	8011502 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80114a4:	4b3b      	ldr	r3, [pc, #236]	; (8011594 <tcp_abandon+0x170>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d105      	bne.n	80114ba <tcp_abandon+0x96>
 80114ae:	4b39      	ldr	r3, [pc, #228]	; (8011594 <tcp_abandon+0x170>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	4a37      	ldr	r2, [pc, #220]	; (8011594 <tcp_abandon+0x170>)
 80114b6:	6013      	str	r3, [r2, #0]
 80114b8:	e013      	b.n	80114e2 <tcp_abandon+0xbe>
 80114ba:	4b36      	ldr	r3, [pc, #216]	; (8011594 <tcp_abandon+0x170>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	61fb      	str	r3, [r7, #28]
 80114c0:	e00c      	b.n	80114dc <tcp_abandon+0xb8>
 80114c2:	69fb      	ldr	r3, [r7, #28]
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d104      	bne.n	80114d6 <tcp_abandon+0xb2>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68da      	ldr	r2, [r3, #12]
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	60da      	str	r2, [r3, #12]
 80114d4:	e005      	b.n	80114e2 <tcp_abandon+0xbe>
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	61fb      	str	r3, [r7, #28]
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d1ef      	bne.n	80114c2 <tcp_abandon+0x9e>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	60da      	str	r2, [r3, #12]
 80114e8:	e00b      	b.n	8011502 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8adb      	ldrh	r3, [r3, #22]
 80114f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80114f4:	6879      	ldr	r1, [r7, #4]
 80114f6:	4828      	ldr	r0, [pc, #160]	; (8011598 <tcp_abandon+0x174>)
 80114f8:	f000 ff76 	bl	80123e8 <tcp_pcb_remove>
 80114fc:	4b27      	ldr	r3, [pc, #156]	; (801159c <tcp_abandon+0x178>)
 80114fe:	2201      	movs	r2, #1
 8011500:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011506:	2b00      	cmp	r3, #0
 8011508:	d004      	beq.n	8011514 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801150e:	4618      	mov	r0, r3
 8011510:	f000 fd1a 	bl	8011f48 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011518:	2b00      	cmp	r3, #0
 801151a:	d004      	beq.n	8011526 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011520:	4618      	mov	r0, r3
 8011522:	f000 fd11 	bl	8011f48 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801152a:	2b00      	cmp	r3, #0
 801152c:	d004      	beq.n	8011538 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011532:	4618      	mov	r0, r3
 8011534:	f000 fd08 	bl	8011f48 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153a:	2b00      	cmp	r3, #0
 801153c:	d00e      	beq.n	801155c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801153e:	6879      	ldr	r1, [r7, #4]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	3304      	adds	r3, #4
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	8b12      	ldrh	r2, [r2, #24]
 8011548:	9202      	str	r2, [sp, #8]
 801154a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801154c:	9201      	str	r2, [sp, #4]
 801154e:	9300      	str	r3, [sp, #0]
 8011550:	460b      	mov	r3, r1
 8011552:	697a      	ldr	r2, [r7, #20]
 8011554:	69b9      	ldr	r1, [r7, #24]
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f004 fcca 	bl	8015ef0 <tcp_rst>
    }
    last_state = pcb->state;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	7d1b      	ldrb	r3, [r3, #20]
 8011560:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7ff fd3c 	bl	8010fe0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d004      	beq.n	8011578 <tcp_abandon+0x154>
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	f06f 010c 	mvn.w	r1, #12
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	4798      	blx	r3
  }
}
 8011578:	3728      	adds	r7, #40	; 0x28
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	0801991c 	.word	0x0801991c
 8011584:	08019a94 	.word	0x08019a94
 8011588:	08019994 	.word	0x08019994
 801158c:	08019ab0 	.word	0x08019ab0
 8011590:	24008374 	.word	0x24008374
 8011594:	24008370 	.word	0x24008370
 8011598:	24008364 	.word	0x24008364
 801159c:	24008360 	.word	0x24008360

080115a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80115a8:	2101      	movs	r1, #1
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f7ff ff3a 	bl	8011424 <tcp_abandon>
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d106      	bne.n	80115d4 <tcp_update_rcv_ann_wnd+0x1c>
 80115c6:	4b25      	ldr	r3, [pc, #148]	; (801165c <tcp_update_rcv_ann_wnd+0xa4>)
 80115c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80115cc:	4924      	ldr	r1, [pc, #144]	; (8011660 <tcp_update_rcv_ann_wnd+0xa8>)
 80115ce:	4825      	ldr	r0, [pc, #148]	; (8011664 <tcp_update_rcv_ann_wnd+0xac>)
 80115d0:	f005 fed0 	bl	8017374 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80115dc:	4413      	add	r3, r2
 80115de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80115e8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80115ec:	bf28      	it	cs
 80115ee:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80115f2:	b292      	uxth	r2, r2
 80115f4:	4413      	add	r3, r2
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	db08      	blt.n	8011610 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801160a:	68fa      	ldr	r2, [r7, #12]
 801160c:	1ad3      	subs	r3, r2, r3
 801160e:	e020      	b.n	8011652 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	2b00      	cmp	r3, #0
 801161c:	dd03      	ble.n	8011626 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011624:	e014      	b.n	8011650 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801162e:	1ad3      	subs	r3, r2, r3
 8011630:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011638:	d306      	bcc.n	8011648 <tcp_update_rcv_ann_wnd+0x90>
 801163a:	4b08      	ldr	r3, [pc, #32]	; (801165c <tcp_update_rcv_ann_wnd+0xa4>)
 801163c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011640:	4909      	ldr	r1, [pc, #36]	; (8011668 <tcp_update_rcv_ann_wnd+0xb0>)
 8011642:	4808      	ldr	r0, [pc, #32]	; (8011664 <tcp_update_rcv_ann_wnd+0xac>)
 8011644:	f005 fe96 	bl	8017374 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	b29a      	uxth	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011650:	2300      	movs	r3, #0
  }
}
 8011652:	4618      	mov	r0, r3
 8011654:	3710      	adds	r7, #16
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	0801991c 	.word	0x0801991c
 8011660:	08019bac 	.word	0x08019bac
 8011664:	08019994 	.word	0x08019994
 8011668:	08019bd0 	.word	0x08019bd0

0801166c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	460b      	mov	r3, r1
 8011676:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d107      	bne.n	801168e <tcp_recved+0x22>
 801167e:	4b1f      	ldr	r3, [pc, #124]	; (80116fc <tcp_recved+0x90>)
 8011680:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011684:	491e      	ldr	r1, [pc, #120]	; (8011700 <tcp_recved+0x94>)
 8011686:	481f      	ldr	r0, [pc, #124]	; (8011704 <tcp_recved+0x98>)
 8011688:	f005 fe74 	bl	8017374 <iprintf>
 801168c:	e032      	b.n	80116f4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	7d1b      	ldrb	r3, [r3, #20]
 8011692:	2b01      	cmp	r3, #1
 8011694:	d106      	bne.n	80116a4 <tcp_recved+0x38>
 8011696:	4b19      	ldr	r3, [pc, #100]	; (80116fc <tcp_recved+0x90>)
 8011698:	f240 32d3 	movw	r2, #979	; 0x3d3
 801169c:	491a      	ldr	r1, [pc, #104]	; (8011708 <tcp_recved+0x9c>)
 801169e:	4819      	ldr	r0, [pc, #100]	; (8011704 <tcp_recved+0x98>)
 80116a0:	f005 fe68 	bl	8017374 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80116a8:	887b      	ldrh	r3, [r7, #2]
 80116aa:	4413      	add	r3, r2
 80116ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80116ae:	89fb      	ldrh	r3, [r7, #14]
 80116b0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80116b4:	d804      	bhi.n	80116c0 <tcp_recved+0x54>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116ba:	89fa      	ldrh	r2, [r7, #14]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d204      	bcs.n	80116ca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80116c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80116c8:	e002      	b.n	80116d0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	89fa      	ldrh	r2, [r7, #14]
 80116ce:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f7ff ff71 	bl	80115b8 <tcp_update_rcv_ann_wnd>
 80116d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80116de:	d309      	bcc.n	80116f4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	8b5b      	ldrh	r3, [r3, #26]
 80116e4:	f043 0302 	orr.w	r3, r3, #2
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f003 fe38 	bl	8015364 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80116f4:	3710      	adds	r7, #16
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	0801991c 	.word	0x0801991c
 8011700:	08019bec 	.word	0x08019bec
 8011704:	08019994 	.word	0x08019994
 8011708:	08019c04 	.word	0x08019c04

0801170c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801170c:	b5b0      	push	{r4, r5, r7, lr}
 801170e:	b090      	sub	sp, #64	; 0x40
 8011710:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011712:	2300      	movs	r3, #0
 8011714:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011718:	4b94      	ldr	r3, [pc, #592]	; (801196c <tcp_slowtmr+0x260>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	3301      	adds	r3, #1
 801171e:	4a93      	ldr	r2, [pc, #588]	; (801196c <tcp_slowtmr+0x260>)
 8011720:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011722:	4b93      	ldr	r3, [pc, #588]	; (8011970 <tcp_slowtmr+0x264>)
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	3301      	adds	r3, #1
 8011728:	b2da      	uxtb	r2, r3
 801172a:	4b91      	ldr	r3, [pc, #580]	; (8011970 <tcp_slowtmr+0x264>)
 801172c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801172e:	2300      	movs	r3, #0
 8011730:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011732:	4b90      	ldr	r3, [pc, #576]	; (8011974 <tcp_slowtmr+0x268>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011738:	e29d      	b.n	8011c76 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173c:	7d1b      	ldrb	r3, [r3, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d106      	bne.n	8011750 <tcp_slowtmr+0x44>
 8011742:	4b8d      	ldr	r3, [pc, #564]	; (8011978 <tcp_slowtmr+0x26c>)
 8011744:	f240 42be 	movw	r2, #1214	; 0x4be
 8011748:	498c      	ldr	r1, [pc, #560]	; (801197c <tcp_slowtmr+0x270>)
 801174a:	488d      	ldr	r0, [pc, #564]	; (8011980 <tcp_slowtmr+0x274>)
 801174c:	f005 fe12 	bl	8017374 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011752:	7d1b      	ldrb	r3, [r3, #20]
 8011754:	2b01      	cmp	r3, #1
 8011756:	d106      	bne.n	8011766 <tcp_slowtmr+0x5a>
 8011758:	4b87      	ldr	r3, [pc, #540]	; (8011978 <tcp_slowtmr+0x26c>)
 801175a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801175e:	4989      	ldr	r1, [pc, #548]	; (8011984 <tcp_slowtmr+0x278>)
 8011760:	4887      	ldr	r0, [pc, #540]	; (8011980 <tcp_slowtmr+0x274>)
 8011762:	f005 fe07 	bl	8017374 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011768:	7d1b      	ldrb	r3, [r3, #20]
 801176a:	2b0a      	cmp	r3, #10
 801176c:	d106      	bne.n	801177c <tcp_slowtmr+0x70>
 801176e:	4b82      	ldr	r3, [pc, #520]	; (8011978 <tcp_slowtmr+0x26c>)
 8011770:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011774:	4984      	ldr	r1, [pc, #528]	; (8011988 <tcp_slowtmr+0x27c>)
 8011776:	4882      	ldr	r0, [pc, #520]	; (8011980 <tcp_slowtmr+0x274>)
 8011778:	f005 fdfc 	bl	8017374 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177e:	7f9a      	ldrb	r2, [r3, #30]
 8011780:	4b7b      	ldr	r3, [pc, #492]	; (8011970 <tcp_slowtmr+0x264>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	429a      	cmp	r2, r3
 8011786:	d105      	bne.n	8011794 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011792:	e270      	b.n	8011c76 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011794:	4b76      	ldr	r3, [pc, #472]	; (8011970 <tcp_slowtmr+0x264>)
 8011796:	781a      	ldrb	r2, [r3, #0]
 8011798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80117a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117aa:	7d1b      	ldrb	r3, [r3, #20]
 80117ac:	2b02      	cmp	r3, #2
 80117ae:	d10a      	bne.n	80117c6 <tcp_slowtmr+0xba>
 80117b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117b6:	2b05      	cmp	r3, #5
 80117b8:	d905      	bls.n	80117c6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80117ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117be:	3301      	adds	r3, #1
 80117c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117c4:	e11e      	b.n	8011a04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80117c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117cc:	2b0b      	cmp	r3, #11
 80117ce:	d905      	bls.n	80117dc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80117d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117d4:	3301      	adds	r3, #1
 80117d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117da:	e113      	b.n	8011a04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80117dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d075      	beq.n	80118d2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80117e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d006      	beq.n	80117fc <tcp_slowtmr+0xf0>
 80117ee:	4b62      	ldr	r3, [pc, #392]	; (8011978 <tcp_slowtmr+0x26c>)
 80117f0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80117f4:	4965      	ldr	r1, [pc, #404]	; (801198c <tcp_slowtmr+0x280>)
 80117f6:	4862      	ldr	r0, [pc, #392]	; (8011980 <tcp_slowtmr+0x274>)
 80117f8:	f005 fdbc 	bl	8017374 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80117fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011800:	2b00      	cmp	r3, #0
 8011802:	d106      	bne.n	8011812 <tcp_slowtmr+0x106>
 8011804:	4b5c      	ldr	r3, [pc, #368]	; (8011978 <tcp_slowtmr+0x26c>)
 8011806:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801180a:	4961      	ldr	r1, [pc, #388]	; (8011990 <tcp_slowtmr+0x284>)
 801180c:	485c      	ldr	r0, [pc, #368]	; (8011980 <tcp_slowtmr+0x274>)
 801180e:	f005 fdb1 	bl	8017374 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011818:	2b0b      	cmp	r3, #11
 801181a:	d905      	bls.n	8011828 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801181c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011820:	3301      	adds	r3, #1
 8011822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011826:	e0ed      	b.n	8011a04 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801182e:	3b01      	subs	r3, #1
 8011830:	4a58      	ldr	r2, [pc, #352]	; (8011994 <tcp_slowtmr+0x288>)
 8011832:	5cd3      	ldrb	r3, [r2, r3]
 8011834:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801183c:	7c7a      	ldrb	r2, [r7, #17]
 801183e:	429a      	cmp	r2, r3
 8011840:	d907      	bls.n	8011852 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011844:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011848:	3301      	adds	r3, #1
 801184a:	b2da      	uxtb	r2, r3
 801184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011854:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011858:	7c7a      	ldrb	r2, [r7, #17]
 801185a:	429a      	cmp	r2, r3
 801185c:	f200 80d2 	bhi.w	8011a04 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011860:	2301      	movs	r3, #1
 8011862:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801186a:	2b00      	cmp	r3, #0
 801186c:	d108      	bne.n	8011880 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801186e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011870:	f004 fc32 	bl	80160d8 <tcp_zero_window_probe>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d014      	beq.n	80118a4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801187a:	2300      	movs	r3, #0
 801187c:	623b      	str	r3, [r7, #32]
 801187e:	e011      	b.n	80118a4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011886:	4619      	mov	r1, r3
 8011888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801188a:	f003 fae5 	bl	8014e58 <tcp_split_unsent_seg>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d107      	bne.n	80118a4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011896:	f003 fd65 	bl	8015364 <tcp_output>
 801189a:	4603      	mov	r3, r0
 801189c:	2b00      	cmp	r3, #0
 801189e:	d101      	bne.n	80118a4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	f000 80ac 	beq.w	8011a04 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80118ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80118b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118ba:	2b06      	cmp	r3, #6
 80118bc:	f200 80a2 	bhi.w	8011a04 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80118c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118c6:	3301      	adds	r3, #1
 80118c8:	b2da      	uxtb	r2, r3
 80118ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80118d0:	e098      	b.n	8011a04 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80118d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118d8:	2b00      	cmp	r3, #0
 80118da:	db0f      	blt.n	80118fc <tcp_slowtmr+0x1f0>
 80118dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d008      	beq.n	80118fc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80118ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	3301      	adds	r3, #1
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	b21a      	sxth	r2, r3
 80118f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80118fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011904:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011908:	429a      	cmp	r2, r3
 801190a:	db7b      	blt.n	8011a04 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801190c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801190e:	f004 f821 	bl	8015954 <tcp_rexmit_rto_prepare>
 8011912:	4603      	mov	r3, r0
 8011914:	2b00      	cmp	r3, #0
 8011916:	d007      	beq.n	8011928 <tcp_slowtmr+0x21c>
 8011918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801191c:	2b00      	cmp	r3, #0
 801191e:	d171      	bne.n	8011a04 <tcp_slowtmr+0x2f8>
 8011920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011924:	2b00      	cmp	r3, #0
 8011926:	d06d      	beq.n	8011a04 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192a:	7d1b      	ldrb	r3, [r3, #20]
 801192c:	2b02      	cmp	r3, #2
 801192e:	d03a      	beq.n	80119a6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011936:	2b0c      	cmp	r3, #12
 8011938:	bf28      	it	cs
 801193a:	230c      	movcs	r3, #12
 801193c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011944:	10db      	asrs	r3, r3, #3
 8011946:	b21b      	sxth	r3, r3
 8011948:	461a      	mov	r2, r3
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011950:	4413      	add	r3, r2
 8011952:	7efa      	ldrb	r2, [r7, #27]
 8011954:	4910      	ldr	r1, [pc, #64]	; (8011998 <tcp_slowtmr+0x28c>)
 8011956:	5c8a      	ldrb	r2, [r1, r2]
 8011958:	4093      	lsls	r3, r2
 801195a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011962:	4293      	cmp	r3, r2
 8011964:	dc1a      	bgt.n	801199c <tcp_slowtmr+0x290>
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	b21a      	sxth	r2, r3
 801196a:	e019      	b.n	80119a0 <tcp_slowtmr+0x294>
 801196c:	24008368 	.word	0x24008368
 8011970:	24004b1a 	.word	0x24004b1a
 8011974:	24008364 	.word	0x24008364
 8011978:	0801991c 	.word	0x0801991c
 801197c:	08019c94 	.word	0x08019c94
 8011980:	08019994 	.word	0x08019994
 8011984:	08019cc0 	.word	0x08019cc0
 8011988:	08019cec 	.word	0x08019cec
 801198c:	08019d1c 	.word	0x08019d1c
 8011990:	08019d50 	.word	0x08019d50
 8011994:	0801b4f0 	.word	0x0801b4f0
 8011998:	0801b4e0 	.word	0x0801b4e0
 801199c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80119a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80119a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a8:	2200      	movs	r2, #0
 80119aa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80119ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80119b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119b8:	4293      	cmp	r3, r2
 80119ba:	bf28      	it	cs
 80119bc:	4613      	movcs	r3, r2
 80119be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80119c0:	8a7b      	ldrh	r3, [r7, #18]
 80119c2:	085b      	lsrs	r3, r3, #1
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80119cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80119d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119d6:	005b      	lsls	r3, r3, #1
 80119d8:	b29b      	uxth	r3, r3
 80119da:	429a      	cmp	r2, r3
 80119dc:	d206      	bcs.n	80119ec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80119de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119e2:	005b      	lsls	r3, r3, #1
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80119ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80119f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80119f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f8:	2200      	movs	r2, #0
 80119fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80119fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a00:	f004 f818 	bl	8015a34 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a06:	7d1b      	ldrb	r3, [r3, #20]
 8011a08:	2b06      	cmp	r3, #6
 8011a0a:	d111      	bne.n	8011a30 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0e:	8b5b      	ldrh	r3, [r3, #26]
 8011a10:	f003 0310 	and.w	r3, r3, #16
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d00b      	beq.n	8011a30 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a18:	4b9c      	ldr	r3, [pc, #624]	; (8011c8c <tcp_slowtmr+0x580>)
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1e:	6a1b      	ldr	r3, [r3, #32]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	2b28      	cmp	r3, #40	; 0x28
 8011a24:	d904      	bls.n	8011a30 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a32:	7a5b      	ldrb	r3, [r3, #9]
 8011a34:	f003 0308 	and.w	r3, r3, #8
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d04a      	beq.n	8011ad2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a40:	2b04      	cmp	r3, #4
 8011a42:	d003      	beq.n	8011a4c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a46:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011a48:	2b07      	cmp	r3, #7
 8011a4a:	d142      	bne.n	8011ad2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a4c:	4b8f      	ldr	r3, [pc, #572]	; (8011c8c <tcp_slowtmr+0x580>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a52:	6a1b      	ldr	r3, [r3, #32]
 8011a54:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a58:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011a5c:	4b8c      	ldr	r3, [pc, #560]	; (8011c90 <tcp_slowtmr+0x584>)
 8011a5e:	440b      	add	r3, r1
 8011a60:	498c      	ldr	r1, [pc, #560]	; (8011c94 <tcp_slowtmr+0x588>)
 8011a62:	fba1 1303 	umull	r1, r3, r1, r3
 8011a66:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d90a      	bls.n	8011a82 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a70:	3301      	adds	r3, #1
 8011a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011a76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011a80:	e027      	b.n	8011ad2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a82:	4b82      	ldr	r3, [pc, #520]	; (8011c8c <tcp_slowtmr+0x580>)
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a88:	6a1b      	ldr	r3, [r3, #32]
 8011a8a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011a98:	4618      	mov	r0, r3
 8011a9a:	4b7f      	ldr	r3, [pc, #508]	; (8011c98 <tcp_slowtmr+0x58c>)
 8011a9c:	fb03 f300 	mul.w	r3, r3, r0
 8011aa0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011aa2:	497c      	ldr	r1, [pc, #496]	; (8011c94 <tcp_slowtmr+0x588>)
 8011aa4:	fba1 1303 	umull	r1, r3, r1, r3
 8011aa8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d911      	bls.n	8011ad2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ab0:	f004 fad2 	bl	8016058 <tcp_keepalive>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011aba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d107      	bne.n	8011ad2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011ac8:	3301      	adds	r3, #1
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d011      	beq.n	8011afe <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011ada:	4b6c      	ldr	r3, [pc, #432]	; (8011c8c <tcp_slowtmr+0x580>)
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae0:	6a1b      	ldr	r3, [r3, #32]
 8011ae2:	1ad2      	subs	r2, r2, r3
 8011ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011aea:	4619      	mov	r1, r3
 8011aec:	460b      	mov	r3, r1
 8011aee:	005b      	lsls	r3, r3, #1
 8011af0:	440b      	add	r3, r1
 8011af2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d302      	bcc.n	8011afe <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011af8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011afa:	f000 fdd9 	bl	80126b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	7d1b      	ldrb	r3, [r3, #20]
 8011b02:	2b03      	cmp	r3, #3
 8011b04:	d10b      	bne.n	8011b1e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b06:	4b61      	ldr	r3, [pc, #388]	; (8011c8c <tcp_slowtmr+0x580>)
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0c:	6a1b      	ldr	r3, [r3, #32]
 8011b0e:	1ad3      	subs	r3, r2, r3
 8011b10:	2b28      	cmp	r3, #40	; 0x28
 8011b12:	d904      	bls.n	8011b1e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b18:	3301      	adds	r3, #1
 8011b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b20:	7d1b      	ldrb	r3, [r3, #20]
 8011b22:	2b09      	cmp	r3, #9
 8011b24:	d10b      	bne.n	8011b3e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011b26:	4b59      	ldr	r3, [pc, #356]	; (8011c8c <tcp_slowtmr+0x580>)
 8011b28:	681a      	ldr	r2, [r3, #0]
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	6a1b      	ldr	r3, [r3, #32]
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	2bf0      	cmp	r3, #240	; 0xf0
 8011b32:	d904      	bls.n	8011b3e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b38:	3301      	adds	r3, #1
 8011b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d060      	beq.n	8011c08 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b4c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b50:	f000 fbfa 	bl	8012348 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d010      	beq.n	8011b7c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011b5a:	4b50      	ldr	r3, [pc, #320]	; (8011c9c <tcp_slowtmr+0x590>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d106      	bne.n	8011b72 <tcp_slowtmr+0x466>
 8011b64:	4b4e      	ldr	r3, [pc, #312]	; (8011ca0 <tcp_slowtmr+0x594>)
 8011b66:	f240 526d 	movw	r2, #1389	; 0x56d
 8011b6a:	494e      	ldr	r1, [pc, #312]	; (8011ca4 <tcp_slowtmr+0x598>)
 8011b6c:	484e      	ldr	r0, [pc, #312]	; (8011ca8 <tcp_slowtmr+0x59c>)
 8011b6e:	f005 fc01 	bl	8017374 <iprintf>
        prev->next = pcb->next;
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	68da      	ldr	r2, [r3, #12]
 8011b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b78:	60da      	str	r2, [r3, #12]
 8011b7a:	e00f      	b.n	8011b9c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011b7c:	4b47      	ldr	r3, [pc, #284]	; (8011c9c <tcp_slowtmr+0x590>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d006      	beq.n	8011b94 <tcp_slowtmr+0x488>
 8011b86:	4b46      	ldr	r3, [pc, #280]	; (8011ca0 <tcp_slowtmr+0x594>)
 8011b88:	f240 5271 	movw	r2, #1393	; 0x571
 8011b8c:	4947      	ldr	r1, [pc, #284]	; (8011cac <tcp_slowtmr+0x5a0>)
 8011b8e:	4846      	ldr	r0, [pc, #280]	; (8011ca8 <tcp_slowtmr+0x59c>)
 8011b90:	f005 fbf0 	bl	8017374 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	4a40      	ldr	r2, [pc, #256]	; (8011c9c <tcp_slowtmr+0x590>)
 8011b9a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d013      	beq.n	8011bcc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011bac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb0:	3304      	adds	r3, #4
 8011bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bb4:	8ad2      	ldrh	r2, [r2, #22]
 8011bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bb8:	8b09      	ldrh	r1, [r1, #24]
 8011bba:	9102      	str	r1, [sp, #8]
 8011bbc:	9201      	str	r2, [sp, #4]
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	462b      	mov	r3, r5
 8011bc2:	4622      	mov	r2, r4
 8011bc4:	4601      	mov	r1, r0
 8011bc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bc8:	f004 f992 	bl	8015ef0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bce:	691b      	ldr	r3, [r3, #16]
 8011bd0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd4:	7d1b      	ldrb	r3, [r3, #20]
 8011bd6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bda:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011be2:	6838      	ldr	r0, [r7, #0]
 8011be4:	f7ff f9fc 	bl	8010fe0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011be8:	4b31      	ldr	r3, [pc, #196]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <tcp_slowtmr+0x4f2>
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f06f 010c 	mvn.w	r1, #12
 8011bfa:	68b8      	ldr	r0, [r7, #8]
 8011bfc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011bfe:	4b2c      	ldr	r3, [pc, #176]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d037      	beq.n	8011c76 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011c06:	e592      	b.n	801172e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c14:	7f1b      	ldrb	r3, [r3, #28]
 8011c16:	3301      	adds	r3, #1
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c1c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c20:	7f1a      	ldrb	r2, [r3, #28]
 8011c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c24:	7f5b      	ldrb	r3, [r3, #29]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d325      	bcc.n	8011c76 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011c30:	4b1f      	ldr	r3, [pc, #124]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00b      	beq.n	8011c58 <tcp_slowtmr+0x54c>
 8011c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c48:	6912      	ldr	r2, [r2, #16]
 8011c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c4c:	4610      	mov	r0, r2
 8011c4e:	4798      	blx	r3
 8011c50:	4603      	mov	r3, r0
 8011c52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011c56:	e002      	b.n	8011c5e <tcp_slowtmr+0x552>
 8011c58:	2300      	movs	r3, #0
 8011c5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011c5e:	4b14      	ldr	r3, [pc, #80]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d000      	beq.n	8011c68 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011c66:	e562      	b.n	801172e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011c68:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d102      	bne.n	8011c76 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c72:	f003 fb77 	bl	8015364 <tcp_output>
  while (pcb != NULL) {
 8011c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f47f ad5e 	bne.w	801173a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011c82:	4b0c      	ldr	r3, [pc, #48]	; (8011cb4 <tcp_slowtmr+0x5a8>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011c88:	e069      	b.n	8011d5e <tcp_slowtmr+0x652>
 8011c8a:	bf00      	nop
 8011c8c:	24008368 	.word	0x24008368
 8011c90:	000a4cb8 	.word	0x000a4cb8
 8011c94:	10624dd3 	.word	0x10624dd3
 8011c98:	000124f8 	.word	0x000124f8
 8011c9c:	24008364 	.word	0x24008364
 8011ca0:	0801991c 	.word	0x0801991c
 8011ca4:	08019d88 	.word	0x08019d88
 8011ca8:	08019994 	.word	0x08019994
 8011cac:	08019db4 	.word	0x08019db4
 8011cb0:	24008360 	.word	0x24008360
 8011cb4:	24008374 	.word	0x24008374
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cba:	7d1b      	ldrb	r3, [r3, #20]
 8011cbc:	2b0a      	cmp	r3, #10
 8011cbe:	d006      	beq.n	8011cce <tcp_slowtmr+0x5c2>
 8011cc0:	4b2a      	ldr	r3, [pc, #168]	; (8011d6c <tcp_slowtmr+0x660>)
 8011cc2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011cc6:	492a      	ldr	r1, [pc, #168]	; (8011d70 <tcp_slowtmr+0x664>)
 8011cc8:	482a      	ldr	r0, [pc, #168]	; (8011d74 <tcp_slowtmr+0x668>)
 8011cca:	f005 fb53 	bl	8017374 <iprintf>
    pcb_remove = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011cd4:	4b28      	ldr	r3, [pc, #160]	; (8011d78 <tcp_slowtmr+0x66c>)
 8011cd6:	681a      	ldr	r2, [r3, #0]
 8011cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cda:	6a1b      	ldr	r3, [r3, #32]
 8011cdc:	1ad3      	subs	r3, r2, r3
 8011cde:	2bf0      	cmp	r3, #240	; 0xf0
 8011ce0:	d904      	bls.n	8011cec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d02f      	beq.n	8011d54 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cf6:	f000 fb27 	bl	8012348 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d010      	beq.n	8011d22 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011d00:	4b1e      	ldr	r3, [pc, #120]	; (8011d7c <tcp_slowtmr+0x670>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d106      	bne.n	8011d18 <tcp_slowtmr+0x60c>
 8011d0a:	4b18      	ldr	r3, [pc, #96]	; (8011d6c <tcp_slowtmr+0x660>)
 8011d0c:	f240 52af 	movw	r2, #1455	; 0x5af
 8011d10:	491b      	ldr	r1, [pc, #108]	; (8011d80 <tcp_slowtmr+0x674>)
 8011d12:	4818      	ldr	r0, [pc, #96]	; (8011d74 <tcp_slowtmr+0x668>)
 8011d14:	f005 fb2e 	bl	8017374 <iprintf>
        prev->next = pcb->next;
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	68da      	ldr	r2, [r3, #12]
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1e:	60da      	str	r2, [r3, #12]
 8011d20:	e00f      	b.n	8011d42 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011d22:	4b16      	ldr	r3, [pc, #88]	; (8011d7c <tcp_slowtmr+0x670>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d006      	beq.n	8011d3a <tcp_slowtmr+0x62e>
 8011d2c:	4b0f      	ldr	r3, [pc, #60]	; (8011d6c <tcp_slowtmr+0x660>)
 8011d2e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011d32:	4914      	ldr	r1, [pc, #80]	; (8011d84 <tcp_slowtmr+0x678>)
 8011d34:	480f      	ldr	r0, [pc, #60]	; (8011d74 <tcp_slowtmr+0x668>)
 8011d36:	f005 fb1d 	bl	8017374 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	4a0f      	ldr	r2, [pc, #60]	; (8011d7c <tcp_slowtmr+0x670>)
 8011d40:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d44:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d4c:	69f8      	ldr	r0, [r7, #28]
 8011d4e:	f7ff f947 	bl	8010fe0 <tcp_free>
 8011d52:	e004      	b.n	8011d5e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1a9      	bne.n	8011cb8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011d64:	bf00      	nop
 8011d66:	3730      	adds	r7, #48	; 0x30
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8011d6c:	0801991c 	.word	0x0801991c
 8011d70:	08019de0 	.word	0x08019de0
 8011d74:	08019994 	.word	0x08019994
 8011d78:	24008368 	.word	0x24008368
 8011d7c:	24008374 	.word	0x24008374
 8011d80:	08019e10 	.word	0x08019e10
 8011d84:	08019e38 	.word	0x08019e38

08011d88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011d8e:	4b2d      	ldr	r3, [pc, #180]	; (8011e44 <tcp_fasttmr+0xbc>)
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	3301      	adds	r3, #1
 8011d94:	b2da      	uxtb	r2, r3
 8011d96:	4b2b      	ldr	r3, [pc, #172]	; (8011e44 <tcp_fasttmr+0xbc>)
 8011d98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011d9a:	4b2b      	ldr	r3, [pc, #172]	; (8011e48 <tcp_fasttmr+0xc0>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011da0:	e048      	b.n	8011e34 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	7f9a      	ldrb	r2, [r3, #30]
 8011da6:	4b27      	ldr	r3, [pc, #156]	; (8011e44 <tcp_fasttmr+0xbc>)
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d03f      	beq.n	8011e2e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011dae:	4b25      	ldr	r3, [pc, #148]	; (8011e44 <tcp_fasttmr+0xbc>)
 8011db0:	781a      	ldrb	r2, [r3, #0]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	8b5b      	ldrh	r3, [r3, #26]
 8011dba:	f003 0301 	and.w	r3, r3, #1
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d010      	beq.n	8011de4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	8b5b      	ldrh	r3, [r3, #26]
 8011dc6:	f043 0302 	orr.w	r3, r3, #2
 8011dca:	b29a      	uxth	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f003 fac7 	bl	8015364 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	8b5b      	ldrh	r3, [r3, #26]
 8011dda:	f023 0303 	bic.w	r3, r3, #3
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	8b5b      	ldrh	r3, [r3, #26]
 8011de8:	f003 0308 	and.w	r3, r3, #8
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d009      	beq.n	8011e04 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	8b5b      	ldrh	r3, [r3, #26]
 8011df4:	f023 0308 	bic.w	r3, r3, #8
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7ff fa7e 	bl	8011300 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d00a      	beq.n	8011e28 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011e12:	4b0e      	ldr	r3, [pc, #56]	; (8011e4c <tcp_fasttmr+0xc4>)
 8011e14:	2200      	movs	r2, #0
 8011e16:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f000 f819 	bl	8011e50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011e1e:	4b0b      	ldr	r3, [pc, #44]	; (8011e4c <tcp_fasttmr+0xc4>)
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d000      	beq.n	8011e28 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011e26:	e7b8      	b.n	8011d9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	607b      	str	r3, [r7, #4]
 8011e2c:	e002      	b.n	8011e34 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1b3      	bne.n	8011da2 <tcp_fasttmr+0x1a>
    }
  }
}
 8011e3a:	bf00      	nop
 8011e3c:	3708      	adds	r7, #8
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	24004b1a 	.word	0x24004b1a
 8011e48:	24008364 	.word	0x24008364
 8011e4c:	24008360 	.word	0x24008360

08011e50 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011e50:	b590      	push	{r4, r7, lr}
 8011e52:	b085      	sub	sp, #20
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d109      	bne.n	8011e72 <tcp_process_refused_data+0x22>
 8011e5e:	4b37      	ldr	r3, [pc, #220]	; (8011f3c <tcp_process_refused_data+0xec>)
 8011e60:	f240 6209 	movw	r2, #1545	; 0x609
 8011e64:	4936      	ldr	r1, [pc, #216]	; (8011f40 <tcp_process_refused_data+0xf0>)
 8011e66:	4837      	ldr	r0, [pc, #220]	; (8011f44 <tcp_process_refused_data+0xf4>)
 8011e68:	f005 fa84 	bl	8017374 <iprintf>
 8011e6c:	f06f 030f 	mvn.w	r3, #15
 8011e70:	e060      	b.n	8011f34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e76:	7b5b      	ldrb	r3, [r3, #13]
 8011e78:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e7e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2200      	movs	r2, #0
 8011e84:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00b      	beq.n	8011ea8 <tcp_process_refused_data+0x58>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6918      	ldr	r0, [r3, #16]
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	68ba      	ldr	r2, [r7, #8]
 8011e9e:	6879      	ldr	r1, [r7, #4]
 8011ea0:	47a0      	blx	r4
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	73fb      	strb	r3, [r7, #15]
 8011ea6:	e007      	b.n	8011eb8 <tcp_process_refused_data+0x68>
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	68ba      	ldr	r2, [r7, #8]
 8011eac:	6879      	ldr	r1, [r7, #4]
 8011eae:	2000      	movs	r0, #0
 8011eb0:	f000 f8a2 	bl	8011ff8 <tcp_recv_null>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d12a      	bne.n	8011f16 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011ec0:	7bbb      	ldrb	r3, [r7, #14]
 8011ec2:	f003 0320 	and.w	r3, r3, #32
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d033      	beq.n	8011f32 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ece:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011ed2:	d005      	beq.n	8011ee0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ed8:	3301      	adds	r3, #1
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00b      	beq.n	8011f02 <tcp_process_refused_data+0xb2>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6918      	ldr	r0, [r3, #16]
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	6879      	ldr	r1, [r7, #4]
 8011efa:	47a0      	blx	r4
 8011efc:	4603      	mov	r3, r0
 8011efe:	73fb      	strb	r3, [r7, #15]
 8011f00:	e001      	b.n	8011f06 <tcp_process_refused_data+0xb6>
 8011f02:	2300      	movs	r3, #0
 8011f04:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f0a:	f113 0f0d 	cmn.w	r3, #13
 8011f0e:	d110      	bne.n	8011f32 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011f10:	f06f 030c 	mvn.w	r3, #12
 8011f14:	e00e      	b.n	8011f34 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f1a:	f113 0f0d 	cmn.w	r3, #13
 8011f1e:	d102      	bne.n	8011f26 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011f20:	f06f 030c 	mvn.w	r3, #12
 8011f24:	e006      	b.n	8011f34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	68ba      	ldr	r2, [r7, #8]
 8011f2a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011f2c:	f06f 0304 	mvn.w	r3, #4
 8011f30:	e000      	b.n	8011f34 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011f32:	2300      	movs	r3, #0
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3714      	adds	r7, #20
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd90      	pop	{r4, r7, pc}
 8011f3c:	0801991c 	.word	0x0801991c
 8011f40:	08019e60 	.word	0x08019e60
 8011f44:	08019994 	.word	0x08019994

08011f48 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011f50:	e007      	b.n	8011f62 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 f809 	bl	8011f70 <tcp_seg_free>
    seg = next;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1f4      	bne.n	8011f52 <tcp_segs_free+0xa>
  }
}
 8011f68:	bf00      	nop
 8011f6a:	3710      	adds	r7, #16
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}

08011f70 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d00c      	beq.n	8011f98 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d004      	beq.n	8011f90 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fe fc7a 	bl	8010884 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011f90:	6879      	ldr	r1, [r7, #4]
 8011f92:	2003      	movs	r0, #3
 8011f94:	f7fd fdd6 	bl	800fb44 <memp_free>
  }
}
 8011f98:	bf00      	nop
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d106      	bne.n	8011fbc <tcp_seg_copy+0x1c>
 8011fae:	4b0f      	ldr	r3, [pc, #60]	; (8011fec <tcp_seg_copy+0x4c>)
 8011fb0:	f240 6282 	movw	r2, #1666	; 0x682
 8011fb4:	490e      	ldr	r1, [pc, #56]	; (8011ff0 <tcp_seg_copy+0x50>)
 8011fb6:	480f      	ldr	r0, [pc, #60]	; (8011ff4 <tcp_seg_copy+0x54>)
 8011fb8:	f005 f9dc 	bl	8017374 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011fbc:	2003      	movs	r0, #3
 8011fbe:	f7fd fd4b 	bl	800fa58 <memp_malloc>
 8011fc2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d101      	bne.n	8011fce <tcp_seg_copy+0x2e>
    return NULL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e00a      	b.n	8011fe4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011fce:	2210      	movs	r2, #16
 8011fd0:	6879      	ldr	r1, [r7, #4]
 8011fd2:	68f8      	ldr	r0, [r7, #12]
 8011fd4:	f005 f9a1 	bl	801731a <memcpy>
  pbuf_ref(cseg->p);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fe fcf7 	bl	80109d0 <pbuf_ref>
  return cseg;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3710      	adds	r7, #16
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	0801991c 	.word	0x0801991c
 8011ff0:	08019ea4 	.word	0x08019ea4
 8011ff4:	08019994 	.word	0x08019994

08011ff8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
 8012004:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d109      	bne.n	8012020 <tcp_recv_null+0x28>
 801200c:	4b12      	ldr	r3, [pc, #72]	; (8012058 <tcp_recv_null+0x60>)
 801200e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012012:	4912      	ldr	r1, [pc, #72]	; (801205c <tcp_recv_null+0x64>)
 8012014:	4812      	ldr	r0, [pc, #72]	; (8012060 <tcp_recv_null+0x68>)
 8012016:	f005 f9ad 	bl	8017374 <iprintf>
 801201a:	f06f 030f 	mvn.w	r3, #15
 801201e:	e016      	b.n	801204e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d009      	beq.n	801203a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	891b      	ldrh	r3, [r3, #8]
 801202a:	4619      	mov	r1, r3
 801202c:	68b8      	ldr	r0, [r7, #8]
 801202e:	f7ff fb1d 	bl	801166c <tcp_recved>
    pbuf_free(p);
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7fe fc26 	bl	8010884 <pbuf_free>
 8012038:	e008      	b.n	801204c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801203a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d104      	bne.n	801204c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012042:	68b8      	ldr	r0, [r7, #8]
 8012044:	f7ff f9c2 	bl	80113cc <tcp_close>
 8012048:	4603      	mov	r3, r0
 801204a:	e000      	b.n	801204e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	0801991c 	.word	0x0801991c
 801205c:	08019ec0 	.word	0x08019ec0
 8012060:	08019994 	.word	0x08019994

08012064 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	4603      	mov	r3, r0
 801206c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012072:	2b00      	cmp	r3, #0
 8012074:	db01      	blt.n	801207a <tcp_kill_prio+0x16>
 8012076:	79fb      	ldrb	r3, [r7, #7]
 8012078:	e000      	b.n	801207c <tcp_kill_prio+0x18>
 801207a:	237f      	movs	r3, #127	; 0x7f
 801207c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801207e:	7afb      	ldrb	r3, [r7, #11]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d034      	beq.n	80120ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012084:	7afb      	ldrb	r3, [r7, #11]
 8012086:	3b01      	subs	r3, #1
 8012088:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801208a:	2300      	movs	r3, #0
 801208c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801208e:	2300      	movs	r3, #0
 8012090:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012092:	4b19      	ldr	r3, [pc, #100]	; (80120f8 <tcp_kill_prio+0x94>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	617b      	str	r3, [r7, #20]
 8012098:	e01f      	b.n	80120da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	7d5b      	ldrb	r3, [r3, #21]
 801209e:	7afa      	ldrb	r2, [r7, #11]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d80c      	bhi.n	80120be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80120a8:	7afa      	ldrb	r2, [r7, #11]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d112      	bne.n	80120d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120ae:	4b13      	ldr	r3, [pc, #76]	; (80120fc <tcp_kill_prio+0x98>)
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	6a1b      	ldr	r3, [r3, #32]
 80120b6:	1ad3      	subs	r3, r2, r3
 80120b8:	68fa      	ldr	r2, [r7, #12]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d80a      	bhi.n	80120d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80120be:	4b0f      	ldr	r3, [pc, #60]	; (80120fc <tcp_kill_prio+0x98>)
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	6a1b      	ldr	r3, [r3, #32]
 80120c6:	1ad3      	subs	r3, r2, r3
 80120c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	7d5b      	ldrb	r3, [r3, #21]
 80120d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	617b      	str	r3, [r7, #20]
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d1dc      	bne.n	801209a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80120e6:	6938      	ldr	r0, [r7, #16]
 80120e8:	f7ff fa5a 	bl	80115a0 <tcp_abort>
 80120ec:	e000      	b.n	80120f0 <tcp_kill_prio+0x8c>
    return;
 80120ee:	bf00      	nop
  }
}
 80120f0:	3718      	adds	r7, #24
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	24008364 	.word	0x24008364
 80120fc:	24008368 	.word	0x24008368

08012100 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
 8012106:	4603      	mov	r3, r0
 8012108:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801210a:	79fb      	ldrb	r3, [r7, #7]
 801210c:	2b08      	cmp	r3, #8
 801210e:	d009      	beq.n	8012124 <tcp_kill_state+0x24>
 8012110:	79fb      	ldrb	r3, [r7, #7]
 8012112:	2b09      	cmp	r3, #9
 8012114:	d006      	beq.n	8012124 <tcp_kill_state+0x24>
 8012116:	4b1a      	ldr	r3, [pc, #104]	; (8012180 <tcp_kill_state+0x80>)
 8012118:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801211c:	4919      	ldr	r1, [pc, #100]	; (8012184 <tcp_kill_state+0x84>)
 801211e:	481a      	ldr	r0, [pc, #104]	; (8012188 <tcp_kill_state+0x88>)
 8012120:	f005 f928 	bl	8017374 <iprintf>

  inactivity = 0;
 8012124:	2300      	movs	r3, #0
 8012126:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012128:	2300      	movs	r3, #0
 801212a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801212c:	4b17      	ldr	r3, [pc, #92]	; (801218c <tcp_kill_state+0x8c>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	617b      	str	r3, [r7, #20]
 8012132:	e017      	b.n	8012164 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	7d1b      	ldrb	r3, [r3, #20]
 8012138:	79fa      	ldrb	r2, [r7, #7]
 801213a:	429a      	cmp	r2, r3
 801213c:	d10f      	bne.n	801215e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801213e:	4b14      	ldr	r3, [pc, #80]	; (8012190 <tcp_kill_state+0x90>)
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	6a1b      	ldr	r3, [r3, #32]
 8012146:	1ad3      	subs	r3, r2, r3
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	429a      	cmp	r2, r3
 801214c:	d807      	bhi.n	801215e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801214e:	4b10      	ldr	r3, [pc, #64]	; (8012190 <tcp_kill_state+0x90>)
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	6a1b      	ldr	r3, [r3, #32]
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	617b      	str	r3, [r7, #20]
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1e4      	bne.n	8012134 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d003      	beq.n	8012178 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012170:	2100      	movs	r1, #0
 8012172:	6938      	ldr	r0, [r7, #16]
 8012174:	f7ff f956 	bl	8011424 <tcp_abandon>
  }
}
 8012178:	bf00      	nop
 801217a:	3718      	adds	r7, #24
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}
 8012180:	0801991c 	.word	0x0801991c
 8012184:	08019edc 	.word	0x08019edc
 8012188:	08019994 	.word	0x08019994
 801218c:	24008364 	.word	0x24008364
 8012190:	24008368 	.word	0x24008368

08012194 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801219a:	2300      	movs	r3, #0
 801219c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801219e:	2300      	movs	r3, #0
 80121a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121a2:	4b12      	ldr	r3, [pc, #72]	; (80121ec <tcp_kill_timewait+0x58>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	60fb      	str	r3, [r7, #12]
 80121a8:	e012      	b.n	80121d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80121aa:	4b11      	ldr	r3, [pc, #68]	; (80121f0 <tcp_kill_timewait+0x5c>)
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	6a1b      	ldr	r3, [r3, #32]
 80121b2:	1ad3      	subs	r3, r2, r3
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d807      	bhi.n	80121ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80121ba:	4b0d      	ldr	r3, [pc, #52]	; (80121f0 <tcp_kill_timewait+0x5c>)
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	6a1b      	ldr	r3, [r3, #32]
 80121c2:	1ad3      	subs	r3, r2, r3
 80121c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	60fb      	str	r3, [r7, #12]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d1e9      	bne.n	80121aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d002      	beq.n	80121e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80121dc:	68b8      	ldr	r0, [r7, #8]
 80121de:	f7ff f9df 	bl	80115a0 <tcp_abort>
  }
}
 80121e2:	bf00      	nop
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	24008374 	.word	0x24008374
 80121f0:	24008368 	.word	0x24008368

080121f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80121fa:	4b10      	ldr	r3, [pc, #64]	; (801223c <tcp_handle_closepend+0x48>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012200:	e014      	b.n	801222c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	8b5b      	ldrh	r3, [r3, #26]
 801220c:	f003 0308 	and.w	r3, r3, #8
 8012210:	2b00      	cmp	r3, #0
 8012212:	d009      	beq.n	8012228 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	8b5b      	ldrh	r3, [r3, #26]
 8012218:	f023 0308 	bic.w	r3, r3, #8
 801221c:	b29a      	uxth	r2, r3
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7ff f86c 	bl	8011300 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d1e7      	bne.n	8012202 <tcp_handle_closepend+0xe>
  }
}
 8012232:	bf00      	nop
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	24008364 	.word	0x24008364

08012240 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	4603      	mov	r3, r0
 8012248:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801224a:	2001      	movs	r0, #1
 801224c:	f7fd fc04 	bl	800fa58 <memp_malloc>
 8012250:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d126      	bne.n	80122a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012258:	f7ff ffcc 	bl	80121f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801225c:	f7ff ff9a 	bl	8012194 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012260:	2001      	movs	r0, #1
 8012262:	f7fd fbf9 	bl	800fa58 <memp_malloc>
 8012266:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d11b      	bne.n	80122a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801226e:	2009      	movs	r0, #9
 8012270:	f7ff ff46 	bl	8012100 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012274:	2001      	movs	r0, #1
 8012276:	f7fd fbef 	bl	800fa58 <memp_malloc>
 801227a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d111      	bne.n	80122a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012282:	2008      	movs	r0, #8
 8012284:	f7ff ff3c 	bl	8012100 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012288:	2001      	movs	r0, #1
 801228a:	f7fd fbe5 	bl	800fa58 <memp_malloc>
 801228e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d107      	bne.n	80122a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012296:	79fb      	ldrb	r3, [r7, #7]
 8012298:	4618      	mov	r0, r3
 801229a:	f7ff fee3 	bl	8012064 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801229e:	2001      	movs	r0, #1
 80122a0:	f7fd fbda 	bl	800fa58 <memp_malloc>
 80122a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d03f      	beq.n	801232c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80122ac:	229c      	movs	r2, #156	; 0x9c
 80122ae:	2100      	movs	r1, #0
 80122b0:	68f8      	ldr	r0, [r7, #12]
 80122b2:	f005 f856 	bl	8017362 <memset>
    pcb->prio = prio;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	79fa      	ldrb	r2, [r7, #7]
 80122ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80122c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80122cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	22ff      	movs	r2, #255	; 0xff
 80122da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f44f 7206 	mov.w	r2, #536	; 0x218
 80122e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2206      	movs	r2, #6
 80122e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2206      	movs	r2, #6
 80122f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2201      	movs	r2, #1
 80122fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012302:	4b0d      	ldr	r3, [pc, #52]	; (8012338 <tcp_alloc+0xf8>)
 8012304:	681a      	ldr	r2, [r3, #0]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801230a:	4b0c      	ldr	r3, [pc, #48]	; (801233c <tcp_alloc+0xfc>)
 801230c:	781a      	ldrb	r2, [r3, #0]
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012318:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	4a08      	ldr	r2, [pc, #32]	; (8012340 <tcp_alloc+0x100>)
 8012320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4a07      	ldr	r2, [pc, #28]	; (8012344 <tcp_alloc+0x104>)
 8012328:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801232c:	68fb      	ldr	r3, [r7, #12]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	24008368 	.word	0x24008368
 801233c:	24004b1a 	.word	0x24004b1a
 8012340:	08011ff9 	.word	0x08011ff9
 8012344:	006ddd00 	.word	0x006ddd00

08012348 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d107      	bne.n	8012366 <tcp_pcb_purge+0x1e>
 8012356:	4b21      	ldr	r3, [pc, #132]	; (80123dc <tcp_pcb_purge+0x94>)
 8012358:	f640 0251 	movw	r2, #2129	; 0x851
 801235c:	4920      	ldr	r1, [pc, #128]	; (80123e0 <tcp_pcb_purge+0x98>)
 801235e:	4821      	ldr	r0, [pc, #132]	; (80123e4 <tcp_pcb_purge+0x9c>)
 8012360:	f005 f808 	bl	8017374 <iprintf>
 8012364:	e037      	b.n	80123d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	7d1b      	ldrb	r3, [r3, #20]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d033      	beq.n	80123d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012372:	2b0a      	cmp	r3, #10
 8012374:	d02f      	beq.n	80123d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801237a:	2b01      	cmp	r3, #1
 801237c:	d02b      	beq.n	80123d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012382:	2b00      	cmp	r3, #0
 8012384:	d007      	beq.n	8012396 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801238a:	4618      	mov	r0, r3
 801238c:	f7fe fa7a 	bl	8010884 <pbuf_free>
      pcb->refused_data = NULL;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801239a:	2b00      	cmp	r3, #0
 801239c:	d002      	beq.n	80123a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f000 f986 	bl	80126b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7ff fdc9 	bl	8011f48 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7ff fdc4 	bl	8011f48 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	0801991c 	.word	0x0801991c
 80123e0:	08019f9c 	.word	0x08019f9c
 80123e4:	08019994 	.word	0x08019994

080123e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d106      	bne.n	8012406 <tcp_pcb_remove+0x1e>
 80123f8:	4b3e      	ldr	r3, [pc, #248]	; (80124f4 <tcp_pcb_remove+0x10c>)
 80123fa:	f640 0283 	movw	r2, #2179	; 0x883
 80123fe:	493e      	ldr	r1, [pc, #248]	; (80124f8 <tcp_pcb_remove+0x110>)
 8012400:	483e      	ldr	r0, [pc, #248]	; (80124fc <tcp_pcb_remove+0x114>)
 8012402:	f004 ffb7 	bl	8017374 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d106      	bne.n	801241a <tcp_pcb_remove+0x32>
 801240c:	4b39      	ldr	r3, [pc, #228]	; (80124f4 <tcp_pcb_remove+0x10c>)
 801240e:	f640 0284 	movw	r2, #2180	; 0x884
 8012412:	493b      	ldr	r1, [pc, #236]	; (8012500 <tcp_pcb_remove+0x118>)
 8012414:	4839      	ldr	r0, [pc, #228]	; (80124fc <tcp_pcb_remove+0x114>)
 8012416:	f004 ffad 	bl	8017374 <iprintf>

  TCP_RMV(pcblist, pcb);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	683a      	ldr	r2, [r7, #0]
 8012420:	429a      	cmp	r2, r3
 8012422:	d105      	bne.n	8012430 <tcp_pcb_remove+0x48>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	68da      	ldr	r2, [r3, #12]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	e013      	b.n	8012458 <tcp_pcb_remove+0x70>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	60fb      	str	r3, [r7, #12]
 8012436:	e00c      	b.n	8012452 <tcp_pcb_remove+0x6a>
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	683a      	ldr	r2, [r7, #0]
 801243e:	429a      	cmp	r2, r3
 8012440:	d104      	bne.n	801244c <tcp_pcb_remove+0x64>
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	68da      	ldr	r2, [r3, #12]
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	60da      	str	r2, [r3, #12]
 801244a:	e005      	b.n	8012458 <tcp_pcb_remove+0x70>
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	68db      	ldr	r3, [r3, #12]
 8012450:	60fb      	str	r3, [r7, #12]
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d1ef      	bne.n	8012438 <tcp_pcb_remove+0x50>
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	2200      	movs	r2, #0
 801245c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801245e:	6838      	ldr	r0, [r7, #0]
 8012460:	f7ff ff72 	bl	8012348 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	7d1b      	ldrb	r3, [r3, #20]
 8012468:	2b0a      	cmp	r3, #10
 801246a:	d013      	beq.n	8012494 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012470:	2b01      	cmp	r3, #1
 8012472:	d00f      	beq.n	8012494 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	8b5b      	ldrh	r3, [r3, #26]
 8012478:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801247c:	2b00      	cmp	r3, #0
 801247e:	d009      	beq.n	8012494 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	8b5b      	ldrh	r3, [r3, #26]
 8012484:	f043 0302 	orr.w	r3, r3, #2
 8012488:	b29a      	uxth	r2, r3
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801248e:	6838      	ldr	r0, [r7, #0]
 8012490:	f002 ff68 	bl	8015364 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	7d1b      	ldrb	r3, [r3, #20]
 8012498:	2b01      	cmp	r3, #1
 801249a:	d020      	beq.n	80124de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d006      	beq.n	80124b2 <tcp_pcb_remove+0xca>
 80124a4:	4b13      	ldr	r3, [pc, #76]	; (80124f4 <tcp_pcb_remove+0x10c>)
 80124a6:	f640 0293 	movw	r2, #2195	; 0x893
 80124aa:	4916      	ldr	r1, [pc, #88]	; (8012504 <tcp_pcb_remove+0x11c>)
 80124ac:	4813      	ldr	r0, [pc, #76]	; (80124fc <tcp_pcb_remove+0x114>)
 80124ae:	f004 ff61 	bl	8017374 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d006      	beq.n	80124c8 <tcp_pcb_remove+0xe0>
 80124ba:	4b0e      	ldr	r3, [pc, #56]	; (80124f4 <tcp_pcb_remove+0x10c>)
 80124bc:	f640 0294 	movw	r2, #2196	; 0x894
 80124c0:	4911      	ldr	r1, [pc, #68]	; (8012508 <tcp_pcb_remove+0x120>)
 80124c2:	480e      	ldr	r0, [pc, #56]	; (80124fc <tcp_pcb_remove+0x114>)
 80124c4:	f004 ff56 	bl	8017374 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d006      	beq.n	80124de <tcp_pcb_remove+0xf6>
 80124d0:	4b08      	ldr	r3, [pc, #32]	; (80124f4 <tcp_pcb_remove+0x10c>)
 80124d2:	f640 0296 	movw	r2, #2198	; 0x896
 80124d6:	490d      	ldr	r1, [pc, #52]	; (801250c <tcp_pcb_remove+0x124>)
 80124d8:	4808      	ldr	r0, [pc, #32]	; (80124fc <tcp_pcb_remove+0x114>)
 80124da:	f004 ff4b 	bl	8017374 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	2200      	movs	r2, #0
 80124e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	2200      	movs	r2, #0
 80124e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80124ea:	bf00      	nop
 80124ec:	3710      	adds	r7, #16
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	0801991c 	.word	0x0801991c
 80124f8:	08019fb8 	.word	0x08019fb8
 80124fc:	08019994 	.word	0x08019994
 8012500:	08019fd4 	.word	0x08019fd4
 8012504:	08019ff4 	.word	0x08019ff4
 8012508:	0801a00c 	.word	0x0801a00c
 801250c:	0801a028 	.word	0x0801a028

08012510 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d106      	bne.n	801252c <tcp_next_iss+0x1c>
 801251e:	4b0a      	ldr	r3, [pc, #40]	; (8012548 <tcp_next_iss+0x38>)
 8012520:	f640 02af 	movw	r2, #2223	; 0x8af
 8012524:	4909      	ldr	r1, [pc, #36]	; (801254c <tcp_next_iss+0x3c>)
 8012526:	480a      	ldr	r0, [pc, #40]	; (8012550 <tcp_next_iss+0x40>)
 8012528:	f004 ff24 	bl	8017374 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801252c:	4b09      	ldr	r3, [pc, #36]	; (8012554 <tcp_next_iss+0x44>)
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	4b09      	ldr	r3, [pc, #36]	; (8012558 <tcp_next_iss+0x48>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	4413      	add	r3, r2
 8012536:	4a07      	ldr	r2, [pc, #28]	; (8012554 <tcp_next_iss+0x44>)
 8012538:	6013      	str	r3, [r2, #0]
  return iss;
 801253a:	4b06      	ldr	r3, [pc, #24]	; (8012554 <tcp_next_iss+0x44>)
 801253c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801253e:	4618      	mov	r0, r3
 8012540:	3708      	adds	r7, #8
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	0801991c 	.word	0x0801991c
 801254c:	0801a040 	.word	0x0801a040
 8012550:	08019994 	.word	0x08019994
 8012554:	2400002c 	.word	0x2400002c
 8012558:	24008368 	.word	0x24008368

0801255c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af00      	add	r7, sp, #0
 8012562:	4603      	mov	r3, r0
 8012564:	60b9      	str	r1, [r7, #8]
 8012566:	607a      	str	r2, [r7, #4]
 8012568:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d106      	bne.n	801257e <tcp_eff_send_mss_netif+0x22>
 8012570:	4b14      	ldr	r3, [pc, #80]	; (80125c4 <tcp_eff_send_mss_netif+0x68>)
 8012572:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012576:	4914      	ldr	r1, [pc, #80]	; (80125c8 <tcp_eff_send_mss_netif+0x6c>)
 8012578:	4814      	ldr	r0, [pc, #80]	; (80125cc <tcp_eff_send_mss_netif+0x70>)
 801257a:	f004 fefb 	bl	8017374 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d101      	bne.n	8012588 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012584:	89fb      	ldrh	r3, [r7, #14]
 8012586:	e019      	b.n	80125bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801258c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801258e:	8afb      	ldrh	r3, [r7, #22]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d012      	beq.n	80125ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012594:	2328      	movs	r3, #40	; 0x28
 8012596:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012598:	8afa      	ldrh	r2, [r7, #22]
 801259a:	8abb      	ldrh	r3, [r7, #20]
 801259c:	429a      	cmp	r2, r3
 801259e:	d904      	bls.n	80125aa <tcp_eff_send_mss_netif+0x4e>
 80125a0:	8afa      	ldrh	r2, [r7, #22]
 80125a2:	8abb      	ldrh	r3, [r7, #20]
 80125a4:	1ad3      	subs	r3, r2, r3
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	e000      	b.n	80125ac <tcp_eff_send_mss_netif+0x50>
 80125aa:	2300      	movs	r3, #0
 80125ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80125ae:	8a7a      	ldrh	r2, [r7, #18]
 80125b0:	89fb      	ldrh	r3, [r7, #14]
 80125b2:	4293      	cmp	r3, r2
 80125b4:	bf28      	it	cs
 80125b6:	4613      	movcs	r3, r2
 80125b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80125ba:	89fb      	ldrh	r3, [r7, #14]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3718      	adds	r7, #24
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	0801991c 	.word	0x0801991c
 80125c8:	0801a05c 	.word	0x0801a05c
 80125cc:	08019994 	.word	0x08019994

080125d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d119      	bne.n	8012618 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80125e4:	4b10      	ldr	r3, [pc, #64]	; (8012628 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80125e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80125ea:	4910      	ldr	r1, [pc, #64]	; (801262c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80125ec:	4810      	ldr	r0, [pc, #64]	; (8012630 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80125ee:	f004 fec1 	bl	8017374 <iprintf>

  while (pcb != NULL) {
 80125f2:	e011      	b.n	8012618 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681a      	ldr	r2, [r3, #0]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d108      	bne.n	8012612 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f7fe ffca 	bl	80115a0 <tcp_abort>
      pcb = next;
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	60fb      	str	r3, [r7, #12]
 8012610:	e002      	b.n	8012618 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d1ea      	bne.n	80125f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801261e:	bf00      	nop
 8012620:	3710      	adds	r7, #16
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	0801991c 	.word	0x0801991c
 801262c:	0801a084 	.word	0x0801a084
 8012630:	08019994 	.word	0x08019994

08012634 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d02a      	beq.n	801269a <tcp_netif_ip_addr_changed+0x66>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d026      	beq.n	801269a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801264c:	4b15      	ldr	r3, [pc, #84]	; (80126a4 <tcp_netif_ip_addr_changed+0x70>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4619      	mov	r1, r3
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f7ff ffbc 	bl	80125d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012658:	4b13      	ldr	r3, [pc, #76]	; (80126a8 <tcp_netif_ip_addr_changed+0x74>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	4619      	mov	r1, r3
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7ff ffb6 	bl	80125d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d017      	beq.n	801269a <tcp_netif_ip_addr_changed+0x66>
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d013      	beq.n	801269a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012672:	4b0e      	ldr	r3, [pc, #56]	; (80126ac <tcp_netif_ip_addr_changed+0x78>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	60fb      	str	r3, [r7, #12]
 8012678:	e00c      	b.n	8012694 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	429a      	cmp	r2, r3
 8012684:	d103      	bne.n	801268e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1ef      	bne.n	801267a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801269a:	bf00      	nop
 801269c:	3710      	adds	r7, #16
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	24008364 	.word	0x24008364
 80126a8:	24008370 	.word	0x24008370
 80126ac:	2400836c 	.word	0x2400836c

080126b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d007      	beq.n	80126d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ff fc3f 	bl	8011f48 <tcp_segs_free>
    pcb->ooseq = NULL;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2200      	movs	r2, #0
 80126ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80126d0:	bf00      	nop
 80126d2:	3708      	adds	r7, #8
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80126d8:	b590      	push	{r4, r7, lr}
 80126da:	b08d      	sub	sp, #52	; 0x34
 80126dc:	af04      	add	r7, sp, #16
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d105      	bne.n	80126f4 <tcp_input+0x1c>
 80126e8:	4b9b      	ldr	r3, [pc, #620]	; (8012958 <tcp_input+0x280>)
 80126ea:	2283      	movs	r2, #131	; 0x83
 80126ec:	499b      	ldr	r1, [pc, #620]	; (801295c <tcp_input+0x284>)
 80126ee:	489c      	ldr	r0, [pc, #624]	; (8012960 <tcp_input+0x288>)
 80126f0:	f004 fe40 	bl	8017374 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	4a9a      	ldr	r2, [pc, #616]	; (8012964 <tcp_input+0x28c>)
 80126fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	895b      	ldrh	r3, [r3, #10]
 8012700:	2b13      	cmp	r3, #19
 8012702:	f240 83c4 	bls.w	8012e8e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012706:	4b98      	ldr	r3, [pc, #608]	; (8012968 <tcp_input+0x290>)
 8012708:	695a      	ldr	r2, [r3, #20]
 801270a:	4b97      	ldr	r3, [pc, #604]	; (8012968 <tcp_input+0x290>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	4619      	mov	r1, r3
 8012710:	4610      	mov	r0, r2
 8012712:	f7fb fe8d 	bl	800e430 <ip4_addr_isbroadcast_u32>
 8012716:	4603      	mov	r3, r0
 8012718:	2b00      	cmp	r3, #0
 801271a:	f040 83ba 	bne.w	8012e92 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801271e:	4b92      	ldr	r3, [pc, #584]	; (8012968 <tcp_input+0x290>)
 8012720:	695b      	ldr	r3, [r3, #20]
 8012722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012726:	2be0      	cmp	r3, #224	; 0xe0
 8012728:	f000 83b3 	beq.w	8012e92 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801272c:	4b8d      	ldr	r3, [pc, #564]	; (8012964 <tcp_input+0x28c>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	899b      	ldrh	r3, [r3, #12]
 8012732:	b29b      	uxth	r3, r3
 8012734:	4618      	mov	r0, r3
 8012736:	f7fa f90f 	bl	800c958 <lwip_htons>
 801273a:	4603      	mov	r3, r0
 801273c:	0b1b      	lsrs	r3, r3, #12
 801273e:	b29b      	uxth	r3, r3
 8012740:	b2db      	uxtb	r3, r3
 8012742:	009b      	lsls	r3, r3, #2
 8012744:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012746:	7cbb      	ldrb	r3, [r7, #18]
 8012748:	2b13      	cmp	r3, #19
 801274a:	f240 83a2 	bls.w	8012e92 <tcp_input+0x7ba>
 801274e:	7cbb      	ldrb	r3, [r7, #18]
 8012750:	b29a      	uxth	r2, r3
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	891b      	ldrh	r3, [r3, #8]
 8012756:	429a      	cmp	r2, r3
 8012758:	f200 839b 	bhi.w	8012e92 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801275c:	7cbb      	ldrb	r3, [r7, #18]
 801275e:	b29b      	uxth	r3, r3
 8012760:	3b14      	subs	r3, #20
 8012762:	b29a      	uxth	r2, r3
 8012764:	4b81      	ldr	r3, [pc, #516]	; (801296c <tcp_input+0x294>)
 8012766:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012768:	4b81      	ldr	r3, [pc, #516]	; (8012970 <tcp_input+0x298>)
 801276a:	2200      	movs	r2, #0
 801276c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	895a      	ldrh	r2, [r3, #10]
 8012772:	7cbb      	ldrb	r3, [r7, #18]
 8012774:	b29b      	uxth	r3, r3
 8012776:	429a      	cmp	r2, r3
 8012778:	d309      	bcc.n	801278e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801277a:	4b7c      	ldr	r3, [pc, #496]	; (801296c <tcp_input+0x294>)
 801277c:	881a      	ldrh	r2, [r3, #0]
 801277e:	4b7d      	ldr	r3, [pc, #500]	; (8012974 <tcp_input+0x29c>)
 8012780:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012782:	7cbb      	ldrb	r3, [r7, #18]
 8012784:	4619      	mov	r1, r3
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7fd fff6 	bl	8010778 <pbuf_remove_header>
 801278c:	e04e      	b.n	801282c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d105      	bne.n	80127a2 <tcp_input+0xca>
 8012796:	4b70      	ldr	r3, [pc, #448]	; (8012958 <tcp_input+0x280>)
 8012798:	22c2      	movs	r2, #194	; 0xc2
 801279a:	4977      	ldr	r1, [pc, #476]	; (8012978 <tcp_input+0x2a0>)
 801279c:	4870      	ldr	r0, [pc, #448]	; (8012960 <tcp_input+0x288>)
 801279e:	f004 fde9 	bl	8017374 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80127a2:	2114      	movs	r1, #20
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7fd ffe7 	bl	8010778 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	895a      	ldrh	r2, [r3, #10]
 80127ae:	4b71      	ldr	r3, [pc, #452]	; (8012974 <tcp_input+0x29c>)
 80127b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80127b2:	4b6e      	ldr	r3, [pc, #440]	; (801296c <tcp_input+0x294>)
 80127b4:	881a      	ldrh	r2, [r3, #0]
 80127b6:	4b6f      	ldr	r3, [pc, #444]	; (8012974 <tcp_input+0x29c>)
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	1ad3      	subs	r3, r2, r3
 80127bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80127be:	4b6d      	ldr	r3, [pc, #436]	; (8012974 <tcp_input+0x29c>)
 80127c0:	881b      	ldrh	r3, [r3, #0]
 80127c2:	4619      	mov	r1, r3
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7fd ffd7 	bl	8010778 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	895b      	ldrh	r3, [r3, #10]
 80127d0:	8a3a      	ldrh	r2, [r7, #16]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	f200 835f 	bhi.w	8012e96 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	4a64      	ldr	r2, [pc, #400]	; (8012970 <tcp_input+0x298>)
 80127e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	8a3a      	ldrh	r2, [r7, #16]
 80127e8:	4611      	mov	r1, r2
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fd ffc4 	bl	8010778 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	891a      	ldrh	r2, [r3, #8]
 80127f4:	8a3b      	ldrh	r3, [r7, #16]
 80127f6:	1ad3      	subs	r3, r2, r3
 80127f8:	b29a      	uxth	r2, r3
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	895b      	ldrh	r3, [r3, #10]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d005      	beq.n	8012812 <tcp_input+0x13a>
 8012806:	4b54      	ldr	r3, [pc, #336]	; (8012958 <tcp_input+0x280>)
 8012808:	22df      	movs	r2, #223	; 0xdf
 801280a:	495c      	ldr	r1, [pc, #368]	; (801297c <tcp_input+0x2a4>)
 801280c:	4854      	ldr	r0, [pc, #336]	; (8012960 <tcp_input+0x288>)
 801280e:	f004 fdb1 	bl	8017374 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	891a      	ldrh	r2, [r3, #8]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	891b      	ldrh	r3, [r3, #8]
 801281c:	429a      	cmp	r2, r3
 801281e:	d005      	beq.n	801282c <tcp_input+0x154>
 8012820:	4b4d      	ldr	r3, [pc, #308]	; (8012958 <tcp_input+0x280>)
 8012822:	22e0      	movs	r2, #224	; 0xe0
 8012824:	4956      	ldr	r1, [pc, #344]	; (8012980 <tcp_input+0x2a8>)
 8012826:	484e      	ldr	r0, [pc, #312]	; (8012960 <tcp_input+0x288>)
 8012828:	f004 fda4 	bl	8017374 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801282c:	4b4d      	ldr	r3, [pc, #308]	; (8012964 <tcp_input+0x28c>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	881b      	ldrh	r3, [r3, #0]
 8012832:	b29a      	uxth	r2, r3
 8012834:	4b4b      	ldr	r3, [pc, #300]	; (8012964 <tcp_input+0x28c>)
 8012836:	681c      	ldr	r4, [r3, #0]
 8012838:	4610      	mov	r0, r2
 801283a:	f7fa f88d 	bl	800c958 <lwip_htons>
 801283e:	4603      	mov	r3, r0
 8012840:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012842:	4b48      	ldr	r3, [pc, #288]	; (8012964 <tcp_input+0x28c>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	885b      	ldrh	r3, [r3, #2]
 8012848:	b29a      	uxth	r2, r3
 801284a:	4b46      	ldr	r3, [pc, #280]	; (8012964 <tcp_input+0x28c>)
 801284c:	681c      	ldr	r4, [r3, #0]
 801284e:	4610      	mov	r0, r2
 8012850:	f7fa f882 	bl	800c958 <lwip_htons>
 8012854:	4603      	mov	r3, r0
 8012856:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012858:	4b42      	ldr	r3, [pc, #264]	; (8012964 <tcp_input+0x28c>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	685a      	ldr	r2, [r3, #4]
 801285e:	4b41      	ldr	r3, [pc, #260]	; (8012964 <tcp_input+0x28c>)
 8012860:	681c      	ldr	r4, [r3, #0]
 8012862:	4610      	mov	r0, r2
 8012864:	f7fa f88d 	bl	800c982 <lwip_htonl>
 8012868:	4603      	mov	r3, r0
 801286a:	6063      	str	r3, [r4, #4]
 801286c:	6863      	ldr	r3, [r4, #4]
 801286e:	4a45      	ldr	r2, [pc, #276]	; (8012984 <tcp_input+0x2ac>)
 8012870:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012872:	4b3c      	ldr	r3, [pc, #240]	; (8012964 <tcp_input+0x28c>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	689a      	ldr	r2, [r3, #8]
 8012878:	4b3a      	ldr	r3, [pc, #232]	; (8012964 <tcp_input+0x28c>)
 801287a:	681c      	ldr	r4, [r3, #0]
 801287c:	4610      	mov	r0, r2
 801287e:	f7fa f880 	bl	800c982 <lwip_htonl>
 8012882:	4603      	mov	r3, r0
 8012884:	60a3      	str	r3, [r4, #8]
 8012886:	68a3      	ldr	r3, [r4, #8]
 8012888:	4a3f      	ldr	r2, [pc, #252]	; (8012988 <tcp_input+0x2b0>)
 801288a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801288c:	4b35      	ldr	r3, [pc, #212]	; (8012964 <tcp_input+0x28c>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	89db      	ldrh	r3, [r3, #14]
 8012892:	b29a      	uxth	r2, r3
 8012894:	4b33      	ldr	r3, [pc, #204]	; (8012964 <tcp_input+0x28c>)
 8012896:	681c      	ldr	r4, [r3, #0]
 8012898:	4610      	mov	r0, r2
 801289a:	f7fa f85d 	bl	800c958 <lwip_htons>
 801289e:	4603      	mov	r3, r0
 80128a0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80128a2:	4b30      	ldr	r3, [pc, #192]	; (8012964 <tcp_input+0x28c>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	899b      	ldrh	r3, [r3, #12]
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7fa f854 	bl	800c958 <lwip_htons>
 80128b0:	4603      	mov	r3, r0
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128b8:	b2da      	uxtb	r2, r3
 80128ba:	4b34      	ldr	r3, [pc, #208]	; (801298c <tcp_input+0x2b4>)
 80128bc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	891a      	ldrh	r2, [r3, #8]
 80128c2:	4b33      	ldr	r3, [pc, #204]	; (8012990 <tcp_input+0x2b8>)
 80128c4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80128c6:	4b31      	ldr	r3, [pc, #196]	; (801298c <tcp_input+0x2b4>)
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	f003 0303 	and.w	r3, r3, #3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00c      	beq.n	80128ec <tcp_input+0x214>
    tcplen++;
 80128d2:	4b2f      	ldr	r3, [pc, #188]	; (8012990 <tcp_input+0x2b8>)
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	3301      	adds	r3, #1
 80128d8:	b29a      	uxth	r2, r3
 80128da:	4b2d      	ldr	r3, [pc, #180]	; (8012990 <tcp_input+0x2b8>)
 80128dc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	891a      	ldrh	r2, [r3, #8]
 80128e2:	4b2b      	ldr	r3, [pc, #172]	; (8012990 <tcp_input+0x2b8>)
 80128e4:	881b      	ldrh	r3, [r3, #0]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	f200 82d7 	bhi.w	8012e9a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80128ec:	2300      	movs	r3, #0
 80128ee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80128f0:	4b28      	ldr	r3, [pc, #160]	; (8012994 <tcp_input+0x2bc>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	61fb      	str	r3, [r7, #28]
 80128f6:	e09d      	b.n	8012a34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	7d1b      	ldrb	r3, [r3, #20]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d105      	bne.n	801290c <tcp_input+0x234>
 8012900:	4b15      	ldr	r3, [pc, #84]	; (8012958 <tcp_input+0x280>)
 8012902:	22fb      	movs	r2, #251	; 0xfb
 8012904:	4924      	ldr	r1, [pc, #144]	; (8012998 <tcp_input+0x2c0>)
 8012906:	4816      	ldr	r0, [pc, #88]	; (8012960 <tcp_input+0x288>)
 8012908:	f004 fd34 	bl	8017374 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801290c:	69fb      	ldr	r3, [r7, #28]
 801290e:	7d1b      	ldrb	r3, [r3, #20]
 8012910:	2b0a      	cmp	r3, #10
 8012912:	d105      	bne.n	8012920 <tcp_input+0x248>
 8012914:	4b10      	ldr	r3, [pc, #64]	; (8012958 <tcp_input+0x280>)
 8012916:	22fc      	movs	r2, #252	; 0xfc
 8012918:	4920      	ldr	r1, [pc, #128]	; (801299c <tcp_input+0x2c4>)
 801291a:	4811      	ldr	r0, [pc, #68]	; (8012960 <tcp_input+0x288>)
 801291c:	f004 fd2a 	bl	8017374 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	7d1b      	ldrb	r3, [r3, #20]
 8012924:	2b01      	cmp	r3, #1
 8012926:	d105      	bne.n	8012934 <tcp_input+0x25c>
 8012928:	4b0b      	ldr	r3, [pc, #44]	; (8012958 <tcp_input+0x280>)
 801292a:	22fd      	movs	r2, #253	; 0xfd
 801292c:	491c      	ldr	r1, [pc, #112]	; (80129a0 <tcp_input+0x2c8>)
 801292e:	480c      	ldr	r0, [pc, #48]	; (8012960 <tcp_input+0x288>)
 8012930:	f004 fd20 	bl	8017374 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	7a1b      	ldrb	r3, [r3, #8]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d033      	beq.n	80129a4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	7a1a      	ldrb	r2, [r3, #8]
 8012940:	4b09      	ldr	r3, [pc, #36]	; (8012968 <tcp_input+0x290>)
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012948:	3301      	adds	r3, #1
 801294a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801294c:	429a      	cmp	r2, r3
 801294e:	d029      	beq.n	80129a4 <tcp_input+0x2cc>
      prev = pcb;
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	61bb      	str	r3, [r7, #24]
      continue;
 8012954:	e06b      	b.n	8012a2e <tcp_input+0x356>
 8012956:	bf00      	nop
 8012958:	0801a0b8 	.word	0x0801a0b8
 801295c:	0801a11c 	.word	0x0801a11c
 8012960:	0801a134 	.word	0x0801a134
 8012964:	24004b2c 	.word	0x24004b2c
 8012968:	2400529c 	.word	0x2400529c
 801296c:	24004b30 	.word	0x24004b30
 8012970:	24004b34 	.word	0x24004b34
 8012974:	24004b32 	.word	0x24004b32
 8012978:	0801a15c 	.word	0x0801a15c
 801297c:	0801a16c 	.word	0x0801a16c
 8012980:	0801a178 	.word	0x0801a178
 8012984:	24004b3c 	.word	0x24004b3c
 8012988:	24004b40 	.word	0x24004b40
 801298c:	24004b48 	.word	0x24004b48
 8012990:	24004b46 	.word	0x24004b46
 8012994:	24008364 	.word	0x24008364
 8012998:	0801a198 	.word	0x0801a198
 801299c:	0801a1c0 	.word	0x0801a1c0
 80129a0:	0801a1ec 	.word	0x0801a1ec
    }

    if (pcb->remote_port == tcphdr->src &&
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	8b1a      	ldrh	r2, [r3, #24]
 80129a8:	4b94      	ldr	r3, [pc, #592]	; (8012bfc <tcp_input+0x524>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d13a      	bne.n	8012a2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	8ada      	ldrh	r2, [r3, #22]
 80129b8:	4b90      	ldr	r3, [pc, #576]	; (8012bfc <tcp_input+0x524>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	885b      	ldrh	r3, [r3, #2]
 80129be:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d132      	bne.n	8012a2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	685a      	ldr	r2, [r3, #4]
 80129c8:	4b8d      	ldr	r3, [pc, #564]	; (8012c00 <tcp_input+0x528>)
 80129ca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d12c      	bne.n	8012a2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	4b8a      	ldr	r3, [pc, #552]	; (8012c00 <tcp_input+0x528>)
 80129d6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80129d8:	429a      	cmp	r2, r3
 80129da:	d126      	bne.n	8012a2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	69fa      	ldr	r2, [r7, #28]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d106      	bne.n	80129f4 <tcp_input+0x31c>
 80129e6:	4b87      	ldr	r3, [pc, #540]	; (8012c04 <tcp_input+0x52c>)
 80129e8:	f240 120d 	movw	r2, #269	; 0x10d
 80129ec:	4986      	ldr	r1, [pc, #536]	; (8012c08 <tcp_input+0x530>)
 80129ee:	4887      	ldr	r0, [pc, #540]	; (8012c0c <tcp_input+0x534>)
 80129f0:	f004 fcc0 	bl	8017374 <iprintf>
      if (prev != NULL) {
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d00a      	beq.n	8012a10 <tcp_input+0x338>
        prev->next = pcb->next;
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	68da      	ldr	r2, [r3, #12]
 80129fe:	69bb      	ldr	r3, [r7, #24]
 8012a00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012a02:	4b83      	ldr	r3, [pc, #524]	; (8012c10 <tcp_input+0x538>)
 8012a04:	681a      	ldr	r2, [r3, #0]
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012a0a:	4a81      	ldr	r2, [pc, #516]	; (8012c10 <tcp_input+0x538>)
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	69fa      	ldr	r2, [r7, #28]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d111      	bne.n	8012a3e <tcp_input+0x366>
 8012a1a:	4b7a      	ldr	r3, [pc, #488]	; (8012c04 <tcp_input+0x52c>)
 8012a1c:	f240 1215 	movw	r2, #277	; 0x115
 8012a20:	497c      	ldr	r1, [pc, #496]	; (8012c14 <tcp_input+0x53c>)
 8012a22:	487a      	ldr	r0, [pc, #488]	; (8012c0c <tcp_input+0x534>)
 8012a24:	f004 fca6 	bl	8017374 <iprintf>
      break;
 8012a28:	e009      	b.n	8012a3e <tcp_input+0x366>
    }
    prev = pcb;
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	61fb      	str	r3, [r7, #28]
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	f47f af5e 	bne.w	80128f8 <tcp_input+0x220>
 8012a3c:	e000      	b.n	8012a40 <tcp_input+0x368>
      break;
 8012a3e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f040 8095 	bne.w	8012b72 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a48:	4b73      	ldr	r3, [pc, #460]	; (8012c18 <tcp_input+0x540>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	61fb      	str	r3, [r7, #28]
 8012a4e:	e03f      	b.n	8012ad0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	7d1b      	ldrb	r3, [r3, #20]
 8012a54:	2b0a      	cmp	r3, #10
 8012a56:	d006      	beq.n	8012a66 <tcp_input+0x38e>
 8012a58:	4b6a      	ldr	r3, [pc, #424]	; (8012c04 <tcp_input+0x52c>)
 8012a5a:	f240 121f 	movw	r2, #287	; 0x11f
 8012a5e:	496f      	ldr	r1, [pc, #444]	; (8012c1c <tcp_input+0x544>)
 8012a60:	486a      	ldr	r0, [pc, #424]	; (8012c0c <tcp_input+0x534>)
 8012a62:	f004 fc87 	bl	8017374 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a66:	69fb      	ldr	r3, [r7, #28]
 8012a68:	7a1b      	ldrb	r3, [r3, #8]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d009      	beq.n	8012a82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	7a1a      	ldrb	r2, [r3, #8]
 8012a72:	4b63      	ldr	r3, [pc, #396]	; (8012c00 <tcp_input+0x528>)
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d122      	bne.n	8012ac8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	8b1a      	ldrh	r2, [r3, #24]
 8012a86:	4b5d      	ldr	r3, [pc, #372]	; (8012bfc <tcp_input+0x524>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	881b      	ldrh	r3, [r3, #0]
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d11b      	bne.n	8012aca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012a92:	69fb      	ldr	r3, [r7, #28]
 8012a94:	8ada      	ldrh	r2, [r3, #22]
 8012a96:	4b59      	ldr	r3, [pc, #356]	; (8012bfc <tcp_input+0x524>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	885b      	ldrh	r3, [r3, #2]
 8012a9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d113      	bne.n	8012aca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	685a      	ldr	r2, [r3, #4]
 8012aa6:	4b56      	ldr	r3, [pc, #344]	; (8012c00 <tcp_input+0x528>)
 8012aa8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d10d      	bne.n	8012aca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	4b53      	ldr	r3, [pc, #332]	; (8012c00 <tcp_input+0x528>)
 8012ab4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d107      	bne.n	8012aca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012aba:	69f8      	ldr	r0, [r7, #28]
 8012abc:	f000 fb52 	bl	8013164 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7fd fedf 	bl	8010884 <pbuf_free>
        return;
 8012ac6:	e1ee      	b.n	8012ea6 <tcp_input+0x7ce>
        continue;
 8012ac8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	61fb      	str	r3, [r7, #28]
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d1bc      	bne.n	8012a50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012ada:	4b51      	ldr	r3, [pc, #324]	; (8012c20 <tcp_input+0x548>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	617b      	str	r3, [r7, #20]
 8012ae0:	e02a      	b.n	8012b38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	7a1b      	ldrb	r3, [r3, #8]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d00c      	beq.n	8012b04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	7a1a      	ldrb	r2, [r3, #8]
 8012aee:	4b44      	ldr	r3, [pc, #272]	; (8012c00 <tcp_input+0x528>)
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012af6:	3301      	adds	r3, #1
 8012af8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d002      	beq.n	8012b04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	61bb      	str	r3, [r7, #24]
        continue;
 8012b02:	e016      	b.n	8012b32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	8ada      	ldrh	r2, [r3, #22]
 8012b08:	4b3c      	ldr	r3, [pc, #240]	; (8012bfc <tcp_input+0x524>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	885b      	ldrh	r3, [r3, #2]
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d10c      	bne.n	8012b2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	4b39      	ldr	r3, [pc, #228]	; (8012c00 <tcp_input+0x528>)
 8012b1a:	695b      	ldr	r3, [r3, #20]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d00f      	beq.n	8012b40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d00d      	beq.n	8012b42 <tcp_input+0x46a>
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d009      	beq.n	8012b42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	617b      	str	r3, [r7, #20]
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d1d1      	bne.n	8012ae2 <tcp_input+0x40a>
 8012b3e:	e000      	b.n	8012b42 <tcp_input+0x46a>
            break;
 8012b40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d014      	beq.n	8012b72 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00a      	beq.n	8012b64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	68da      	ldr	r2, [r3, #12]
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012b56:	4b32      	ldr	r3, [pc, #200]	; (8012c20 <tcp_input+0x548>)
 8012b58:	681a      	ldr	r2, [r3, #0]
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012b5e:	4a30      	ldr	r2, [pc, #192]	; (8012c20 <tcp_input+0x548>)
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012b64:	6978      	ldr	r0, [r7, #20]
 8012b66:	f000 f9ff 	bl	8012f68 <tcp_listen_input>
      }
      pbuf_free(p);
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7fd fe8a 	bl	8010884 <pbuf_free>
      return;
 8012b70:	e199      	b.n	8012ea6 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012b72:	69fb      	ldr	r3, [r7, #28]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	f000 8160 	beq.w	8012e3a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012b7a:	4b2a      	ldr	r3, [pc, #168]	; (8012c24 <tcp_input+0x54c>)
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	891a      	ldrh	r2, [r3, #8]
 8012b84:	4b27      	ldr	r3, [pc, #156]	; (8012c24 <tcp_input+0x54c>)
 8012b86:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012b88:	4a26      	ldr	r2, [pc, #152]	; (8012c24 <tcp_input+0x54c>)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012b8e:	4b1b      	ldr	r3, [pc, #108]	; (8012bfc <tcp_input+0x524>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	4a24      	ldr	r2, [pc, #144]	; (8012c24 <tcp_input+0x54c>)
 8012b94:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012b96:	4b24      	ldr	r3, [pc, #144]	; (8012c28 <tcp_input+0x550>)
 8012b98:	2200      	movs	r2, #0
 8012b9a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012b9c:	4b23      	ldr	r3, [pc, #140]	; (8012c2c <tcp_input+0x554>)
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012ba2:	4b23      	ldr	r3, [pc, #140]	; (8012c30 <tcp_input+0x558>)
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012ba8:	4b22      	ldr	r3, [pc, #136]	; (8012c34 <tcp_input+0x55c>)
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	f003 0308 	and.w	r3, r3, #8
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d006      	beq.n	8012bc2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	7b5b      	ldrb	r3, [r3, #13]
 8012bb8:	f043 0301 	orr.w	r3, r3, #1
 8012bbc:	b2da      	uxtb	r2, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d038      	beq.n	8012c3c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012bca:	69f8      	ldr	r0, [r7, #28]
 8012bcc:	f7ff f940 	bl	8011e50 <tcp_process_refused_data>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	f113 0f0d 	cmn.w	r3, #13
 8012bd6:	d007      	beq.n	8012be8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d02d      	beq.n	8012c3c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012be0:	4b15      	ldr	r3, [pc, #84]	; (8012c38 <tcp_input+0x560>)
 8012be2:	881b      	ldrh	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d029      	beq.n	8012c3c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	f040 8104 	bne.w	8012dfa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012bf2:	69f8      	ldr	r0, [r7, #28]
 8012bf4:	f003 f9ce 	bl	8015f94 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012bf8:	e0ff      	b.n	8012dfa <tcp_input+0x722>
 8012bfa:	bf00      	nop
 8012bfc:	24004b2c 	.word	0x24004b2c
 8012c00:	2400529c 	.word	0x2400529c
 8012c04:	0801a0b8 	.word	0x0801a0b8
 8012c08:	0801a214 	.word	0x0801a214
 8012c0c:	0801a134 	.word	0x0801a134
 8012c10:	24008364 	.word	0x24008364
 8012c14:	0801a240 	.word	0x0801a240
 8012c18:	24008374 	.word	0x24008374
 8012c1c:	0801a26c 	.word	0x0801a26c
 8012c20:	2400836c 	.word	0x2400836c
 8012c24:	24004b1c 	.word	0x24004b1c
 8012c28:	24004b4c 	.word	0x24004b4c
 8012c2c:	24004b49 	.word	0x24004b49
 8012c30:	24004b44 	.word	0x24004b44
 8012c34:	24004b48 	.word	0x24004b48
 8012c38:	24004b46 	.word	0x24004b46
      }
    }
    tcp_input_pcb = pcb;
 8012c3c:	4a9b      	ldr	r2, [pc, #620]	; (8012eac <tcp_input+0x7d4>)
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012c42:	69f8      	ldr	r0, [r7, #28]
 8012c44:	f000 fb0a 	bl	801325c <tcp_process>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012c4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c50:	f113 0f0d 	cmn.w	r3, #13
 8012c54:	f000 80d3 	beq.w	8012dfe <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8012c58:	4b95      	ldr	r3, [pc, #596]	; (8012eb0 <tcp_input+0x7d8>)
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	f003 0308 	and.w	r3, r3, #8
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d015      	beq.n	8012c90 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d008      	beq.n	8012c80 <tcp_input+0x5a8>
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c74:	69fa      	ldr	r2, [r7, #28]
 8012c76:	6912      	ldr	r2, [r2, #16]
 8012c78:	f06f 010d 	mvn.w	r1, #13
 8012c7c:	4610      	mov	r0, r2
 8012c7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012c80:	69f9      	ldr	r1, [r7, #28]
 8012c82:	488c      	ldr	r0, [pc, #560]	; (8012eb4 <tcp_input+0x7dc>)
 8012c84:	f7ff fbb0 	bl	80123e8 <tcp_pcb_remove>
        tcp_free(pcb);
 8012c88:	69f8      	ldr	r0, [r7, #28]
 8012c8a:	f7fe f9a9 	bl	8010fe0 <tcp_free>
 8012c8e:	e0c1      	b.n	8012e14 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012c90:	2300      	movs	r3, #0
 8012c92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012c94:	4b88      	ldr	r3, [pc, #544]	; (8012eb8 <tcp_input+0x7e0>)
 8012c96:	881b      	ldrh	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d01d      	beq.n	8012cd8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012c9c:	4b86      	ldr	r3, [pc, #536]	; (8012eb8 <tcp_input+0x7e0>)
 8012c9e:	881b      	ldrh	r3, [r3, #0]
 8012ca0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012ca2:	69fb      	ldr	r3, [r7, #28]
 8012ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d00a      	beq.n	8012cc2 <tcp_input+0x5ea>
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cb2:	69fa      	ldr	r2, [r7, #28]
 8012cb4:	6910      	ldr	r0, [r2, #16]
 8012cb6:	89fa      	ldrh	r2, [r7, #14]
 8012cb8:	69f9      	ldr	r1, [r7, #28]
 8012cba:	4798      	blx	r3
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	74fb      	strb	r3, [r7, #19]
 8012cc0:	e001      	b.n	8012cc6 <tcp_input+0x5ee>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012cc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cca:	f113 0f0d 	cmn.w	r3, #13
 8012cce:	f000 8098 	beq.w	8012e02 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012cd2:	4b79      	ldr	r3, [pc, #484]	; (8012eb8 <tcp_input+0x7e0>)
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012cd8:	69f8      	ldr	r0, [r7, #28]
 8012cda:	f000 f905 	bl	8012ee8 <tcp_input_delayed_close>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f040 8090 	bne.w	8012e06 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012ce6:	4b75      	ldr	r3, [pc, #468]	; (8012ebc <tcp_input+0x7e4>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d041      	beq.n	8012d72 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012cee:	69fb      	ldr	r3, [r7, #28]
 8012cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d006      	beq.n	8012d04 <tcp_input+0x62c>
 8012cf6:	4b72      	ldr	r3, [pc, #456]	; (8012ec0 <tcp_input+0x7e8>)
 8012cf8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012cfc:	4971      	ldr	r1, [pc, #452]	; (8012ec4 <tcp_input+0x7ec>)
 8012cfe:	4872      	ldr	r0, [pc, #456]	; (8012ec8 <tcp_input+0x7f0>)
 8012d00:	f004 fb38 	bl	8017374 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	8b5b      	ldrh	r3, [r3, #26]
 8012d08:	f003 0310 	and.w	r3, r3, #16
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d008      	beq.n	8012d22 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012d10:	4b6a      	ldr	r3, [pc, #424]	; (8012ebc <tcp_input+0x7e4>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fd fdb5 	bl	8010884 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012d1a:	69f8      	ldr	r0, [r7, #28]
 8012d1c:	f7fe fc40 	bl	80115a0 <tcp_abort>
            goto aborted;
 8012d20:	e078      	b.n	8012e14 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d00c      	beq.n	8012d46 <tcp_input+0x66e>
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	6918      	ldr	r0, [r3, #16]
 8012d36:	4b61      	ldr	r3, [pc, #388]	; (8012ebc <tcp_input+0x7e4>)
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	69f9      	ldr	r1, [r7, #28]
 8012d3e:	47a0      	blx	r4
 8012d40:	4603      	mov	r3, r0
 8012d42:	74fb      	strb	r3, [r7, #19]
 8012d44:	e008      	b.n	8012d58 <tcp_input+0x680>
 8012d46:	4b5d      	ldr	r3, [pc, #372]	; (8012ebc <tcp_input+0x7e4>)
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	69f9      	ldr	r1, [r7, #28]
 8012d4e:	2000      	movs	r0, #0
 8012d50:	f7ff f952 	bl	8011ff8 <tcp_recv_null>
 8012d54:	4603      	mov	r3, r0
 8012d56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012d58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d5c:	f113 0f0d 	cmn.w	r3, #13
 8012d60:	d053      	beq.n	8012e0a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012d62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d003      	beq.n	8012d72 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012d6a:	4b54      	ldr	r3, [pc, #336]	; (8012ebc <tcp_input+0x7e4>)
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012d72:	4b4f      	ldr	r3, [pc, #316]	; (8012eb0 <tcp_input+0x7d8>)
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	f003 0320 	and.w	r3, r3, #32
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d030      	beq.n	8012de0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d009      	beq.n	8012d9a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d8a:	7b5a      	ldrb	r2, [r3, #13]
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d90:	f042 0220 	orr.w	r2, r2, #32
 8012d94:	b2d2      	uxtb	r2, r2
 8012d96:	735a      	strb	r2, [r3, #13]
 8012d98:	e022      	b.n	8012de0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012da2:	d005      	beq.n	8012db0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012da8:	3301      	adds	r3, #1
 8012daa:	b29a      	uxth	r2, r3
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d00b      	beq.n	8012dd2 <tcp_input+0x6fa>
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	6918      	ldr	r0, [r3, #16]
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	69f9      	ldr	r1, [r7, #28]
 8012dca:	47a0      	blx	r4
 8012dcc:	4603      	mov	r3, r0
 8012dce:	74fb      	strb	r3, [r7, #19]
 8012dd0:	e001      	b.n	8012dd6 <tcp_input+0x6fe>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012dd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012dda:	f113 0f0d 	cmn.w	r3, #13
 8012dde:	d016      	beq.n	8012e0e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012de0:	4b32      	ldr	r3, [pc, #200]	; (8012eac <tcp_input+0x7d4>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012de6:	69f8      	ldr	r0, [r7, #28]
 8012de8:	f000 f87e 	bl	8012ee8 <tcp_input_delayed_close>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d10f      	bne.n	8012e12 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012df2:	69f8      	ldr	r0, [r7, #28]
 8012df4:	f002 fab6 	bl	8015364 <tcp_output>
 8012df8:	e00c      	b.n	8012e14 <tcp_input+0x73c>
        goto aborted;
 8012dfa:	bf00      	nop
 8012dfc:	e00a      	b.n	8012e14 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012dfe:	bf00      	nop
 8012e00:	e008      	b.n	8012e14 <tcp_input+0x73c>
              goto aborted;
 8012e02:	bf00      	nop
 8012e04:	e006      	b.n	8012e14 <tcp_input+0x73c>
          goto aborted;
 8012e06:	bf00      	nop
 8012e08:	e004      	b.n	8012e14 <tcp_input+0x73c>
            goto aborted;
 8012e0a:	bf00      	nop
 8012e0c:	e002      	b.n	8012e14 <tcp_input+0x73c>
              goto aborted;
 8012e0e:	bf00      	nop
 8012e10:	e000      	b.n	8012e14 <tcp_input+0x73c>
          goto aborted;
 8012e12:	bf00      	nop
    tcp_input_pcb = NULL;
 8012e14:	4b25      	ldr	r3, [pc, #148]	; (8012eac <tcp_input+0x7d4>)
 8012e16:	2200      	movs	r2, #0
 8012e18:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012e1a:	4b28      	ldr	r3, [pc, #160]	; (8012ebc <tcp_input+0x7e4>)
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012e20:	4b2a      	ldr	r3, [pc, #168]	; (8012ecc <tcp_input+0x7f4>)
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d03d      	beq.n	8012ea4 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8012e28:	4b28      	ldr	r3, [pc, #160]	; (8012ecc <tcp_input+0x7f4>)
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fd fd29 	bl	8010884 <pbuf_free>
      inseg.p = NULL;
 8012e32:	4b26      	ldr	r3, [pc, #152]	; (8012ecc <tcp_input+0x7f4>)
 8012e34:	2200      	movs	r2, #0
 8012e36:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012e38:	e034      	b.n	8012ea4 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012e3a:	4b25      	ldr	r3, [pc, #148]	; (8012ed0 <tcp_input+0x7f8>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	899b      	ldrh	r3, [r3, #12]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f9 fd88 	bl	800c958 <lwip_htons>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	f003 0304 	and.w	r3, r3, #4
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d118      	bne.n	8012e86 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e54:	4b1f      	ldr	r3, [pc, #124]	; (8012ed4 <tcp_input+0x7fc>)
 8012e56:	6819      	ldr	r1, [r3, #0]
 8012e58:	4b1f      	ldr	r3, [pc, #124]	; (8012ed8 <tcp_input+0x800>)
 8012e5a:	881b      	ldrh	r3, [r3, #0]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	4b1f      	ldr	r3, [pc, #124]	; (8012edc <tcp_input+0x804>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e64:	4b1a      	ldr	r3, [pc, #104]	; (8012ed0 <tcp_input+0x7f8>)
 8012e66:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e68:	885b      	ldrh	r3, [r3, #2]
 8012e6a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e6c:	4a18      	ldr	r2, [pc, #96]	; (8012ed0 <tcp_input+0x7f8>)
 8012e6e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e70:	8812      	ldrh	r2, [r2, #0]
 8012e72:	b292      	uxth	r2, r2
 8012e74:	9202      	str	r2, [sp, #8]
 8012e76:	9301      	str	r3, [sp, #4]
 8012e78:	4b19      	ldr	r3, [pc, #100]	; (8012ee0 <tcp_input+0x808>)
 8012e7a:	9300      	str	r3, [sp, #0]
 8012e7c:	4b19      	ldr	r3, [pc, #100]	; (8012ee4 <tcp_input+0x80c>)
 8012e7e:	4602      	mov	r2, r0
 8012e80:	2000      	movs	r0, #0
 8012e82:	f003 f835 	bl	8015ef0 <tcp_rst>
    pbuf_free(p);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7fd fcfc 	bl	8010884 <pbuf_free>
  return;
 8012e8c:	e00a      	b.n	8012ea4 <tcp_input+0x7cc>
    goto dropped;
 8012e8e:	bf00      	nop
 8012e90:	e004      	b.n	8012e9c <tcp_input+0x7c4>
dropped:
 8012e92:	bf00      	nop
 8012e94:	e002      	b.n	8012e9c <tcp_input+0x7c4>
      goto dropped;
 8012e96:	bf00      	nop
 8012e98:	e000      	b.n	8012e9c <tcp_input+0x7c4>
      goto dropped;
 8012e9a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7fd fcf1 	bl	8010884 <pbuf_free>
 8012ea2:	e000      	b.n	8012ea6 <tcp_input+0x7ce>
  return;
 8012ea4:	bf00      	nop
}
 8012ea6:	3724      	adds	r7, #36	; 0x24
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd90      	pop	{r4, r7, pc}
 8012eac:	24008378 	.word	0x24008378
 8012eb0:	24004b49 	.word	0x24004b49
 8012eb4:	24008364 	.word	0x24008364
 8012eb8:	24004b44 	.word	0x24004b44
 8012ebc:	24004b4c 	.word	0x24004b4c
 8012ec0:	0801a0b8 	.word	0x0801a0b8
 8012ec4:	0801a29c 	.word	0x0801a29c
 8012ec8:	0801a134 	.word	0x0801a134
 8012ecc:	24004b1c 	.word	0x24004b1c
 8012ed0:	24004b2c 	.word	0x24004b2c
 8012ed4:	24004b40 	.word	0x24004b40
 8012ed8:	24004b46 	.word	0x24004b46
 8012edc:	24004b3c 	.word	0x24004b3c
 8012ee0:	240052ac 	.word	0x240052ac
 8012ee4:	240052b0 	.word	0x240052b0

08012ee8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d106      	bne.n	8012f04 <tcp_input_delayed_close+0x1c>
 8012ef6:	4b17      	ldr	r3, [pc, #92]	; (8012f54 <tcp_input_delayed_close+0x6c>)
 8012ef8:	f240 225a 	movw	r2, #602	; 0x25a
 8012efc:	4916      	ldr	r1, [pc, #88]	; (8012f58 <tcp_input_delayed_close+0x70>)
 8012efe:	4817      	ldr	r0, [pc, #92]	; (8012f5c <tcp_input_delayed_close+0x74>)
 8012f00:	f004 fa38 	bl	8017374 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012f04:	4b16      	ldr	r3, [pc, #88]	; (8012f60 <tcp_input_delayed_close+0x78>)
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	f003 0310 	and.w	r3, r3, #16
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d01c      	beq.n	8012f4a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	8b5b      	ldrh	r3, [r3, #26]
 8012f14:	f003 0310 	and.w	r3, r3, #16
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d10d      	bne.n	8012f38 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d008      	beq.n	8012f38 <tcp_input_delayed_close+0x50>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	6912      	ldr	r2, [r2, #16]
 8012f30:	f06f 010e 	mvn.w	r1, #14
 8012f34:	4610      	mov	r0, r2
 8012f36:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f38:	6879      	ldr	r1, [r7, #4]
 8012f3a:	480a      	ldr	r0, [pc, #40]	; (8012f64 <tcp_input_delayed_close+0x7c>)
 8012f3c:	f7ff fa54 	bl	80123e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f7fe f84d 	bl	8010fe0 <tcp_free>
    return 1;
 8012f46:	2301      	movs	r3, #1
 8012f48:	e000      	b.n	8012f4c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012f4a:	2300      	movs	r3, #0
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	0801a0b8 	.word	0x0801a0b8
 8012f58:	0801a2b8 	.word	0x0801a2b8
 8012f5c:	0801a134 	.word	0x0801a134
 8012f60:	24004b49 	.word	0x24004b49
 8012f64:	24008364 	.word	0x24008364

08012f68 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012f68:	b590      	push	{r4, r7, lr}
 8012f6a:	b08b      	sub	sp, #44	; 0x2c
 8012f6c:	af04      	add	r7, sp, #16
 8012f6e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012f70:	4b6f      	ldr	r3, [pc, #444]	; (8013130 <tcp_listen_input+0x1c8>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	f003 0304 	and.w	r3, r3, #4
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f040 80d3 	bne.w	8013124 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d106      	bne.n	8012f92 <tcp_listen_input+0x2a>
 8012f84:	4b6b      	ldr	r3, [pc, #428]	; (8013134 <tcp_listen_input+0x1cc>)
 8012f86:	f240 2281 	movw	r2, #641	; 0x281
 8012f8a:	496b      	ldr	r1, [pc, #428]	; (8013138 <tcp_listen_input+0x1d0>)
 8012f8c:	486b      	ldr	r0, [pc, #428]	; (801313c <tcp_listen_input+0x1d4>)
 8012f8e:	f004 f9f1 	bl	8017374 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012f92:	4b67      	ldr	r3, [pc, #412]	; (8013130 <tcp_listen_input+0x1c8>)
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	f003 0310 	and.w	r3, r3, #16
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d019      	beq.n	8012fd2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f9e:	4b68      	ldr	r3, [pc, #416]	; (8013140 <tcp_listen_input+0x1d8>)
 8012fa0:	6819      	ldr	r1, [r3, #0]
 8012fa2:	4b68      	ldr	r3, [pc, #416]	; (8013144 <tcp_listen_input+0x1dc>)
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	4b67      	ldr	r3, [pc, #412]	; (8013148 <tcp_listen_input+0x1e0>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012fae:	4b67      	ldr	r3, [pc, #412]	; (801314c <tcp_listen_input+0x1e4>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fb2:	885b      	ldrh	r3, [r3, #2]
 8012fb4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012fb6:	4a65      	ldr	r2, [pc, #404]	; (801314c <tcp_listen_input+0x1e4>)
 8012fb8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fba:	8812      	ldrh	r2, [r2, #0]
 8012fbc:	b292      	uxth	r2, r2
 8012fbe:	9202      	str	r2, [sp, #8]
 8012fc0:	9301      	str	r3, [sp, #4]
 8012fc2:	4b63      	ldr	r3, [pc, #396]	; (8013150 <tcp_listen_input+0x1e8>)
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	4b63      	ldr	r3, [pc, #396]	; (8013154 <tcp_listen_input+0x1ec>)
 8012fc8:	4602      	mov	r2, r0
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f002 ff90 	bl	8015ef0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012fd0:	e0aa      	b.n	8013128 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8012fd2:	4b57      	ldr	r3, [pc, #348]	; (8013130 <tcp_listen_input+0x1c8>)
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	f003 0302 	and.w	r3, r3, #2
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	f000 80a4 	beq.w	8013128 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	7d5b      	ldrb	r3, [r3, #21]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ff f92b 	bl	8012240 <tcp_alloc>
 8012fea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d111      	bne.n	8013016 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	699b      	ldr	r3, [r3, #24]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d00a      	beq.n	8013010 <tcp_listen_input+0xa8>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	699b      	ldr	r3, [r3, #24]
 8012ffe:	687a      	ldr	r2, [r7, #4]
 8013000:	6910      	ldr	r0, [r2, #16]
 8013002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013006:	2100      	movs	r1, #0
 8013008:	4798      	blx	r3
 801300a:	4603      	mov	r3, r0
 801300c:	73bb      	strb	r3, [r7, #14]
      return;
 801300e:	e08c      	b.n	801312a <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013010:	23f0      	movs	r3, #240	; 0xf0
 8013012:	73bb      	strb	r3, [r7, #14]
      return;
 8013014:	e089      	b.n	801312a <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013016:	4b50      	ldr	r3, [pc, #320]	; (8013158 <tcp_listen_input+0x1f0>)
 8013018:	695a      	ldr	r2, [r3, #20]
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801301e:	4b4e      	ldr	r3, [pc, #312]	; (8013158 <tcp_listen_input+0x1f0>)
 8013020:	691a      	ldr	r2, [r3, #16]
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	8ada      	ldrh	r2, [r3, #22]
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801302e:	4b47      	ldr	r3, [pc, #284]	; (801314c <tcp_listen_input+0x1e4>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	b29a      	uxth	r2, r3
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	2203      	movs	r2, #3
 801303e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013040:	4b41      	ldr	r3, [pc, #260]	; (8013148 <tcp_listen_input+0x1e0>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	1c5a      	adds	r2, r3, #1
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013052:	6978      	ldr	r0, [r7, #20]
 8013054:	f7ff fa5c 	bl	8012510 <tcp_next_iss>
 8013058:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	693a      	ldr	r2, [r7, #16]
 801305e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	693a      	ldr	r2, [r7, #16]
 8013064:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	693a      	ldr	r2, [r7, #16]
 801306a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	693a      	ldr	r2, [r7, #16]
 8013070:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013072:	4b35      	ldr	r3, [pc, #212]	; (8013148 <tcp_listen_input+0x1e0>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	1e5a      	subs	r2, r3, #1
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	691a      	ldr	r2, [r3, #16]
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	7a5b      	ldrb	r3, [r3, #9]
 801308e:	f003 030c 	and.w	r3, r3, #12
 8013092:	b2da      	uxtb	r2, r3
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	7a1a      	ldrb	r2, [r3, #8]
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80130a0:	4b2e      	ldr	r3, [pc, #184]	; (801315c <tcp_listen_input+0x1f4>)
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	60da      	str	r2, [r3, #12]
 80130a8:	4a2c      	ldr	r2, [pc, #176]	; (801315c <tcp_listen_input+0x1f4>)
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	6013      	str	r3, [r2, #0]
 80130ae:	f003 fa7f 	bl	80165b0 <tcp_timer_needed>
 80130b2:	4b2b      	ldr	r3, [pc, #172]	; (8013160 <tcp_listen_input+0x1f8>)
 80130b4:	2201      	movs	r2, #1
 80130b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80130b8:	6978      	ldr	r0, [r7, #20]
 80130ba:	f001 fd8f 	bl	8014bdc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80130be:	4b23      	ldr	r3, [pc, #140]	; (801314c <tcp_listen_input+0x1e4>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	89db      	ldrh	r3, [r3, #14]
 80130c4:	b29a      	uxth	r2, r3
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	3304      	adds	r3, #4
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fa ff11 	bl	800df08 <ip4_route>
 80130e6:	4601      	mov	r1, r0
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	3304      	adds	r3, #4
 80130ec:	461a      	mov	r2, r3
 80130ee:	4620      	mov	r0, r4
 80130f0:	f7ff fa34 	bl	801255c <tcp_eff_send_mss_netif>
 80130f4:	4603      	mov	r3, r0
 80130f6:	461a      	mov	r2, r3
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80130fc:	2112      	movs	r1, #18
 80130fe:	6978      	ldr	r0, [r7, #20]
 8013100:	f002 f842 	bl	8015188 <tcp_enqueue_flags>
 8013104:	4603      	mov	r3, r0
 8013106:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d004      	beq.n	801311a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013110:	2100      	movs	r1, #0
 8013112:	6978      	ldr	r0, [r7, #20]
 8013114:	f7fe f986 	bl	8011424 <tcp_abandon>
      return;
 8013118:	e007      	b.n	801312a <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801311a:	6978      	ldr	r0, [r7, #20]
 801311c:	f002 f922 	bl	8015364 <tcp_output>
  return;
 8013120:	bf00      	nop
 8013122:	e001      	b.n	8013128 <tcp_listen_input+0x1c0>
    return;
 8013124:	bf00      	nop
 8013126:	e000      	b.n	801312a <tcp_listen_input+0x1c2>
  return;
 8013128:	bf00      	nop
}
 801312a:	371c      	adds	r7, #28
 801312c:	46bd      	mov	sp, r7
 801312e:	bd90      	pop	{r4, r7, pc}
 8013130:	24004b48 	.word	0x24004b48
 8013134:	0801a0b8 	.word	0x0801a0b8
 8013138:	0801a2e0 	.word	0x0801a2e0
 801313c:	0801a134 	.word	0x0801a134
 8013140:	24004b40 	.word	0x24004b40
 8013144:	24004b46 	.word	0x24004b46
 8013148:	24004b3c 	.word	0x24004b3c
 801314c:	24004b2c 	.word	0x24004b2c
 8013150:	240052ac 	.word	0x240052ac
 8013154:	240052b0 	.word	0x240052b0
 8013158:	2400529c 	.word	0x2400529c
 801315c:	24008364 	.word	0x24008364
 8013160:	24008360 	.word	0x24008360

08013164 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af04      	add	r7, sp, #16
 801316a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801316c:	4b30      	ldr	r3, [pc, #192]	; (8013230 <tcp_timewait_input+0xcc>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	f003 0304 	and.w	r3, r3, #4
 8013174:	2b00      	cmp	r3, #0
 8013176:	d154      	bne.n	8013222 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d106      	bne.n	801318c <tcp_timewait_input+0x28>
 801317e:	4b2d      	ldr	r3, [pc, #180]	; (8013234 <tcp_timewait_input+0xd0>)
 8013180:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013184:	492c      	ldr	r1, [pc, #176]	; (8013238 <tcp_timewait_input+0xd4>)
 8013186:	482d      	ldr	r0, [pc, #180]	; (801323c <tcp_timewait_input+0xd8>)
 8013188:	f004 f8f4 	bl	8017374 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801318c:	4b28      	ldr	r3, [pc, #160]	; (8013230 <tcp_timewait_input+0xcc>)
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f003 0302 	and.w	r3, r3, #2
 8013194:	2b00      	cmp	r3, #0
 8013196:	d02a      	beq.n	80131ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013198:	4b29      	ldr	r3, [pc, #164]	; (8013240 <tcp_timewait_input+0xdc>)
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a0:	1ad3      	subs	r3, r2, r3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	db2d      	blt.n	8013202 <tcp_timewait_input+0x9e>
 80131a6:	4b26      	ldr	r3, [pc, #152]	; (8013240 <tcp_timewait_input+0xdc>)
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ae:	6879      	ldr	r1, [r7, #4]
 80131b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80131b2:	440b      	add	r3, r1
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	dc23      	bgt.n	8013202 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131ba:	4b22      	ldr	r3, [pc, #136]	; (8013244 <tcp_timewait_input+0xe0>)
 80131bc:	6819      	ldr	r1, [r3, #0]
 80131be:	4b22      	ldr	r3, [pc, #136]	; (8013248 <tcp_timewait_input+0xe4>)
 80131c0:	881b      	ldrh	r3, [r3, #0]
 80131c2:	461a      	mov	r2, r3
 80131c4:	4b1e      	ldr	r3, [pc, #120]	; (8013240 <tcp_timewait_input+0xdc>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131ca:	4b20      	ldr	r3, [pc, #128]	; (801324c <tcp_timewait_input+0xe8>)
 80131cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131ce:	885b      	ldrh	r3, [r3, #2]
 80131d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131d2:	4a1e      	ldr	r2, [pc, #120]	; (801324c <tcp_timewait_input+0xe8>)
 80131d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131d6:	8812      	ldrh	r2, [r2, #0]
 80131d8:	b292      	uxth	r2, r2
 80131da:	9202      	str	r2, [sp, #8]
 80131dc:	9301      	str	r3, [sp, #4]
 80131de:	4b1c      	ldr	r3, [pc, #112]	; (8013250 <tcp_timewait_input+0xec>)
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	4b1c      	ldr	r3, [pc, #112]	; (8013254 <tcp_timewait_input+0xf0>)
 80131e4:	4602      	mov	r2, r0
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f002 fe82 	bl	8015ef0 <tcp_rst>
      return;
 80131ec:	e01c      	b.n	8013228 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80131ee:	4b10      	ldr	r3, [pc, #64]	; (8013230 <tcp_timewait_input+0xcc>)
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	f003 0301 	and.w	r3, r3, #1
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d003      	beq.n	8013202 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80131fa:	4b17      	ldr	r3, [pc, #92]	; (8013258 <tcp_timewait_input+0xf4>)
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013202:	4b11      	ldr	r3, [pc, #68]	; (8013248 <tcp_timewait_input+0xe4>)
 8013204:	881b      	ldrh	r3, [r3, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d00d      	beq.n	8013226 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	8b5b      	ldrh	r3, [r3, #26]
 801320e:	f043 0302 	orr.w	r3, r3, #2
 8013212:	b29a      	uxth	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f002 f8a3 	bl	8015364 <tcp_output>
  }
  return;
 801321e:	bf00      	nop
 8013220:	e001      	b.n	8013226 <tcp_timewait_input+0xc2>
    return;
 8013222:	bf00      	nop
 8013224:	e000      	b.n	8013228 <tcp_timewait_input+0xc4>
  return;
 8013226:	bf00      	nop
}
 8013228:	3708      	adds	r7, #8
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	24004b48 	.word	0x24004b48
 8013234:	0801a0b8 	.word	0x0801a0b8
 8013238:	0801a300 	.word	0x0801a300
 801323c:	0801a134 	.word	0x0801a134
 8013240:	24004b3c 	.word	0x24004b3c
 8013244:	24004b40 	.word	0x24004b40
 8013248:	24004b46 	.word	0x24004b46
 801324c:	24004b2c 	.word	0x24004b2c
 8013250:	240052ac 	.word	0x240052ac
 8013254:	240052b0 	.word	0x240052b0
 8013258:	24008368 	.word	0x24008368

0801325c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801325c:	b590      	push	{r4, r7, lr}
 801325e:	b08d      	sub	sp, #52	; 0x34
 8013260:	af04      	add	r7, sp, #16
 8013262:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013264:	2300      	movs	r3, #0
 8013266:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013268:	2300      	movs	r3, #0
 801326a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d106      	bne.n	8013280 <tcp_process+0x24>
 8013272:	4ba5      	ldr	r3, [pc, #660]	; (8013508 <tcp_process+0x2ac>)
 8013274:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013278:	49a4      	ldr	r1, [pc, #656]	; (801350c <tcp_process+0x2b0>)
 801327a:	48a5      	ldr	r0, [pc, #660]	; (8013510 <tcp_process+0x2b4>)
 801327c:	f004 f87a 	bl	8017374 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013280:	4ba4      	ldr	r3, [pc, #656]	; (8013514 <tcp_process+0x2b8>)
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	f003 0304 	and.w	r3, r3, #4
 8013288:	2b00      	cmp	r3, #0
 801328a:	d04e      	beq.n	801332a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	7d1b      	ldrb	r3, [r3, #20]
 8013290:	2b02      	cmp	r3, #2
 8013292:	d108      	bne.n	80132a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013298:	4b9f      	ldr	r3, [pc, #636]	; (8013518 <tcp_process+0x2bc>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	429a      	cmp	r2, r3
 801329e:	d123      	bne.n	80132e8 <tcp_process+0x8c>
        acceptable = 1;
 80132a0:	2301      	movs	r3, #1
 80132a2:	76fb      	strb	r3, [r7, #27]
 80132a4:	e020      	b.n	80132e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132aa:	4b9c      	ldr	r3, [pc, #624]	; (801351c <tcp_process+0x2c0>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d102      	bne.n	80132b8 <tcp_process+0x5c>
        acceptable = 1;
 80132b2:	2301      	movs	r3, #1
 80132b4:	76fb      	strb	r3, [r7, #27]
 80132b6:	e017      	b.n	80132e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80132b8:	4b98      	ldr	r3, [pc, #608]	; (801351c <tcp_process+0x2c0>)
 80132ba:	681a      	ldr	r2, [r3, #0]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132c0:	1ad3      	subs	r3, r2, r3
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	db10      	blt.n	80132e8 <tcp_process+0x8c>
 80132c6:	4b95      	ldr	r3, [pc, #596]	; (801351c <tcp_process+0x2c0>)
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132ce:	6879      	ldr	r1, [r7, #4]
 80132d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80132d2:	440b      	add	r3, r1
 80132d4:	1ad3      	subs	r3, r2, r3
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	dc06      	bgt.n	80132e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	8b5b      	ldrh	r3, [r3, #26]
 80132de:	f043 0302 	orr.w	r3, r3, #2
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80132e8:	7efb      	ldrb	r3, [r7, #27]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d01b      	beq.n	8013326 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	7d1b      	ldrb	r3, [r3, #20]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d106      	bne.n	8013304 <tcp_process+0xa8>
 80132f6:	4b84      	ldr	r3, [pc, #528]	; (8013508 <tcp_process+0x2ac>)
 80132f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80132fc:	4988      	ldr	r1, [pc, #544]	; (8013520 <tcp_process+0x2c4>)
 80132fe:	4884      	ldr	r0, [pc, #528]	; (8013510 <tcp_process+0x2b4>)
 8013300:	f004 f838 	bl	8017374 <iprintf>
      recv_flags |= TF_RESET;
 8013304:	4b87      	ldr	r3, [pc, #540]	; (8013524 <tcp_process+0x2c8>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f043 0308 	orr.w	r3, r3, #8
 801330c:	b2da      	uxtb	r2, r3
 801330e:	4b85      	ldr	r3, [pc, #532]	; (8013524 <tcp_process+0x2c8>)
 8013310:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	8b5b      	ldrh	r3, [r3, #26]
 8013316:	f023 0301 	bic.w	r3, r3, #1
 801331a:	b29a      	uxth	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013320:	f06f 030d 	mvn.w	r3, #13
 8013324:	e37a      	b.n	8013a1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013326:	2300      	movs	r3, #0
 8013328:	e378      	b.n	8013a1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801332a:	4b7a      	ldr	r3, [pc, #488]	; (8013514 <tcp_process+0x2b8>)
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	f003 0302 	and.w	r3, r3, #2
 8013332:	2b00      	cmp	r3, #0
 8013334:	d010      	beq.n	8013358 <tcp_process+0xfc>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	7d1b      	ldrb	r3, [r3, #20]
 801333a:	2b02      	cmp	r3, #2
 801333c:	d00c      	beq.n	8013358 <tcp_process+0xfc>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	7d1b      	ldrb	r3, [r3, #20]
 8013342:	2b03      	cmp	r3, #3
 8013344:	d008      	beq.n	8013358 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	8b5b      	ldrh	r3, [r3, #26]
 801334a:	f043 0302 	orr.w	r3, r3, #2
 801334e:	b29a      	uxth	r2, r3
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013354:	2300      	movs	r3, #0
 8013356:	e361      	b.n	8013a1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	8b5b      	ldrh	r3, [r3, #26]
 801335c:	f003 0310 	and.w	r3, r3, #16
 8013360:	2b00      	cmp	r3, #0
 8013362:	d103      	bne.n	801336c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013364:	4b70      	ldr	r3, [pc, #448]	; (8013528 <tcp_process+0x2cc>)
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2200      	movs	r2, #0
 8013370:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f001 fc2d 	bl	8014bdc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	7d1b      	ldrb	r3, [r3, #20]
 8013386:	3b02      	subs	r3, #2
 8013388:	2b07      	cmp	r3, #7
 801338a:	f200 8337 	bhi.w	80139fc <tcp_process+0x7a0>
 801338e:	a201      	add	r2, pc, #4	; (adr r2, 8013394 <tcp_process+0x138>)
 8013390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013394:	080133b5 	.word	0x080133b5
 8013398:	080135e5 	.word	0x080135e5
 801339c:	0801375d 	.word	0x0801375d
 80133a0:	08013787 	.word	0x08013787
 80133a4:	080138ab 	.word	0x080138ab
 80133a8:	0801375d 	.word	0x0801375d
 80133ac:	08013937 	.word	0x08013937
 80133b0:	080139c7 	.word	0x080139c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80133b4:	4b57      	ldr	r3, [pc, #348]	; (8013514 <tcp_process+0x2b8>)
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	f003 0310 	and.w	r3, r3, #16
 80133bc:	2b00      	cmp	r3, #0
 80133be:	f000 80e4 	beq.w	801358a <tcp_process+0x32e>
 80133c2:	4b54      	ldr	r3, [pc, #336]	; (8013514 <tcp_process+0x2b8>)
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	f003 0302 	and.w	r3, r3, #2
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	f000 80dd 	beq.w	801358a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133d4:	1c5a      	adds	r2, r3, #1
 80133d6:	4b50      	ldr	r3, [pc, #320]	; (8013518 <tcp_process+0x2bc>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	f040 80d5 	bne.w	801358a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80133e0:	4b4e      	ldr	r3, [pc, #312]	; (801351c <tcp_process+0x2c0>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	1c5a      	adds	r2, r3, #1
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80133f2:	4b49      	ldr	r3, [pc, #292]	; (8013518 <tcp_process+0x2bc>)
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80133fa:	4b4c      	ldr	r3, [pc, #304]	; (801352c <tcp_process+0x2d0>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	89db      	ldrh	r3, [r3, #14]
 8013400:	b29a      	uxth	r2, r3
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013414:	4b41      	ldr	r3, [pc, #260]	; (801351c <tcp_process+0x2c0>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	1e5a      	subs	r2, r3, #1
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2204      	movs	r2, #4
 8013422:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3304      	adds	r3, #4
 801342c:	4618      	mov	r0, r3
 801342e:	f7fa fd6b 	bl	800df08 <ip4_route>
 8013432:	4601      	mov	r1, r0
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	3304      	adds	r3, #4
 8013438:	461a      	mov	r2, r3
 801343a:	4620      	mov	r0, r4
 801343c:	f7ff f88e 	bl	801255c <tcp_eff_send_mss_netif>
 8013440:	4603      	mov	r3, r0
 8013442:	461a      	mov	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801344c:	009a      	lsls	r2, r3, #2
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013452:	005b      	lsls	r3, r3, #1
 8013454:	f241 111c 	movw	r1, #4380	; 0x111c
 8013458:	428b      	cmp	r3, r1
 801345a:	bf38      	it	cc
 801345c:	460b      	movcc	r3, r1
 801345e:	429a      	cmp	r2, r3
 8013460:	d204      	bcs.n	801346c <tcp_process+0x210>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	b29b      	uxth	r3, r3
 801346a:	e00d      	b.n	8013488 <tcp_process+0x22c>
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013470:	005b      	lsls	r3, r3, #1
 8013472:	f241 121c 	movw	r2, #4380	; 0x111c
 8013476:	4293      	cmp	r3, r2
 8013478:	d904      	bls.n	8013484 <tcp_process+0x228>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801347e:	005b      	lsls	r3, r3, #1
 8013480:	b29b      	uxth	r3, r3
 8013482:	e001      	b.n	8013488 <tcp_process+0x22c>
 8013484:	f241 131c 	movw	r3, #4380	; 0x111c
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013494:	2b00      	cmp	r3, #0
 8013496:	d106      	bne.n	80134a6 <tcp_process+0x24a>
 8013498:	4b1b      	ldr	r3, [pc, #108]	; (8013508 <tcp_process+0x2ac>)
 801349a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801349e:	4924      	ldr	r1, [pc, #144]	; (8013530 <tcp_process+0x2d4>)
 80134a0:	481b      	ldr	r0, [pc, #108]	; (8013510 <tcp_process+0x2b4>)
 80134a2:	f003 ff67 	bl	8017374 <iprintf>
        --pcb->snd_queuelen;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134ac:	3b01      	subs	r3, #1
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d111      	bne.n	80134e6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d106      	bne.n	80134dc <tcp_process+0x280>
 80134ce:	4b0e      	ldr	r3, [pc, #56]	; (8013508 <tcp_process+0x2ac>)
 80134d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80134d4:	4917      	ldr	r1, [pc, #92]	; (8013534 <tcp_process+0x2d8>)
 80134d6:	480e      	ldr	r0, [pc, #56]	; (8013510 <tcp_process+0x2b4>)
 80134d8:	f003 ff4c 	bl	8017374 <iprintf>
          pcb->unsent = rseg->next;
 80134dc:	69fb      	ldr	r3, [r7, #28]
 80134de:	681a      	ldr	r2, [r3, #0]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80134e4:	e003      	b.n	80134ee <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80134ee:	69f8      	ldr	r0, [r7, #28]
 80134f0:	f7fe fd3e 	bl	8011f70 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d11d      	bne.n	8013538 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013502:	861a      	strh	r2, [r3, #48]	; 0x30
 8013504:	e01f      	b.n	8013546 <tcp_process+0x2ea>
 8013506:	bf00      	nop
 8013508:	0801a0b8 	.word	0x0801a0b8
 801350c:	0801a320 	.word	0x0801a320
 8013510:	0801a134 	.word	0x0801a134
 8013514:	24004b48 	.word	0x24004b48
 8013518:	24004b40 	.word	0x24004b40
 801351c:	24004b3c 	.word	0x24004b3c
 8013520:	0801a33c 	.word	0x0801a33c
 8013524:	24004b49 	.word	0x24004b49
 8013528:	24008368 	.word	0x24008368
 801352c:	24004b2c 	.word	0x24004b2c
 8013530:	0801a35c 	.word	0x0801a35c
 8013534:	0801a374 	.word	0x0801a374
        } else {
          pcb->rtime = 0;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801354c:	2b00      	cmp	r3, #0
 801354e:	d00a      	beq.n	8013566 <tcp_process+0x30a>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	6910      	ldr	r0, [r2, #16]
 801355a:	2200      	movs	r2, #0
 801355c:	6879      	ldr	r1, [r7, #4]
 801355e:	4798      	blx	r3
 8013560:	4603      	mov	r3, r0
 8013562:	76bb      	strb	r3, [r7, #26]
 8013564:	e001      	b.n	801356a <tcp_process+0x30e>
 8013566:	2300      	movs	r3, #0
 8013568:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801356a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801356e:	f113 0f0d 	cmn.w	r3, #13
 8013572:	d102      	bne.n	801357a <tcp_process+0x31e>
          return ERR_ABRT;
 8013574:	f06f 030c 	mvn.w	r3, #12
 8013578:	e250      	b.n	8013a1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	8b5b      	ldrh	r3, [r3, #26]
 801357e:	f043 0302 	orr.w	r3, r3, #2
 8013582:	b29a      	uxth	r2, r3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013588:	e23a      	b.n	8013a00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801358a:	4b9d      	ldr	r3, [pc, #628]	; (8013800 <tcp_process+0x5a4>)
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	f003 0310 	and.w	r3, r3, #16
 8013592:	2b00      	cmp	r3, #0
 8013594:	f000 8234 	beq.w	8013a00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013598:	4b9a      	ldr	r3, [pc, #616]	; (8013804 <tcp_process+0x5a8>)
 801359a:	6819      	ldr	r1, [r3, #0]
 801359c:	4b9a      	ldr	r3, [pc, #616]	; (8013808 <tcp_process+0x5ac>)
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	461a      	mov	r2, r3
 80135a2:	4b9a      	ldr	r3, [pc, #616]	; (801380c <tcp_process+0x5b0>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135a8:	4b99      	ldr	r3, [pc, #612]	; (8013810 <tcp_process+0x5b4>)
 80135aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135ac:	885b      	ldrh	r3, [r3, #2]
 80135ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135b0:	4a97      	ldr	r2, [pc, #604]	; (8013810 <tcp_process+0x5b4>)
 80135b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135b4:	8812      	ldrh	r2, [r2, #0]
 80135b6:	b292      	uxth	r2, r2
 80135b8:	9202      	str	r2, [sp, #8]
 80135ba:	9301      	str	r3, [sp, #4]
 80135bc:	4b95      	ldr	r3, [pc, #596]	; (8013814 <tcp_process+0x5b8>)
 80135be:	9300      	str	r3, [sp, #0]
 80135c0:	4b95      	ldr	r3, [pc, #596]	; (8013818 <tcp_process+0x5bc>)
 80135c2:	4602      	mov	r2, r0
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f002 fc93 	bl	8015ef0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135d0:	2b05      	cmp	r3, #5
 80135d2:	f200 8215 	bhi.w	8013a00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2200      	movs	r2, #0
 80135da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f002 fa51 	bl	8015a84 <tcp_rexmit_rto>
      break;
 80135e2:	e20d      	b.n	8013a00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80135e4:	4b86      	ldr	r3, [pc, #536]	; (8013800 <tcp_process+0x5a4>)
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	f003 0310 	and.w	r3, r3, #16
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f000 80a1 	beq.w	8013734 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80135f2:	4b84      	ldr	r3, [pc, #528]	; (8013804 <tcp_process+0x5a8>)
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135fa:	1ad3      	subs	r3, r2, r3
 80135fc:	3b01      	subs	r3, #1
 80135fe:	2b00      	cmp	r3, #0
 8013600:	db7e      	blt.n	8013700 <tcp_process+0x4a4>
 8013602:	4b80      	ldr	r3, [pc, #512]	; (8013804 <tcp_process+0x5a8>)
 8013604:	681a      	ldr	r2, [r3, #0]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	2b00      	cmp	r3, #0
 801360e:	dc77      	bgt.n	8013700 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2204      	movs	r2, #4
 8013614:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801361a:	2b00      	cmp	r3, #0
 801361c:	d102      	bne.n	8013624 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801361e:	23fa      	movs	r3, #250	; 0xfa
 8013620:	76bb      	strb	r3, [r7, #26]
 8013622:	e01d      	b.n	8013660 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013628:	699b      	ldr	r3, [r3, #24]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d106      	bne.n	801363c <tcp_process+0x3e0>
 801362e:	4b7b      	ldr	r3, [pc, #492]	; (801381c <tcp_process+0x5c0>)
 8013630:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013634:	497a      	ldr	r1, [pc, #488]	; (8013820 <tcp_process+0x5c4>)
 8013636:	487b      	ldr	r0, [pc, #492]	; (8013824 <tcp_process+0x5c8>)
 8013638:	f003 fe9c 	bl	8017374 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013640:	699b      	ldr	r3, [r3, #24]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00a      	beq.n	801365c <tcp_process+0x400>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801364a:	699b      	ldr	r3, [r3, #24]
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	6910      	ldr	r0, [r2, #16]
 8013650:	2200      	movs	r2, #0
 8013652:	6879      	ldr	r1, [r7, #4]
 8013654:	4798      	blx	r3
 8013656:	4603      	mov	r3, r0
 8013658:	76bb      	strb	r3, [r7, #26]
 801365a:	e001      	b.n	8013660 <tcp_process+0x404>
 801365c:	23f0      	movs	r3, #240	; 0xf0
 801365e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013660:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d00a      	beq.n	801367e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013668:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801366c:	f113 0f0d 	cmn.w	r3, #13
 8013670:	d002      	beq.n	8013678 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f7fd ff94 	bl	80115a0 <tcp_abort>
            }
            return ERR_ABRT;
 8013678:	f06f 030c 	mvn.w	r3, #12
 801367c:	e1ce      	b.n	8013a1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f000 fae0 	bl	8013c44 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013684:	4b68      	ldr	r3, [pc, #416]	; (8013828 <tcp_process+0x5cc>)
 8013686:	881b      	ldrh	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d005      	beq.n	8013698 <tcp_process+0x43c>
            recv_acked--;
 801368c:	4b66      	ldr	r3, [pc, #408]	; (8013828 <tcp_process+0x5cc>)
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	3b01      	subs	r3, #1
 8013692:	b29a      	uxth	r2, r3
 8013694:	4b64      	ldr	r3, [pc, #400]	; (8013828 <tcp_process+0x5cc>)
 8013696:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801369c:	009a      	lsls	r2, r3, #2
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80136a8:	428b      	cmp	r3, r1
 80136aa:	bf38      	it	cc
 80136ac:	460b      	movcc	r3, r1
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d204      	bcs.n	80136bc <tcp_process+0x460>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	e00d      	b.n	80136d8 <tcp_process+0x47c>
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136c0:	005b      	lsls	r3, r3, #1
 80136c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80136c6:	4293      	cmp	r3, r2
 80136c8:	d904      	bls.n	80136d4 <tcp_process+0x478>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136ce:	005b      	lsls	r3, r3, #1
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	e001      	b.n	80136d8 <tcp_process+0x47c>
 80136d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80136de:	4b53      	ldr	r3, [pc, #332]	; (801382c <tcp_process+0x5d0>)
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	f003 0320 	and.w	r3, r3, #32
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d037      	beq.n	801375a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	8b5b      	ldrh	r3, [r3, #26]
 80136ee:	f043 0302 	orr.w	r3, r3, #2
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2207      	movs	r2, #7
 80136fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80136fe:	e02c      	b.n	801375a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013700:	4b40      	ldr	r3, [pc, #256]	; (8013804 <tcp_process+0x5a8>)
 8013702:	6819      	ldr	r1, [r3, #0]
 8013704:	4b40      	ldr	r3, [pc, #256]	; (8013808 <tcp_process+0x5ac>)
 8013706:	881b      	ldrh	r3, [r3, #0]
 8013708:	461a      	mov	r2, r3
 801370a:	4b40      	ldr	r3, [pc, #256]	; (801380c <tcp_process+0x5b0>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013710:	4b3f      	ldr	r3, [pc, #252]	; (8013810 <tcp_process+0x5b4>)
 8013712:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013714:	885b      	ldrh	r3, [r3, #2]
 8013716:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013718:	4a3d      	ldr	r2, [pc, #244]	; (8013810 <tcp_process+0x5b4>)
 801371a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801371c:	8812      	ldrh	r2, [r2, #0]
 801371e:	b292      	uxth	r2, r2
 8013720:	9202      	str	r2, [sp, #8]
 8013722:	9301      	str	r3, [sp, #4]
 8013724:	4b3b      	ldr	r3, [pc, #236]	; (8013814 <tcp_process+0x5b8>)
 8013726:	9300      	str	r3, [sp, #0]
 8013728:	4b3b      	ldr	r3, [pc, #236]	; (8013818 <tcp_process+0x5bc>)
 801372a:	4602      	mov	r2, r0
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f002 fbdf 	bl	8015ef0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013732:	e167      	b.n	8013a04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013734:	4b32      	ldr	r3, [pc, #200]	; (8013800 <tcp_process+0x5a4>)
 8013736:	781b      	ldrb	r3, [r3, #0]
 8013738:	f003 0302 	and.w	r3, r3, #2
 801373c:	2b00      	cmp	r3, #0
 801373e:	f000 8161 	beq.w	8013a04 <tcp_process+0x7a8>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013746:	1e5a      	subs	r2, r3, #1
 8013748:	4b30      	ldr	r3, [pc, #192]	; (801380c <tcp_process+0x5b0>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	429a      	cmp	r2, r3
 801374e:	f040 8159 	bne.w	8013a04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f002 f9b8 	bl	8015ac8 <tcp_rexmit>
      break;
 8013758:	e154      	b.n	8013a04 <tcp_process+0x7a8>
 801375a:	e153      	b.n	8013a04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f000 fa71 	bl	8013c44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013762:	4b32      	ldr	r3, [pc, #200]	; (801382c <tcp_process+0x5d0>)
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	f003 0320 	and.w	r3, r3, #32
 801376a:	2b00      	cmp	r3, #0
 801376c:	f000 814c 	beq.w	8013a08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	8b5b      	ldrh	r3, [r3, #26]
 8013774:	f043 0302 	orr.w	r3, r3, #2
 8013778:	b29a      	uxth	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2207      	movs	r2, #7
 8013782:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013784:	e140      	b.n	8013a08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f000 fa5c 	bl	8013c44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801378c:	4b27      	ldr	r3, [pc, #156]	; (801382c <tcp_process+0x5d0>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	f003 0320 	and.w	r3, r3, #32
 8013794:	2b00      	cmp	r3, #0
 8013796:	d071      	beq.n	801387c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013798:	4b19      	ldr	r3, [pc, #100]	; (8013800 <tcp_process+0x5a4>)
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	f003 0310 	and.w	r3, r3, #16
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d060      	beq.n	8013866 <tcp_process+0x60a>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137a8:	4b16      	ldr	r3, [pc, #88]	; (8013804 <tcp_process+0x5a8>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d15a      	bne.n	8013866 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d156      	bne.n	8013866 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	8b5b      	ldrh	r3, [r3, #26]
 80137bc:	f043 0302 	orr.w	r3, r3, #2
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f7fe fdbe 	bl	8012348 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80137cc:	4b18      	ldr	r3, [pc, #96]	; (8013830 <tcp_process+0x5d4>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d105      	bne.n	80137e2 <tcp_process+0x586>
 80137d6:	4b16      	ldr	r3, [pc, #88]	; (8013830 <tcp_process+0x5d4>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	4a14      	ldr	r2, [pc, #80]	; (8013830 <tcp_process+0x5d4>)
 80137de:	6013      	str	r3, [r2, #0]
 80137e0:	e02e      	b.n	8013840 <tcp_process+0x5e4>
 80137e2:	4b13      	ldr	r3, [pc, #76]	; (8013830 <tcp_process+0x5d4>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	617b      	str	r3, [r7, #20]
 80137e8:	e027      	b.n	801383a <tcp_process+0x5de>
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d11f      	bne.n	8013834 <tcp_process+0x5d8>
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	68da      	ldr	r2, [r3, #12]
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	60da      	str	r2, [r3, #12]
 80137fc:	e020      	b.n	8013840 <tcp_process+0x5e4>
 80137fe:	bf00      	nop
 8013800:	24004b48 	.word	0x24004b48
 8013804:	24004b40 	.word	0x24004b40
 8013808:	24004b46 	.word	0x24004b46
 801380c:	24004b3c 	.word	0x24004b3c
 8013810:	24004b2c 	.word	0x24004b2c
 8013814:	240052ac 	.word	0x240052ac
 8013818:	240052b0 	.word	0x240052b0
 801381c:	0801a0b8 	.word	0x0801a0b8
 8013820:	0801a388 	.word	0x0801a388
 8013824:	0801a134 	.word	0x0801a134
 8013828:	24004b44 	.word	0x24004b44
 801382c:	24004b49 	.word	0x24004b49
 8013830:	24008364 	.word	0x24008364
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	617b      	str	r3, [r7, #20]
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d1d4      	bne.n	80137ea <tcp_process+0x58e>
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2200      	movs	r2, #0
 8013844:	60da      	str	r2, [r3, #12]
 8013846:	4b77      	ldr	r3, [pc, #476]	; (8013a24 <tcp_process+0x7c8>)
 8013848:	2201      	movs	r2, #1
 801384a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	220a      	movs	r2, #10
 8013850:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013852:	4b75      	ldr	r3, [pc, #468]	; (8013a28 <tcp_process+0x7cc>)
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	60da      	str	r2, [r3, #12]
 801385a:	4a73      	ldr	r2, [pc, #460]	; (8013a28 <tcp_process+0x7cc>)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6013      	str	r3, [r2, #0]
 8013860:	f002 fea6 	bl	80165b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013864:	e0d2      	b.n	8013a0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	8b5b      	ldrh	r3, [r3, #26]
 801386a:	f043 0302 	orr.w	r3, r3, #2
 801386e:	b29a      	uxth	r2, r3
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2208      	movs	r2, #8
 8013878:	751a      	strb	r2, [r3, #20]
      break;
 801387a:	e0c7      	b.n	8013a0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801387c:	4b6b      	ldr	r3, [pc, #428]	; (8013a2c <tcp_process+0x7d0>)
 801387e:	781b      	ldrb	r3, [r3, #0]
 8013880:	f003 0310 	and.w	r3, r3, #16
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 80c1 	beq.w	8013a0c <tcp_process+0x7b0>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801388e:	4b68      	ldr	r3, [pc, #416]	; (8013a30 <tcp_process+0x7d4>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	429a      	cmp	r2, r3
 8013894:	f040 80ba 	bne.w	8013a0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801389c:	2b00      	cmp	r3, #0
 801389e:	f040 80b5 	bne.w	8013a0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2206      	movs	r2, #6
 80138a6:	751a      	strb	r2, [r3, #20]
      break;
 80138a8:	e0b0      	b.n	8013a0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f000 f9ca 	bl	8013c44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80138b0:	4b60      	ldr	r3, [pc, #384]	; (8013a34 <tcp_process+0x7d8>)
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	f003 0320 	and.w	r3, r3, #32
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f000 80a9 	beq.w	8013a10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8b5b      	ldrh	r3, [r3, #26]
 80138c2:	f043 0302 	orr.w	r3, r3, #2
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f7fe fd3b 	bl	8012348 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80138d2:	4b59      	ldr	r3, [pc, #356]	; (8013a38 <tcp_process+0x7dc>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d105      	bne.n	80138e8 <tcp_process+0x68c>
 80138dc:	4b56      	ldr	r3, [pc, #344]	; (8013a38 <tcp_process+0x7dc>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	4a55      	ldr	r2, [pc, #340]	; (8013a38 <tcp_process+0x7dc>)
 80138e4:	6013      	str	r3, [r2, #0]
 80138e6:	e013      	b.n	8013910 <tcp_process+0x6b4>
 80138e8:	4b53      	ldr	r3, [pc, #332]	; (8013a38 <tcp_process+0x7dc>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	613b      	str	r3, [r7, #16]
 80138ee:	e00c      	b.n	801390a <tcp_process+0x6ae>
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d104      	bne.n	8013904 <tcp_process+0x6a8>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	68da      	ldr	r2, [r3, #12]
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	60da      	str	r2, [r3, #12]
 8013902:	e005      	b.n	8013910 <tcp_process+0x6b4>
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	613b      	str	r3, [r7, #16]
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d1ef      	bne.n	80138f0 <tcp_process+0x694>
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2200      	movs	r2, #0
 8013914:	60da      	str	r2, [r3, #12]
 8013916:	4b43      	ldr	r3, [pc, #268]	; (8013a24 <tcp_process+0x7c8>)
 8013918:	2201      	movs	r2, #1
 801391a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	220a      	movs	r2, #10
 8013920:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013922:	4b41      	ldr	r3, [pc, #260]	; (8013a28 <tcp_process+0x7cc>)
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	60da      	str	r2, [r3, #12]
 801392a:	4a3f      	ldr	r2, [pc, #252]	; (8013a28 <tcp_process+0x7cc>)
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6013      	str	r3, [r2, #0]
 8013930:	f002 fe3e 	bl	80165b0 <tcp_timer_needed>
      }
      break;
 8013934:	e06c      	b.n	8013a10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f000 f984 	bl	8013c44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801393c:	4b3b      	ldr	r3, [pc, #236]	; (8013a2c <tcp_process+0x7d0>)
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	f003 0310 	and.w	r3, r3, #16
 8013944:	2b00      	cmp	r3, #0
 8013946:	d065      	beq.n	8013a14 <tcp_process+0x7b8>
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801394c:	4b38      	ldr	r3, [pc, #224]	; (8013a30 <tcp_process+0x7d4>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	429a      	cmp	r2, r3
 8013952:	d15f      	bne.n	8013a14 <tcp_process+0x7b8>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013958:	2b00      	cmp	r3, #0
 801395a:	d15b      	bne.n	8013a14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7fe fcf3 	bl	8012348 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013962:	4b35      	ldr	r3, [pc, #212]	; (8013a38 <tcp_process+0x7dc>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	687a      	ldr	r2, [r7, #4]
 8013968:	429a      	cmp	r2, r3
 801396a:	d105      	bne.n	8013978 <tcp_process+0x71c>
 801396c:	4b32      	ldr	r3, [pc, #200]	; (8013a38 <tcp_process+0x7dc>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	68db      	ldr	r3, [r3, #12]
 8013972:	4a31      	ldr	r2, [pc, #196]	; (8013a38 <tcp_process+0x7dc>)
 8013974:	6013      	str	r3, [r2, #0]
 8013976:	e013      	b.n	80139a0 <tcp_process+0x744>
 8013978:	4b2f      	ldr	r3, [pc, #188]	; (8013a38 <tcp_process+0x7dc>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	60fb      	str	r3, [r7, #12]
 801397e:	e00c      	b.n	801399a <tcp_process+0x73e>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	68db      	ldr	r3, [r3, #12]
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	429a      	cmp	r2, r3
 8013988:	d104      	bne.n	8013994 <tcp_process+0x738>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	68da      	ldr	r2, [r3, #12]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	60da      	str	r2, [r3, #12]
 8013992:	e005      	b.n	80139a0 <tcp_process+0x744>
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	68db      	ldr	r3, [r3, #12]
 8013998:	60fb      	str	r3, [r7, #12]
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d1ef      	bne.n	8013980 <tcp_process+0x724>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	60da      	str	r2, [r3, #12]
 80139a6:	4b1f      	ldr	r3, [pc, #124]	; (8013a24 <tcp_process+0x7c8>)
 80139a8:	2201      	movs	r2, #1
 80139aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	220a      	movs	r2, #10
 80139b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80139b2:	4b1d      	ldr	r3, [pc, #116]	; (8013a28 <tcp_process+0x7cc>)
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	60da      	str	r2, [r3, #12]
 80139ba:	4a1b      	ldr	r2, [pc, #108]	; (8013a28 <tcp_process+0x7cc>)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6013      	str	r3, [r2, #0]
 80139c0:	f002 fdf6 	bl	80165b0 <tcp_timer_needed>
      }
      break;
 80139c4:	e026      	b.n	8013a14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f000 f93c 	bl	8013c44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80139cc:	4b17      	ldr	r3, [pc, #92]	; (8013a2c <tcp_process+0x7d0>)
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	f003 0310 	and.w	r3, r3, #16
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d01f      	beq.n	8013a18 <tcp_process+0x7bc>
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139dc:	4b14      	ldr	r3, [pc, #80]	; (8013a30 <tcp_process+0x7d4>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d119      	bne.n	8013a18 <tcp_process+0x7bc>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d115      	bne.n	8013a18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80139ec:	4b11      	ldr	r3, [pc, #68]	; (8013a34 <tcp_process+0x7d8>)
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	f043 0310 	orr.w	r3, r3, #16
 80139f4:	b2da      	uxtb	r2, r3
 80139f6:	4b0f      	ldr	r3, [pc, #60]	; (8013a34 <tcp_process+0x7d8>)
 80139f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80139fa:	e00d      	b.n	8013a18 <tcp_process+0x7bc>
    default:
      break;
 80139fc:	bf00      	nop
 80139fe:	e00c      	b.n	8013a1a <tcp_process+0x7be>
      break;
 8013a00:	bf00      	nop
 8013a02:	e00a      	b.n	8013a1a <tcp_process+0x7be>
      break;
 8013a04:	bf00      	nop
 8013a06:	e008      	b.n	8013a1a <tcp_process+0x7be>
      break;
 8013a08:	bf00      	nop
 8013a0a:	e006      	b.n	8013a1a <tcp_process+0x7be>
      break;
 8013a0c:	bf00      	nop
 8013a0e:	e004      	b.n	8013a1a <tcp_process+0x7be>
      break;
 8013a10:	bf00      	nop
 8013a12:	e002      	b.n	8013a1a <tcp_process+0x7be>
      break;
 8013a14:	bf00      	nop
 8013a16:	e000      	b.n	8013a1a <tcp_process+0x7be>
      break;
 8013a18:	bf00      	nop
  }
  return ERR_OK;
 8013a1a:	2300      	movs	r3, #0
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3724      	adds	r7, #36	; 0x24
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd90      	pop	{r4, r7, pc}
 8013a24:	24008360 	.word	0x24008360
 8013a28:	24008374 	.word	0x24008374
 8013a2c:	24004b48 	.word	0x24004b48
 8013a30:	24004b40 	.word	0x24004b40
 8013a34:	24004b49 	.word	0x24004b49
 8013a38:	24008364 	.word	0x24008364

08013a3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013a3c:	b590      	push	{r4, r7, lr}
 8013a3e:	b085      	sub	sp, #20
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d106      	bne.n	8013a5a <tcp_oos_insert_segment+0x1e>
 8013a4c:	4b3b      	ldr	r3, [pc, #236]	; (8013b3c <tcp_oos_insert_segment+0x100>)
 8013a4e:	f240 421f 	movw	r2, #1055	; 0x41f
 8013a52:	493b      	ldr	r1, [pc, #236]	; (8013b40 <tcp_oos_insert_segment+0x104>)
 8013a54:	483b      	ldr	r0, [pc, #236]	; (8013b44 <tcp_oos_insert_segment+0x108>)
 8013a56:	f003 fc8d 	bl	8017374 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	68db      	ldr	r3, [r3, #12]
 8013a5e:	899b      	ldrh	r3, [r3, #12]
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7f8 ff78 	bl	800c958 <lwip_htons>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	f003 0301 	and.w	r3, r3, #1
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d028      	beq.n	8013ac6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013a74:	6838      	ldr	r0, [r7, #0]
 8013a76:	f7fe fa67 	bl	8011f48 <tcp_segs_free>
    next = NULL;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	603b      	str	r3, [r7, #0]
 8013a7e:	e056      	b.n	8013b2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	899b      	ldrh	r3, [r3, #12]
 8013a86:	b29b      	uxth	r3, r3
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7f8 ff65 	bl	800c958 <lwip_htons>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	f003 0301 	and.w	r3, r3, #1
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d00d      	beq.n	8013ab6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	899b      	ldrh	r3, [r3, #12]
 8013aa0:	b29c      	uxth	r4, r3
 8013aa2:	2001      	movs	r0, #1
 8013aa4:	f7f8 ff58 	bl	800c958 <lwip_htons>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	461a      	mov	r2, r3
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	4322      	orrs	r2, r4
 8013ab2:	b292      	uxth	r2, r2
 8013ab4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	f7fe fa55 	bl	8011f70 <tcp_seg_free>
    while (next &&
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00e      	beq.n	8013aea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	891b      	ldrh	r3, [r3, #8]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4b1d      	ldr	r3, [pc, #116]	; (8013b48 <tcp_oos_insert_segment+0x10c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	441a      	add	r2, r3
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	685b      	ldr	r3, [r3, #4]
 8013ade:	6839      	ldr	r1, [r7, #0]
 8013ae0:	8909      	ldrh	r1, [r1, #8]
 8013ae2:	440b      	add	r3, r1
 8013ae4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	daca      	bge.n	8013a80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d01e      	beq.n	8013b2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	891b      	ldrh	r3, [r3, #8]
 8013af4:	461a      	mov	r2, r3
 8013af6:	4b14      	ldr	r3, [pc, #80]	; (8013b48 <tcp_oos_insert_segment+0x10c>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	441a      	add	r2, r3
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	dd12      	ble.n	8013b2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	4b0d      	ldr	r3, [pc, #52]	; (8013b48 <tcp_oos_insert_segment+0x10c>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	685a      	ldr	r2, [r3, #4]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	891b      	ldrh	r3, [r3, #8]
 8013b26:	4619      	mov	r1, r3
 8013b28:	4610      	mov	r0, r2
 8013b2a:	f7fc fd25 	bl	8010578 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	683a      	ldr	r2, [r7, #0]
 8013b32:	601a      	str	r2, [r3, #0]
}
 8013b34:	bf00      	nop
 8013b36:	3714      	adds	r7, #20
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd90      	pop	{r4, r7, pc}
 8013b3c:	0801a0b8 	.word	0x0801a0b8
 8013b40:	0801a3a8 	.word	0x0801a3a8
 8013b44:	0801a134 	.word	0x0801a134
 8013b48:	24004b3c 	.word	0x24004b3c

08013b4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013b4c:	b5b0      	push	{r4, r5, r7, lr}
 8013b4e:	b086      	sub	sp, #24
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	60f8      	str	r0, [r7, #12]
 8013b54:	60b9      	str	r1, [r7, #8]
 8013b56:	607a      	str	r2, [r7, #4]
 8013b58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013b5a:	e03e      	b.n	8013bda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fc ff18 	bl	80109a0 <pbuf_clen>
 8013b70:	4603      	mov	r3, r0
 8013b72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b7a:	8a7a      	ldrh	r2, [r7, #18]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d906      	bls.n	8013b8e <tcp_free_acked_segments+0x42>
 8013b80:	4b2a      	ldr	r3, [pc, #168]	; (8013c2c <tcp_free_acked_segments+0xe0>)
 8013b82:	f240 4257 	movw	r2, #1111	; 0x457
 8013b86:	492a      	ldr	r1, [pc, #168]	; (8013c30 <tcp_free_acked_segments+0xe4>)
 8013b88:	482a      	ldr	r0, [pc, #168]	; (8013c34 <tcp_free_acked_segments+0xe8>)
 8013b8a:	f003 fbf3 	bl	8017374 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013b94:	8a7b      	ldrh	r3, [r7, #18]
 8013b96:	1ad3      	subs	r3, r2, r3
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	891a      	ldrh	r2, [r3, #8]
 8013ba4:	4b24      	ldr	r3, [pc, #144]	; (8013c38 <tcp_free_acked_segments+0xec>)
 8013ba6:	881b      	ldrh	r3, [r3, #0]
 8013ba8:	4413      	add	r3, r2
 8013baa:	b29a      	uxth	r2, r3
 8013bac:	4b22      	ldr	r3, [pc, #136]	; (8013c38 <tcp_free_acked_segments+0xec>)
 8013bae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013bb0:	6978      	ldr	r0, [r7, #20]
 8013bb2:	f7fe f9dd 	bl	8011f70 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d00c      	beq.n	8013bda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d109      	bne.n	8013bda <tcp_free_acked_segments+0x8e>
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d106      	bne.n	8013bda <tcp_free_acked_segments+0x8e>
 8013bcc:	4b17      	ldr	r3, [pc, #92]	; (8013c2c <tcp_free_acked_segments+0xe0>)
 8013bce:	f240 4262 	movw	r2, #1122	; 0x462
 8013bd2:	491a      	ldr	r1, [pc, #104]	; (8013c3c <tcp_free_acked_segments+0xf0>)
 8013bd4:	4817      	ldr	r0, [pc, #92]	; (8013c34 <tcp_free_acked_segments+0xe8>)
 8013bd6:	f003 fbcd 	bl	8017374 <iprintf>
  while (seg_list != NULL &&
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d020      	beq.n	8013c22 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7f8 fecb 	bl	800c982 <lwip_htonl>
 8013bec:	4604      	mov	r4, r0
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	891b      	ldrh	r3, [r3, #8]
 8013bf2:	461d      	mov	r5, r3
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	899b      	ldrh	r3, [r3, #12]
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f8 feab 	bl	800c958 <lwip_htons>
 8013c02:	4603      	mov	r3, r0
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	f003 0303 	and.w	r3, r3, #3
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d001      	beq.n	8013c12 <tcp_free_acked_segments+0xc6>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e000      	b.n	8013c14 <tcp_free_acked_segments+0xc8>
 8013c12:	2300      	movs	r3, #0
 8013c14:	442b      	add	r3, r5
 8013c16:	18e2      	adds	r2, r4, r3
 8013c18:	4b09      	ldr	r3, [pc, #36]	; (8013c40 <tcp_free_acked_segments+0xf4>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	dd9c      	ble.n	8013b5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013c22:	68bb      	ldr	r3, [r7, #8]
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3718      	adds	r7, #24
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8013c2c:	0801a0b8 	.word	0x0801a0b8
 8013c30:	0801a3d0 	.word	0x0801a3d0
 8013c34:	0801a134 	.word	0x0801a134
 8013c38:	24004b44 	.word	0x24004b44
 8013c3c:	0801a3f8 	.word	0x0801a3f8
 8013c40:	24004b40 	.word	0x24004b40

08013c44 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013c44:	b5b0      	push	{r4, r5, r7, lr}
 8013c46:	b094      	sub	sp, #80	; 0x50
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d106      	bne.n	8013c64 <tcp_receive+0x20>
 8013c56:	4ba6      	ldr	r3, [pc, #664]	; (8013ef0 <tcp_receive+0x2ac>)
 8013c58:	f240 427b 	movw	r2, #1147	; 0x47b
 8013c5c:	49a5      	ldr	r1, [pc, #660]	; (8013ef4 <tcp_receive+0x2b0>)
 8013c5e:	48a6      	ldr	r0, [pc, #664]	; (8013ef8 <tcp_receive+0x2b4>)
 8013c60:	f003 fb88 	bl	8017374 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	7d1b      	ldrb	r3, [r3, #20]
 8013c68:	2b03      	cmp	r3, #3
 8013c6a:	d806      	bhi.n	8013c7a <tcp_receive+0x36>
 8013c6c:	4ba0      	ldr	r3, [pc, #640]	; (8013ef0 <tcp_receive+0x2ac>)
 8013c6e:	f240 427c 	movw	r2, #1148	; 0x47c
 8013c72:	49a2      	ldr	r1, [pc, #648]	; (8013efc <tcp_receive+0x2b8>)
 8013c74:	48a0      	ldr	r0, [pc, #640]	; (8013ef8 <tcp_receive+0x2b4>)
 8013c76:	f003 fb7d 	bl	8017374 <iprintf>

  if (flags & TCP_ACK) {
 8013c7a:	4ba1      	ldr	r3, [pc, #644]	; (8013f00 <tcp_receive+0x2bc>)
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	f003 0310 	and.w	r3, r3, #16
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	f000 8263 	beq.w	801414e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c8e:	461a      	mov	r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c94:	4413      	add	r3, r2
 8013c96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c9c:	4b99      	ldr	r3, [pc, #612]	; (8013f04 <tcp_receive+0x2c0>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	1ad3      	subs	r3, r2, r3
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	db1b      	blt.n	8013cde <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013caa:	4b96      	ldr	r3, [pc, #600]	; (8013f04 <tcp_receive+0x2c0>)
 8013cac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d106      	bne.n	8013cc0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013cb6:	4b94      	ldr	r3, [pc, #592]	; (8013f08 <tcp_receive+0x2c4>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	db0e      	blt.n	8013cde <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013cc4:	4b90      	ldr	r3, [pc, #576]	; (8013f08 <tcp_receive+0x2c4>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d125      	bne.n	8013d18 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013ccc:	4b8f      	ldr	r3, [pc, #572]	; (8013f0c <tcp_receive+0x2c8>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	89db      	ldrh	r3, [r3, #14]
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d91c      	bls.n	8013d18 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013cde:	4b8b      	ldr	r3, [pc, #556]	; (8013f0c <tcp_receive+0x2c8>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	89db      	ldrh	r3, [r3, #14]
 8013ce4:	b29a      	uxth	r2, r3
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d205      	bcs.n	8013d08 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013d08:	4b7e      	ldr	r3, [pc, #504]	; (8013f04 <tcp_receive+0x2c0>)
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013d10:	4b7d      	ldr	r3, [pc, #500]	; (8013f08 <tcp_receive+0x2c4>)
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013d18:	4b7b      	ldr	r3, [pc, #492]	; (8013f08 <tcp_receive+0x2c4>)
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d20:	1ad3      	subs	r3, r2, r3
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	dc58      	bgt.n	8013dd8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013d26:	4b7a      	ldr	r3, [pc, #488]	; (8013f10 <tcp_receive+0x2cc>)
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d14b      	bne.n	8013dc6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d32:	687a      	ldr	r2, [r7, #4]
 8013d34:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013d38:	4413      	add	r3, r2
 8013d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d142      	bne.n	8013dc6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	db3d      	blt.n	8013dc6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d4e:	4b6e      	ldr	r3, [pc, #440]	; (8013f08 <tcp_receive+0x2c4>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d137      	bne.n	8013dc6 <tcp_receive+0x182>
              found_dupack = 1;
 8013d56:	2301      	movs	r3, #1
 8013d58:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d60:	2bff      	cmp	r3, #255	; 0xff
 8013d62:	d007      	beq.n	8013d74 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	b2da      	uxtb	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d7a:	2b03      	cmp	r3, #3
 8013d7c:	d91b      	bls.n	8013db6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d88:	4413      	add	r3, r2
 8013d8a:	b29a      	uxth	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d30a      	bcc.n	8013dac <tcp_receive+0x168>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013da0:	4413      	add	r3, r2
 8013da2:	b29a      	uxth	r2, r3
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013daa:	e004      	b.n	8013db6 <tcp_receive+0x172>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013db2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013dbc:	2b02      	cmp	r3, #2
 8013dbe:	d902      	bls.n	8013dc6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f001 feed 	bl	8015ba0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	f040 8160 	bne.w	801408e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013dd6:	e15a      	b.n	801408e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013dd8:	4b4b      	ldr	r3, [pc, #300]	; (8013f08 <tcp_receive+0x2c4>)
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013de0:	1ad3      	subs	r3, r2, r3
 8013de2:	3b01      	subs	r3, #1
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	f2c0 814d 	blt.w	8014084 <tcp_receive+0x440>
 8013dea:	4b47      	ldr	r3, [pc, #284]	; (8013f08 <tcp_receive+0x2c4>)
 8013dec:	681a      	ldr	r2, [r3, #0]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013df2:	1ad3      	subs	r3, r2, r3
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f300 8145 	bgt.w	8014084 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	8b5b      	ldrh	r3, [r3, #26]
 8013dfe:	f003 0304 	and.w	r3, r3, #4
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d010      	beq.n	8013e28 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	8b5b      	ldrh	r3, [r3, #26]
 8013e0a:	f023 0304 	bic.w	r3, r3, #4
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2200      	movs	r2, #0
 8013e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e36:	10db      	asrs	r3, r3, #3
 8013e38:	b21b      	sxth	r3, r3
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	4413      	add	r3, r2
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	b21a      	sxth	r2, r3
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013e50:	4b2d      	ldr	r3, [pc, #180]	; (8013f08 <tcp_receive+0x2c4>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	1ad3      	subs	r3, r2, r3
 8013e5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2200      	movs	r2, #0
 8013e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013e68:	4b27      	ldr	r3, [pc, #156]	; (8013f08 <tcp_receive+0x2c4>)
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	7d1b      	ldrb	r3, [r3, #20]
 8013e74:	2b03      	cmp	r3, #3
 8013e76:	f240 8096 	bls.w	8013fa6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d244      	bcs.n	8013f14 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	8b5b      	ldrh	r3, [r3, #26]
 8013e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d001      	beq.n	8013e9a <tcp_receive+0x256>
 8013e96:	2301      	movs	r3, #1
 8013e98:	e000      	b.n	8013e9c <tcp_receive+0x258>
 8013e9a:	2302      	movs	r3, #2
 8013e9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013ea0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013eaa:	fb12 f303 	smulbb	r3, r2, r3
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013eb2:	4293      	cmp	r3, r2
 8013eb4:	bf28      	it	cs
 8013eb6:	4613      	movcs	r3, r2
 8013eb8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ec0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ec2:	4413      	add	r3, r2
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d309      	bcc.n	8013ee4 <tcp_receive+0x2a0>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ed6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ed8:	4413      	add	r3, r2
 8013eda:	b29a      	uxth	r2, r3
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013ee2:	e060      	b.n	8013fa6 <tcp_receive+0x362>
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013eea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013eee:	e05a      	b.n	8013fa6 <tcp_receive+0x362>
 8013ef0:	0801a0b8 	.word	0x0801a0b8
 8013ef4:	0801a418 	.word	0x0801a418
 8013ef8:	0801a134 	.word	0x0801a134
 8013efc:	0801a434 	.word	0x0801a434
 8013f00:	24004b48 	.word	0x24004b48
 8013f04:	24004b3c 	.word	0x24004b3c
 8013f08:	24004b40 	.word	0x24004b40
 8013f0c:	24004b2c 	.word	0x24004b2c
 8013f10:	24004b46 	.word	0x24004b46
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013f1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013f1c:	4413      	add	r3, r2
 8013f1e:	b29a      	uxth	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d309      	bcc.n	8013f3e <tcp_receive+0x2fa>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013f32:	4413      	add	r3, r2
 8013f34:	b29a      	uxth	r2, r3
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013f3c:	e004      	b.n	8013f48 <tcp_receive+0x304>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d326      	bcc.n	8013fa6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f64:	1ad3      	subs	r3, r2, r3
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f78:	4413      	add	r3, r2
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d30a      	bcc.n	8013f9c <tcp_receive+0x358>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f90:	4413      	add	r3, r2
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f9a:	e004      	b.n	8013fa6 <tcp_receive+0x362>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fae:	4a98      	ldr	r2, [pc, #608]	; (8014210 <tcp_receive+0x5cc>)
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f7ff fdcb 	bl	8013b4c <tcp_free_acked_segments>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc4:	4a93      	ldr	r2, [pc, #588]	; (8014214 <tcp_receive+0x5d0>)
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7ff fdc0 	bl	8013b4c <tcp_free_acked_segments>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d104      	bne.n	8013fe4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fe0:	861a      	strh	r2, [r3, #48]	; 0x30
 8013fe2:	e002      	b.n	8013fea <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2200      	movs	r2, #0
 8013fee:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d103      	bne.n	8014000 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014006:	4b84      	ldr	r3, [pc, #528]	; (8014218 <tcp_receive+0x5d4>)
 8014008:	881b      	ldrh	r3, [r3, #0]
 801400a:	4413      	add	r3, r2
 801400c:	b29a      	uxth	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	8b5b      	ldrh	r3, [r3, #26]
 8014018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801401c:	2b00      	cmp	r3, #0
 801401e:	d035      	beq.n	801408c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014024:	2b00      	cmp	r3, #0
 8014026:	d118      	bne.n	801405a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801402c:	2b00      	cmp	r3, #0
 801402e:	d00c      	beq.n	801404a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014038:	68db      	ldr	r3, [r3, #12]
 801403a:	685b      	ldr	r3, [r3, #4]
 801403c:	4618      	mov	r0, r3
 801403e:	f7f8 fca0 	bl	800c982 <lwip_htonl>
 8014042:	4603      	mov	r3, r0
 8014044:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014046:	2b00      	cmp	r3, #0
 8014048:	dc20      	bgt.n	801408c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	8b5b      	ldrh	r3, [r3, #26]
 801404e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014052:	b29a      	uxth	r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014058:	e018      	b.n	801408c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014062:	68db      	ldr	r3, [r3, #12]
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	4618      	mov	r0, r3
 8014068:	f7f8 fc8b 	bl	800c982 <lwip_htonl>
 801406c:	4603      	mov	r3, r0
 801406e:	1ae3      	subs	r3, r4, r3
 8014070:	2b00      	cmp	r3, #0
 8014072:	dc0b      	bgt.n	801408c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	8b5b      	ldrh	r3, [r3, #26]
 8014078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801407c:	b29a      	uxth	r2, r3
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014082:	e003      	b.n	801408c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f001 ff85 	bl	8015f94 <tcp_send_empty_ack>
 801408a:	e000      	b.n	801408e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801408c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014092:	2b00      	cmp	r3, #0
 8014094:	d05b      	beq.n	801414e <tcp_receive+0x50a>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801409a:	4b60      	ldr	r3, [pc, #384]	; (801421c <tcp_receive+0x5d8>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	da54      	bge.n	801414e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80140a4:	4b5e      	ldr	r3, [pc, #376]	; (8014220 <tcp_receive+0x5dc>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	1ad3      	subs	r3, r2, r3
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80140b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140c2:	10db      	asrs	r3, r3, #3
 80140c4:	b21b      	sxth	r3, r3
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	1ad3      	subs	r3, r2, r3
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80140dc:	4413      	add	r3, r2
 80140de:	b29b      	uxth	r3, r3
 80140e0:	b21a      	sxth	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80140e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	da05      	bge.n	80140fa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80140ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80140f2:	425b      	negs	r3, r3
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80140fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014104:	109b      	asrs	r3, r3, #2
 8014106:	b21b      	sxth	r3, r3
 8014108:	b29b      	uxth	r3, r3
 801410a:	1ad3      	subs	r3, r2, r3
 801410c:	b29b      	uxth	r3, r3
 801410e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014118:	b29a      	uxth	r2, r3
 801411a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801411e:	4413      	add	r3, r2
 8014120:	b29b      	uxth	r3, r3
 8014122:	b21a      	sxth	r2, r3
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801412e:	10db      	asrs	r3, r3, #3
 8014130:	b21b      	sxth	r3, r3
 8014132:	b29a      	uxth	r2, r3
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801413a:	b29b      	uxth	r3, r3
 801413c:	4413      	add	r3, r2
 801413e:	b29b      	uxth	r3, r3
 8014140:	b21a      	sxth	r2, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2200      	movs	r2, #0
 801414c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801414e:	4b35      	ldr	r3, [pc, #212]	; (8014224 <tcp_receive+0x5e0>)
 8014150:	881b      	ldrh	r3, [r3, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	f000 84e1 	beq.w	8014b1a <tcp_receive+0xed6>
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	7d1b      	ldrb	r3, [r3, #20]
 801415c:	2b06      	cmp	r3, #6
 801415e:	f200 84dc 	bhi.w	8014b1a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014166:	4b30      	ldr	r3, [pc, #192]	; (8014228 <tcp_receive+0x5e4>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	3b01      	subs	r3, #1
 801416e:	2b00      	cmp	r3, #0
 8014170:	f2c0 808e 	blt.w	8014290 <tcp_receive+0x64c>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014178:	4b2a      	ldr	r3, [pc, #168]	; (8014224 <tcp_receive+0x5e0>)
 801417a:	881b      	ldrh	r3, [r3, #0]
 801417c:	4619      	mov	r1, r3
 801417e:	4b2a      	ldr	r3, [pc, #168]	; (8014228 <tcp_receive+0x5e4>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	440b      	add	r3, r1
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	3301      	adds	r3, #1
 8014188:	2b00      	cmp	r3, #0
 801418a:	f300 8081 	bgt.w	8014290 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801418e:	4b27      	ldr	r3, [pc, #156]	; (801422c <tcp_receive+0x5e8>)
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014198:	4b23      	ldr	r3, [pc, #140]	; (8014228 <tcp_receive+0x5e4>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	1ad3      	subs	r3, r2, r3
 801419e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80141a0:	4b22      	ldr	r3, [pc, #136]	; (801422c <tcp_receive+0x5e8>)
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d106      	bne.n	80141b6 <tcp_receive+0x572>
 80141a8:	4b21      	ldr	r3, [pc, #132]	; (8014230 <tcp_receive+0x5ec>)
 80141aa:	f240 5294 	movw	r2, #1428	; 0x594
 80141ae:	4921      	ldr	r1, [pc, #132]	; (8014234 <tcp_receive+0x5f0>)
 80141b0:	4821      	ldr	r0, [pc, #132]	; (8014238 <tcp_receive+0x5f4>)
 80141b2:	f003 f8df 	bl	8017374 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80141b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80141bc:	4293      	cmp	r3, r2
 80141be:	d906      	bls.n	80141ce <tcp_receive+0x58a>
 80141c0:	4b1b      	ldr	r3, [pc, #108]	; (8014230 <tcp_receive+0x5ec>)
 80141c2:	f240 5295 	movw	r2, #1429	; 0x595
 80141c6:	491d      	ldr	r1, [pc, #116]	; (801423c <tcp_receive+0x5f8>)
 80141c8:	481b      	ldr	r0, [pc, #108]	; (8014238 <tcp_receive+0x5f4>)
 80141ca:	f003 f8d3 	bl	8017374 <iprintf>
      off = (u16_t)off32;
 80141ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80141d4:	4b15      	ldr	r3, [pc, #84]	; (801422c <tcp_receive+0x5e8>)
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	891b      	ldrh	r3, [r3, #8]
 80141da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141de:	429a      	cmp	r2, r3
 80141e0:	d906      	bls.n	80141f0 <tcp_receive+0x5ac>
 80141e2:	4b13      	ldr	r3, [pc, #76]	; (8014230 <tcp_receive+0x5ec>)
 80141e4:	f240 5297 	movw	r2, #1431	; 0x597
 80141e8:	4915      	ldr	r1, [pc, #84]	; (8014240 <tcp_receive+0x5fc>)
 80141ea:	4813      	ldr	r0, [pc, #76]	; (8014238 <tcp_receive+0x5f4>)
 80141ec:	f003 f8c2 	bl	8017374 <iprintf>
      inseg.len -= off;
 80141f0:	4b0e      	ldr	r3, [pc, #56]	; (801422c <tcp_receive+0x5e8>)
 80141f2:	891a      	ldrh	r2, [r3, #8]
 80141f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80141f8:	1ad3      	subs	r3, r2, r3
 80141fa:	b29a      	uxth	r2, r3
 80141fc:	4b0b      	ldr	r3, [pc, #44]	; (801422c <tcp_receive+0x5e8>)
 80141fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014200:	4b0a      	ldr	r3, [pc, #40]	; (801422c <tcp_receive+0x5e8>)
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	891a      	ldrh	r2, [r3, #8]
 8014206:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801420a:	1ad3      	subs	r3, r2, r3
 801420c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801420e:	e029      	b.n	8014264 <tcp_receive+0x620>
 8014210:	0801a450 	.word	0x0801a450
 8014214:	0801a458 	.word	0x0801a458
 8014218:	24004b44 	.word	0x24004b44
 801421c:	24004b40 	.word	0x24004b40
 8014220:	24008368 	.word	0x24008368
 8014224:	24004b46 	.word	0x24004b46
 8014228:	24004b3c 	.word	0x24004b3c
 801422c:	24004b1c 	.word	0x24004b1c
 8014230:	0801a0b8 	.word	0x0801a0b8
 8014234:	0801a460 	.word	0x0801a460
 8014238:	0801a134 	.word	0x0801a134
 801423c:	0801a470 	.word	0x0801a470
 8014240:	0801a480 	.word	0x0801a480
        off -= p->len;
 8014244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014246:	895b      	ldrh	r3, [r3, #10]
 8014248:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801424c:	1ad3      	subs	r3, r2, r3
 801424e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014254:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014256:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801425a:	2200      	movs	r2, #0
 801425c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801425e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014266:	895b      	ldrh	r3, [r3, #10]
 8014268:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801426c:	429a      	cmp	r2, r3
 801426e:	d8e9      	bhi.n	8014244 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014274:	4619      	mov	r1, r3
 8014276:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014278:	f7fc fa7e 	bl	8010778 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014280:	4a91      	ldr	r2, [pc, #580]	; (80144c8 <tcp_receive+0x884>)
 8014282:	6013      	str	r3, [r2, #0]
 8014284:	4b91      	ldr	r3, [pc, #580]	; (80144cc <tcp_receive+0x888>)
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	4a8f      	ldr	r2, [pc, #572]	; (80144c8 <tcp_receive+0x884>)
 801428a:	6812      	ldr	r2, [r2, #0]
 801428c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801428e:	e00d      	b.n	80142ac <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014290:	4b8d      	ldr	r3, [pc, #564]	; (80144c8 <tcp_receive+0x884>)
 8014292:	681a      	ldr	r2, [r3, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014298:	1ad3      	subs	r3, r2, r3
 801429a:	2b00      	cmp	r3, #0
 801429c:	da06      	bge.n	80142ac <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	8b5b      	ldrh	r3, [r3, #26]
 80142a2:	f043 0302 	orr.w	r3, r3, #2
 80142a6:	b29a      	uxth	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142ac:	4b86      	ldr	r3, [pc, #536]	; (80144c8 <tcp_receive+0x884>)
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142b4:	1ad3      	subs	r3, r2, r3
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	f2c0 842a 	blt.w	8014b10 <tcp_receive+0xecc>
 80142bc:	4b82      	ldr	r3, [pc, #520]	; (80144c8 <tcp_receive+0x884>)
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142c4:	6879      	ldr	r1, [r7, #4]
 80142c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142c8:	440b      	add	r3, r1
 80142ca:	1ad3      	subs	r3, r2, r3
 80142cc:	3301      	adds	r3, #1
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	f300 841e 	bgt.w	8014b10 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142d8:	4b7b      	ldr	r3, [pc, #492]	; (80144c8 <tcp_receive+0x884>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	429a      	cmp	r2, r3
 80142de:	f040 829a 	bne.w	8014816 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80142e2:	4b7a      	ldr	r3, [pc, #488]	; (80144cc <tcp_receive+0x888>)
 80142e4:	891c      	ldrh	r4, [r3, #8]
 80142e6:	4b79      	ldr	r3, [pc, #484]	; (80144cc <tcp_receive+0x888>)
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	899b      	ldrh	r3, [r3, #12]
 80142ec:	b29b      	uxth	r3, r3
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7f8 fb32 	bl	800c958 <lwip_htons>
 80142f4:	4603      	mov	r3, r0
 80142f6:	b2db      	uxtb	r3, r3
 80142f8:	f003 0303 	and.w	r3, r3, #3
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d001      	beq.n	8014304 <tcp_receive+0x6c0>
 8014300:	2301      	movs	r3, #1
 8014302:	e000      	b.n	8014306 <tcp_receive+0x6c2>
 8014304:	2300      	movs	r3, #0
 8014306:	4423      	add	r3, r4
 8014308:	b29a      	uxth	r2, r3
 801430a:	4b71      	ldr	r3, [pc, #452]	; (80144d0 <tcp_receive+0x88c>)
 801430c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014312:	4b6f      	ldr	r3, [pc, #444]	; (80144d0 <tcp_receive+0x88c>)
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	429a      	cmp	r2, r3
 8014318:	d275      	bcs.n	8014406 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801431a:	4b6c      	ldr	r3, [pc, #432]	; (80144cc <tcp_receive+0x888>)
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	899b      	ldrh	r3, [r3, #12]
 8014320:	b29b      	uxth	r3, r3
 8014322:	4618      	mov	r0, r3
 8014324:	f7f8 fb18 	bl	800c958 <lwip_htons>
 8014328:	4603      	mov	r3, r0
 801432a:	b2db      	uxtb	r3, r3
 801432c:	f003 0301 	and.w	r3, r3, #1
 8014330:	2b00      	cmp	r3, #0
 8014332:	d01f      	beq.n	8014374 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014334:	4b65      	ldr	r3, [pc, #404]	; (80144cc <tcp_receive+0x888>)
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	899b      	ldrh	r3, [r3, #12]
 801433a:	b29b      	uxth	r3, r3
 801433c:	b21b      	sxth	r3, r3
 801433e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014342:	b21c      	sxth	r4, r3
 8014344:	4b61      	ldr	r3, [pc, #388]	; (80144cc <tcp_receive+0x888>)
 8014346:	68db      	ldr	r3, [r3, #12]
 8014348:	899b      	ldrh	r3, [r3, #12]
 801434a:	b29b      	uxth	r3, r3
 801434c:	4618      	mov	r0, r3
 801434e:	f7f8 fb03 	bl	800c958 <lwip_htons>
 8014352:	4603      	mov	r3, r0
 8014354:	b2db      	uxtb	r3, r3
 8014356:	b29b      	uxth	r3, r3
 8014358:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801435c:	b29b      	uxth	r3, r3
 801435e:	4618      	mov	r0, r3
 8014360:	f7f8 fafa 	bl	800c958 <lwip_htons>
 8014364:	4603      	mov	r3, r0
 8014366:	b21b      	sxth	r3, r3
 8014368:	4323      	orrs	r3, r4
 801436a:	b21a      	sxth	r2, r3
 801436c:	4b57      	ldr	r3, [pc, #348]	; (80144cc <tcp_receive+0x888>)
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	b292      	uxth	r2, r2
 8014372:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014378:	4b54      	ldr	r3, [pc, #336]	; (80144cc <tcp_receive+0x888>)
 801437a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801437c:	4b53      	ldr	r3, [pc, #332]	; (80144cc <tcp_receive+0x888>)
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	899b      	ldrh	r3, [r3, #12]
 8014382:	b29b      	uxth	r3, r3
 8014384:	4618      	mov	r0, r3
 8014386:	f7f8 fae7 	bl	800c958 <lwip_htons>
 801438a:	4603      	mov	r3, r0
 801438c:	b2db      	uxtb	r3, r3
 801438e:	f003 0302 	and.w	r3, r3, #2
 8014392:	2b00      	cmp	r3, #0
 8014394:	d005      	beq.n	80143a2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8014396:	4b4d      	ldr	r3, [pc, #308]	; (80144cc <tcp_receive+0x888>)
 8014398:	891b      	ldrh	r3, [r3, #8]
 801439a:	3b01      	subs	r3, #1
 801439c:	b29a      	uxth	r2, r3
 801439e:	4b4b      	ldr	r3, [pc, #300]	; (80144cc <tcp_receive+0x888>)
 80143a0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80143a2:	4b4a      	ldr	r3, [pc, #296]	; (80144cc <tcp_receive+0x888>)
 80143a4:	685a      	ldr	r2, [r3, #4]
 80143a6:	4b49      	ldr	r3, [pc, #292]	; (80144cc <tcp_receive+0x888>)
 80143a8:	891b      	ldrh	r3, [r3, #8]
 80143aa:	4619      	mov	r1, r3
 80143ac:	4610      	mov	r0, r2
 80143ae:	f7fc f8e3 	bl	8010578 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80143b2:	4b46      	ldr	r3, [pc, #280]	; (80144cc <tcp_receive+0x888>)
 80143b4:	891c      	ldrh	r4, [r3, #8]
 80143b6:	4b45      	ldr	r3, [pc, #276]	; (80144cc <tcp_receive+0x888>)
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	899b      	ldrh	r3, [r3, #12]
 80143bc:	b29b      	uxth	r3, r3
 80143be:	4618      	mov	r0, r3
 80143c0:	f7f8 faca 	bl	800c958 <lwip_htons>
 80143c4:	4603      	mov	r3, r0
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	f003 0303 	and.w	r3, r3, #3
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d001      	beq.n	80143d4 <tcp_receive+0x790>
 80143d0:	2301      	movs	r3, #1
 80143d2:	e000      	b.n	80143d6 <tcp_receive+0x792>
 80143d4:	2300      	movs	r3, #0
 80143d6:	4423      	add	r3, r4
 80143d8:	b29a      	uxth	r2, r3
 80143da:	4b3d      	ldr	r3, [pc, #244]	; (80144d0 <tcp_receive+0x88c>)
 80143dc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80143de:	4b3c      	ldr	r3, [pc, #240]	; (80144d0 <tcp_receive+0x88c>)
 80143e0:	881b      	ldrh	r3, [r3, #0]
 80143e2:	461a      	mov	r2, r3
 80143e4:	4b38      	ldr	r3, [pc, #224]	; (80144c8 <tcp_receive+0x884>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	441a      	add	r2, r3
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ee:	6879      	ldr	r1, [r7, #4]
 80143f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80143f2:	440b      	add	r3, r1
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d006      	beq.n	8014406 <tcp_receive+0x7c2>
 80143f8:	4b36      	ldr	r3, [pc, #216]	; (80144d4 <tcp_receive+0x890>)
 80143fa:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80143fe:	4936      	ldr	r1, [pc, #216]	; (80144d8 <tcp_receive+0x894>)
 8014400:	4836      	ldr	r0, [pc, #216]	; (80144dc <tcp_receive+0x898>)
 8014402:	f002 ffb7 	bl	8017374 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801440a:	2b00      	cmp	r3, #0
 801440c:	f000 80e7 	beq.w	80145de <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014410:	4b2e      	ldr	r3, [pc, #184]	; (80144cc <tcp_receive+0x888>)
 8014412:	68db      	ldr	r3, [r3, #12]
 8014414:	899b      	ldrh	r3, [r3, #12]
 8014416:	b29b      	uxth	r3, r3
 8014418:	4618      	mov	r0, r3
 801441a:	f7f8 fa9d 	bl	800c958 <lwip_htons>
 801441e:	4603      	mov	r3, r0
 8014420:	b2db      	uxtb	r3, r3
 8014422:	f003 0301 	and.w	r3, r3, #1
 8014426:	2b00      	cmp	r3, #0
 8014428:	d010      	beq.n	801444c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801442a:	e00a      	b.n	8014442 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014430:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f7fd fd97 	bl	8011f70 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014446:	2b00      	cmp	r3, #0
 8014448:	d1f0      	bne.n	801442c <tcp_receive+0x7e8>
 801444a:	e0c8      	b.n	80145de <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014450:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014452:	e052      	b.n	80144fa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	899b      	ldrh	r3, [r3, #12]
 801445a:	b29b      	uxth	r3, r3
 801445c:	4618      	mov	r0, r3
 801445e:	f7f8 fa7b 	bl	800c958 <lwip_htons>
 8014462:	4603      	mov	r3, r0
 8014464:	b2db      	uxtb	r3, r3
 8014466:	f003 0301 	and.w	r3, r3, #1
 801446a:	2b00      	cmp	r3, #0
 801446c:	d03d      	beq.n	80144ea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801446e:	4b17      	ldr	r3, [pc, #92]	; (80144cc <tcp_receive+0x888>)
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	899b      	ldrh	r3, [r3, #12]
 8014474:	b29b      	uxth	r3, r3
 8014476:	4618      	mov	r0, r3
 8014478:	f7f8 fa6e 	bl	800c958 <lwip_htons>
 801447c:	4603      	mov	r3, r0
 801447e:	b2db      	uxtb	r3, r3
 8014480:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014484:	2b00      	cmp	r3, #0
 8014486:	d130      	bne.n	80144ea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014488:	4b10      	ldr	r3, [pc, #64]	; (80144cc <tcp_receive+0x888>)
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	899b      	ldrh	r3, [r3, #12]
 801448e:	b29c      	uxth	r4, r3
 8014490:	2001      	movs	r0, #1
 8014492:	f7f8 fa61 	bl	800c958 <lwip_htons>
 8014496:	4603      	mov	r3, r0
 8014498:	461a      	mov	r2, r3
 801449a:	4b0c      	ldr	r3, [pc, #48]	; (80144cc <tcp_receive+0x888>)
 801449c:	68db      	ldr	r3, [r3, #12]
 801449e:	4322      	orrs	r2, r4
 80144a0:	b292      	uxth	r2, r2
 80144a2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80144a4:	4b09      	ldr	r3, [pc, #36]	; (80144cc <tcp_receive+0x888>)
 80144a6:	891c      	ldrh	r4, [r3, #8]
 80144a8:	4b08      	ldr	r3, [pc, #32]	; (80144cc <tcp_receive+0x888>)
 80144aa:	68db      	ldr	r3, [r3, #12]
 80144ac:	899b      	ldrh	r3, [r3, #12]
 80144ae:	b29b      	uxth	r3, r3
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7f8 fa51 	bl	800c958 <lwip_htons>
 80144b6:	4603      	mov	r3, r0
 80144b8:	b2db      	uxtb	r3, r3
 80144ba:	f003 0303 	and.w	r3, r3, #3
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d00e      	beq.n	80144e0 <tcp_receive+0x89c>
 80144c2:	2301      	movs	r3, #1
 80144c4:	e00d      	b.n	80144e2 <tcp_receive+0x89e>
 80144c6:	bf00      	nop
 80144c8:	24004b3c 	.word	0x24004b3c
 80144cc:	24004b1c 	.word	0x24004b1c
 80144d0:	24004b46 	.word	0x24004b46
 80144d4:	0801a0b8 	.word	0x0801a0b8
 80144d8:	0801a490 	.word	0x0801a490
 80144dc:	0801a134 	.word	0x0801a134
 80144e0:	2300      	movs	r3, #0
 80144e2:	4423      	add	r3, r4
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	4b98      	ldr	r3, [pc, #608]	; (8014748 <tcp_receive+0xb04>)
 80144e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80144ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 80144ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80144f4:	6938      	ldr	r0, [r7, #16]
 80144f6:	f7fd fd3b 	bl	8011f70 <tcp_seg_free>
            while (next &&
 80144fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d00e      	beq.n	801451e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014500:	4b91      	ldr	r3, [pc, #580]	; (8014748 <tcp_receive+0xb04>)
 8014502:	881b      	ldrh	r3, [r3, #0]
 8014504:	461a      	mov	r2, r3
 8014506:	4b91      	ldr	r3, [pc, #580]	; (801474c <tcp_receive+0xb08>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	441a      	add	r2, r3
 801450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014514:	8909      	ldrh	r1, [r1, #8]
 8014516:	440b      	add	r3, r1
 8014518:	1ad3      	subs	r3, r2, r3
            while (next &&
 801451a:	2b00      	cmp	r3, #0
 801451c:	da9a      	bge.n	8014454 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801451e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014520:	2b00      	cmp	r3, #0
 8014522:	d059      	beq.n	80145d8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8014524:	4b88      	ldr	r3, [pc, #544]	; (8014748 <tcp_receive+0xb04>)
 8014526:	881b      	ldrh	r3, [r3, #0]
 8014528:	461a      	mov	r2, r3
 801452a:	4b88      	ldr	r3, [pc, #544]	; (801474c <tcp_receive+0xb08>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	441a      	add	r2, r3
 8014530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014538:	2b00      	cmp	r3, #0
 801453a:	dd4d      	ble.n	80145d8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	685b      	ldr	r3, [r3, #4]
 8014542:	b29a      	uxth	r2, r3
 8014544:	4b81      	ldr	r3, [pc, #516]	; (801474c <tcp_receive+0xb08>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	b29b      	uxth	r3, r3
 801454a:	1ad3      	subs	r3, r2, r3
 801454c:	b29a      	uxth	r2, r3
 801454e:	4b80      	ldr	r3, [pc, #512]	; (8014750 <tcp_receive+0xb0c>)
 8014550:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014552:	4b7f      	ldr	r3, [pc, #508]	; (8014750 <tcp_receive+0xb0c>)
 8014554:	68db      	ldr	r3, [r3, #12]
 8014556:	899b      	ldrh	r3, [r3, #12]
 8014558:	b29b      	uxth	r3, r3
 801455a:	4618      	mov	r0, r3
 801455c:	f7f8 f9fc 	bl	800c958 <lwip_htons>
 8014560:	4603      	mov	r3, r0
 8014562:	b2db      	uxtb	r3, r3
 8014564:	f003 0302 	and.w	r3, r3, #2
 8014568:	2b00      	cmp	r3, #0
 801456a:	d005      	beq.n	8014578 <tcp_receive+0x934>
                inseg.len -= 1;
 801456c:	4b78      	ldr	r3, [pc, #480]	; (8014750 <tcp_receive+0xb0c>)
 801456e:	891b      	ldrh	r3, [r3, #8]
 8014570:	3b01      	subs	r3, #1
 8014572:	b29a      	uxth	r2, r3
 8014574:	4b76      	ldr	r3, [pc, #472]	; (8014750 <tcp_receive+0xb0c>)
 8014576:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014578:	4b75      	ldr	r3, [pc, #468]	; (8014750 <tcp_receive+0xb0c>)
 801457a:	685a      	ldr	r2, [r3, #4]
 801457c:	4b74      	ldr	r3, [pc, #464]	; (8014750 <tcp_receive+0xb0c>)
 801457e:	891b      	ldrh	r3, [r3, #8]
 8014580:	4619      	mov	r1, r3
 8014582:	4610      	mov	r0, r2
 8014584:	f7fb fff8 	bl	8010578 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014588:	4b71      	ldr	r3, [pc, #452]	; (8014750 <tcp_receive+0xb0c>)
 801458a:	891c      	ldrh	r4, [r3, #8]
 801458c:	4b70      	ldr	r3, [pc, #448]	; (8014750 <tcp_receive+0xb0c>)
 801458e:	68db      	ldr	r3, [r3, #12]
 8014590:	899b      	ldrh	r3, [r3, #12]
 8014592:	b29b      	uxth	r3, r3
 8014594:	4618      	mov	r0, r3
 8014596:	f7f8 f9df 	bl	800c958 <lwip_htons>
 801459a:	4603      	mov	r3, r0
 801459c:	b2db      	uxtb	r3, r3
 801459e:	f003 0303 	and.w	r3, r3, #3
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d001      	beq.n	80145aa <tcp_receive+0x966>
 80145a6:	2301      	movs	r3, #1
 80145a8:	e000      	b.n	80145ac <tcp_receive+0x968>
 80145aa:	2300      	movs	r3, #0
 80145ac:	4423      	add	r3, r4
 80145ae:	b29a      	uxth	r2, r3
 80145b0:	4b65      	ldr	r3, [pc, #404]	; (8014748 <tcp_receive+0xb04>)
 80145b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80145b4:	4b64      	ldr	r3, [pc, #400]	; (8014748 <tcp_receive+0xb04>)
 80145b6:	881b      	ldrh	r3, [r3, #0]
 80145b8:	461a      	mov	r2, r3
 80145ba:	4b64      	ldr	r3, [pc, #400]	; (801474c <tcp_receive+0xb08>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	441a      	add	r2, r3
 80145c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d006      	beq.n	80145d8 <tcp_receive+0x994>
 80145ca:	4b62      	ldr	r3, [pc, #392]	; (8014754 <tcp_receive+0xb10>)
 80145cc:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80145d0:	4961      	ldr	r1, [pc, #388]	; (8014758 <tcp_receive+0xb14>)
 80145d2:	4862      	ldr	r0, [pc, #392]	; (801475c <tcp_receive+0xb18>)
 80145d4:	f002 fece 	bl	8017374 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80145dc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80145de:	4b5a      	ldr	r3, [pc, #360]	; (8014748 <tcp_receive+0xb04>)
 80145e0:	881b      	ldrh	r3, [r3, #0]
 80145e2:	461a      	mov	r2, r3
 80145e4:	4b59      	ldr	r3, [pc, #356]	; (801474c <tcp_receive+0xb08>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	441a      	add	r2, r3
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80145f2:	4b55      	ldr	r3, [pc, #340]	; (8014748 <tcp_receive+0xb04>)
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d206      	bcs.n	8014608 <tcp_receive+0x9c4>
 80145fa:	4b56      	ldr	r3, [pc, #344]	; (8014754 <tcp_receive+0xb10>)
 80145fc:	f240 6207 	movw	r2, #1543	; 0x607
 8014600:	4957      	ldr	r1, [pc, #348]	; (8014760 <tcp_receive+0xb1c>)
 8014602:	4856      	ldr	r0, [pc, #344]	; (801475c <tcp_receive+0xb18>)
 8014604:	f002 feb6 	bl	8017374 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801460c:	4b4e      	ldr	r3, [pc, #312]	; (8014748 <tcp_receive+0xb04>)
 801460e:	881b      	ldrh	r3, [r3, #0]
 8014610:	1ad3      	subs	r3, r2, r3
 8014612:	b29a      	uxth	r2, r3
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f7fc ffcd 	bl	80115b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801461e:	4b4c      	ldr	r3, [pc, #304]	; (8014750 <tcp_receive+0xb0c>)
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	891b      	ldrh	r3, [r3, #8]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d006      	beq.n	8014636 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014628:	4b49      	ldr	r3, [pc, #292]	; (8014750 <tcp_receive+0xb0c>)
 801462a:	685b      	ldr	r3, [r3, #4]
 801462c:	4a4d      	ldr	r2, [pc, #308]	; (8014764 <tcp_receive+0xb20>)
 801462e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014630:	4b47      	ldr	r3, [pc, #284]	; (8014750 <tcp_receive+0xb0c>)
 8014632:	2200      	movs	r2, #0
 8014634:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014636:	4b46      	ldr	r3, [pc, #280]	; (8014750 <tcp_receive+0xb0c>)
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	899b      	ldrh	r3, [r3, #12]
 801463c:	b29b      	uxth	r3, r3
 801463e:	4618      	mov	r0, r3
 8014640:	f7f8 f98a 	bl	800c958 <lwip_htons>
 8014644:	4603      	mov	r3, r0
 8014646:	b2db      	uxtb	r3, r3
 8014648:	f003 0301 	and.w	r3, r3, #1
 801464c:	2b00      	cmp	r3, #0
 801464e:	f000 80b8 	beq.w	80147c2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014652:	4b45      	ldr	r3, [pc, #276]	; (8014768 <tcp_receive+0xb24>)
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	f043 0320 	orr.w	r3, r3, #32
 801465a:	b2da      	uxtb	r2, r3
 801465c:	4b42      	ldr	r3, [pc, #264]	; (8014768 <tcp_receive+0xb24>)
 801465e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014660:	e0af      	b.n	80147c2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014666:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801466c:	68db      	ldr	r3, [r3, #12]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	4a36      	ldr	r2, [pc, #216]	; (801474c <tcp_receive+0xb08>)
 8014672:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	891b      	ldrh	r3, [r3, #8]
 8014678:	461c      	mov	r4, r3
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	68db      	ldr	r3, [r3, #12]
 801467e:	899b      	ldrh	r3, [r3, #12]
 8014680:	b29b      	uxth	r3, r3
 8014682:	4618      	mov	r0, r3
 8014684:	f7f8 f968 	bl	800c958 <lwip_htons>
 8014688:	4603      	mov	r3, r0
 801468a:	b2db      	uxtb	r3, r3
 801468c:	f003 0303 	and.w	r3, r3, #3
 8014690:	2b00      	cmp	r3, #0
 8014692:	d001      	beq.n	8014698 <tcp_receive+0xa54>
 8014694:	2301      	movs	r3, #1
 8014696:	e000      	b.n	801469a <tcp_receive+0xa56>
 8014698:	2300      	movs	r3, #0
 801469a:	191a      	adds	r2, r3, r4
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146a0:	441a      	add	r2, r3
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146aa:	461c      	mov	r4, r3
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	891b      	ldrh	r3, [r3, #8]
 80146b0:	461d      	mov	r5, r3
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	899b      	ldrh	r3, [r3, #12]
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7f8 f94c 	bl	800c958 <lwip_htons>
 80146c0:	4603      	mov	r3, r0
 80146c2:	b2db      	uxtb	r3, r3
 80146c4:	f003 0303 	and.w	r3, r3, #3
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d001      	beq.n	80146d0 <tcp_receive+0xa8c>
 80146cc:	2301      	movs	r3, #1
 80146ce:	e000      	b.n	80146d2 <tcp_receive+0xa8e>
 80146d0:	2300      	movs	r3, #0
 80146d2:	442b      	add	r3, r5
 80146d4:	429c      	cmp	r4, r3
 80146d6:	d206      	bcs.n	80146e6 <tcp_receive+0xaa2>
 80146d8:	4b1e      	ldr	r3, [pc, #120]	; (8014754 <tcp_receive+0xb10>)
 80146da:	f240 622c 	movw	r2, #1580	; 0x62c
 80146de:	4923      	ldr	r1, [pc, #140]	; (801476c <tcp_receive+0xb28>)
 80146e0:	481e      	ldr	r0, [pc, #120]	; (801475c <tcp_receive+0xb18>)
 80146e2:	f002 fe47 	bl	8017374 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	891b      	ldrh	r3, [r3, #8]
 80146ea:	461c      	mov	r4, r3
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	68db      	ldr	r3, [r3, #12]
 80146f0:	899b      	ldrh	r3, [r3, #12]
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7f8 f92f 	bl	800c958 <lwip_htons>
 80146fa:	4603      	mov	r3, r0
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	f003 0303 	and.w	r3, r3, #3
 8014702:	2b00      	cmp	r3, #0
 8014704:	d001      	beq.n	801470a <tcp_receive+0xac6>
 8014706:	2301      	movs	r3, #1
 8014708:	e000      	b.n	801470c <tcp_receive+0xac8>
 801470a:	2300      	movs	r3, #0
 801470c:	1919      	adds	r1, r3, r4
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014712:	b28b      	uxth	r3, r1
 8014714:	1ad3      	subs	r3, r2, r3
 8014716:	b29a      	uxth	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7fc ff4b 	bl	80115b8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	891b      	ldrh	r3, [r3, #8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d028      	beq.n	801477e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801472c:	4b0d      	ldr	r3, [pc, #52]	; (8014764 <tcp_receive+0xb20>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d01d      	beq.n	8014770 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014734:	4b0b      	ldr	r3, [pc, #44]	; (8014764 <tcp_receive+0xb20>)
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	4619      	mov	r1, r3
 801473e:	4610      	mov	r0, r2
 8014740:	f7fc f96e 	bl	8010a20 <pbuf_cat>
 8014744:	e018      	b.n	8014778 <tcp_receive+0xb34>
 8014746:	bf00      	nop
 8014748:	24004b46 	.word	0x24004b46
 801474c:	24004b3c 	.word	0x24004b3c
 8014750:	24004b1c 	.word	0x24004b1c
 8014754:	0801a0b8 	.word	0x0801a0b8
 8014758:	0801a4c8 	.word	0x0801a4c8
 801475c:	0801a134 	.word	0x0801a134
 8014760:	0801a504 	.word	0x0801a504
 8014764:	24004b4c 	.word	0x24004b4c
 8014768:	24004b49 	.word	0x24004b49
 801476c:	0801a524 	.word	0x0801a524
            } else {
              recv_data = cseg->p;
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	4a70      	ldr	r2, [pc, #448]	; (8014938 <tcp_receive+0xcf4>)
 8014776:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	2200      	movs	r2, #0
 801477c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	899b      	ldrh	r3, [r3, #12]
 8014784:	b29b      	uxth	r3, r3
 8014786:	4618      	mov	r0, r3
 8014788:	f7f8 f8e6 	bl	800c958 <lwip_htons>
 801478c:	4603      	mov	r3, r0
 801478e:	b2db      	uxtb	r3, r3
 8014790:	f003 0301 	and.w	r3, r3, #1
 8014794:	2b00      	cmp	r3, #0
 8014796:	d00d      	beq.n	80147b4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014798:	4b68      	ldr	r3, [pc, #416]	; (801493c <tcp_receive+0xcf8>)
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	f043 0320 	orr.w	r3, r3, #32
 80147a0:	b2da      	uxtb	r2, r3
 80147a2:	4b66      	ldr	r3, [pc, #408]	; (801493c <tcp_receive+0xcf8>)
 80147a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	7d1b      	ldrb	r3, [r3, #20]
 80147aa:	2b04      	cmp	r3, #4
 80147ac:	d102      	bne.n	80147b4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2207      	movs	r2, #7
 80147b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80147bc:	68b8      	ldr	r0, [r7, #8]
 80147be:	f7fd fbd7 	bl	8011f70 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d008      	beq.n	80147dc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147ce:	68db      	ldr	r3, [r3, #12]
 80147d0:	685a      	ldr	r2, [r3, #4]
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80147d6:	429a      	cmp	r2, r3
 80147d8:	f43f af43 	beq.w	8014662 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	8b5b      	ldrh	r3, [r3, #26]
 80147e0:	f003 0301 	and.w	r3, r3, #1
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d00e      	beq.n	8014806 <tcp_receive+0xbc2>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	8b5b      	ldrh	r3, [r3, #26]
 80147ec:	f023 0301 	bic.w	r3, r3, #1
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	835a      	strh	r2, [r3, #26]
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	8b5b      	ldrh	r3, [r3, #26]
 80147fa:	f043 0302 	orr.w	r3, r3, #2
 80147fe:	b29a      	uxth	r2, r3
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014804:	e188      	b.n	8014b18 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	8b5b      	ldrh	r3, [r3, #26]
 801480a:	f043 0301 	orr.w	r3, r3, #1
 801480e:	b29a      	uxth	r2, r3
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014814:	e180      	b.n	8014b18 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801481a:	2b00      	cmp	r3, #0
 801481c:	d106      	bne.n	801482c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801481e:	4848      	ldr	r0, [pc, #288]	; (8014940 <tcp_receive+0xcfc>)
 8014820:	f7fd fbbe 	bl	8011fa0 <tcp_seg_copy>
 8014824:	4602      	mov	r2, r0
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	675a      	str	r2, [r3, #116]	; 0x74
 801482a:	e16d      	b.n	8014b08 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801482c:	2300      	movs	r3, #0
 801482e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014834:	63bb      	str	r3, [r7, #56]	; 0x38
 8014836:	e157      	b.n	8014ae8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	685a      	ldr	r2, [r3, #4]
 801483e:	4b41      	ldr	r3, [pc, #260]	; (8014944 <tcp_receive+0xd00>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	429a      	cmp	r2, r3
 8014844:	d11d      	bne.n	8014882 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014846:	4b3e      	ldr	r3, [pc, #248]	; (8014940 <tcp_receive+0xcfc>)
 8014848:	891a      	ldrh	r2, [r3, #8]
 801484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484c:	891b      	ldrh	r3, [r3, #8]
 801484e:	429a      	cmp	r2, r3
 8014850:	f240 814f 	bls.w	8014af2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014854:	483a      	ldr	r0, [pc, #232]	; (8014940 <tcp_receive+0xcfc>)
 8014856:	f7fd fba3 	bl	8011fa0 <tcp_seg_copy>
 801485a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	2b00      	cmp	r3, #0
 8014860:	f000 8149 	beq.w	8014af6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014866:	2b00      	cmp	r3, #0
 8014868:	d003      	beq.n	8014872 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801486c:	697a      	ldr	r2, [r7, #20]
 801486e:	601a      	str	r2, [r3, #0]
 8014870:	e002      	b.n	8014878 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	697a      	ldr	r2, [r7, #20]
 8014876:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801487a:	6978      	ldr	r0, [r7, #20]
 801487c:	f7ff f8de 	bl	8013a3c <tcp_oos_insert_segment>
                }
                break;
 8014880:	e139      	b.n	8014af6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014884:	2b00      	cmp	r3, #0
 8014886:	d117      	bne.n	80148b8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014888:	4b2e      	ldr	r3, [pc, #184]	; (8014944 <tcp_receive+0xd00>)
 801488a:	681a      	ldr	r2, [r3, #0]
 801488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801488e:	68db      	ldr	r3, [r3, #12]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	1ad3      	subs	r3, r2, r3
 8014894:	2b00      	cmp	r3, #0
 8014896:	da57      	bge.n	8014948 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014898:	4829      	ldr	r0, [pc, #164]	; (8014940 <tcp_receive+0xcfc>)
 801489a:	f7fd fb81 	bl	8011fa0 <tcp_seg_copy>
 801489e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80148a0:	69bb      	ldr	r3, [r7, #24]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	f000 8129 	beq.w	8014afa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	69ba      	ldr	r2, [r7, #24]
 80148ac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80148ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80148b0:	69b8      	ldr	r0, [r7, #24]
 80148b2:	f7ff f8c3 	bl	8013a3c <tcp_oos_insert_segment>
                  }
                  break;
 80148b6:	e120      	b.n	8014afa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80148b8:	4b22      	ldr	r3, [pc, #136]	; (8014944 <tcp_receive+0xd00>)
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	3b01      	subs	r3, #1
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	db3e      	blt.n	8014948 <tcp_receive+0xd04>
 80148ca:	4b1e      	ldr	r3, [pc, #120]	; (8014944 <tcp_receive+0xd00>)
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d0:	68db      	ldr	r3, [r3, #12]
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	1ad3      	subs	r3, r2, r3
 80148d6:	3301      	adds	r3, #1
 80148d8:	2b00      	cmp	r3, #0
 80148da:	dc35      	bgt.n	8014948 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80148dc:	4818      	ldr	r0, [pc, #96]	; (8014940 <tcp_receive+0xcfc>)
 80148de:	f7fd fb5f 	bl	8011fa0 <tcp_seg_copy>
 80148e2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80148e4:	69fb      	ldr	r3, [r7, #28]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	f000 8109 	beq.w	8014afe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80148ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148f4:	8912      	ldrh	r2, [r2, #8]
 80148f6:	441a      	add	r2, r3
 80148f8:	4b12      	ldr	r3, [pc, #72]	; (8014944 <tcp_receive+0xd00>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	1ad3      	subs	r3, r2, r3
 80148fe:	2b00      	cmp	r3, #0
 8014900:	dd12      	ble.n	8014928 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014902:	4b10      	ldr	r3, [pc, #64]	; (8014944 <tcp_receive+0xd00>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	b29a      	uxth	r2, r3
 8014908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801490a:	68db      	ldr	r3, [r3, #12]
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	b29b      	uxth	r3, r3
 8014910:	1ad3      	subs	r3, r2, r3
 8014912:	b29a      	uxth	r2, r3
 8014914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014916:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801491a:	685a      	ldr	r2, [r3, #4]
 801491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801491e:	891b      	ldrh	r3, [r3, #8]
 8014920:	4619      	mov	r1, r3
 8014922:	4610      	mov	r0, r2
 8014924:	f7fb fe28 	bl	8010578 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801492a:	69fa      	ldr	r2, [r7, #28]
 801492c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801492e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014930:	69f8      	ldr	r0, [r7, #28]
 8014932:	f7ff f883 	bl	8013a3c <tcp_oos_insert_segment>
                  }
                  break;
 8014936:	e0e2      	b.n	8014afe <tcp_receive+0xeba>
 8014938:	24004b4c 	.word	0x24004b4c
 801493c:	24004b49 	.word	0x24004b49
 8014940:	24004b1c 	.word	0x24004b1c
 8014944:	24004b3c 	.word	0x24004b3c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	f040 80c6 	bne.w	8014ae2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014956:	4b80      	ldr	r3, [pc, #512]	; (8014b58 <tcp_receive+0xf14>)
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495c:	68db      	ldr	r3, [r3, #12]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014962:	2b00      	cmp	r3, #0
 8014964:	f340 80bd 	ble.w	8014ae2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	899b      	ldrh	r3, [r3, #12]
 801496e:	b29b      	uxth	r3, r3
 8014970:	4618      	mov	r0, r3
 8014972:	f7f7 fff1 	bl	800c958 <lwip_htons>
 8014976:	4603      	mov	r3, r0
 8014978:	b2db      	uxtb	r3, r3
 801497a:	f003 0301 	and.w	r3, r3, #1
 801497e:	2b00      	cmp	r3, #0
 8014980:	f040 80bf 	bne.w	8014b02 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014984:	4875      	ldr	r0, [pc, #468]	; (8014b5c <tcp_receive+0xf18>)
 8014986:	f7fd fb0b 	bl	8011fa0 <tcp_seg_copy>
 801498a:	4602      	mov	r2, r0
 801498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801498e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 80b6 	beq.w	8014b06 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149a2:	8912      	ldrh	r2, [r2, #8]
 80149a4:	441a      	add	r2, r3
 80149a6:	4b6c      	ldr	r3, [pc, #432]	; (8014b58 <tcp_receive+0xf14>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	1ad3      	subs	r3, r2, r3
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	dd12      	ble.n	80149d6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80149b0:	4b69      	ldr	r3, [pc, #420]	; (8014b58 <tcp_receive+0xf14>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	b29a      	uxth	r2, r3
 80149b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	b29b      	uxth	r3, r3
 80149be:	1ad3      	subs	r3, r2, r3
 80149c0:	b29a      	uxth	r2, r3
 80149c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80149c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c8:	685a      	ldr	r2, [r3, #4]
 80149ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149cc:	891b      	ldrh	r3, [r3, #8]
 80149ce:	4619      	mov	r1, r3
 80149d0:	4610      	mov	r0, r2
 80149d2:	f7fb fdd1 	bl	8010578 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80149d6:	4b62      	ldr	r3, [pc, #392]	; (8014b60 <tcp_receive+0xf1c>)
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	461a      	mov	r2, r3
 80149dc:	4b5e      	ldr	r3, [pc, #376]	; (8014b58 <tcp_receive+0xf14>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	441a      	add	r2, r3
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e6:	6879      	ldr	r1, [r7, #4]
 80149e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80149ea:	440b      	add	r3, r1
 80149ec:	1ad3      	subs	r3, r2, r3
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	f340 8089 	ble.w	8014b06 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80149f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	68db      	ldr	r3, [r3, #12]
 80149fa:	899b      	ldrh	r3, [r3, #12]
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7f7 ffaa 	bl	800c958 <lwip_htons>
 8014a04:	4603      	mov	r3, r0
 8014a06:	b2db      	uxtb	r3, r3
 8014a08:	f003 0301 	and.w	r3, r3, #1
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d022      	beq.n	8014a56 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	899b      	ldrh	r3, [r3, #12]
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	b21b      	sxth	r3, r3
 8014a1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014a20:	b21c      	sxth	r4, r3
 8014a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	899b      	ldrh	r3, [r3, #12]
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7f7 ff93 	bl	800c958 <lwip_htons>
 8014a32:	4603      	mov	r3, r0
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7f7 ff8a 	bl	800c958 <lwip_htons>
 8014a44:	4603      	mov	r3, r0
 8014a46:	b21b      	sxth	r3, r3
 8014a48:	4323      	orrs	r3, r4
 8014a4a:	b21a      	sxth	r2, r3
 8014a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	68db      	ldr	r3, [r3, #12]
 8014a52:	b292      	uxth	r2, r2
 8014a54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a60:	4413      	add	r3, r2
 8014a62:	b299      	uxth	r1, r3
 8014a64:	4b3c      	ldr	r3, [pc, #240]	; (8014b58 <tcp_receive+0xf14>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	b29a      	uxth	r2, r3
 8014a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	1a8a      	subs	r2, r1, r2
 8014a70:	b292      	uxth	r2, r2
 8014a72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	685a      	ldr	r2, [r3, #4]
 8014a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	891b      	ldrh	r3, [r3, #8]
 8014a80:	4619      	mov	r1, r3
 8014a82:	4610      	mov	r0, r2
 8014a84:	f7fb fd78 	bl	8010578 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	891c      	ldrh	r4, [r3, #8]
 8014a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	899b      	ldrh	r3, [r3, #12]
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7f7 ff5d 	bl	800c958 <lwip_htons>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	b2db      	uxtb	r3, r3
 8014aa2:	f003 0303 	and.w	r3, r3, #3
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <tcp_receive+0xe6a>
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e000      	b.n	8014ab0 <tcp_receive+0xe6c>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	4423      	add	r3, r4
 8014ab2:	b29a      	uxth	r2, r3
 8014ab4:	4b2a      	ldr	r3, [pc, #168]	; (8014b60 <tcp_receive+0xf1c>)
 8014ab6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014ab8:	4b29      	ldr	r3, [pc, #164]	; (8014b60 <tcp_receive+0xf1c>)
 8014aba:	881b      	ldrh	r3, [r3, #0]
 8014abc:	461a      	mov	r2, r3
 8014abe:	4b26      	ldr	r3, [pc, #152]	; (8014b58 <tcp_receive+0xf14>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	441a      	add	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac8:	6879      	ldr	r1, [r7, #4]
 8014aca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014acc:	440b      	add	r3, r1
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d019      	beq.n	8014b06 <tcp_receive+0xec2>
 8014ad2:	4b24      	ldr	r3, [pc, #144]	; (8014b64 <tcp_receive+0xf20>)
 8014ad4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014ad8:	4923      	ldr	r1, [pc, #140]	; (8014b68 <tcp_receive+0xf24>)
 8014ada:	4824      	ldr	r0, [pc, #144]	; (8014b6c <tcp_receive+0xf28>)
 8014adc:	f002 fc4a 	bl	8017374 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014ae0:	e011      	b.n	8014b06 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8014ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	f47f aea4 	bne.w	8014838 <tcp_receive+0xbf4>
 8014af0:	e00a      	b.n	8014b08 <tcp_receive+0xec4>
                break;
 8014af2:	bf00      	nop
 8014af4:	e008      	b.n	8014b08 <tcp_receive+0xec4>
                break;
 8014af6:	bf00      	nop
 8014af8:	e006      	b.n	8014b08 <tcp_receive+0xec4>
                  break;
 8014afa:	bf00      	nop
 8014afc:	e004      	b.n	8014b08 <tcp_receive+0xec4>
                  break;
 8014afe:	bf00      	nop
 8014b00:	e002      	b.n	8014b08 <tcp_receive+0xec4>
                  break;
 8014b02:	bf00      	nop
 8014b04:	e000      	b.n	8014b08 <tcp_receive+0xec4>
                break;
 8014b06:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f001 fa43 	bl	8015f94 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014b0e:	e003      	b.n	8014b18 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f001 fa3f 	bl	8015f94 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b16:	e01a      	b.n	8014b4e <tcp_receive+0xf0a>
 8014b18:	e019      	b.n	8014b4e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014b1a:	4b0f      	ldr	r3, [pc, #60]	; (8014b58 <tcp_receive+0xf14>)
 8014b1c:	681a      	ldr	r2, [r3, #0]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b22:	1ad3      	subs	r3, r2, r3
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	db0a      	blt.n	8014b3e <tcp_receive+0xefa>
 8014b28:	4b0b      	ldr	r3, [pc, #44]	; (8014b58 <tcp_receive+0xf14>)
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b30:	6879      	ldr	r1, [r7, #4]
 8014b32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b34:	440b      	add	r3, r1
 8014b36:	1ad3      	subs	r3, r2, r3
 8014b38:	3301      	adds	r3, #1
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	dd07      	ble.n	8014b4e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8b5b      	ldrh	r3, [r3, #26]
 8014b42:	f043 0302 	orr.w	r3, r3, #2
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014b4c:	e7ff      	b.n	8014b4e <tcp_receive+0xf0a>
 8014b4e:	bf00      	nop
 8014b50:	3750      	adds	r7, #80	; 0x50
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bdb0      	pop	{r4, r5, r7, pc}
 8014b56:	bf00      	nop
 8014b58:	24004b3c 	.word	0x24004b3c
 8014b5c:	24004b1c 	.word	0x24004b1c
 8014b60:	24004b46 	.word	0x24004b46
 8014b64:	0801a0b8 	.word	0x0801a0b8
 8014b68:	0801a490 	.word	0x0801a490
 8014b6c:	0801a134 	.word	0x0801a134

08014b70 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b083      	sub	sp, #12
 8014b74:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014b76:	4b15      	ldr	r3, [pc, #84]	; (8014bcc <tcp_get_next_optbyte+0x5c>)
 8014b78:	881b      	ldrh	r3, [r3, #0]
 8014b7a:	1c5a      	adds	r2, r3, #1
 8014b7c:	b291      	uxth	r1, r2
 8014b7e:	4a13      	ldr	r2, [pc, #76]	; (8014bcc <tcp_get_next_optbyte+0x5c>)
 8014b80:	8011      	strh	r1, [r2, #0]
 8014b82:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014b84:	4b12      	ldr	r3, [pc, #72]	; (8014bd0 <tcp_get_next_optbyte+0x60>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d004      	beq.n	8014b96 <tcp_get_next_optbyte+0x26>
 8014b8c:	4b11      	ldr	r3, [pc, #68]	; (8014bd4 <tcp_get_next_optbyte+0x64>)
 8014b8e:	881b      	ldrh	r3, [r3, #0]
 8014b90:	88fa      	ldrh	r2, [r7, #6]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d208      	bcs.n	8014ba8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014b96:	4b10      	ldr	r3, [pc, #64]	; (8014bd8 <tcp_get_next_optbyte+0x68>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	3314      	adds	r3, #20
 8014b9c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014b9e:	88fb      	ldrh	r3, [r7, #6]
 8014ba0:	683a      	ldr	r2, [r7, #0]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	e00b      	b.n	8014bc0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014ba8:	88fb      	ldrh	r3, [r7, #6]
 8014baa:	b2da      	uxtb	r2, r3
 8014bac:	4b09      	ldr	r3, [pc, #36]	; (8014bd4 <tcp_get_next_optbyte+0x64>)
 8014bae:	881b      	ldrh	r3, [r3, #0]
 8014bb0:	b2db      	uxtb	r3, r3
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014bb6:	4b06      	ldr	r3, [pc, #24]	; (8014bd0 <tcp_get_next_optbyte+0x60>)
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	797b      	ldrb	r3, [r7, #5]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	370c      	adds	r7, #12
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bca:	4770      	bx	lr
 8014bcc:	24004b38 	.word	0x24004b38
 8014bd0:	24004b34 	.word	0x24004b34
 8014bd4:	24004b32 	.word	0x24004b32
 8014bd8:	24004b2c 	.word	0x24004b2c

08014bdc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d106      	bne.n	8014bf8 <tcp_parseopt+0x1c>
 8014bea:	4b31      	ldr	r3, [pc, #196]	; (8014cb0 <tcp_parseopt+0xd4>)
 8014bec:	f240 727d 	movw	r2, #1917	; 0x77d
 8014bf0:	4930      	ldr	r1, [pc, #192]	; (8014cb4 <tcp_parseopt+0xd8>)
 8014bf2:	4831      	ldr	r0, [pc, #196]	; (8014cb8 <tcp_parseopt+0xdc>)
 8014bf4:	f002 fbbe 	bl	8017374 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014bf8:	4b30      	ldr	r3, [pc, #192]	; (8014cbc <tcp_parseopt+0xe0>)
 8014bfa:	881b      	ldrh	r3, [r3, #0]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d053      	beq.n	8014ca8 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c00:	4b2f      	ldr	r3, [pc, #188]	; (8014cc0 <tcp_parseopt+0xe4>)
 8014c02:	2200      	movs	r2, #0
 8014c04:	801a      	strh	r2, [r3, #0]
 8014c06:	e043      	b.n	8014c90 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8014c08:	f7ff ffb2 	bl	8014b70 <tcp_get_next_optbyte>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014c10:	7bfb      	ldrb	r3, [r7, #15]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d03c      	beq.n	8014c90 <tcp_parseopt+0xb4>
 8014c16:	2b02      	cmp	r3, #2
 8014c18:	d002      	beq.n	8014c20 <tcp_parseopt+0x44>
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d03f      	beq.n	8014c9e <tcp_parseopt+0xc2>
 8014c1e:	e026      	b.n	8014c6e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014c20:	f7ff ffa6 	bl	8014b70 <tcp_get_next_optbyte>
 8014c24:	4603      	mov	r3, r0
 8014c26:	2b04      	cmp	r3, #4
 8014c28:	d13b      	bne.n	8014ca2 <tcp_parseopt+0xc6>
 8014c2a:	4b25      	ldr	r3, [pc, #148]	; (8014cc0 <tcp_parseopt+0xe4>)
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	3302      	adds	r3, #2
 8014c30:	4a22      	ldr	r2, [pc, #136]	; (8014cbc <tcp_parseopt+0xe0>)
 8014c32:	8812      	ldrh	r2, [r2, #0]
 8014c34:	4293      	cmp	r3, r2
 8014c36:	dc34      	bgt.n	8014ca2 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014c38:	f7ff ff9a 	bl	8014b70 <tcp_get_next_optbyte>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	021b      	lsls	r3, r3, #8
 8014c42:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014c44:	f7ff ff94 	bl	8014b70 <tcp_get_next_optbyte>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	89bb      	ldrh	r3, [r7, #12]
 8014c4e:	4313      	orrs	r3, r2
 8014c50:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014c52:	89bb      	ldrh	r3, [r7, #12]
 8014c54:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014c58:	d804      	bhi.n	8014c64 <tcp_parseopt+0x88>
 8014c5a:	89bb      	ldrh	r3, [r7, #12]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d001      	beq.n	8014c64 <tcp_parseopt+0x88>
 8014c60:	89ba      	ldrh	r2, [r7, #12]
 8014c62:	e001      	b.n	8014c68 <tcp_parseopt+0x8c>
 8014c64:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014c6c:	e010      	b.n	8014c90 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014c6e:	f7ff ff7f 	bl	8014b70 <tcp_get_next_optbyte>
 8014c72:	4603      	mov	r3, r0
 8014c74:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014c76:	7afb      	ldrb	r3, [r7, #11]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d914      	bls.n	8014ca6 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014c7c:	7afb      	ldrb	r3, [r7, #11]
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	4b0f      	ldr	r3, [pc, #60]	; (8014cc0 <tcp_parseopt+0xe4>)
 8014c82:	881b      	ldrh	r3, [r3, #0]
 8014c84:	4413      	add	r3, r2
 8014c86:	b29b      	uxth	r3, r3
 8014c88:	3b02      	subs	r3, #2
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	4b0c      	ldr	r3, [pc, #48]	; (8014cc0 <tcp_parseopt+0xe4>)
 8014c8e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c90:	4b0b      	ldr	r3, [pc, #44]	; (8014cc0 <tcp_parseopt+0xe4>)
 8014c92:	881a      	ldrh	r2, [r3, #0]
 8014c94:	4b09      	ldr	r3, [pc, #36]	; (8014cbc <tcp_parseopt+0xe0>)
 8014c96:	881b      	ldrh	r3, [r3, #0]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d3b5      	bcc.n	8014c08 <tcp_parseopt+0x2c>
 8014c9c:	e004      	b.n	8014ca8 <tcp_parseopt+0xcc>
          return;
 8014c9e:	bf00      	nop
 8014ca0:	e002      	b.n	8014ca8 <tcp_parseopt+0xcc>
            return;
 8014ca2:	bf00      	nop
 8014ca4:	e000      	b.n	8014ca8 <tcp_parseopt+0xcc>
            return;
 8014ca6:	bf00      	nop
      }
    }
  }
}
 8014ca8:	3710      	adds	r7, #16
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	0801a0b8 	.word	0x0801a0b8
 8014cb4:	0801a54c 	.word	0x0801a54c
 8014cb8:	0801a134 	.word	0x0801a134
 8014cbc:	24004b30 	.word	0x24004b30
 8014cc0:	24004b38 	.word	0x24004b38

08014cc4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014cc8:	4b05      	ldr	r3, [pc, #20]	; (8014ce0 <tcp_trigger_input_pcb_close+0x1c>)
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	f043 0310 	orr.w	r3, r3, #16
 8014cd0:	b2da      	uxtb	r2, r3
 8014cd2:	4b03      	ldr	r3, [pc, #12]	; (8014ce0 <tcp_trigger_input_pcb_close+0x1c>)
 8014cd4:	701a      	strb	r2, [r3, #0]
}
 8014cd6:	bf00      	nop
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cde:	4770      	bx	lr
 8014ce0:	24004b49 	.word	0x24004b49

08014ce4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	60f8      	str	r0, [r7, #12]
 8014cec:	60b9      	str	r1, [r7, #8]
 8014cee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d00a      	beq.n	8014d0c <tcp_route+0x28>
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	7a1b      	ldrb	r3, [r3, #8]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d006      	beq.n	8014d0c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	7a1b      	ldrb	r3, [r3, #8]
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7fb fa34 	bl	8010170 <netif_get_by_index>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	e003      	b.n	8014d14 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7f9 f8fb 	bl	800df08 <ip4_route>
 8014d12:	4603      	mov	r3, r0
  }
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}

08014d1c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014d1c:	b590      	push	{r4, r7, lr}
 8014d1e:	b087      	sub	sp, #28
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	60b9      	str	r1, [r7, #8]
 8014d26:	603b      	str	r3, [r7, #0]
 8014d28:	4613      	mov	r3, r2
 8014d2a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d105      	bne.n	8014d3e <tcp_create_segment+0x22>
 8014d32:	4b44      	ldr	r3, [pc, #272]	; (8014e44 <tcp_create_segment+0x128>)
 8014d34:	22a3      	movs	r2, #163	; 0xa3
 8014d36:	4944      	ldr	r1, [pc, #272]	; (8014e48 <tcp_create_segment+0x12c>)
 8014d38:	4844      	ldr	r0, [pc, #272]	; (8014e4c <tcp_create_segment+0x130>)
 8014d3a:	f002 fb1b 	bl	8017374 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d105      	bne.n	8014d50 <tcp_create_segment+0x34>
 8014d44:	4b3f      	ldr	r3, [pc, #252]	; (8014e44 <tcp_create_segment+0x128>)
 8014d46:	22a4      	movs	r2, #164	; 0xa4
 8014d48:	4941      	ldr	r1, [pc, #260]	; (8014e50 <tcp_create_segment+0x134>)
 8014d4a:	4840      	ldr	r0, [pc, #256]	; (8014e4c <tcp_create_segment+0x130>)
 8014d4c:	f002 fb12 	bl	8017374 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014d50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	f003 0304 	and.w	r3, r3, #4
 8014d5c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014d5e:	2003      	movs	r0, #3
 8014d60:	f7fa fe7a 	bl	800fa58 <memp_malloc>
 8014d64:	6138      	str	r0, [r7, #16]
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d104      	bne.n	8014d76 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014d6c:	68b8      	ldr	r0, [r7, #8]
 8014d6e:	f7fb fd89 	bl	8010884 <pbuf_free>
    return NULL;
 8014d72:	2300      	movs	r3, #0
 8014d74:	e061      	b.n	8014e3a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014d7c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	2200      	movs	r2, #0
 8014d82:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	68ba      	ldr	r2, [r7, #8]
 8014d88:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	891a      	ldrh	r2, [r3, #8]
 8014d8e:	7dfb      	ldrb	r3, [r7, #23]
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d205      	bcs.n	8014da2 <tcp_create_segment+0x86>
 8014d96:	4b2b      	ldr	r3, [pc, #172]	; (8014e44 <tcp_create_segment+0x128>)
 8014d98:	22b0      	movs	r2, #176	; 0xb0
 8014d9a:	492e      	ldr	r1, [pc, #184]	; (8014e54 <tcp_create_segment+0x138>)
 8014d9c:	482b      	ldr	r0, [pc, #172]	; (8014e4c <tcp_create_segment+0x130>)
 8014d9e:	f002 fae9 	bl	8017374 <iprintf>
  seg->len = p->tot_len - optlen;
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	891a      	ldrh	r2, [r3, #8]
 8014da6:	7dfb      	ldrb	r3, [r7, #23]
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	1ad3      	subs	r3, r2, r3
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014db2:	2114      	movs	r1, #20
 8014db4:	68b8      	ldr	r0, [r7, #8]
 8014db6:	f7fb fccf 	bl	8010758 <pbuf_add_header>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d004      	beq.n	8014dca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014dc0:	6938      	ldr	r0, [r7, #16]
 8014dc2:	f7fd f8d5 	bl	8011f70 <tcp_seg_free>
    return NULL;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	e037      	b.n	8014e3a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	685a      	ldr	r2, [r3, #4]
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	8ada      	ldrh	r2, [r3, #22]
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	68dc      	ldr	r4, [r3, #12]
 8014ddc:	4610      	mov	r0, r2
 8014dde:	f7f7 fdbb 	bl	800c958 <lwip_htons>
 8014de2:	4603      	mov	r3, r0
 8014de4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	8b1a      	ldrh	r2, [r3, #24]
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	68dc      	ldr	r4, [r3, #12]
 8014dee:	4610      	mov	r0, r2
 8014df0:	f7f7 fdb2 	bl	800c958 <lwip_htons>
 8014df4:	4603      	mov	r3, r0
 8014df6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	68dc      	ldr	r4, [r3, #12]
 8014dfc:	6838      	ldr	r0, [r7, #0]
 8014dfe:	f7f7 fdc0 	bl	800c982 <lwip_htonl>
 8014e02:	4603      	mov	r3, r0
 8014e04:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014e06:	7dfb      	ldrb	r3, [r7, #23]
 8014e08:	089b      	lsrs	r3, r3, #2
 8014e0a:	b2db      	uxtb	r3, r3
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	3305      	adds	r3, #5
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	031b      	lsls	r3, r3, #12
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	79fb      	ldrb	r3, [r7, #7]
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	68dc      	ldr	r4, [r3, #12]
 8014e22:	4610      	mov	r0, r2
 8014e24:	f7f7 fd98 	bl	800c958 <lwip_htons>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	2200      	movs	r2, #0
 8014e32:	749a      	strb	r2, [r3, #18]
 8014e34:	2200      	movs	r2, #0
 8014e36:	74da      	strb	r2, [r3, #19]
  return seg;
 8014e38:	693b      	ldr	r3, [r7, #16]
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	371c      	adds	r7, #28
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd90      	pop	{r4, r7, pc}
 8014e42:	bf00      	nop
 8014e44:	0801a568 	.word	0x0801a568
 8014e48:	0801a5d0 	.word	0x0801a5d0
 8014e4c:	0801a5f0 	.word	0x0801a5f0
 8014e50:	0801a618 	.word	0x0801a618
 8014e54:	0801a63c 	.word	0x0801a63c

08014e58 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014e58:	b590      	push	{r4, r7, lr}
 8014e5a:	b08b      	sub	sp, #44	; 0x2c
 8014e5c:	af02      	add	r7, sp, #8
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	460b      	mov	r3, r1
 8014e62:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014e64:	2300      	movs	r3, #0
 8014e66:	61fb      	str	r3, [r7, #28]
 8014e68:	2300      	movs	r3, #0
 8014e6a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d106      	bne.n	8014e84 <tcp_split_unsent_seg+0x2c>
 8014e76:	4b95      	ldr	r3, [pc, #596]	; (80150cc <tcp_split_unsent_seg+0x274>)
 8014e78:	f240 324b 	movw	r2, #843	; 0x34b
 8014e7c:	4994      	ldr	r1, [pc, #592]	; (80150d0 <tcp_split_unsent_seg+0x278>)
 8014e7e:	4895      	ldr	r0, [pc, #596]	; (80150d4 <tcp_split_unsent_seg+0x27c>)
 8014e80:	f002 fa78 	bl	8017374 <iprintf>

  useg = pcb->unsent;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e88:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d102      	bne.n	8014e96 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e94:	e116      	b.n	80150c4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014e96:	887b      	ldrh	r3, [r7, #2]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d109      	bne.n	8014eb0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014e9c:	4b8b      	ldr	r3, [pc, #556]	; (80150cc <tcp_split_unsent_seg+0x274>)
 8014e9e:	f240 3253 	movw	r2, #851	; 0x353
 8014ea2:	498d      	ldr	r1, [pc, #564]	; (80150d8 <tcp_split_unsent_seg+0x280>)
 8014ea4:	488b      	ldr	r0, [pc, #556]	; (80150d4 <tcp_split_unsent_seg+0x27c>)
 8014ea6:	f002 fa65 	bl	8017374 <iprintf>
    return ERR_VAL;
 8014eaa:	f06f 0305 	mvn.w	r3, #5
 8014eae:	e109      	b.n	80150c4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	891b      	ldrh	r3, [r3, #8]
 8014eb4:	887a      	ldrh	r2, [r7, #2]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d301      	bcc.n	8014ebe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	e102      	b.n	80150c4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ec2:	887a      	ldrh	r2, [r7, #2]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d906      	bls.n	8014ed6 <tcp_split_unsent_seg+0x7e>
 8014ec8:	4b80      	ldr	r3, [pc, #512]	; (80150cc <tcp_split_unsent_seg+0x274>)
 8014eca:	f240 325b 	movw	r2, #859	; 0x35b
 8014ece:	4983      	ldr	r1, [pc, #524]	; (80150dc <tcp_split_unsent_seg+0x284>)
 8014ed0:	4880      	ldr	r0, [pc, #512]	; (80150d4 <tcp_split_unsent_seg+0x27c>)
 8014ed2:	f002 fa4f 	bl	8017374 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	891b      	ldrh	r3, [r3, #8]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d106      	bne.n	8014eec <tcp_split_unsent_seg+0x94>
 8014ede:	4b7b      	ldr	r3, [pc, #492]	; (80150cc <tcp_split_unsent_seg+0x274>)
 8014ee0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014ee4:	497e      	ldr	r1, [pc, #504]	; (80150e0 <tcp_split_unsent_seg+0x288>)
 8014ee6:	487b      	ldr	r0, [pc, #492]	; (80150d4 <tcp_split_unsent_seg+0x27c>)
 8014ee8:	f002 fa44 	bl	8017374 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	7a9b      	ldrb	r3, [r3, #10]
 8014ef0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014ef2:	7bfb      	ldrb	r3, [r7, #15]
 8014ef4:	009b      	lsls	r3, r3, #2
 8014ef6:	b2db      	uxtb	r3, r3
 8014ef8:	f003 0304 	and.w	r3, r3, #4
 8014efc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	891a      	ldrh	r2, [r3, #8]
 8014f02:	887b      	ldrh	r3, [r7, #2]
 8014f04:	1ad3      	subs	r3, r2, r3
 8014f06:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014f08:	7bbb      	ldrb	r3, [r7, #14]
 8014f0a:	b29a      	uxth	r2, r3
 8014f0c:	89bb      	ldrh	r3, [r7, #12]
 8014f0e:	4413      	add	r3, r2
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f16:	4619      	mov	r1, r3
 8014f18:	2036      	movs	r0, #54	; 0x36
 8014f1a:	f7fb f9d3 	bl	80102c4 <pbuf_alloc>
 8014f1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	f000 80b7 	beq.w	8015096 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	685b      	ldr	r3, [r3, #4]
 8014f2c:	891a      	ldrh	r2, [r3, #8]
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	891b      	ldrh	r3, [r3, #8]
 8014f32:	1ad3      	subs	r3, r2, r3
 8014f34:	b29a      	uxth	r2, r3
 8014f36:	887b      	ldrh	r3, [r7, #2]
 8014f38:	4413      	add	r3, r2
 8014f3a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	6858      	ldr	r0, [r3, #4]
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	685a      	ldr	r2, [r3, #4]
 8014f44:	7bbb      	ldrb	r3, [r7, #14]
 8014f46:	18d1      	adds	r1, r2, r3
 8014f48:	897b      	ldrh	r3, [r7, #10]
 8014f4a:	89ba      	ldrh	r2, [r7, #12]
 8014f4c:	f7fb fea0 	bl	8010c90 <pbuf_copy_partial>
 8014f50:	4603      	mov	r3, r0
 8014f52:	461a      	mov	r2, r3
 8014f54:	89bb      	ldrh	r3, [r7, #12]
 8014f56:	4293      	cmp	r3, r2
 8014f58:	f040 809f 	bne.w	801509a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	68db      	ldr	r3, [r3, #12]
 8014f60:	899b      	ldrh	r3, [r3, #12]
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7f7 fcf7 	bl	800c958 <lwip_htons>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	b2db      	uxtb	r3, r3
 8014f6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f72:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014f74:	2300      	movs	r3, #0
 8014f76:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014f78:	7efb      	ldrb	r3, [r7, #27]
 8014f7a:	f003 0308 	and.w	r3, r3, #8
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d007      	beq.n	8014f92 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014f82:	7efb      	ldrb	r3, [r7, #27]
 8014f84:	f023 0308 	bic.w	r3, r3, #8
 8014f88:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014f8a:	7ebb      	ldrb	r3, [r7, #26]
 8014f8c:	f043 0308 	orr.w	r3, r3, #8
 8014f90:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014f92:	7efb      	ldrb	r3, [r7, #27]
 8014f94:	f003 0301 	and.w	r3, r3, #1
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d007      	beq.n	8014fac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014f9c:	7efb      	ldrb	r3, [r7, #27]
 8014f9e:	f023 0301 	bic.w	r3, r3, #1
 8014fa2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014fa4:	7ebb      	ldrb	r3, [r7, #26]
 8014fa6:	f043 0301 	orr.w	r3, r3, #1
 8014faa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	68db      	ldr	r3, [r3, #12]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7f7 fce5 	bl	800c982 <lwip_htonl>
 8014fb8:	4602      	mov	r2, r0
 8014fba:	887b      	ldrh	r3, [r7, #2]
 8014fbc:	18d1      	adds	r1, r2, r3
 8014fbe:	7eba      	ldrb	r2, [r7, #26]
 8014fc0:	7bfb      	ldrb	r3, [r7, #15]
 8014fc2:	9300      	str	r3, [sp, #0]
 8014fc4:	460b      	mov	r3, r1
 8014fc6:	6939      	ldr	r1, [r7, #16]
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f7ff fea7 	bl	8014d1c <tcp_create_segment>
 8014fce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d063      	beq.n	801509e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7fb fce0 	bl	80109a0 <pbuf_clen>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014fea:	1a9b      	subs	r3, r3, r2
 8014fec:	b29a      	uxth	r2, r3
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	6858      	ldr	r0, [r3, #4]
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	891a      	ldrh	r2, [r3, #8]
 8014ffe:	89bb      	ldrh	r3, [r7, #12]
 8015000:	1ad3      	subs	r3, r2, r3
 8015002:	b29b      	uxth	r3, r3
 8015004:	4619      	mov	r1, r3
 8015006:	f7fb fab7 	bl	8010578 <pbuf_realloc>
  useg->len -= remainder;
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	891a      	ldrh	r2, [r3, #8]
 801500e:	89bb      	ldrh	r3, [r7, #12]
 8015010:	1ad3      	subs	r3, r2, r3
 8015012:	b29a      	uxth	r2, r3
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	899b      	ldrh	r3, [r3, #12]
 801501e:	b29c      	uxth	r4, r3
 8015020:	7efb      	ldrb	r3, [r7, #27]
 8015022:	b29b      	uxth	r3, r3
 8015024:	4618      	mov	r0, r3
 8015026:	f7f7 fc97 	bl	800c958 <lwip_htons>
 801502a:	4603      	mov	r3, r0
 801502c:	461a      	mov	r2, r3
 801502e:	697b      	ldr	r3, [r7, #20]
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	4322      	orrs	r2, r4
 8015034:	b292      	uxth	r2, r2
 8015036:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	4618      	mov	r0, r3
 801503e:	f7fb fcaf 	bl	80109a0 <pbuf_clen>
 8015042:	4603      	mov	r3, r0
 8015044:	461a      	mov	r2, r3
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801504c:	4413      	add	r3, r2
 801504e:	b29a      	uxth	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015056:	69fb      	ldr	r3, [r7, #28]
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	4618      	mov	r0, r3
 801505c:	f7fb fca0 	bl	80109a0 <pbuf_clen>
 8015060:	4603      	mov	r3, r0
 8015062:	461a      	mov	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801506a:	4413      	add	r3, r2
 801506c:	b29a      	uxth	r2, r3
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	69fa      	ldr	r2, [r7, #28]
 8015080:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d103      	bne.n	8015092 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	2200      	movs	r2, #0
 801508e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015092:	2300      	movs	r3, #0
 8015094:	e016      	b.n	80150c4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015096:	bf00      	nop
 8015098:	e002      	b.n	80150a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801509a:	bf00      	nop
 801509c:	e000      	b.n	80150a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801509e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d006      	beq.n	80150b4 <tcp_split_unsent_seg+0x25c>
 80150a6:	4b09      	ldr	r3, [pc, #36]	; (80150cc <tcp_split_unsent_seg+0x274>)
 80150a8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80150ac:	490d      	ldr	r1, [pc, #52]	; (80150e4 <tcp_split_unsent_seg+0x28c>)
 80150ae:	4809      	ldr	r0, [pc, #36]	; (80150d4 <tcp_split_unsent_seg+0x27c>)
 80150b0:	f002 f960 	bl	8017374 <iprintf>
  if (p != NULL) {
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d002      	beq.n	80150c0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80150ba:	6938      	ldr	r0, [r7, #16]
 80150bc:	f7fb fbe2 	bl	8010884 <pbuf_free>
  }

  return ERR_MEM;
 80150c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3724      	adds	r7, #36	; 0x24
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd90      	pop	{r4, r7, pc}
 80150cc:	0801a568 	.word	0x0801a568
 80150d0:	0801a930 	.word	0x0801a930
 80150d4:	0801a5f0 	.word	0x0801a5f0
 80150d8:	0801a954 	.word	0x0801a954
 80150dc:	0801a978 	.word	0x0801a978
 80150e0:	0801a988 	.word	0x0801a988
 80150e4:	0801a998 	.word	0x0801a998

080150e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80150e8:	b590      	push	{r4, r7, lr}
 80150ea:	b085      	sub	sp, #20
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d106      	bne.n	8015104 <tcp_send_fin+0x1c>
 80150f6:	4b21      	ldr	r3, [pc, #132]	; (801517c <tcp_send_fin+0x94>)
 80150f8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80150fc:	4920      	ldr	r1, [pc, #128]	; (8015180 <tcp_send_fin+0x98>)
 80150fe:	4821      	ldr	r0, [pc, #132]	; (8015184 <tcp_send_fin+0x9c>)
 8015100:	f002 f938 	bl	8017374 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015108:	2b00      	cmp	r3, #0
 801510a:	d02e      	beq.n	801516a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015110:	60fb      	str	r3, [r7, #12]
 8015112:	e002      	b.n	801511a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d1f8      	bne.n	8015114 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	68db      	ldr	r3, [r3, #12]
 8015126:	899b      	ldrh	r3, [r3, #12]
 8015128:	b29b      	uxth	r3, r3
 801512a:	4618      	mov	r0, r3
 801512c:	f7f7 fc14 	bl	800c958 <lwip_htons>
 8015130:	4603      	mov	r3, r0
 8015132:	b2db      	uxtb	r3, r3
 8015134:	f003 0307 	and.w	r3, r3, #7
 8015138:	2b00      	cmp	r3, #0
 801513a:	d116      	bne.n	801516a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	899b      	ldrh	r3, [r3, #12]
 8015142:	b29c      	uxth	r4, r3
 8015144:	2001      	movs	r0, #1
 8015146:	f7f7 fc07 	bl	800c958 <lwip_htons>
 801514a:	4603      	mov	r3, r0
 801514c:	461a      	mov	r2, r3
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	4322      	orrs	r2, r4
 8015154:	b292      	uxth	r2, r2
 8015156:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	8b5b      	ldrh	r3, [r3, #26]
 801515c:	f043 0320 	orr.w	r3, r3, #32
 8015160:	b29a      	uxth	r2, r3
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015166:	2300      	movs	r3, #0
 8015168:	e004      	b.n	8015174 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801516a:	2101      	movs	r1, #1
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f000 f80b 	bl	8015188 <tcp_enqueue_flags>
 8015172:	4603      	mov	r3, r0
}
 8015174:	4618      	mov	r0, r3
 8015176:	3714      	adds	r7, #20
 8015178:	46bd      	mov	sp, r7
 801517a:	bd90      	pop	{r4, r7, pc}
 801517c:	0801a568 	.word	0x0801a568
 8015180:	0801a9a4 	.word	0x0801a9a4
 8015184:	0801a5f0 	.word	0x0801a5f0

08015188 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b08a      	sub	sp, #40	; 0x28
 801518c:	af02      	add	r7, sp, #8
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	460b      	mov	r3, r1
 8015192:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015194:	2300      	movs	r3, #0
 8015196:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015198:	2300      	movs	r3, #0
 801519a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801519c:	78fb      	ldrb	r3, [r7, #3]
 801519e:	f003 0303 	and.w	r3, r3, #3
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d106      	bne.n	80151b4 <tcp_enqueue_flags+0x2c>
 80151a6:	4b67      	ldr	r3, [pc, #412]	; (8015344 <tcp_enqueue_flags+0x1bc>)
 80151a8:	f240 4212 	movw	r2, #1042	; 0x412
 80151ac:	4966      	ldr	r1, [pc, #408]	; (8015348 <tcp_enqueue_flags+0x1c0>)
 80151ae:	4867      	ldr	r0, [pc, #412]	; (801534c <tcp_enqueue_flags+0x1c4>)
 80151b0:	f002 f8e0 	bl	8017374 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d106      	bne.n	80151c8 <tcp_enqueue_flags+0x40>
 80151ba:	4b62      	ldr	r3, [pc, #392]	; (8015344 <tcp_enqueue_flags+0x1bc>)
 80151bc:	f240 4213 	movw	r2, #1043	; 0x413
 80151c0:	4963      	ldr	r1, [pc, #396]	; (8015350 <tcp_enqueue_flags+0x1c8>)
 80151c2:	4862      	ldr	r0, [pc, #392]	; (801534c <tcp_enqueue_flags+0x1c4>)
 80151c4:	f002 f8d6 	bl	8017374 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80151c8:	78fb      	ldrb	r3, [r7, #3]
 80151ca:	f003 0302 	and.w	r3, r3, #2
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d001      	beq.n	80151d6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80151d2:	2301      	movs	r3, #1
 80151d4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80151d6:	7ffb      	ldrb	r3, [r7, #31]
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	f003 0304 	and.w	r3, r3, #4
 80151e0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80151e2:	7dfb      	ldrb	r3, [r7, #23]
 80151e4:	b29b      	uxth	r3, r3
 80151e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151ea:	4619      	mov	r1, r3
 80151ec:	2036      	movs	r0, #54	; 0x36
 80151ee:	f7fb f869 	bl	80102c4 <pbuf_alloc>
 80151f2:	6138      	str	r0, [r7, #16]
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d109      	bne.n	801520e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	8b5b      	ldrh	r3, [r3, #26]
 80151fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015202:	b29a      	uxth	r2, r3
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801520c:	e095      	b.n	801533a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	895a      	ldrh	r2, [r3, #10]
 8015212:	7dfb      	ldrb	r3, [r7, #23]
 8015214:	b29b      	uxth	r3, r3
 8015216:	429a      	cmp	r2, r3
 8015218:	d206      	bcs.n	8015228 <tcp_enqueue_flags+0xa0>
 801521a:	4b4a      	ldr	r3, [pc, #296]	; (8015344 <tcp_enqueue_flags+0x1bc>)
 801521c:	f240 423a 	movw	r2, #1082	; 0x43a
 8015220:	494c      	ldr	r1, [pc, #304]	; (8015354 <tcp_enqueue_flags+0x1cc>)
 8015222:	484a      	ldr	r0, [pc, #296]	; (801534c <tcp_enqueue_flags+0x1c4>)
 8015224:	f002 f8a6 	bl	8017374 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801522c:	78fa      	ldrb	r2, [r7, #3]
 801522e:	7ffb      	ldrb	r3, [r7, #31]
 8015230:	9300      	str	r3, [sp, #0]
 8015232:	460b      	mov	r3, r1
 8015234:	6939      	ldr	r1, [r7, #16]
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f7ff fd70 	bl	8014d1c <tcp_create_segment>
 801523c:	60f8      	str	r0, [r7, #12]
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d109      	bne.n	8015258 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	8b5b      	ldrh	r3, [r3, #26]
 8015248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801524c:	b29a      	uxth	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015256:	e070      	b.n	801533a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	68db      	ldr	r3, [r3, #12]
 801525c:	f003 0303 	and.w	r3, r3, #3
 8015260:	2b00      	cmp	r3, #0
 8015262:	d006      	beq.n	8015272 <tcp_enqueue_flags+0xea>
 8015264:	4b37      	ldr	r3, [pc, #220]	; (8015344 <tcp_enqueue_flags+0x1bc>)
 8015266:	f240 4242 	movw	r2, #1090	; 0x442
 801526a:	493b      	ldr	r1, [pc, #236]	; (8015358 <tcp_enqueue_flags+0x1d0>)
 801526c:	4837      	ldr	r0, [pc, #220]	; (801534c <tcp_enqueue_flags+0x1c4>)
 801526e:	f002 f881 	bl	8017374 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	891b      	ldrh	r3, [r3, #8]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d006      	beq.n	8015288 <tcp_enqueue_flags+0x100>
 801527a:	4b32      	ldr	r3, [pc, #200]	; (8015344 <tcp_enqueue_flags+0x1bc>)
 801527c:	f240 4243 	movw	r2, #1091	; 0x443
 8015280:	4936      	ldr	r1, [pc, #216]	; (801535c <tcp_enqueue_flags+0x1d4>)
 8015282:	4832      	ldr	r0, [pc, #200]	; (801534c <tcp_enqueue_flags+0x1c4>)
 8015284:	f002 f876 	bl	8017374 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801528c:	2b00      	cmp	r3, #0
 801528e:	d103      	bne.n	8015298 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	68fa      	ldr	r2, [r7, #12]
 8015294:	66da      	str	r2, [r3, #108]	; 0x6c
 8015296:	e00d      	b.n	80152b4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801529c:	61bb      	str	r3, [r7, #24]
 801529e:	e002      	b.n	80152a6 <tcp_enqueue_flags+0x11e>
 80152a0:	69bb      	ldr	r3, [r7, #24]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	61bb      	str	r3, [r7, #24]
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d1f8      	bne.n	80152a0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	68fa      	ldr	r2, [r7, #12]
 80152b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80152bc:	78fb      	ldrb	r3, [r7, #3]
 80152be:	f003 0302 	and.w	r3, r3, #2
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d104      	bne.n	80152d0 <tcp_enqueue_flags+0x148>
 80152c6:	78fb      	ldrb	r3, [r7, #3]
 80152c8:	f003 0301 	and.w	r3, r3, #1
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d004      	beq.n	80152da <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152d4:	1c5a      	adds	r2, r3, #1
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80152da:	78fb      	ldrb	r3, [r7, #3]
 80152dc:	f003 0301 	and.w	r3, r3, #1
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d006      	beq.n	80152f2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	8b5b      	ldrh	r3, [r3, #26]
 80152e8:	f043 0320 	orr.w	r3, r3, #32
 80152ec:	b29a      	uxth	r2, r3
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7fb fb52 	bl	80109a0 <pbuf_clen>
 80152fc:	4603      	mov	r3, r0
 80152fe:	461a      	mov	r2, r3
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015306:	4413      	add	r3, r2
 8015308:	b29a      	uxth	r2, r3
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015316:	2b00      	cmp	r3, #0
 8015318:	d00e      	beq.n	8015338 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801531e:	2b00      	cmp	r3, #0
 8015320:	d10a      	bne.n	8015338 <tcp_enqueue_flags+0x1b0>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015326:	2b00      	cmp	r3, #0
 8015328:	d106      	bne.n	8015338 <tcp_enqueue_flags+0x1b0>
 801532a:	4b06      	ldr	r3, [pc, #24]	; (8015344 <tcp_enqueue_flags+0x1bc>)
 801532c:	f240 4266 	movw	r2, #1126	; 0x466
 8015330:	490b      	ldr	r1, [pc, #44]	; (8015360 <tcp_enqueue_flags+0x1d8>)
 8015332:	4806      	ldr	r0, [pc, #24]	; (801534c <tcp_enqueue_flags+0x1c4>)
 8015334:	f002 f81e 	bl	8017374 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015338:	2300      	movs	r3, #0
}
 801533a:	4618      	mov	r0, r3
 801533c:	3720      	adds	r7, #32
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}
 8015342:	bf00      	nop
 8015344:	0801a568 	.word	0x0801a568
 8015348:	0801a9c0 	.word	0x0801a9c0
 801534c:	0801a5f0 	.word	0x0801a5f0
 8015350:	0801aa18 	.word	0x0801aa18
 8015354:	0801aa38 	.word	0x0801aa38
 8015358:	0801aa74 	.word	0x0801aa74
 801535c:	0801aa8c 	.word	0x0801aa8c
 8015360:	0801aab8 	.word	0x0801aab8

08015364 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015364:	b5b0      	push	{r4, r5, r7, lr}
 8015366:	b08a      	sub	sp, #40	; 0x28
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d106      	bne.n	8015380 <tcp_output+0x1c>
 8015372:	4ba0      	ldr	r3, [pc, #640]	; (80155f4 <tcp_output+0x290>)
 8015374:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015378:	499f      	ldr	r1, [pc, #636]	; (80155f8 <tcp_output+0x294>)
 801537a:	48a0      	ldr	r0, [pc, #640]	; (80155fc <tcp_output+0x298>)
 801537c:	f001 fffa 	bl	8017374 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	7d1b      	ldrb	r3, [r3, #20]
 8015384:	2b01      	cmp	r3, #1
 8015386:	d106      	bne.n	8015396 <tcp_output+0x32>
 8015388:	4b9a      	ldr	r3, [pc, #616]	; (80155f4 <tcp_output+0x290>)
 801538a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801538e:	499c      	ldr	r1, [pc, #624]	; (8015600 <tcp_output+0x29c>)
 8015390:	489a      	ldr	r0, [pc, #616]	; (80155fc <tcp_output+0x298>)
 8015392:	f001 ffef 	bl	8017374 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015396:	4b9b      	ldr	r3, [pc, #620]	; (8015604 <tcp_output+0x2a0>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	429a      	cmp	r2, r3
 801539e:	d101      	bne.n	80153a4 <tcp_output+0x40>
    return ERR_OK;
 80153a0:	2300      	movs	r3, #0
 80153a2:	e1d2      	b.n	801574a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d203      	bcs.n	80153bc <tcp_output+0x58>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153ba:	e002      	b.n	80153c2 <tcp_output+0x5e>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153c2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153c8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80153ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d10b      	bne.n	80153e8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	8b5b      	ldrh	r3, [r3, #26]
 80153d4:	f003 0302 	and.w	r3, r3, #2
 80153d8:	2b00      	cmp	r3, #0
 80153da:	f000 81a9 	beq.w	8015730 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f000 fdd8 	bl	8015f94 <tcp_send_empty_ack>
 80153e4:	4603      	mov	r3, r0
 80153e6:	e1b0      	b.n	801574a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80153e8:	6879      	ldr	r1, [r7, #4]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	3304      	adds	r3, #4
 80153ee:	461a      	mov	r2, r3
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f7ff fc77 	bl	8014ce4 <tcp_route>
 80153f6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d102      	bne.n	8015404 <tcp_output+0xa0>
    return ERR_RTE;
 80153fe:	f06f 0303 	mvn.w	r3, #3
 8015402:	e1a2      	b.n	801574a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d003      	beq.n	8015412 <tcp_output+0xae>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d111      	bne.n	8015436 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d002      	beq.n	801541e <tcp_output+0xba>
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	3304      	adds	r3, #4
 801541c:	e000      	b.n	8015420 <tcp_output+0xbc>
 801541e:	2300      	movs	r3, #0
 8015420:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d102      	bne.n	801542e <tcp_output+0xca>
      return ERR_RTE;
 8015428:	f06f 0303 	mvn.w	r3, #3
 801542c:	e18d      	b.n	801574a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015438:	68db      	ldr	r3, [r3, #12]
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	4618      	mov	r0, r3
 801543e:	f7f7 faa0 	bl	800c982 <lwip_htonl>
 8015442:	4602      	mov	r2, r0
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801544c:	8912      	ldrh	r2, [r2, #8]
 801544e:	4413      	add	r3, r2
 8015450:	69ba      	ldr	r2, [r7, #24]
 8015452:	429a      	cmp	r2, r3
 8015454:	d227      	bcs.n	80154a6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801545c:	461a      	mov	r2, r3
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	4293      	cmp	r3, r2
 8015462:	d114      	bne.n	801548e <tcp_output+0x12a>
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015468:	2b00      	cmp	r3, #0
 801546a:	d110      	bne.n	801548e <tcp_output+0x12a>
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015472:	2b00      	cmp	r3, #0
 8015474:	d10b      	bne.n	801548e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2200      	movs	r2, #0
 801547a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2201      	movs	r2, #1
 8015482:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2200      	movs	r2, #0
 801548a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	8b5b      	ldrh	r3, [r3, #26]
 8015492:	f003 0302 	and.w	r3, r3, #2
 8015496:	2b00      	cmp	r3, #0
 8015498:	f000 814c 	beq.w	8015734 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f000 fd79 	bl	8015f94 <tcp_send_empty_ack>
 80154a2:	4603      	mov	r3, r0
 80154a4:	e151      	b.n	801574a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2200      	movs	r2, #0
 80154aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154b2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80154b4:	6a3b      	ldr	r3, [r7, #32]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	f000 811b 	beq.w	80156f2 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 80154bc:	e002      	b.n	80154c4 <tcp_output+0x160>
 80154be:	6a3b      	ldr	r3, [r7, #32]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	623b      	str	r3, [r7, #32]
 80154c4:	6a3b      	ldr	r3, [r7, #32]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d1f8      	bne.n	80154be <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80154cc:	e111      	b.n	80156f2 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80154ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d0:	68db      	ldr	r3, [r3, #12]
 80154d2:	899b      	ldrh	r3, [r3, #12]
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7f7 fa3e 	bl	800c958 <lwip_htons>
 80154dc:	4603      	mov	r3, r0
 80154de:	b2db      	uxtb	r3, r3
 80154e0:	f003 0304 	and.w	r3, r3, #4
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d006      	beq.n	80154f6 <tcp_output+0x192>
 80154e8:	4b42      	ldr	r3, [pc, #264]	; (80155f4 <tcp_output+0x290>)
 80154ea:	f240 5237 	movw	r2, #1335	; 0x537
 80154ee:	4946      	ldr	r1, [pc, #280]	; (8015608 <tcp_output+0x2a4>)
 80154f0:	4842      	ldr	r0, [pc, #264]	; (80155fc <tcp_output+0x298>)
 80154f2:	f001 ff3f 	bl	8017374 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d01f      	beq.n	801553e <tcp_output+0x1da>
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	8b5b      	ldrh	r3, [r3, #26]
 8015502:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015506:	2b00      	cmp	r3, #0
 8015508:	d119      	bne.n	801553e <tcp_output+0x1da>
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801550e:	2b00      	cmp	r3, #0
 8015510:	d00b      	beq.n	801552a <tcp_output+0x1c6>
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d110      	bne.n	801553e <tcp_output+0x1da>
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015520:	891a      	ldrh	r2, [r3, #8]
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015526:	429a      	cmp	r2, r3
 8015528:	d209      	bcs.n	801553e <tcp_output+0x1da>
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015530:	2b00      	cmp	r3, #0
 8015532:	d004      	beq.n	801553e <tcp_output+0x1da>
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801553a:	2b08      	cmp	r3, #8
 801553c:	d901      	bls.n	8015542 <tcp_output+0x1de>
 801553e:	2301      	movs	r3, #1
 8015540:	e000      	b.n	8015544 <tcp_output+0x1e0>
 8015542:	2300      	movs	r3, #0
 8015544:	2b00      	cmp	r3, #0
 8015546:	d106      	bne.n	8015556 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	8b5b      	ldrh	r3, [r3, #26]
 801554c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015550:	2b00      	cmp	r3, #0
 8015552:	f000 80e3 	beq.w	801571c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	7d1b      	ldrb	r3, [r3, #20]
 801555a:	2b02      	cmp	r3, #2
 801555c:	d00d      	beq.n	801557a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015560:	68db      	ldr	r3, [r3, #12]
 8015562:	899b      	ldrh	r3, [r3, #12]
 8015564:	b29c      	uxth	r4, r3
 8015566:	2010      	movs	r0, #16
 8015568:	f7f7 f9f6 	bl	800c958 <lwip_htons>
 801556c:	4603      	mov	r3, r0
 801556e:	461a      	mov	r2, r3
 8015570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015572:	68db      	ldr	r3, [r3, #12]
 8015574:	4322      	orrs	r2, r4
 8015576:	b292      	uxth	r2, r2
 8015578:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801557a:	697a      	ldr	r2, [r7, #20]
 801557c:	6879      	ldr	r1, [r7, #4]
 801557e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015580:	f000 f908 	bl	8015794 <tcp_output_segment>
 8015584:	4603      	mov	r3, r0
 8015586:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d009      	beq.n	80155a4 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	8b5b      	ldrh	r3, [r3, #26]
 8015594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015598:	b29a      	uxth	r2, r3
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	835a      	strh	r2, [r3, #26]
      return err;
 801559e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155a2:	e0d2      	b.n	801574a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80155a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a6:	681a      	ldr	r2, [r3, #0]
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	7d1b      	ldrb	r3, [r3, #20]
 80155b0:	2b02      	cmp	r3, #2
 80155b2:	d006      	beq.n	80155c2 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	8b5b      	ldrh	r3, [r3, #26]
 80155b8:	f023 0303 	bic.w	r3, r3, #3
 80155bc:	b29a      	uxth	r2, r3
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80155c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	685b      	ldr	r3, [r3, #4]
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7f7 f9da 	bl	800c982 <lwip_htonl>
 80155ce:	4604      	mov	r4, r0
 80155d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155d2:	891b      	ldrh	r3, [r3, #8]
 80155d4:	461d      	mov	r5, r3
 80155d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155d8:	68db      	ldr	r3, [r3, #12]
 80155da:	899b      	ldrh	r3, [r3, #12]
 80155dc:	b29b      	uxth	r3, r3
 80155de:	4618      	mov	r0, r3
 80155e0:	f7f7 f9ba 	bl	800c958 <lwip_htons>
 80155e4:	4603      	mov	r3, r0
 80155e6:	b2db      	uxtb	r3, r3
 80155e8:	f003 0303 	and.w	r3, r3, #3
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d00d      	beq.n	801560c <tcp_output+0x2a8>
 80155f0:	2301      	movs	r3, #1
 80155f2:	e00c      	b.n	801560e <tcp_output+0x2aa>
 80155f4:	0801a568 	.word	0x0801a568
 80155f8:	0801aae0 	.word	0x0801aae0
 80155fc:	0801a5f0 	.word	0x0801a5f0
 8015600:	0801aaf8 	.word	0x0801aaf8
 8015604:	24008378 	.word	0x24008378
 8015608:	0801ab20 	.word	0x0801ab20
 801560c:	2300      	movs	r3, #0
 801560e:	442b      	add	r3, r5
 8015610:	4423      	add	r3, r4
 8015612:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	1ad3      	subs	r3, r2, r3
 801561c:	2b00      	cmp	r3, #0
 801561e:	da02      	bge.n	8015626 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	68ba      	ldr	r2, [r7, #8]
 8015624:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015628:	891b      	ldrh	r3, [r3, #8]
 801562a:	461c      	mov	r4, r3
 801562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	899b      	ldrh	r3, [r3, #12]
 8015632:	b29b      	uxth	r3, r3
 8015634:	4618      	mov	r0, r3
 8015636:	f7f7 f98f 	bl	800c958 <lwip_htons>
 801563a:	4603      	mov	r3, r0
 801563c:	b2db      	uxtb	r3, r3
 801563e:	f003 0303 	and.w	r3, r3, #3
 8015642:	2b00      	cmp	r3, #0
 8015644:	d001      	beq.n	801564a <tcp_output+0x2e6>
 8015646:	2301      	movs	r3, #1
 8015648:	e000      	b.n	801564c <tcp_output+0x2e8>
 801564a:	2300      	movs	r3, #0
 801564c:	4423      	add	r3, r4
 801564e:	2b00      	cmp	r3, #0
 8015650:	d049      	beq.n	80156e6 <tcp_output+0x382>
      seg->next = NULL;
 8015652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015654:	2200      	movs	r2, #0
 8015656:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801565c:	2b00      	cmp	r3, #0
 801565e:	d105      	bne.n	801566c <tcp_output+0x308>
        pcb->unacked = seg;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015664:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015668:	623b      	str	r3, [r7, #32]
 801566a:	e03f      	b.n	80156ec <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f7f7 f985 	bl	800c982 <lwip_htonl>
 8015678:	4604      	mov	r4, r0
 801567a:	6a3b      	ldr	r3, [r7, #32]
 801567c:	68db      	ldr	r3, [r3, #12]
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	4618      	mov	r0, r3
 8015682:	f7f7 f97e 	bl	800c982 <lwip_htonl>
 8015686:	4603      	mov	r3, r0
 8015688:	1ae3      	subs	r3, r4, r3
 801568a:	2b00      	cmp	r3, #0
 801568c:	da24      	bge.n	80156d8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	3370      	adds	r3, #112	; 0x70
 8015692:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015694:	e002      	b.n	801569c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d011      	beq.n	80156c8 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80156a4:	69fb      	ldr	r3, [r7, #28]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	68db      	ldr	r3, [r3, #12]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7f7 f968 	bl	800c982 <lwip_htonl>
 80156b2:	4604      	mov	r4, r0
 80156b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7f7 f961 	bl	800c982 <lwip_htonl>
 80156c0:	4603      	mov	r3, r0
 80156c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	dbe6      	blt.n	8015696 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	681a      	ldr	r2, [r3, #0]
 80156cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156d4:	601a      	str	r2, [r3, #0]
 80156d6:	e009      	b.n	80156ec <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80156d8:	6a3b      	ldr	r3, [r7, #32]
 80156da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80156de:	6a3b      	ldr	r3, [r7, #32]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	623b      	str	r3, [r7, #32]
 80156e4:	e002      	b.n	80156ec <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80156e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156e8:	f7fc fc42 	bl	8011f70 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80156f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d012      	beq.n	801571e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80156f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fa:	68db      	ldr	r3, [r3, #12]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	4618      	mov	r0, r3
 8015700:	f7f7 f93f 	bl	800c982 <lwip_htonl>
 8015704:	4602      	mov	r2, r0
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801570a:	1ad3      	subs	r3, r2, r3
 801570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801570e:	8912      	ldrh	r2, [r2, #8]
 8015710:	4413      	add	r3, r2
  while (seg != NULL &&
 8015712:	69ba      	ldr	r2, [r7, #24]
 8015714:	429a      	cmp	r2, r3
 8015716:	f4bf aeda 	bcs.w	80154ce <tcp_output+0x16a>
 801571a:	e000      	b.n	801571e <tcp_output+0x3ba>
      break;
 801571c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015722:	2b00      	cmp	r3, #0
 8015724:	d108      	bne.n	8015738 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2200      	movs	r2, #0
 801572a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801572e:	e004      	b.n	801573a <tcp_output+0x3d6>
    goto output_done;
 8015730:	bf00      	nop
 8015732:	e002      	b.n	801573a <tcp_output+0x3d6>
    goto output_done;
 8015734:	bf00      	nop
 8015736:	e000      	b.n	801573a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015738:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	8b5b      	ldrh	r3, [r3, #26]
 801573e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015742:	b29a      	uxth	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015748:	2300      	movs	r3, #0
}
 801574a:	4618      	mov	r0, r3
 801574c:	3728      	adds	r7, #40	; 0x28
 801574e:	46bd      	mov	sp, r7
 8015750:	bdb0      	pop	{r4, r5, r7, pc}
 8015752:	bf00      	nop

08015754 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d106      	bne.n	8015770 <tcp_output_segment_busy+0x1c>
 8015762:	4b09      	ldr	r3, [pc, #36]	; (8015788 <tcp_output_segment_busy+0x34>)
 8015764:	f240 529a 	movw	r2, #1434	; 0x59a
 8015768:	4908      	ldr	r1, [pc, #32]	; (801578c <tcp_output_segment_busy+0x38>)
 801576a:	4809      	ldr	r0, [pc, #36]	; (8015790 <tcp_output_segment_busy+0x3c>)
 801576c:	f001 fe02 	bl	8017374 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	7b9b      	ldrb	r3, [r3, #14]
 8015776:	2b01      	cmp	r3, #1
 8015778:	d001      	beq.n	801577e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801577a:	2301      	movs	r3, #1
 801577c:	e000      	b.n	8015780 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801577e:	2300      	movs	r3, #0
}
 8015780:	4618      	mov	r0, r3
 8015782:	3708      	adds	r7, #8
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	0801a568 	.word	0x0801a568
 801578c:	0801ab38 	.word	0x0801ab38
 8015790:	0801a5f0 	.word	0x0801a5f0

08015794 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015794:	b5b0      	push	{r4, r5, r7, lr}
 8015796:	b08c      	sub	sp, #48	; 0x30
 8015798:	af04      	add	r7, sp, #16
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	60b9      	str	r1, [r7, #8]
 801579e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d106      	bne.n	80157b4 <tcp_output_segment+0x20>
 80157a6:	4b64      	ldr	r3, [pc, #400]	; (8015938 <tcp_output_segment+0x1a4>)
 80157a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80157ac:	4963      	ldr	r1, [pc, #396]	; (801593c <tcp_output_segment+0x1a8>)
 80157ae:	4864      	ldr	r0, [pc, #400]	; (8015940 <tcp_output_segment+0x1ac>)
 80157b0:	f001 fde0 	bl	8017374 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d106      	bne.n	80157c8 <tcp_output_segment+0x34>
 80157ba:	4b5f      	ldr	r3, [pc, #380]	; (8015938 <tcp_output_segment+0x1a4>)
 80157bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80157c0:	4960      	ldr	r1, [pc, #384]	; (8015944 <tcp_output_segment+0x1b0>)
 80157c2:	485f      	ldr	r0, [pc, #380]	; (8015940 <tcp_output_segment+0x1ac>)
 80157c4:	f001 fdd6 	bl	8017374 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d106      	bne.n	80157dc <tcp_output_segment+0x48>
 80157ce:	4b5a      	ldr	r3, [pc, #360]	; (8015938 <tcp_output_segment+0x1a4>)
 80157d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80157d4:	495c      	ldr	r1, [pc, #368]	; (8015948 <tcp_output_segment+0x1b4>)
 80157d6:	485a      	ldr	r0, [pc, #360]	; (8015940 <tcp_output_segment+0x1ac>)
 80157d8:	f001 fdcc 	bl	8017374 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80157dc:	68f8      	ldr	r0, [r7, #12]
 80157de:	f7ff ffb9 	bl	8015754 <tcp_output_segment_busy>
 80157e2:	4603      	mov	r3, r0
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d001      	beq.n	80157ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80157e8:	2300      	movs	r3, #0
 80157ea:	e0a0      	b.n	801592e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	68dc      	ldr	r4, [r3, #12]
 80157f4:	4610      	mov	r0, r2
 80157f6:	f7f7 f8c4 	bl	800c982 <lwip_htonl>
 80157fa:	4603      	mov	r3, r0
 80157fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	68dc      	ldr	r4, [r3, #12]
 8015806:	4610      	mov	r0, r2
 8015808:	f7f7 f8a6 	bl	800c958 <lwip_htons>
 801580c:	4603      	mov	r3, r0
 801580e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015814:	68ba      	ldr	r2, [r7, #8]
 8015816:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015818:	441a      	add	r2, r3
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	68db      	ldr	r3, [r3, #12]
 8015822:	3314      	adds	r3, #20
 8015824:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	7a9b      	ldrb	r3, [r3, #10]
 801582a:	f003 0301 	and.w	r3, r3, #1
 801582e:	2b00      	cmp	r3, #0
 8015830:	d015      	beq.n	801585e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	3304      	adds	r3, #4
 8015836:	461a      	mov	r2, r3
 8015838:	6879      	ldr	r1, [r7, #4]
 801583a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801583e:	f7fc fe8d 	bl	801255c <tcp_eff_send_mss_netif>
 8015842:	4603      	mov	r3, r0
 8015844:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015846:	8b7b      	ldrh	r3, [r7, #26]
 8015848:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801584c:	4618      	mov	r0, r3
 801584e:	f7f7 f898 	bl	800c982 <lwip_htonl>
 8015852:	4602      	mov	r2, r0
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	3304      	adds	r3, #4
 801585c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015864:	2b00      	cmp	r3, #0
 8015866:	da02      	bge.n	801586e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	2200      	movs	r2, #0
 801586c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015872:	2b00      	cmp	r3, #0
 8015874:	d10c      	bne.n	8015890 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015876:	4b35      	ldr	r3, [pc, #212]	; (801594c <tcp_output_segment+0x1b8>)
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	68db      	ldr	r3, [r3, #12]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	4618      	mov	r0, r3
 8015886:	f7f7 f87c 	bl	800c982 <lwip_htonl>
 801588a:	4602      	mov	r2, r0
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	68db      	ldr	r3, [r3, #12]
 8015894:	461a      	mov	r2, r3
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	685b      	ldr	r3, [r3, #4]
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	8959      	ldrh	r1, [r3, #10]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	8b3a      	ldrh	r2, [r7, #24]
 80158ac:	1a8a      	subs	r2, r1, r2
 80158ae:	b292      	uxth	r2, r2
 80158b0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	8919      	ldrh	r1, [r3, #8]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	8b3a      	ldrh	r2, [r7, #24]
 80158be:	1a8a      	subs	r2, r1, r2
 80158c0:	b292      	uxth	r2, r2
 80158c2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	68fa      	ldr	r2, [r7, #12]
 80158ca:	68d2      	ldr	r2, [r2, #12]
 80158cc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	68db      	ldr	r3, [r3, #12]
 80158d2:	2200      	movs	r2, #0
 80158d4:	741a      	strb	r2, [r3, #16]
 80158d6:	2200      	movs	r2, #0
 80158d8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	68db      	ldr	r3, [r3, #12]
 80158de:	f103 0214 	add.w	r2, r3, #20
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	7a9b      	ldrb	r3, [r3, #10]
 80158e6:	009b      	lsls	r3, r3, #2
 80158e8:	f003 0304 	and.w	r3, r3, #4
 80158ec:	4413      	add	r3, r2
 80158ee:	69fa      	ldr	r2, [r7, #28]
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d006      	beq.n	8015902 <tcp_output_segment+0x16e>
 80158f4:	4b10      	ldr	r3, [pc, #64]	; (8015938 <tcp_output_segment+0x1a4>)
 80158f6:	f240 621c 	movw	r2, #1564	; 0x61c
 80158fa:	4915      	ldr	r1, [pc, #84]	; (8015950 <tcp_output_segment+0x1bc>)
 80158fc:	4810      	ldr	r0, [pc, #64]	; (8015940 <tcp_output_segment+0x1ac>)
 80158fe:	f001 fd39 	bl	8017374 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6858      	ldr	r0, [r3, #4]
 8015906:	68b9      	ldr	r1, [r7, #8]
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	1d1c      	adds	r4, r3, #4
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	7add      	ldrb	r5, [r3, #11]
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	7a9b      	ldrb	r3, [r3, #10]
 8015914:	687a      	ldr	r2, [r7, #4]
 8015916:	9202      	str	r2, [sp, #8]
 8015918:	2206      	movs	r2, #6
 801591a:	9201      	str	r2, [sp, #4]
 801591c:	9300      	str	r3, [sp, #0]
 801591e:	462b      	mov	r3, r5
 8015920:	4622      	mov	r2, r4
 8015922:	f7f8 fcad 	bl	800e280 <ip4_output_if>
 8015926:	4603      	mov	r3, r0
 8015928:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801592a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801592e:	4618      	mov	r0, r3
 8015930:	3720      	adds	r7, #32
 8015932:	46bd      	mov	sp, r7
 8015934:	bdb0      	pop	{r4, r5, r7, pc}
 8015936:	bf00      	nop
 8015938:	0801a568 	.word	0x0801a568
 801593c:	0801ab60 	.word	0x0801ab60
 8015940:	0801a5f0 	.word	0x0801a5f0
 8015944:	0801ab80 	.word	0x0801ab80
 8015948:	0801aba0 	.word	0x0801aba0
 801594c:	24008368 	.word	0x24008368
 8015950:	0801abc4 	.word	0x0801abc4

08015954 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015954:	b5b0      	push	{r4, r5, r7, lr}
 8015956:	b084      	sub	sp, #16
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d106      	bne.n	8015970 <tcp_rexmit_rto_prepare+0x1c>
 8015962:	4b31      	ldr	r3, [pc, #196]	; (8015a28 <tcp_rexmit_rto_prepare+0xd4>)
 8015964:	f240 6263 	movw	r2, #1635	; 0x663
 8015968:	4930      	ldr	r1, [pc, #192]	; (8015a2c <tcp_rexmit_rto_prepare+0xd8>)
 801596a:	4831      	ldr	r0, [pc, #196]	; (8015a30 <tcp_rexmit_rto_prepare+0xdc>)
 801596c:	f001 fd02 	bl	8017374 <iprintf>

  if (pcb->unacked == NULL) {
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015974:	2b00      	cmp	r3, #0
 8015976:	d102      	bne.n	801597e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015978:	f06f 0305 	mvn.w	r3, #5
 801597c:	e050      	b.n	8015a20 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015982:	60fb      	str	r3, [r7, #12]
 8015984:	e00b      	b.n	801599e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015986:	68f8      	ldr	r0, [r7, #12]
 8015988:	f7ff fee4 	bl	8015754 <tcp_output_segment_busy>
 801598c:	4603      	mov	r3, r0
 801598e:	2b00      	cmp	r3, #0
 8015990:	d002      	beq.n	8015998 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015992:	f06f 0305 	mvn.w	r3, #5
 8015996:	e043      	b.n	8015a20 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	60fb      	str	r3, [r7, #12]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d1ef      	bne.n	8015986 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80159a6:	68f8      	ldr	r0, [r7, #12]
 80159a8:	f7ff fed4 	bl	8015754 <tcp_output_segment_busy>
 80159ac:	4603      	mov	r3, r0
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d002      	beq.n	80159b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80159b2:	f06f 0305 	mvn.w	r3, #5
 80159b6:	e033      	b.n	8015a20 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2200      	movs	r2, #0
 80159cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	8b5b      	ldrh	r3, [r3, #26]
 80159d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80159d6:	b29a      	uxth	r2, r3
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7f6 ffcd 	bl	800c982 <lwip_htonl>
 80159e8:	4604      	mov	r4, r0
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	891b      	ldrh	r3, [r3, #8]
 80159ee:	461d      	mov	r5, r3
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	68db      	ldr	r3, [r3, #12]
 80159f4:	899b      	ldrh	r3, [r3, #12]
 80159f6:	b29b      	uxth	r3, r3
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7f6 ffad 	bl	800c958 <lwip_htons>
 80159fe:	4603      	mov	r3, r0
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	f003 0303 	and.w	r3, r3, #3
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d001      	beq.n	8015a0e <tcp_rexmit_rto_prepare+0xba>
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	e000      	b.n	8015a10 <tcp_rexmit_rto_prepare+0xbc>
 8015a0e:	2300      	movs	r3, #0
 8015a10:	442b      	add	r3, r5
 8015a12:	18e2      	adds	r2, r4, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015a1e:	2300      	movs	r3, #0
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3710      	adds	r7, #16
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bdb0      	pop	{r4, r5, r7, pc}
 8015a28:	0801a568 	.word	0x0801a568
 8015a2c:	0801abd8 	.word	0x0801abd8
 8015a30:	0801a5f0 	.word	0x0801a5f0

08015a34 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b082      	sub	sp, #8
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d106      	bne.n	8015a50 <tcp_rexmit_rto_commit+0x1c>
 8015a42:	4b0d      	ldr	r3, [pc, #52]	; (8015a78 <tcp_rexmit_rto_commit+0x44>)
 8015a44:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015a48:	490c      	ldr	r1, [pc, #48]	; (8015a7c <tcp_rexmit_rto_commit+0x48>)
 8015a4a:	480d      	ldr	r0, [pc, #52]	; (8015a80 <tcp_rexmit_rto_commit+0x4c>)
 8015a4c:	f001 fc92 	bl	8017374 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a56:	2bff      	cmp	r3, #255	; 0xff
 8015a58:	d007      	beq.n	8015a6a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a60:	3301      	adds	r3, #1
 8015a62:	b2da      	uxtb	r2, r3
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	f7ff fc7a 	bl	8015364 <tcp_output>
}
 8015a70:	bf00      	nop
 8015a72:	3708      	adds	r7, #8
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	0801a568 	.word	0x0801a568
 8015a7c:	0801abfc 	.word	0x0801abfc
 8015a80:	0801a5f0 	.word	0x0801a5f0

08015a84 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d106      	bne.n	8015aa0 <tcp_rexmit_rto+0x1c>
 8015a92:	4b0a      	ldr	r3, [pc, #40]	; (8015abc <tcp_rexmit_rto+0x38>)
 8015a94:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015a98:	4909      	ldr	r1, [pc, #36]	; (8015ac0 <tcp_rexmit_rto+0x3c>)
 8015a9a:	480a      	ldr	r0, [pc, #40]	; (8015ac4 <tcp_rexmit_rto+0x40>)
 8015a9c:	f001 fc6a 	bl	8017374 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f7ff ff57 	bl	8015954 <tcp_rexmit_rto_prepare>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d102      	bne.n	8015ab2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f7ff ffc1 	bl	8015a34 <tcp_rexmit_rto_commit>
  }
}
 8015ab2:	bf00      	nop
 8015ab4:	3708      	adds	r7, #8
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	0801a568 	.word	0x0801a568
 8015ac0:	0801ac20 	.word	0x0801ac20
 8015ac4:	0801a5f0 	.word	0x0801a5f0

08015ac8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015ac8:	b590      	push	{r4, r7, lr}
 8015aca:	b085      	sub	sp, #20
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d106      	bne.n	8015ae4 <tcp_rexmit+0x1c>
 8015ad6:	4b2f      	ldr	r3, [pc, #188]	; (8015b94 <tcp_rexmit+0xcc>)
 8015ad8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015adc:	492e      	ldr	r1, [pc, #184]	; (8015b98 <tcp_rexmit+0xd0>)
 8015ade:	482f      	ldr	r0, [pc, #188]	; (8015b9c <tcp_rexmit+0xd4>)
 8015ae0:	f001 fc48 	bl	8017374 <iprintf>

  if (pcb->unacked == NULL) {
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d102      	bne.n	8015af2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015aec:	f06f 0305 	mvn.w	r3, #5
 8015af0:	e04c      	b.n	8015b8c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015af6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015af8:	68b8      	ldr	r0, [r7, #8]
 8015afa:	f7ff fe2b 	bl	8015754 <tcp_output_segment_busy>
 8015afe:	4603      	mov	r3, r0
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d002      	beq.n	8015b0a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015b04:	f06f 0305 	mvn.w	r3, #5
 8015b08:	e040      	b.n	8015b8c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	681a      	ldr	r2, [r3, #0]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	336c      	adds	r3, #108	; 0x6c
 8015b16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b18:	e002      	b.n	8015b20 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d011      	beq.n	8015b4c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7f6 ff26 	bl	800c982 <lwip_htonl>
 8015b36:	4604      	mov	r4, r0
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	68db      	ldr	r3, [r3, #12]
 8015b3c:	685b      	ldr	r3, [r3, #4]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f6 ff1f 	bl	800c982 <lwip_htonl>
 8015b44:	4603      	mov	r3, r0
 8015b46:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	dbe6      	blt.n	8015b1a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681a      	ldr	r2, [r3, #0]
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	68ba      	ldr	r2, [r7, #8]
 8015b58:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d103      	bne.n	8015b6a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2200      	movs	r2, #0
 8015b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015b70:	2bff      	cmp	r3, #255	; 0xff
 8015b72:	d007      	beq.n	8015b84 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	b2da      	uxtb	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2200      	movs	r2, #0
 8015b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015b8a:	2300      	movs	r3, #0
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3714      	adds	r7, #20
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd90      	pop	{r4, r7, pc}
 8015b94:	0801a568 	.word	0x0801a568
 8015b98:	0801ac3c 	.word	0x0801ac3c
 8015b9c:	0801a5f0 	.word	0x0801a5f0

08015ba0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d106      	bne.n	8015bbc <tcp_rexmit_fast+0x1c>
 8015bae:	4b2f      	ldr	r3, [pc, #188]	; (8015c6c <tcp_rexmit_fast+0xcc>)
 8015bb0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015bb4:	492e      	ldr	r1, [pc, #184]	; (8015c70 <tcp_rexmit_fast+0xd0>)
 8015bb6:	482f      	ldr	r0, [pc, #188]	; (8015c74 <tcp_rexmit_fast+0xd4>)
 8015bb8:	f001 fbdc 	bl	8017374 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d04f      	beq.n	8015c64 <tcp_rexmit_fast+0xc4>
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	8b5b      	ldrh	r3, [r3, #26]
 8015bc8:	f003 0304 	and.w	r3, r3, #4
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d149      	bne.n	8015c64 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7ff ff79 	bl	8015ac8 <tcp_rexmit>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d143      	bne.n	8015c64 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d208      	bcs.n	8015bfe <tcp_rexmit_fast+0x5e>
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	da00      	bge.n	8015bf8 <tcp_rexmit_fast+0x58>
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	105b      	asrs	r3, r3, #1
 8015bfa:	b29b      	uxth	r3, r3
 8015bfc:	e007      	b.n	8015c0e <tcp_rexmit_fast+0x6e>
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	da00      	bge.n	8015c0a <tcp_rexmit_fast+0x6a>
 8015c08:	3301      	adds	r3, #1
 8015c0a:	105b      	asrs	r3, r3, #1
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c1a:	461a      	mov	r2, r3
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c20:	005b      	lsls	r3, r3, #1
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d206      	bcs.n	8015c34 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	b29a      	uxth	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c3e:	4619      	mov	r1, r3
 8015c40:	0049      	lsls	r1, r1, #1
 8015c42:	440b      	add	r3, r1
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	4413      	add	r3, r2
 8015c48:	b29a      	uxth	r2, r3
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	8b5b      	ldrh	r3, [r3, #26]
 8015c54:	f043 0304 	orr.w	r3, r3, #4
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2200      	movs	r2, #0
 8015c62:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015c64:	bf00      	nop
 8015c66:	3708      	adds	r7, #8
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}
 8015c6c:	0801a568 	.word	0x0801a568
 8015c70:	0801ac54 	.word	0x0801ac54
 8015c74:	0801a5f0 	.word	0x0801a5f0

08015c78 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	607b      	str	r3, [r7, #4]
 8015c82:	460b      	mov	r3, r1
 8015c84:	817b      	strh	r3, [r7, #10]
 8015c86:	4613      	mov	r3, r2
 8015c88:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015c8a:	897a      	ldrh	r2, [r7, #10]
 8015c8c:	893b      	ldrh	r3, [r7, #8]
 8015c8e:	4413      	add	r3, r2
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	3314      	adds	r3, #20
 8015c94:	b29b      	uxth	r3, r3
 8015c96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	2022      	movs	r0, #34	; 0x22
 8015c9e:	f7fa fb11 	bl	80102c4 <pbuf_alloc>
 8015ca2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d04e      	beq.n	8015d48 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	895b      	ldrh	r3, [r3, #10]
 8015cae:	461a      	mov	r2, r3
 8015cb0:	897b      	ldrh	r3, [r7, #10]
 8015cb2:	3314      	adds	r3, #20
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	da06      	bge.n	8015cc6 <tcp_output_alloc_header_common+0x4e>
 8015cb8:	4b26      	ldr	r3, [pc, #152]	; (8015d54 <tcp_output_alloc_header_common+0xdc>)
 8015cba:	f240 7224 	movw	r2, #1828	; 0x724
 8015cbe:	4926      	ldr	r1, [pc, #152]	; (8015d58 <tcp_output_alloc_header_common+0xe0>)
 8015cc0:	4826      	ldr	r0, [pc, #152]	; (8015d5c <tcp_output_alloc_header_common+0xe4>)
 8015cc2:	f001 fb57 	bl	8017374 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015cc6:	697b      	ldr	r3, [r7, #20]
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015ccc:	8c3b      	ldrh	r3, [r7, #32]
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7f6 fe42 	bl	800c958 <lwip_htons>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	693b      	ldr	r3, [r7, #16]
 8015cda:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f7f6 fe3a 	bl	800c958 <lwip_htons>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	687a      	ldr	r2, [r7, #4]
 8015cf0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f7f6 fe45 	bl	800c982 <lwip_htonl>
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015cfe:	897b      	ldrh	r3, [r7, #10]
 8015d00:	089b      	lsrs	r3, r3, #2
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	3305      	adds	r3, #5
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	031b      	lsls	r3, r3, #12
 8015d0a:	b29a      	uxth	r2, r3
 8015d0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	4313      	orrs	r3, r2
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7f6 fe1e 	bl	800c958 <lwip_htons>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	461a      	mov	r2, r3
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015d24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015d26:	4618      	mov	r0, r3
 8015d28:	f7f6 fe16 	bl	800c958 <lwip_htons>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	461a      	mov	r2, r3
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	2200      	movs	r2, #0
 8015d38:	741a      	strb	r2, [r3, #16]
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	2200      	movs	r2, #0
 8015d42:	749a      	strb	r2, [r3, #18]
 8015d44:	2200      	movs	r2, #0
 8015d46:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015d48:	697b      	ldr	r3, [r7, #20]
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3718      	adds	r7, #24
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	0801a568 	.word	0x0801a568
 8015d58:	0801ac74 	.word	0x0801ac74
 8015d5c:	0801a5f0 	.word	0x0801a5f0

08015d60 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015d60:	b5b0      	push	{r4, r5, r7, lr}
 8015d62:	b08a      	sub	sp, #40	; 0x28
 8015d64:	af04      	add	r7, sp, #16
 8015d66:	60f8      	str	r0, [r7, #12]
 8015d68:	607b      	str	r3, [r7, #4]
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	817b      	strh	r3, [r7, #10]
 8015d6e:	4613      	mov	r3, r2
 8015d70:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d106      	bne.n	8015d86 <tcp_output_alloc_header+0x26>
 8015d78:	4b15      	ldr	r3, [pc, #84]	; (8015dd0 <tcp_output_alloc_header+0x70>)
 8015d7a:	f240 7242 	movw	r2, #1858	; 0x742
 8015d7e:	4915      	ldr	r1, [pc, #84]	; (8015dd4 <tcp_output_alloc_header+0x74>)
 8015d80:	4815      	ldr	r0, [pc, #84]	; (8015dd8 <tcp_output_alloc_header+0x78>)
 8015d82:	f001 faf7 	bl	8017374 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	8adb      	ldrh	r3, [r3, #22]
 8015d8e:	68fa      	ldr	r2, [r7, #12]
 8015d90:	8b12      	ldrh	r2, [r2, #24]
 8015d92:	68f9      	ldr	r1, [r7, #12]
 8015d94:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015d96:	893d      	ldrh	r5, [r7, #8]
 8015d98:	897c      	ldrh	r4, [r7, #10]
 8015d9a:	9103      	str	r1, [sp, #12]
 8015d9c:	2110      	movs	r1, #16
 8015d9e:	9102      	str	r1, [sp, #8]
 8015da0:	9201      	str	r2, [sp, #4]
 8015da2:	9300      	str	r3, [sp, #0]
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	462a      	mov	r2, r5
 8015da8:	4621      	mov	r1, r4
 8015daa:	f7ff ff65 	bl	8015c78 <tcp_output_alloc_header_common>
 8015dae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d006      	beq.n	8015dc4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dba:	68fa      	ldr	r2, [r7, #12]
 8015dbc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015dbe:	441a      	add	r2, r3
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015dc4:	697b      	ldr	r3, [r7, #20]
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3718      	adds	r7, #24
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8015dce:	bf00      	nop
 8015dd0:	0801a568 	.word	0x0801a568
 8015dd4:	0801aca4 	.word	0x0801aca4
 8015dd8:	0801a5f0 	.word	0x0801a5f0

08015ddc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b088      	sub	sp, #32
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	60f8      	str	r0, [r7, #12]
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	4611      	mov	r1, r2
 8015de8:	461a      	mov	r2, r3
 8015dea:	460b      	mov	r3, r1
 8015dec:	71fb      	strb	r3, [r7, #7]
 8015dee:	4613      	mov	r3, r2
 8015df0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015df2:	2300      	movs	r3, #0
 8015df4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d106      	bne.n	8015e0a <tcp_output_fill_options+0x2e>
 8015dfc:	4b13      	ldr	r3, [pc, #76]	; (8015e4c <tcp_output_fill_options+0x70>)
 8015dfe:	f240 7256 	movw	r2, #1878	; 0x756
 8015e02:	4913      	ldr	r1, [pc, #76]	; (8015e50 <tcp_output_fill_options+0x74>)
 8015e04:	4813      	ldr	r0, [pc, #76]	; (8015e54 <tcp_output_fill_options+0x78>)
 8015e06:	f001 fab5 	bl	8017374 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015e10:	69bb      	ldr	r3, [r7, #24]
 8015e12:	3314      	adds	r3, #20
 8015e14:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015e16:	69bb      	ldr	r3, [r7, #24]
 8015e18:	f103 0214 	add.w	r2, r3, #20
 8015e1c:	8bfb      	ldrh	r3, [r7, #30]
 8015e1e:	009b      	lsls	r3, r3, #2
 8015e20:	4619      	mov	r1, r3
 8015e22:	79fb      	ldrb	r3, [r7, #7]
 8015e24:	009b      	lsls	r3, r3, #2
 8015e26:	f003 0304 	and.w	r3, r3, #4
 8015e2a:	440b      	add	r3, r1
 8015e2c:	4413      	add	r3, r2
 8015e2e:	697a      	ldr	r2, [r7, #20]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d006      	beq.n	8015e42 <tcp_output_fill_options+0x66>
 8015e34:	4b05      	ldr	r3, [pc, #20]	; (8015e4c <tcp_output_fill_options+0x70>)
 8015e36:	f240 7275 	movw	r2, #1909	; 0x775
 8015e3a:	4907      	ldr	r1, [pc, #28]	; (8015e58 <tcp_output_fill_options+0x7c>)
 8015e3c:	4805      	ldr	r0, [pc, #20]	; (8015e54 <tcp_output_fill_options+0x78>)
 8015e3e:	f001 fa99 	bl	8017374 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015e42:	bf00      	nop
 8015e44:	3720      	adds	r7, #32
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	0801a568 	.word	0x0801a568
 8015e50:	0801accc 	.word	0x0801accc
 8015e54:	0801a5f0 	.word	0x0801a5f0
 8015e58:	0801abc4 	.word	0x0801abc4

08015e5c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b08a      	sub	sp, #40	; 0x28
 8015e60:	af04      	add	r7, sp, #16
 8015e62:	60f8      	str	r0, [r7, #12]
 8015e64:	60b9      	str	r1, [r7, #8]
 8015e66:	607a      	str	r2, [r7, #4]
 8015e68:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d106      	bne.n	8015e7e <tcp_output_control_segment+0x22>
 8015e70:	4b1c      	ldr	r3, [pc, #112]	; (8015ee4 <tcp_output_control_segment+0x88>)
 8015e72:	f240 7287 	movw	r2, #1927	; 0x787
 8015e76:	491c      	ldr	r1, [pc, #112]	; (8015ee8 <tcp_output_control_segment+0x8c>)
 8015e78:	481c      	ldr	r0, [pc, #112]	; (8015eec <tcp_output_control_segment+0x90>)
 8015e7a:	f001 fa7b 	bl	8017374 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015e7e:	683a      	ldr	r2, [r7, #0]
 8015e80:	6879      	ldr	r1, [r7, #4]
 8015e82:	68f8      	ldr	r0, [r7, #12]
 8015e84:	f7fe ff2e 	bl	8014ce4 <tcp_route>
 8015e88:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015e8a:	693b      	ldr	r3, [r7, #16]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d102      	bne.n	8015e96 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015e90:	23fc      	movs	r3, #252	; 0xfc
 8015e92:	75fb      	strb	r3, [r7, #23]
 8015e94:	e01c      	b.n	8015ed0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d006      	beq.n	8015eaa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	7adb      	ldrb	r3, [r3, #11]
 8015ea0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	7a9b      	ldrb	r3, [r3, #10]
 8015ea6:	757b      	strb	r3, [r7, #21]
 8015ea8:	e003      	b.n	8015eb2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015eaa:	23ff      	movs	r3, #255	; 0xff
 8015eac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015eb2:	7dba      	ldrb	r2, [r7, #22]
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	9302      	str	r3, [sp, #8]
 8015eb8:	2306      	movs	r3, #6
 8015eba:	9301      	str	r3, [sp, #4]
 8015ebc:	7d7b      	ldrb	r3, [r7, #21]
 8015ebe:	9300      	str	r3, [sp, #0]
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	683a      	ldr	r2, [r7, #0]
 8015ec4:	6879      	ldr	r1, [r7, #4]
 8015ec6:	68b8      	ldr	r0, [r7, #8]
 8015ec8:	f7f8 f9da 	bl	800e280 <ip4_output_if>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015ed0:	68b8      	ldr	r0, [r7, #8]
 8015ed2:	f7fa fcd7 	bl	8010884 <pbuf_free>
  return err;
 8015ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3718      	adds	r7, #24
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	0801a568 	.word	0x0801a568
 8015ee8:	0801acf4 	.word	0x0801acf4
 8015eec:	0801a5f0 	.word	0x0801a5f0

08015ef0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015ef0:	b590      	push	{r4, r7, lr}
 8015ef2:	b08b      	sub	sp, #44	; 0x2c
 8015ef4:	af04      	add	r7, sp, #16
 8015ef6:	60f8      	str	r0, [r7, #12]
 8015ef8:	60b9      	str	r1, [r7, #8]
 8015efa:	607a      	str	r2, [r7, #4]
 8015efc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d106      	bne.n	8015f12 <tcp_rst+0x22>
 8015f04:	4b1f      	ldr	r3, [pc, #124]	; (8015f84 <tcp_rst+0x94>)
 8015f06:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015f0a:	491f      	ldr	r1, [pc, #124]	; (8015f88 <tcp_rst+0x98>)
 8015f0c:	481f      	ldr	r0, [pc, #124]	; (8015f8c <tcp_rst+0x9c>)
 8015f0e:	f001 fa31 	bl	8017374 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d106      	bne.n	8015f26 <tcp_rst+0x36>
 8015f18:	4b1a      	ldr	r3, [pc, #104]	; (8015f84 <tcp_rst+0x94>)
 8015f1a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015f1e:	491c      	ldr	r1, [pc, #112]	; (8015f90 <tcp_rst+0xa0>)
 8015f20:	481a      	ldr	r0, [pc, #104]	; (8015f8c <tcp_rst+0x9c>)
 8015f22:	f001 fa27 	bl	8017374 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f26:	2300      	movs	r3, #0
 8015f28:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015f2a:	f246 0308 	movw	r3, #24584	; 0x6008
 8015f2e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015f30:	7dfb      	ldrb	r3, [r7, #23]
 8015f32:	b29c      	uxth	r4, r3
 8015f34:	68b8      	ldr	r0, [r7, #8]
 8015f36:	f7f6 fd24 	bl	800c982 <lwip_htonl>
 8015f3a:	4602      	mov	r2, r0
 8015f3c:	8abb      	ldrh	r3, [r7, #20]
 8015f3e:	9303      	str	r3, [sp, #12]
 8015f40:	2314      	movs	r3, #20
 8015f42:	9302      	str	r3, [sp, #8]
 8015f44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015f46:	9301      	str	r3, [sp, #4]
 8015f48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	4613      	mov	r3, r2
 8015f4e:	2200      	movs	r2, #0
 8015f50:	4621      	mov	r1, r4
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f7ff fe90 	bl	8015c78 <tcp_output_alloc_header_common>
 8015f58:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00c      	beq.n	8015f7a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f60:	7dfb      	ldrb	r3, [r7, #23]
 8015f62:	2200      	movs	r2, #0
 8015f64:	6939      	ldr	r1, [r7, #16]
 8015f66:	68f8      	ldr	r0, [r7, #12]
 8015f68:	f7ff ff38 	bl	8015ddc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6e:	683a      	ldr	r2, [r7, #0]
 8015f70:	6939      	ldr	r1, [r7, #16]
 8015f72:	68f8      	ldr	r0, [r7, #12]
 8015f74:	f7ff ff72 	bl	8015e5c <tcp_output_control_segment>
 8015f78:	e000      	b.n	8015f7c <tcp_rst+0x8c>
    return;
 8015f7a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015f7c:	371c      	adds	r7, #28
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd90      	pop	{r4, r7, pc}
 8015f82:	bf00      	nop
 8015f84:	0801a568 	.word	0x0801a568
 8015f88:	0801ad20 	.word	0x0801ad20
 8015f8c:	0801a5f0 	.word	0x0801a5f0
 8015f90:	0801ad3c 	.word	0x0801ad3c

08015f94 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015f94:	b590      	push	{r4, r7, lr}
 8015f96:	b087      	sub	sp, #28
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d106      	bne.n	8015fb8 <tcp_send_empty_ack+0x24>
 8015faa:	4b28      	ldr	r3, [pc, #160]	; (801604c <tcp_send_empty_ack+0xb8>)
 8015fac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015fb0:	4927      	ldr	r1, [pc, #156]	; (8016050 <tcp_send_empty_ack+0xbc>)
 8015fb2:	4828      	ldr	r0, [pc, #160]	; (8016054 <tcp_send_empty_ack+0xc0>)
 8015fb4:	f001 f9de 	bl	8017374 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015fb8:	7dfb      	ldrb	r3, [r7, #23]
 8015fba:	009b      	lsls	r3, r3, #2
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	f003 0304 	and.w	r3, r3, #4
 8015fc2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015fc4:	7d7b      	ldrb	r3, [r7, #21]
 8015fc6:	b29c      	uxth	r4, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7f6 fcd8 	bl	800c982 <lwip_htonl>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	4621      	mov	r1, r4
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f7ff fec1 	bl	8015d60 <tcp_output_alloc_header>
 8015fde:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d109      	bne.n	8015ffa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	8b5b      	ldrh	r3, [r3, #26]
 8015fea:	f043 0303 	orr.w	r3, r3, #3
 8015fee:	b29a      	uxth	r2, r3
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015ff4:	f06f 0301 	mvn.w	r3, #1
 8015ff8:	e023      	b.n	8016042 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015ffa:	7dbb      	ldrb	r3, [r7, #22]
 8015ffc:	7dfa      	ldrb	r2, [r7, #23]
 8015ffe:	6939      	ldr	r1, [r7, #16]
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f7ff feeb 	bl	8015ddc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	3304      	adds	r3, #4
 801600c:	6939      	ldr	r1, [r7, #16]
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff ff24 	bl	8015e5c <tcp_output_control_segment>
 8016014:	4603      	mov	r3, r0
 8016016:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d007      	beq.n	8016030 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	8b5b      	ldrh	r3, [r3, #26]
 8016024:	f043 0303 	orr.w	r3, r3, #3
 8016028:	b29a      	uxth	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	835a      	strh	r2, [r3, #26]
 801602e:	e006      	b.n	801603e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	8b5b      	ldrh	r3, [r3, #26]
 8016034:	f023 0303 	bic.w	r3, r3, #3
 8016038:	b29a      	uxth	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801603e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016042:	4618      	mov	r0, r3
 8016044:	371c      	adds	r7, #28
 8016046:	46bd      	mov	sp, r7
 8016048:	bd90      	pop	{r4, r7, pc}
 801604a:	bf00      	nop
 801604c:	0801a568 	.word	0x0801a568
 8016050:	0801ad58 	.word	0x0801ad58
 8016054:	0801a5f0 	.word	0x0801a5f0

08016058 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016058:	b590      	push	{r4, r7, lr}
 801605a:	b087      	sub	sp, #28
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016060:	2300      	movs	r3, #0
 8016062:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d106      	bne.n	8016078 <tcp_keepalive+0x20>
 801606a:	4b18      	ldr	r3, [pc, #96]	; (80160cc <tcp_keepalive+0x74>)
 801606c:	f640 0224 	movw	r2, #2084	; 0x824
 8016070:	4917      	ldr	r1, [pc, #92]	; (80160d0 <tcp_keepalive+0x78>)
 8016072:	4818      	ldr	r0, [pc, #96]	; (80160d4 <tcp_keepalive+0x7c>)
 8016074:	f001 f97e 	bl	8017374 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016078:	7dfb      	ldrb	r3, [r7, #23]
 801607a:	b29c      	uxth	r4, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016080:	3b01      	subs	r3, #1
 8016082:	4618      	mov	r0, r3
 8016084:	f7f6 fc7d 	bl	800c982 <lwip_htonl>
 8016088:	4603      	mov	r3, r0
 801608a:	2200      	movs	r2, #0
 801608c:	4621      	mov	r1, r4
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7ff fe66 	bl	8015d60 <tcp_output_alloc_header>
 8016094:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d102      	bne.n	80160a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801609c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80160a0:	e010      	b.n	80160c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80160a2:	7dfb      	ldrb	r3, [r7, #23]
 80160a4:	2200      	movs	r2, #0
 80160a6:	6939      	ldr	r1, [r7, #16]
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7ff fe97 	bl	8015ddc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	3304      	adds	r3, #4
 80160b4:	6939      	ldr	r1, [r7, #16]
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7ff fed0 	bl	8015e5c <tcp_output_control_segment>
 80160bc:	4603      	mov	r3, r0
 80160be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80160c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	371c      	adds	r7, #28
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd90      	pop	{r4, r7, pc}
 80160cc:	0801a568 	.word	0x0801a568
 80160d0:	0801ad78 	.word	0x0801ad78
 80160d4:	0801a5f0 	.word	0x0801a5f0

080160d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80160d8:	b590      	push	{r4, r7, lr}
 80160da:	b08b      	sub	sp, #44	; 0x2c
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160e0:	2300      	movs	r3, #0
 80160e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d106      	bne.n	80160fa <tcp_zero_window_probe+0x22>
 80160ec:	4b4c      	ldr	r3, [pc, #304]	; (8016220 <tcp_zero_window_probe+0x148>)
 80160ee:	f640 024f 	movw	r2, #2127	; 0x84f
 80160f2:	494c      	ldr	r1, [pc, #304]	; (8016224 <tcp_zero_window_probe+0x14c>)
 80160f4:	484c      	ldr	r0, [pc, #304]	; (8016228 <tcp_zero_window_probe+0x150>)
 80160f6:	f001 f93d 	bl	8017374 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016100:	6a3b      	ldr	r3, [r7, #32]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d101      	bne.n	801610a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016106:	2300      	movs	r3, #0
 8016108:	e086      	b.n	8016218 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016110:	2bff      	cmp	r3, #255	; 0xff
 8016112:	d007      	beq.n	8016124 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801611a:	3301      	adds	r3, #1
 801611c:	b2da      	uxtb	r2, r3
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016124:	6a3b      	ldr	r3, [r7, #32]
 8016126:	68db      	ldr	r3, [r3, #12]
 8016128:	899b      	ldrh	r3, [r3, #12]
 801612a:	b29b      	uxth	r3, r3
 801612c:	4618      	mov	r0, r3
 801612e:	f7f6 fc13 	bl	800c958 <lwip_htons>
 8016132:	4603      	mov	r3, r0
 8016134:	b2db      	uxtb	r3, r3
 8016136:	f003 0301 	and.w	r3, r3, #1
 801613a:	2b00      	cmp	r3, #0
 801613c:	d005      	beq.n	801614a <tcp_zero_window_probe+0x72>
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	891b      	ldrh	r3, [r3, #8]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d101      	bne.n	801614a <tcp_zero_window_probe+0x72>
 8016146:	2301      	movs	r3, #1
 8016148:	e000      	b.n	801614c <tcp_zero_window_probe+0x74>
 801614a:	2300      	movs	r3, #0
 801614c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801614e:	7ffb      	ldrb	r3, [r7, #31]
 8016150:	2b00      	cmp	r3, #0
 8016152:	bf0c      	ite	eq
 8016154:	2301      	moveq	r3, #1
 8016156:	2300      	movne	r3, #0
 8016158:	b2db      	uxtb	r3, r3
 801615a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801615c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016160:	b299      	uxth	r1, r3
 8016162:	6a3b      	ldr	r3, [r7, #32]
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	8bba      	ldrh	r2, [r7, #28]
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7ff fdf8 	bl	8015d60 <tcp_output_alloc_header>
 8016170:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016172:	69bb      	ldr	r3, [r7, #24]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d102      	bne.n	801617e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801617c:	e04c      	b.n	8016218 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801617e:	69bb      	ldr	r3, [r7, #24]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016184:	7ffb      	ldrb	r3, [r7, #31]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d011      	beq.n	80161ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	899b      	ldrh	r3, [r3, #12]
 801618e:	b29b      	uxth	r3, r3
 8016190:	b21b      	sxth	r3, r3
 8016192:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016196:	b21c      	sxth	r4, r3
 8016198:	2011      	movs	r0, #17
 801619a:	f7f6 fbdd 	bl	800c958 <lwip_htons>
 801619e:	4603      	mov	r3, r0
 80161a0:	b21b      	sxth	r3, r3
 80161a2:	4323      	orrs	r3, r4
 80161a4:	b21b      	sxth	r3, r3
 80161a6:	b29a      	uxth	r2, r3
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	819a      	strh	r2, [r3, #12]
 80161ac:	e010      	b.n	80161d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	3314      	adds	r3, #20
 80161b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80161b6:	6a3b      	ldr	r3, [r7, #32]
 80161b8:	6858      	ldr	r0, [r3, #4]
 80161ba:	6a3b      	ldr	r3, [r7, #32]
 80161bc:	685b      	ldr	r3, [r3, #4]
 80161be:	891a      	ldrh	r2, [r3, #8]
 80161c0:	6a3b      	ldr	r3, [r7, #32]
 80161c2:	891b      	ldrh	r3, [r3, #8]
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	2201      	movs	r2, #1
 80161ca:	6939      	ldr	r1, [r7, #16]
 80161cc:	f7fa fd60 	bl	8010c90 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80161d0:	6a3b      	ldr	r3, [r7, #32]
 80161d2:	68db      	ldr	r3, [r3, #12]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7f6 fbd3 	bl	800c982 <lwip_htonl>
 80161dc:	4603      	mov	r3, r0
 80161de:	3301      	adds	r3, #1
 80161e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	1ad3      	subs	r3, r2, r3
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	da02      	bge.n	80161f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	68fa      	ldr	r2, [r7, #12]
 80161f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80161f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f8:	2200      	movs	r2, #0
 80161fa:	69b9      	ldr	r1, [r7, #24]
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7ff fded 	bl	8015ddc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	3304      	adds	r3, #4
 8016208:	69b9      	ldr	r1, [r7, #24]
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f7ff fe26 	bl	8015e5c <tcp_output_control_segment>
 8016210:	4603      	mov	r3, r0
 8016212:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016214:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016218:	4618      	mov	r0, r3
 801621a:	372c      	adds	r7, #44	; 0x2c
 801621c:	46bd      	mov	sp, r7
 801621e:	bd90      	pop	{r4, r7, pc}
 8016220:	0801a568 	.word	0x0801a568
 8016224:	0801ad94 	.word	0x0801ad94
 8016228:	0801a5f0 	.word	0x0801a5f0

0801622c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b084      	sub	sp, #16
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016236:	f000 fafb 	bl	8016830 <sys_timeouts_sleeptime>
 801623a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016242:	d10b      	bne.n	801625c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016244:	4813      	ldr	r0, [pc, #76]	; (8016294 <tcpip_timeouts_mbox_fetch+0x68>)
 8016246:	f7fa fe6e 	bl	8010f26 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801624a:	2200      	movs	r2, #0
 801624c:	6839      	ldr	r1, [r7, #0]
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f7fa fdf6 	bl	8010e40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016254:	480f      	ldr	r0, [pc, #60]	; (8016294 <tcpip_timeouts_mbox_fetch+0x68>)
 8016256:	f7fa fe57 	bl	8010f08 <sys_mutex_lock>
    return;
 801625a:	e018      	b.n	801628e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d102      	bne.n	8016268 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016262:	f000 faab 	bl	80167bc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016266:	e7e6      	b.n	8016236 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016268:	480a      	ldr	r0, [pc, #40]	; (8016294 <tcpip_timeouts_mbox_fetch+0x68>)
 801626a:	f7fa fe5c 	bl	8010f26 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801626e:	68fa      	ldr	r2, [r7, #12]
 8016270:	6839      	ldr	r1, [r7, #0]
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f7fa fde4 	bl	8010e40 <sys_arch_mbox_fetch>
 8016278:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801627a:	4806      	ldr	r0, [pc, #24]	; (8016294 <tcpip_timeouts_mbox_fetch+0x68>)
 801627c:	f7fa fe44 	bl	8010f08 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016286:	d102      	bne.n	801628e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016288:	f000 fa98 	bl	80167bc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801628c:	e7d3      	b.n	8016236 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	2400837c 	.word	0x2400837c

08016298 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80162a0:	4810      	ldr	r0, [pc, #64]	; (80162e4 <tcpip_thread+0x4c>)
 80162a2:	f7fa fe31 	bl	8010f08 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80162a6:	4b10      	ldr	r3, [pc, #64]	; (80162e8 <tcpip_thread+0x50>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d005      	beq.n	80162ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80162ae:	4b0e      	ldr	r3, [pc, #56]	; (80162e8 <tcpip_thread+0x50>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4a0e      	ldr	r2, [pc, #56]	; (80162ec <tcpip_thread+0x54>)
 80162b4:	6812      	ldr	r2, [r2, #0]
 80162b6:	4610      	mov	r0, r2
 80162b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80162ba:	f107 030c 	add.w	r3, r7, #12
 80162be:	4619      	mov	r1, r3
 80162c0:	480b      	ldr	r0, [pc, #44]	; (80162f0 <tcpip_thread+0x58>)
 80162c2:	f7ff ffb3 	bl	801622c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d106      	bne.n	80162da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80162cc:	4b09      	ldr	r3, [pc, #36]	; (80162f4 <tcpip_thread+0x5c>)
 80162ce:	2291      	movs	r2, #145	; 0x91
 80162d0:	4909      	ldr	r1, [pc, #36]	; (80162f8 <tcpip_thread+0x60>)
 80162d2:	480a      	ldr	r0, [pc, #40]	; (80162fc <tcpip_thread+0x64>)
 80162d4:	f001 f84e 	bl	8017374 <iprintf>
      continue;
 80162d8:	e003      	b.n	80162e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	4618      	mov	r0, r3
 80162de:	f000 f80f 	bl	8016300 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80162e2:	e7ea      	b.n	80162ba <tcpip_thread+0x22>
 80162e4:	2400837c 	.word	0x2400837c
 80162e8:	24004b50 	.word	0x24004b50
 80162ec:	24004b54 	.word	0x24004b54
 80162f0:	24004b58 	.word	0x24004b58
 80162f4:	0801adb8 	.word	0x0801adb8
 80162f8:	0801ae1c 	.word	0x0801ae1c
 80162fc:	0801ae3c 	.word	0x0801ae3c

08016300 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	2b01      	cmp	r3, #1
 801630e:	d018      	beq.n	8016342 <tcpip_thread_handle_msg+0x42>
 8016310:	2b02      	cmp	r3, #2
 8016312:	d021      	beq.n	8016358 <tcpip_thread_handle_msg+0x58>
 8016314:	2b00      	cmp	r3, #0
 8016316:	d126      	bne.n	8016366 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	68db      	ldr	r3, [r3, #12]
 801631c:	687a      	ldr	r2, [r7, #4]
 801631e:	6850      	ldr	r0, [r2, #4]
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	6892      	ldr	r2, [r2, #8]
 8016324:	4611      	mov	r1, r2
 8016326:	4798      	blx	r3
 8016328:	4603      	mov	r3, r0
 801632a:	2b00      	cmp	r3, #0
 801632c:	d004      	beq.n	8016338 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	4618      	mov	r0, r3
 8016334:	f7fa faa6 	bl	8010884 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016338:	6879      	ldr	r1, [r7, #4]
 801633a:	2009      	movs	r0, #9
 801633c:	f7f9 fc02 	bl	800fb44 <memp_free>
      break;
 8016340:	e018      	b.n	8016374 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	6892      	ldr	r2, [r2, #8]
 801634a:	4610      	mov	r0, r2
 801634c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801634e:	6879      	ldr	r1, [r7, #4]
 8016350:	2008      	movs	r0, #8
 8016352:	f7f9 fbf7 	bl	800fb44 <memp_free>
      break;
 8016356:	e00d      	b.n	8016374 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	687a      	ldr	r2, [r7, #4]
 801635e:	6892      	ldr	r2, [r2, #8]
 8016360:	4610      	mov	r0, r2
 8016362:	4798      	blx	r3
      break;
 8016364:	e006      	b.n	8016374 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016366:	4b05      	ldr	r3, [pc, #20]	; (801637c <tcpip_thread_handle_msg+0x7c>)
 8016368:	22cf      	movs	r2, #207	; 0xcf
 801636a:	4905      	ldr	r1, [pc, #20]	; (8016380 <tcpip_thread_handle_msg+0x80>)
 801636c:	4805      	ldr	r0, [pc, #20]	; (8016384 <tcpip_thread_handle_msg+0x84>)
 801636e:	f001 f801 	bl	8017374 <iprintf>
      break;
 8016372:	bf00      	nop
  }
}
 8016374:	bf00      	nop
 8016376:	3708      	adds	r7, #8
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	0801adb8 	.word	0x0801adb8
 8016380:	0801ae1c 	.word	0x0801ae1c
 8016384:	0801ae3c 	.word	0x0801ae3c

08016388 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b086      	sub	sp, #24
 801638c:	af00      	add	r7, sp, #0
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016394:	481a      	ldr	r0, [pc, #104]	; (8016400 <tcpip_inpkt+0x78>)
 8016396:	f7fa fd84 	bl	8010ea2 <sys_mbox_valid>
 801639a:	4603      	mov	r3, r0
 801639c:	2b00      	cmp	r3, #0
 801639e:	d105      	bne.n	80163ac <tcpip_inpkt+0x24>
 80163a0:	4b18      	ldr	r3, [pc, #96]	; (8016404 <tcpip_inpkt+0x7c>)
 80163a2:	22fc      	movs	r2, #252	; 0xfc
 80163a4:	4918      	ldr	r1, [pc, #96]	; (8016408 <tcpip_inpkt+0x80>)
 80163a6:	4819      	ldr	r0, [pc, #100]	; (801640c <tcpip_inpkt+0x84>)
 80163a8:	f000 ffe4 	bl	8017374 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80163ac:	2009      	movs	r0, #9
 80163ae:	f7f9 fb53 	bl	800fa58 <memp_malloc>
 80163b2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d102      	bne.n	80163c0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80163ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163be:	e01a      	b.n	80163f6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	2200      	movs	r2, #0
 80163c4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	68fa      	ldr	r2, [r7, #12]
 80163ca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80163cc:	697b      	ldr	r3, [r7, #20]
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80163d8:	6979      	ldr	r1, [r7, #20]
 80163da:	4809      	ldr	r0, [pc, #36]	; (8016400 <tcpip_inpkt+0x78>)
 80163dc:	f7fa fd16 	bl	8010e0c <sys_mbox_trypost>
 80163e0:	4603      	mov	r3, r0
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d006      	beq.n	80163f4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80163e6:	6979      	ldr	r1, [r7, #20]
 80163e8:	2009      	movs	r0, #9
 80163ea:	f7f9 fbab 	bl	800fb44 <memp_free>
    return ERR_MEM;
 80163ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163f2:	e000      	b.n	80163f6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80163f4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3718      	adds	r7, #24
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	24004b58 	.word	0x24004b58
 8016404:	0801adb8 	.word	0x0801adb8
 8016408:	0801ae64 	.word	0x0801ae64
 801640c:	0801ae3c 	.word	0x0801ae3c

08016410 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016420:	f003 0318 	and.w	r3, r3, #24
 8016424:	2b00      	cmp	r3, #0
 8016426:	d006      	beq.n	8016436 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016428:	4a08      	ldr	r2, [pc, #32]	; (801644c <tcpip_input+0x3c>)
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f7ff ffab 	bl	8016388 <tcpip_inpkt>
 8016432:	4603      	mov	r3, r0
 8016434:	e005      	b.n	8016442 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8016436:	4a06      	ldr	r2, [pc, #24]	; (8016450 <tcpip_input+0x40>)
 8016438:	6839      	ldr	r1, [r7, #0]
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f7ff ffa4 	bl	8016388 <tcpip_inpkt>
 8016440:	4603      	mov	r3, r0
}
 8016442:	4618      	mov	r0, r3
 8016444:	3708      	adds	r7, #8
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}
 801644a:	bf00      	nop
 801644c:	0800d84d 	.word	0x0800d84d
 8016450:	0800e03d 	.word	0x0800e03d

08016454 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b084      	sub	sp, #16
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801645e:	4819      	ldr	r0, [pc, #100]	; (80164c4 <tcpip_try_callback+0x70>)
 8016460:	f7fa fd1f 	bl	8010ea2 <sys_mbox_valid>
 8016464:	4603      	mov	r3, r0
 8016466:	2b00      	cmp	r3, #0
 8016468:	d106      	bne.n	8016478 <tcpip_try_callback+0x24>
 801646a:	4b17      	ldr	r3, [pc, #92]	; (80164c8 <tcpip_try_callback+0x74>)
 801646c:	f240 125d 	movw	r2, #349	; 0x15d
 8016470:	4916      	ldr	r1, [pc, #88]	; (80164cc <tcpip_try_callback+0x78>)
 8016472:	4817      	ldr	r0, [pc, #92]	; (80164d0 <tcpip_try_callback+0x7c>)
 8016474:	f000 ff7e 	bl	8017374 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016478:	2008      	movs	r0, #8
 801647a:	f7f9 faed 	bl	800fa58 <memp_malloc>
 801647e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d102      	bne.n	801648c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8016486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801648a:	e017      	b.n	80164bc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2201      	movs	r2, #1
 8016490:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801649e:	68f9      	ldr	r1, [r7, #12]
 80164a0:	4808      	ldr	r0, [pc, #32]	; (80164c4 <tcpip_try_callback+0x70>)
 80164a2:	f7fa fcb3 	bl	8010e0c <sys_mbox_trypost>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d006      	beq.n	80164ba <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80164ac:	68f9      	ldr	r1, [r7, #12]
 80164ae:	2008      	movs	r0, #8
 80164b0:	f7f9 fb48 	bl	800fb44 <memp_free>
    return ERR_MEM;
 80164b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164b8:	e000      	b.n	80164bc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80164ba:	2300      	movs	r3, #0
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	24004b58 	.word	0x24004b58
 80164c8:	0801adb8 	.word	0x0801adb8
 80164cc:	0801ae64 	.word	0x0801ae64
 80164d0:	0801ae3c 	.word	0x0801ae3c

080164d4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af02      	add	r7, sp, #8
 80164da:	6078      	str	r0, [r7, #4]
 80164dc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80164de:	f7f7 fcfb 	bl	800ded8 <lwip_init>

  tcpip_init_done = initfunc;
 80164e2:	4a17      	ldr	r2, [pc, #92]	; (8016540 <tcpip_init+0x6c>)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80164e8:	4a16      	ldr	r2, [pc, #88]	; (8016544 <tcpip_init+0x70>)
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80164ee:	2106      	movs	r1, #6
 80164f0:	4815      	ldr	r0, [pc, #84]	; (8016548 <tcpip_init+0x74>)
 80164f2:	f7fa fc71 	bl	8010dd8 <sys_mbox_new>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d006      	beq.n	801650a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80164fc:	4b13      	ldr	r3, [pc, #76]	; (801654c <tcpip_init+0x78>)
 80164fe:	f240 2261 	movw	r2, #609	; 0x261
 8016502:	4913      	ldr	r1, [pc, #76]	; (8016550 <tcpip_init+0x7c>)
 8016504:	4813      	ldr	r0, [pc, #76]	; (8016554 <tcpip_init+0x80>)
 8016506:	f000 ff35 	bl	8017374 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801650a:	4813      	ldr	r0, [pc, #76]	; (8016558 <tcpip_init+0x84>)
 801650c:	f7fa fce6 	bl	8010edc <sys_mutex_new>
 8016510:	4603      	mov	r3, r0
 8016512:	2b00      	cmp	r3, #0
 8016514:	d006      	beq.n	8016524 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016516:	4b0d      	ldr	r3, [pc, #52]	; (801654c <tcpip_init+0x78>)
 8016518:	f240 2265 	movw	r2, #613	; 0x265
 801651c:	490f      	ldr	r1, [pc, #60]	; (801655c <tcpip_init+0x88>)
 801651e:	480d      	ldr	r0, [pc, #52]	; (8016554 <tcpip_init+0x80>)
 8016520:	f000 ff28 	bl	8017374 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016524:	2318      	movs	r3, #24
 8016526:	9300      	str	r3, [sp, #0]
 8016528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801652c:	2200      	movs	r2, #0
 801652e:	490c      	ldr	r1, [pc, #48]	; (8016560 <tcpip_init+0x8c>)
 8016530:	480c      	ldr	r0, [pc, #48]	; (8016564 <tcpip_init+0x90>)
 8016532:	f7fa fd05 	bl	8010f40 <sys_thread_new>
}
 8016536:	bf00      	nop
 8016538:	3708      	adds	r7, #8
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}
 801653e:	bf00      	nop
 8016540:	24004b50 	.word	0x24004b50
 8016544:	24004b54 	.word	0x24004b54
 8016548:	24004b58 	.word	0x24004b58
 801654c:	0801adb8 	.word	0x0801adb8
 8016550:	0801ae74 	.word	0x0801ae74
 8016554:	0801ae3c 	.word	0x0801ae3c
 8016558:	2400837c 	.word	0x2400837c
 801655c:	0801ae98 	.word	0x0801ae98
 8016560:	08016299 	.word	0x08016299
 8016564:	0801aebc 	.word	0x0801aebc

08016568 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b082      	sub	sp, #8
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016570:	f7fa fd6e 	bl	8011050 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016574:	4b0a      	ldr	r3, [pc, #40]	; (80165a0 <tcpip_tcp_timer+0x38>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d103      	bne.n	8016584 <tcpip_tcp_timer+0x1c>
 801657c:	4b09      	ldr	r3, [pc, #36]	; (80165a4 <tcpip_tcp_timer+0x3c>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d005      	beq.n	8016590 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016584:	2200      	movs	r2, #0
 8016586:	4908      	ldr	r1, [pc, #32]	; (80165a8 <tcpip_tcp_timer+0x40>)
 8016588:	20fa      	movs	r0, #250	; 0xfa
 801658a:	f000 f8f1 	bl	8016770 <sys_timeout>
 801658e:	e002      	b.n	8016596 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016590:	4b06      	ldr	r3, [pc, #24]	; (80165ac <tcpip_tcp_timer+0x44>)
 8016592:	2200      	movs	r2, #0
 8016594:	601a      	str	r2, [r3, #0]
  }
}
 8016596:	bf00      	nop
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	24008364 	.word	0x24008364
 80165a4:	24008374 	.word	0x24008374
 80165a8:	08016569 	.word	0x08016569
 80165ac:	24004b64 	.word	0x24004b64

080165b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80165b4:	4b0a      	ldr	r3, [pc, #40]	; (80165e0 <tcp_timer_needed+0x30>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d10f      	bne.n	80165dc <tcp_timer_needed+0x2c>
 80165bc:	4b09      	ldr	r3, [pc, #36]	; (80165e4 <tcp_timer_needed+0x34>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d103      	bne.n	80165cc <tcp_timer_needed+0x1c>
 80165c4:	4b08      	ldr	r3, [pc, #32]	; (80165e8 <tcp_timer_needed+0x38>)
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d007      	beq.n	80165dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80165cc:	4b04      	ldr	r3, [pc, #16]	; (80165e0 <tcp_timer_needed+0x30>)
 80165ce:	2201      	movs	r2, #1
 80165d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80165d2:	2200      	movs	r2, #0
 80165d4:	4905      	ldr	r1, [pc, #20]	; (80165ec <tcp_timer_needed+0x3c>)
 80165d6:	20fa      	movs	r0, #250	; 0xfa
 80165d8:	f000 f8ca 	bl	8016770 <sys_timeout>
  }
}
 80165dc:	bf00      	nop
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	24004b64 	.word	0x24004b64
 80165e4:	24008364 	.word	0x24008364
 80165e8:	24008374 	.word	0x24008374
 80165ec:	08016569 	.word	0x08016569

080165f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b086      	sub	sp, #24
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	60f8      	str	r0, [r7, #12]
 80165f8:	60b9      	str	r1, [r7, #8]
 80165fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80165fc:	200a      	movs	r0, #10
 80165fe:	f7f9 fa2b 	bl	800fa58 <memp_malloc>
 8016602:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016604:	693b      	ldr	r3, [r7, #16]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d109      	bne.n	801661e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801660a:	693b      	ldr	r3, [r7, #16]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d151      	bne.n	80166b4 <sys_timeout_abs+0xc4>
 8016610:	4b2a      	ldr	r3, [pc, #168]	; (80166bc <sys_timeout_abs+0xcc>)
 8016612:	22be      	movs	r2, #190	; 0xbe
 8016614:	492a      	ldr	r1, [pc, #168]	; (80166c0 <sys_timeout_abs+0xd0>)
 8016616:	482b      	ldr	r0, [pc, #172]	; (80166c4 <sys_timeout_abs+0xd4>)
 8016618:	f000 feac 	bl	8017374 <iprintf>
    return;
 801661c:	e04a      	b.n	80166b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	2200      	movs	r2, #0
 8016622:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	68ba      	ldr	r2, [r7, #8]
 8016628:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801662a:	693b      	ldr	r3, [r7, #16]
 801662c:	687a      	ldr	r2, [r7, #4]
 801662e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	68fa      	ldr	r2, [r7, #12]
 8016634:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016636:	4b24      	ldr	r3, [pc, #144]	; (80166c8 <sys_timeout_abs+0xd8>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d103      	bne.n	8016646 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801663e:	4a22      	ldr	r2, [pc, #136]	; (80166c8 <sys_timeout_abs+0xd8>)
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	6013      	str	r3, [r2, #0]
    return;
 8016644:	e037      	b.n	80166b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	685a      	ldr	r2, [r3, #4]
 801664a:	4b1f      	ldr	r3, [pc, #124]	; (80166c8 <sys_timeout_abs+0xd8>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	685b      	ldr	r3, [r3, #4]
 8016650:	1ad3      	subs	r3, r2, r3
 8016652:	0fdb      	lsrs	r3, r3, #31
 8016654:	f003 0301 	and.w	r3, r3, #1
 8016658:	b2db      	uxtb	r3, r3
 801665a:	2b00      	cmp	r3, #0
 801665c:	d007      	beq.n	801666e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801665e:	4b1a      	ldr	r3, [pc, #104]	; (80166c8 <sys_timeout_abs+0xd8>)
 8016660:	681a      	ldr	r2, [r3, #0]
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016666:	4a18      	ldr	r2, [pc, #96]	; (80166c8 <sys_timeout_abs+0xd8>)
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	6013      	str	r3, [r2, #0]
 801666c:	e023      	b.n	80166b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801666e:	4b16      	ldr	r3, [pc, #88]	; (80166c8 <sys_timeout_abs+0xd8>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	617b      	str	r3, [r7, #20]
 8016674:	e01a      	b.n	80166ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d00b      	beq.n	8016696 <sys_timeout_abs+0xa6>
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	685a      	ldr	r2, [r3, #4]
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	1ad3      	subs	r3, r2, r3
 801668a:	0fdb      	lsrs	r3, r3, #31
 801668c:	f003 0301 	and.w	r3, r3, #1
 8016690:	b2db      	uxtb	r3, r3
 8016692:	2b00      	cmp	r3, #0
 8016694:	d007      	beq.n	80166a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	681a      	ldr	r2, [r3, #0]
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	693a      	ldr	r2, [r7, #16]
 80166a2:	601a      	str	r2, [r3, #0]
        break;
 80166a4:	e007      	b.n	80166b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80166a6:	697b      	ldr	r3, [r7, #20]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	617b      	str	r3, [r7, #20]
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d1e1      	bne.n	8016676 <sys_timeout_abs+0x86>
 80166b2:	e000      	b.n	80166b6 <sys_timeout_abs+0xc6>
    return;
 80166b4:	bf00      	nop
      }
    }
  }
}
 80166b6:	3718      	adds	r7, #24
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	0801aecc 	.word	0x0801aecc
 80166c0:	0801af34 	.word	0x0801af34
 80166c4:	0801af74 	.word	0x0801af74
 80166c8:	24004b5c 	.word	0x24004b5c

080166cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	685b      	ldr	r3, [r3, #4]
 80166dc:	4798      	blx	r3

  now = sys_now();
 80166de:	f7f2 f9f3 	bl	8008ac8 <sys_now>
 80166e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	681a      	ldr	r2, [r3, #0]
 80166e8:	4b0f      	ldr	r3, [pc, #60]	; (8016728 <lwip_cyclic_timer+0x5c>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4413      	add	r3, r2
 80166ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80166f0:	68fa      	ldr	r2, [r7, #12]
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	1ad3      	subs	r3, r2, r3
 80166f6:	0fdb      	lsrs	r3, r3, #31
 80166f8:	f003 0301 	and.w	r3, r3, #1
 80166fc:	b2db      	uxtb	r3, r3
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d009      	beq.n	8016716 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016702:	697b      	ldr	r3, [r7, #20]
 8016704:	681a      	ldr	r2, [r3, #0]
 8016706:	693b      	ldr	r3, [r7, #16]
 8016708:	4413      	add	r3, r2
 801670a:	687a      	ldr	r2, [r7, #4]
 801670c:	4907      	ldr	r1, [pc, #28]	; (801672c <lwip_cyclic_timer+0x60>)
 801670e:	4618      	mov	r0, r3
 8016710:	f7ff ff6e 	bl	80165f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016714:	e004      	b.n	8016720 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	4904      	ldr	r1, [pc, #16]	; (801672c <lwip_cyclic_timer+0x60>)
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	f7ff ff68 	bl	80165f0 <sys_timeout_abs>
}
 8016720:	bf00      	nop
 8016722:	3718      	adds	r7, #24
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}
 8016728:	24004b60 	.word	0x24004b60
 801672c:	080166cd 	.word	0x080166cd

08016730 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016736:	2301      	movs	r3, #1
 8016738:	607b      	str	r3, [r7, #4]
 801673a:	e00e      	b.n	801675a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801673c:	4a0a      	ldr	r2, [pc, #40]	; (8016768 <sys_timeouts_init+0x38>)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	00db      	lsls	r3, r3, #3
 8016748:	4a07      	ldr	r2, [pc, #28]	; (8016768 <sys_timeouts_init+0x38>)
 801674a:	4413      	add	r3, r2
 801674c:	461a      	mov	r2, r3
 801674e:	4907      	ldr	r1, [pc, #28]	; (801676c <sys_timeouts_init+0x3c>)
 8016750:	f000 f80e 	bl	8016770 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	3301      	adds	r3, #1
 8016758:	607b      	str	r3, [r7, #4]
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2b02      	cmp	r3, #2
 801675e:	d9ed      	bls.n	801673c <sys_timeouts_init+0xc>
  }
}
 8016760:	bf00      	nop
 8016762:	3708      	adds	r7, #8
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}
 8016768:	0801b508 	.word	0x0801b508
 801676c:	080166cd 	.word	0x080166cd

08016770 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016782:	d306      	bcc.n	8016792 <sys_timeout+0x22>
 8016784:	4b0a      	ldr	r3, [pc, #40]	; (80167b0 <sys_timeout+0x40>)
 8016786:	f240 1229 	movw	r2, #297	; 0x129
 801678a:	490a      	ldr	r1, [pc, #40]	; (80167b4 <sys_timeout+0x44>)
 801678c:	480a      	ldr	r0, [pc, #40]	; (80167b8 <sys_timeout+0x48>)
 801678e:	f000 fdf1 	bl	8017374 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016792:	f7f2 f999 	bl	8008ac8 <sys_now>
 8016796:	4602      	mov	r2, r0
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	4413      	add	r3, r2
 801679c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801679e:	687a      	ldr	r2, [r7, #4]
 80167a0:	68b9      	ldr	r1, [r7, #8]
 80167a2:	6978      	ldr	r0, [r7, #20]
 80167a4:	f7ff ff24 	bl	80165f0 <sys_timeout_abs>
#endif
}
 80167a8:	bf00      	nop
 80167aa:	3718      	adds	r7, #24
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}
 80167b0:	0801aecc 	.word	0x0801aecc
 80167b4:	0801af9c 	.word	0x0801af9c
 80167b8:	0801af74 	.word	0x0801af74

080167bc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b084      	sub	sp, #16
 80167c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80167c2:	f7f2 f981 	bl	8008ac8 <sys_now>
 80167c6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80167c8:	4b17      	ldr	r3, [pc, #92]	; (8016828 <sys_check_timeouts+0x6c>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d022      	beq.n	801681a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	685b      	ldr	r3, [r3, #4]
 80167d8:	68fa      	ldr	r2, [r7, #12]
 80167da:	1ad3      	subs	r3, r2, r3
 80167dc:	0fdb      	lsrs	r3, r3, #31
 80167de:	f003 0301 	and.w	r3, r3, #1
 80167e2:	b2db      	uxtb	r3, r3
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d11a      	bne.n	801681e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	4a0e      	ldr	r2, [pc, #56]	; (8016828 <sys_check_timeouts+0x6c>)
 80167ee:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	689b      	ldr	r3, [r3, #8]
 80167f4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	68db      	ldr	r3, [r3, #12]
 80167fa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	685b      	ldr	r3, [r3, #4]
 8016800:	4a0a      	ldr	r2, [pc, #40]	; (801682c <sys_check_timeouts+0x70>)
 8016802:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016804:	68b9      	ldr	r1, [r7, #8]
 8016806:	200a      	movs	r0, #10
 8016808:	f7f9 f99c 	bl	800fb44 <memp_free>
    if (handler != NULL) {
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d0da      	beq.n	80167c8 <sys_check_timeouts+0xc>
      handler(arg);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6838      	ldr	r0, [r7, #0]
 8016816:	4798      	blx	r3
  do {
 8016818:	e7d6      	b.n	80167c8 <sys_check_timeouts+0xc>
      return;
 801681a:	bf00      	nop
 801681c:	e000      	b.n	8016820 <sys_check_timeouts+0x64>
      return;
 801681e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016820:	3710      	adds	r7, #16
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	24004b5c 	.word	0x24004b5c
 801682c:	24004b60 	.word	0x24004b60

08016830 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b082      	sub	sp, #8
 8016834:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016836:	4b16      	ldr	r3, [pc, #88]	; (8016890 <sys_timeouts_sleeptime+0x60>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d102      	bne.n	8016844 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801683e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016842:	e020      	b.n	8016886 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016844:	f7f2 f940 	bl	8008ac8 <sys_now>
 8016848:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801684a:	4b11      	ldr	r3, [pc, #68]	; (8016890 <sys_timeouts_sleeptime+0x60>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	685a      	ldr	r2, [r3, #4]
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	1ad3      	subs	r3, r2, r3
 8016854:	0fdb      	lsrs	r3, r3, #31
 8016856:	f003 0301 	and.w	r3, r3, #1
 801685a:	b2db      	uxtb	r3, r3
 801685c:	2b00      	cmp	r3, #0
 801685e:	d001      	beq.n	8016864 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016860:	2300      	movs	r3, #0
 8016862:	e010      	b.n	8016886 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016864:	4b0a      	ldr	r3, [pc, #40]	; (8016890 <sys_timeouts_sleeptime+0x60>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	685a      	ldr	r2, [r3, #4]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	1ad3      	subs	r3, r2, r3
 801686e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	2b00      	cmp	r3, #0
 8016874:	da06      	bge.n	8016884 <sys_timeouts_sleeptime+0x54>
 8016876:	4b07      	ldr	r3, [pc, #28]	; (8016894 <sys_timeouts_sleeptime+0x64>)
 8016878:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801687c:	4906      	ldr	r1, [pc, #24]	; (8016898 <sys_timeouts_sleeptime+0x68>)
 801687e:	4807      	ldr	r0, [pc, #28]	; (801689c <sys_timeouts_sleeptime+0x6c>)
 8016880:	f000 fd78 	bl	8017374 <iprintf>
    return ret;
 8016884:	683b      	ldr	r3, [r7, #0]
  }
}
 8016886:	4618      	mov	r0, r3
 8016888:	3708      	adds	r7, #8
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	24004b5c 	.word	0x24004b5c
 8016894:	0801aecc 	.word	0x0801aecc
 8016898:	0801afd4 	.word	0x0801afd4
 801689c:	0801af74 	.word	0x0801af74

080168a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80168a4:	f000 fd7e 	bl	80173a4 <rand>
 80168a8:	4603      	mov	r3, r0
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	4b01      	ldr	r3, [pc, #4]	; (80168c0 <udp_init+0x20>)
 80168ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80168bc:	bf00      	nop
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	24000030 	.word	0x24000030

080168c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80168ca:	2300      	movs	r3, #0
 80168cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80168ce:	4b17      	ldr	r3, [pc, #92]	; (801692c <udp_new_port+0x68>)
 80168d0:	881b      	ldrh	r3, [r3, #0]
 80168d2:	1c5a      	adds	r2, r3, #1
 80168d4:	b291      	uxth	r1, r2
 80168d6:	4a15      	ldr	r2, [pc, #84]	; (801692c <udp_new_port+0x68>)
 80168d8:	8011      	strh	r1, [r2, #0]
 80168da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168de:	4293      	cmp	r3, r2
 80168e0:	d103      	bne.n	80168ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80168e2:	4b12      	ldr	r3, [pc, #72]	; (801692c <udp_new_port+0x68>)
 80168e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80168e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168ea:	4b11      	ldr	r3, [pc, #68]	; (8016930 <udp_new_port+0x6c>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	603b      	str	r3, [r7, #0]
 80168f0:	e011      	b.n	8016916 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	8a5a      	ldrh	r2, [r3, #18]
 80168f6:	4b0d      	ldr	r3, [pc, #52]	; (801692c <udp_new_port+0x68>)
 80168f8:	881b      	ldrh	r3, [r3, #0]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d108      	bne.n	8016910 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80168fe:	88fb      	ldrh	r3, [r7, #6]
 8016900:	3301      	adds	r3, #1
 8016902:	80fb      	strh	r3, [r7, #6]
 8016904:	88fb      	ldrh	r3, [r7, #6]
 8016906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801690a:	d3e0      	bcc.n	80168ce <udp_new_port+0xa>
        return 0;
 801690c:	2300      	movs	r3, #0
 801690e:	e007      	b.n	8016920 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	68db      	ldr	r3, [r3, #12]
 8016914:	603b      	str	r3, [r7, #0]
 8016916:	683b      	ldr	r3, [r7, #0]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d1ea      	bne.n	80168f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801691c:	4b03      	ldr	r3, [pc, #12]	; (801692c <udp_new_port+0x68>)
 801691e:	881b      	ldrh	r3, [r3, #0]
}
 8016920:	4618      	mov	r0, r3
 8016922:	370c      	adds	r7, #12
 8016924:	46bd      	mov	sp, r7
 8016926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692a:	4770      	bx	lr
 801692c:	24000030 	.word	0x24000030
 8016930:	24008380 	.word	0x24008380

08016934 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b084      	sub	sp, #16
 8016938:	af00      	add	r7, sp, #0
 801693a:	60f8      	str	r0, [r7, #12]
 801693c:	60b9      	str	r1, [r7, #8]
 801693e:	4613      	mov	r3, r2
 8016940:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d105      	bne.n	8016954 <udp_input_local_match+0x20>
 8016948:	4b27      	ldr	r3, [pc, #156]	; (80169e8 <udp_input_local_match+0xb4>)
 801694a:	2287      	movs	r2, #135	; 0x87
 801694c:	4927      	ldr	r1, [pc, #156]	; (80169ec <udp_input_local_match+0xb8>)
 801694e:	4828      	ldr	r0, [pc, #160]	; (80169f0 <udp_input_local_match+0xbc>)
 8016950:	f000 fd10 	bl	8017374 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d105      	bne.n	8016966 <udp_input_local_match+0x32>
 801695a:	4b23      	ldr	r3, [pc, #140]	; (80169e8 <udp_input_local_match+0xb4>)
 801695c:	2288      	movs	r2, #136	; 0x88
 801695e:	4925      	ldr	r1, [pc, #148]	; (80169f4 <udp_input_local_match+0xc0>)
 8016960:	4823      	ldr	r0, [pc, #140]	; (80169f0 <udp_input_local_match+0xbc>)
 8016962:	f000 fd07 	bl	8017374 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	7a1b      	ldrb	r3, [r3, #8]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d00b      	beq.n	8016986 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	7a1a      	ldrb	r2, [r3, #8]
 8016972:	4b21      	ldr	r3, [pc, #132]	; (80169f8 <udp_input_local_match+0xc4>)
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801697a:	3301      	adds	r3, #1
 801697c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801697e:	429a      	cmp	r2, r3
 8016980:	d001      	beq.n	8016986 <udp_input_local_match+0x52>
    return 0;
 8016982:	2300      	movs	r3, #0
 8016984:	e02b      	b.n	80169de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016986:	79fb      	ldrb	r3, [r7, #7]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d018      	beq.n	80169be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d013      	beq.n	80169ba <udp_input_local_match+0x86>
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d00f      	beq.n	80169ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801699a:	4b17      	ldr	r3, [pc, #92]	; (80169f8 <udp_input_local_match+0xc4>)
 801699c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801699e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169a2:	d00a      	beq.n	80169ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681a      	ldr	r2, [r3, #0]
 80169a8:	4b13      	ldr	r3, [pc, #76]	; (80169f8 <udp_input_local_match+0xc4>)
 80169aa:	695b      	ldr	r3, [r3, #20]
 80169ac:	405a      	eors	r2, r3
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	3308      	adds	r3, #8
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d110      	bne.n	80169dc <udp_input_local_match+0xa8>
          return 1;
 80169ba:	2301      	movs	r3, #1
 80169bc:	e00f      	b.n	80169de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d009      	beq.n	80169d8 <udp_input_local_match+0xa4>
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d005      	beq.n	80169d8 <udp_input_local_match+0xa4>
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	681a      	ldr	r2, [r3, #0]
 80169d0:	4b09      	ldr	r3, [pc, #36]	; (80169f8 <udp_input_local_match+0xc4>)
 80169d2:	695b      	ldr	r3, [r3, #20]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d101      	bne.n	80169dc <udp_input_local_match+0xa8>
        return 1;
 80169d8:	2301      	movs	r3, #1
 80169da:	e000      	b.n	80169de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80169dc:	2300      	movs	r3, #0
}
 80169de:	4618      	mov	r0, r3
 80169e0:	3710      	adds	r7, #16
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}
 80169e6:	bf00      	nop
 80169e8:	0801afe8 	.word	0x0801afe8
 80169ec:	0801b04c 	.word	0x0801b04c
 80169f0:	0801b070 	.word	0x0801b070
 80169f4:	0801b098 	.word	0x0801b098
 80169f8:	2400529c 	.word	0x2400529c

080169fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80169fc:	b590      	push	{r4, r7, lr}
 80169fe:	b08d      	sub	sp, #52	; 0x34
 8016a00:	af02      	add	r7, sp, #8
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016a06:	2300      	movs	r3, #0
 8016a08:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d105      	bne.n	8016a1c <udp_input+0x20>
 8016a10:	4b7c      	ldr	r3, [pc, #496]	; (8016c04 <udp_input+0x208>)
 8016a12:	22cf      	movs	r2, #207	; 0xcf
 8016a14:	497c      	ldr	r1, [pc, #496]	; (8016c08 <udp_input+0x20c>)
 8016a16:	487d      	ldr	r0, [pc, #500]	; (8016c0c <udp_input+0x210>)
 8016a18:	f000 fcac 	bl	8017374 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d105      	bne.n	8016a2e <udp_input+0x32>
 8016a22:	4b78      	ldr	r3, [pc, #480]	; (8016c04 <udp_input+0x208>)
 8016a24:	22d0      	movs	r2, #208	; 0xd0
 8016a26:	497a      	ldr	r1, [pc, #488]	; (8016c10 <udp_input+0x214>)
 8016a28:	4878      	ldr	r0, [pc, #480]	; (8016c0c <udp_input+0x210>)
 8016a2a:	f000 fca3 	bl	8017374 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	895b      	ldrh	r3, [r3, #10]
 8016a32:	2b07      	cmp	r3, #7
 8016a34:	d803      	bhi.n	8016a3e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7f9 ff24 	bl	8010884 <pbuf_free>
    goto end;
 8016a3c:	e0de      	b.n	8016bfc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016a44:	4b73      	ldr	r3, [pc, #460]	; (8016c14 <udp_input+0x218>)
 8016a46:	695a      	ldr	r2, [r3, #20]
 8016a48:	4b72      	ldr	r3, [pc, #456]	; (8016c14 <udp_input+0x218>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	4610      	mov	r0, r2
 8016a50:	f7f7 fcee 	bl	800e430 <ip4_addr_isbroadcast_u32>
 8016a54:	4603      	mov	r3, r0
 8016a56:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016a58:	697b      	ldr	r3, [r7, #20]
 8016a5a:	881b      	ldrh	r3, [r3, #0]
 8016a5c:	b29b      	uxth	r3, r3
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7f5 ff7a 	bl	800c958 <lwip_htons>
 8016a64:	4603      	mov	r3, r0
 8016a66:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016a68:	697b      	ldr	r3, [r7, #20]
 8016a6a:	885b      	ldrh	r3, [r3, #2]
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7f5 ff72 	bl	800c958 <lwip_htons>
 8016a74:	4603      	mov	r3, r0
 8016a76:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016a80:	2300      	movs	r3, #0
 8016a82:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a84:	4b64      	ldr	r3, [pc, #400]	; (8016c18 <udp_input+0x21c>)
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	627b      	str	r3, [r7, #36]	; 0x24
 8016a8a:	e054      	b.n	8016b36 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a8e:	8a5b      	ldrh	r3, [r3, #18]
 8016a90:	89fa      	ldrh	r2, [r7, #14]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d14a      	bne.n	8016b2c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016a96:	7cfb      	ldrb	r3, [r7, #19]
 8016a98:	461a      	mov	r2, r3
 8016a9a:	6839      	ldr	r1, [r7, #0]
 8016a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a9e:	f7ff ff49 	bl	8016934 <udp_input_local_match>
 8016aa2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d041      	beq.n	8016b2c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aaa:	7c1b      	ldrb	r3, [r3, #16]
 8016aac:	f003 0304 	and.w	r3, r3, #4
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d11d      	bne.n	8016af0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016ab4:	69fb      	ldr	r3, [r7, #28]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d102      	bne.n	8016ac0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016abc:	61fb      	str	r3, [r7, #28]
 8016abe:	e017      	b.n	8016af0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016ac0:	7cfb      	ldrb	r3, [r7, #19]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d014      	beq.n	8016af0 <udp_input+0xf4>
 8016ac6:	4b53      	ldr	r3, [pc, #332]	; (8016c14 <udp_input+0x218>)
 8016ac8:	695b      	ldr	r3, [r3, #20]
 8016aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016ace:	d10f      	bne.n	8016af0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016ad0:	69fb      	ldr	r3, [r7, #28]
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	3304      	adds	r3, #4
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d008      	beq.n	8016af0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	3304      	adds	r3, #4
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d101      	bne.n	8016af0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af2:	8a9b      	ldrh	r3, [r3, #20]
 8016af4:	8a3a      	ldrh	r2, [r7, #16]
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d118      	bne.n	8016b2c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d005      	beq.n	8016b0e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b04:	685a      	ldr	r2, [r3, #4]
 8016b06:	4b43      	ldr	r3, [pc, #268]	; (8016c14 <udp_input+0x218>)
 8016b08:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d10e      	bne.n	8016b2c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016b0e:	6a3b      	ldr	r3, [r7, #32]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d014      	beq.n	8016b3e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b16:	68da      	ldr	r2, [r3, #12]
 8016b18:	6a3b      	ldr	r3, [r7, #32]
 8016b1a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016b1c:	4b3e      	ldr	r3, [pc, #248]	; (8016c18 <udp_input+0x21c>)
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b22:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016b24:	4a3c      	ldr	r2, [pc, #240]	; (8016c18 <udp_input+0x21c>)
 8016b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b28:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016b2a:	e008      	b.n	8016b3e <udp_input+0x142>
      }
    }

    prev = pcb;
 8016b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b32:	68db      	ldr	r3, [r3, #12]
 8016b34:	627b      	str	r3, [r7, #36]	; 0x24
 8016b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d1a7      	bne.n	8016a8c <udp_input+0x90>
 8016b3c:	e000      	b.n	8016b40 <udp_input+0x144>
        break;
 8016b3e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d101      	bne.n	8016b4a <udp_input+0x14e>
    pcb = uncon_pcb;
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d002      	beq.n	8016b56 <udp_input+0x15a>
    for_us = 1;
 8016b50:	2301      	movs	r3, #1
 8016b52:	76fb      	strb	r3, [r7, #27]
 8016b54:	e00a      	b.n	8016b6c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	3304      	adds	r3, #4
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	4b2d      	ldr	r3, [pc, #180]	; (8016c14 <udp_input+0x218>)
 8016b5e:	695b      	ldr	r3, [r3, #20]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	bf0c      	ite	eq
 8016b64:	2301      	moveq	r3, #1
 8016b66:	2300      	movne	r3, #0
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016b6c:	7efb      	ldrb	r3, [r7, #27]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d041      	beq.n	8016bf6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016b72:	2108      	movs	r1, #8
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f7f9 fdff 	bl	8010778 <pbuf_remove_header>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d00a      	beq.n	8016b96 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016b80:	4b20      	ldr	r3, [pc, #128]	; (8016c04 <udp_input+0x208>)
 8016b82:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016b86:	4925      	ldr	r1, [pc, #148]	; (8016c1c <udp_input+0x220>)
 8016b88:	4820      	ldr	r0, [pc, #128]	; (8016c0c <udp_input+0x210>)
 8016b8a:	f000 fbf3 	bl	8017374 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016b8e:	6878      	ldr	r0, [r7, #4]
 8016b90:	f7f9 fe78 	bl	8010884 <pbuf_free>
      goto end;
 8016b94:	e032      	b.n	8016bfc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d012      	beq.n	8016bc2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9e:	699b      	ldr	r3, [r3, #24]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d00a      	beq.n	8016bba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba6:	699c      	ldr	r4, [r3, #24]
 8016ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016baa:	69d8      	ldr	r0, [r3, #28]
 8016bac:	8a3b      	ldrh	r3, [r7, #16]
 8016bae:	9300      	str	r3, [sp, #0]
 8016bb0:	4b1b      	ldr	r3, [pc, #108]	; (8016c20 <udp_input+0x224>)
 8016bb2:	687a      	ldr	r2, [r7, #4]
 8016bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016bb6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016bb8:	e021      	b.n	8016bfe <udp_input+0x202>
        pbuf_free(p);
 8016bba:	6878      	ldr	r0, [r7, #4]
 8016bbc:	f7f9 fe62 	bl	8010884 <pbuf_free>
        goto end;
 8016bc0:	e01c      	b.n	8016bfc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016bc2:	7cfb      	ldrb	r3, [r7, #19]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d112      	bne.n	8016bee <udp_input+0x1f2>
 8016bc8:	4b12      	ldr	r3, [pc, #72]	; (8016c14 <udp_input+0x218>)
 8016bca:	695b      	ldr	r3, [r3, #20]
 8016bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016bd0:	2be0      	cmp	r3, #224	; 0xe0
 8016bd2:	d00c      	beq.n	8016bee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016bd4:	4b0f      	ldr	r3, [pc, #60]	; (8016c14 <udp_input+0x218>)
 8016bd6:	899b      	ldrh	r3, [r3, #12]
 8016bd8:	3308      	adds	r3, #8
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	b21b      	sxth	r3, r3
 8016bde:	4619      	mov	r1, r3
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f7f9 fe3c 	bl	801085e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016be6:	2103      	movs	r1, #3
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f7f7 f825 	bl	800dc38 <icmp_dest_unreach>
      pbuf_free(p);
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f7f9 fe48 	bl	8010884 <pbuf_free>
  return;
 8016bf4:	e003      	b.n	8016bfe <udp_input+0x202>
    pbuf_free(p);
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7f9 fe44 	bl	8010884 <pbuf_free>
  return;
 8016bfc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016bfe:	372c      	adds	r7, #44	; 0x2c
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd90      	pop	{r4, r7, pc}
 8016c04:	0801afe8 	.word	0x0801afe8
 8016c08:	0801b0c0 	.word	0x0801b0c0
 8016c0c:	0801b070 	.word	0x0801b070
 8016c10:	0801b0d8 	.word	0x0801b0d8
 8016c14:	2400529c 	.word	0x2400529c
 8016c18:	24008380 	.word	0x24008380
 8016c1c:	0801b0f4 	.word	0x0801b0f4
 8016c20:	240052ac 	.word	0x240052ac

08016c24 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d109      	bne.n	8016c48 <udp_send+0x24>
 8016c34:	4b11      	ldr	r3, [pc, #68]	; (8016c7c <udp_send+0x58>)
 8016c36:	f240 12d5 	movw	r2, #469	; 0x1d5
 8016c3a:	4911      	ldr	r1, [pc, #68]	; (8016c80 <udp_send+0x5c>)
 8016c3c:	4811      	ldr	r0, [pc, #68]	; (8016c84 <udp_send+0x60>)
 8016c3e:	f000 fb99 	bl	8017374 <iprintf>
 8016c42:	f06f 030f 	mvn.w	r3, #15
 8016c46:	e015      	b.n	8016c74 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d109      	bne.n	8016c62 <udp_send+0x3e>
 8016c4e:	4b0b      	ldr	r3, [pc, #44]	; (8016c7c <udp_send+0x58>)
 8016c50:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016c54:	490c      	ldr	r1, [pc, #48]	; (8016c88 <udp_send+0x64>)
 8016c56:	480b      	ldr	r0, [pc, #44]	; (8016c84 <udp_send+0x60>)
 8016c58:	f000 fb8c 	bl	8017374 <iprintf>
 8016c5c:	f06f 030f 	mvn.w	r3, #15
 8016c60:	e008      	b.n	8016c74 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	1d1a      	adds	r2, r3, #4
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	8a9b      	ldrh	r3, [r3, #20]
 8016c6a:	6839      	ldr	r1, [r7, #0]
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f000 f80d 	bl	8016c8c <udp_sendto>
 8016c72:	4603      	mov	r3, r0
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3708      	adds	r7, #8
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}
 8016c7c:	0801afe8 	.word	0x0801afe8
 8016c80:	0801b110 	.word	0x0801b110
 8016c84:	0801b070 	.word	0x0801b070
 8016c88:	0801b128 	.word	0x0801b128

08016c8c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b088      	sub	sp, #32
 8016c90:	af02      	add	r7, sp, #8
 8016c92:	60f8      	str	r0, [r7, #12]
 8016c94:	60b9      	str	r1, [r7, #8]
 8016c96:	607a      	str	r2, [r7, #4]
 8016c98:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d109      	bne.n	8016cb4 <udp_sendto+0x28>
 8016ca0:	4b23      	ldr	r3, [pc, #140]	; (8016d30 <udp_sendto+0xa4>)
 8016ca2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016ca6:	4923      	ldr	r1, [pc, #140]	; (8016d34 <udp_sendto+0xa8>)
 8016ca8:	4823      	ldr	r0, [pc, #140]	; (8016d38 <udp_sendto+0xac>)
 8016caa:	f000 fb63 	bl	8017374 <iprintf>
 8016cae:	f06f 030f 	mvn.w	r3, #15
 8016cb2:	e038      	b.n	8016d26 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016cb4:	68bb      	ldr	r3, [r7, #8]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d109      	bne.n	8016cce <udp_sendto+0x42>
 8016cba:	4b1d      	ldr	r3, [pc, #116]	; (8016d30 <udp_sendto+0xa4>)
 8016cbc:	f240 2219 	movw	r2, #537	; 0x219
 8016cc0:	491e      	ldr	r1, [pc, #120]	; (8016d3c <udp_sendto+0xb0>)
 8016cc2:	481d      	ldr	r0, [pc, #116]	; (8016d38 <udp_sendto+0xac>)
 8016cc4:	f000 fb56 	bl	8017374 <iprintf>
 8016cc8:	f06f 030f 	mvn.w	r3, #15
 8016ccc:	e02b      	b.n	8016d26 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d109      	bne.n	8016ce8 <udp_sendto+0x5c>
 8016cd4:	4b16      	ldr	r3, [pc, #88]	; (8016d30 <udp_sendto+0xa4>)
 8016cd6:	f240 221a 	movw	r2, #538	; 0x21a
 8016cda:	4919      	ldr	r1, [pc, #100]	; (8016d40 <udp_sendto+0xb4>)
 8016cdc:	4816      	ldr	r0, [pc, #88]	; (8016d38 <udp_sendto+0xac>)
 8016cde:	f000 fb49 	bl	8017374 <iprintf>
 8016ce2:	f06f 030f 	mvn.w	r3, #15
 8016ce6:	e01e      	b.n	8016d26 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	7a1b      	ldrb	r3, [r3, #8]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d006      	beq.n	8016cfe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	7a1b      	ldrb	r3, [r3, #8]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7f9 fa3b 	bl	8010170 <netif_get_by_index>
 8016cfa:	6178      	str	r0, [r7, #20]
 8016cfc:	e003      	b.n	8016d06 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	f7f7 f902 	bl	800df08 <ip4_route>
 8016d04:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d102      	bne.n	8016d12 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016d0c:	f06f 0303 	mvn.w	r3, #3
 8016d10:	e009      	b.n	8016d26 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8016d12:	887a      	ldrh	r2, [r7, #2]
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	9300      	str	r3, [sp, #0]
 8016d18:	4613      	mov	r3, r2
 8016d1a:	687a      	ldr	r2, [r7, #4]
 8016d1c:	68b9      	ldr	r1, [r7, #8]
 8016d1e:	68f8      	ldr	r0, [r7, #12]
 8016d20:	f000 f810 	bl	8016d44 <udp_sendto_if>
 8016d24:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3718      	adds	r7, #24
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}
 8016d2e:	bf00      	nop
 8016d30:	0801afe8 	.word	0x0801afe8
 8016d34:	0801b140 	.word	0x0801b140
 8016d38:	0801b070 	.word	0x0801b070
 8016d3c:	0801b158 	.word	0x0801b158
 8016d40:	0801b174 	.word	0x0801b174

08016d44 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b088      	sub	sp, #32
 8016d48:	af02      	add	r7, sp, #8
 8016d4a:	60f8      	str	r0, [r7, #12]
 8016d4c:	60b9      	str	r1, [r7, #8]
 8016d4e:	607a      	str	r2, [r7, #4]
 8016d50:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d109      	bne.n	8016d6c <udp_sendto_if+0x28>
 8016d58:	4b2e      	ldr	r3, [pc, #184]	; (8016e14 <udp_sendto_if+0xd0>)
 8016d5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d5e:	492e      	ldr	r1, [pc, #184]	; (8016e18 <udp_sendto_if+0xd4>)
 8016d60:	482e      	ldr	r0, [pc, #184]	; (8016e1c <udp_sendto_if+0xd8>)
 8016d62:	f000 fb07 	bl	8017374 <iprintf>
 8016d66:	f06f 030f 	mvn.w	r3, #15
 8016d6a:	e04f      	b.n	8016e0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d109      	bne.n	8016d86 <udp_sendto_if+0x42>
 8016d72:	4b28      	ldr	r3, [pc, #160]	; (8016e14 <udp_sendto_if+0xd0>)
 8016d74:	f240 2281 	movw	r2, #641	; 0x281
 8016d78:	4929      	ldr	r1, [pc, #164]	; (8016e20 <udp_sendto_if+0xdc>)
 8016d7a:	4828      	ldr	r0, [pc, #160]	; (8016e1c <udp_sendto_if+0xd8>)
 8016d7c:	f000 fafa 	bl	8017374 <iprintf>
 8016d80:	f06f 030f 	mvn.w	r3, #15
 8016d84:	e042      	b.n	8016e0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d109      	bne.n	8016da0 <udp_sendto_if+0x5c>
 8016d8c:	4b21      	ldr	r3, [pc, #132]	; (8016e14 <udp_sendto_if+0xd0>)
 8016d8e:	f240 2282 	movw	r2, #642	; 0x282
 8016d92:	4924      	ldr	r1, [pc, #144]	; (8016e24 <udp_sendto_if+0xe0>)
 8016d94:	4821      	ldr	r0, [pc, #132]	; (8016e1c <udp_sendto_if+0xd8>)
 8016d96:	f000 faed 	bl	8017374 <iprintf>
 8016d9a:	f06f 030f 	mvn.w	r3, #15
 8016d9e:	e035      	b.n	8016e0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016da0:	6a3b      	ldr	r3, [r7, #32]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d109      	bne.n	8016dba <udp_sendto_if+0x76>
 8016da6:	4b1b      	ldr	r3, [pc, #108]	; (8016e14 <udp_sendto_if+0xd0>)
 8016da8:	f240 2283 	movw	r2, #643	; 0x283
 8016dac:	491e      	ldr	r1, [pc, #120]	; (8016e28 <udp_sendto_if+0xe4>)
 8016dae:	481b      	ldr	r0, [pc, #108]	; (8016e1c <udp_sendto_if+0xd8>)
 8016db0:	f000 fae0 	bl	8017374 <iprintf>
 8016db4:	f06f 030f 	mvn.w	r3, #15
 8016db8:	e028      	b.n	8016e0c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d009      	beq.n	8016dd4 <udp_sendto_if+0x90>
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d005      	beq.n	8016dd4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016dd0:	2be0      	cmp	r3, #224	; 0xe0
 8016dd2:	d103      	bne.n	8016ddc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016dd4:	6a3b      	ldr	r3, [r7, #32]
 8016dd6:	3304      	adds	r3, #4
 8016dd8:	617b      	str	r3, [r7, #20]
 8016dda:	e00b      	b.n	8016df4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681a      	ldr	r2, [r3, #0]
 8016de0:	6a3b      	ldr	r3, [r7, #32]
 8016de2:	3304      	adds	r3, #4
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d002      	beq.n	8016df0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016dea:	f06f 0303 	mvn.w	r3, #3
 8016dee:	e00d      	b.n	8016e0c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016df4:	887a      	ldrh	r2, [r7, #2]
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	9301      	str	r3, [sp, #4]
 8016dfa:	6a3b      	ldr	r3, [r7, #32]
 8016dfc:	9300      	str	r3, [sp, #0]
 8016dfe:	4613      	mov	r3, r2
 8016e00:	687a      	ldr	r2, [r7, #4]
 8016e02:	68b9      	ldr	r1, [r7, #8]
 8016e04:	68f8      	ldr	r0, [r7, #12]
 8016e06:	f000 f811 	bl	8016e2c <udp_sendto_if_src>
 8016e0a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	3718      	adds	r7, #24
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}
 8016e14:	0801afe8 	.word	0x0801afe8
 8016e18:	0801b190 	.word	0x0801b190
 8016e1c:	0801b070 	.word	0x0801b070
 8016e20:	0801b1ac 	.word	0x0801b1ac
 8016e24:	0801b1c8 	.word	0x0801b1c8
 8016e28:	0801b1e8 	.word	0x0801b1e8

08016e2c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b08c      	sub	sp, #48	; 0x30
 8016e30:	af04      	add	r7, sp, #16
 8016e32:	60f8      	str	r0, [r7, #12]
 8016e34:	60b9      	str	r1, [r7, #8]
 8016e36:	607a      	str	r2, [r7, #4]
 8016e38:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d109      	bne.n	8016e54 <udp_sendto_if_src+0x28>
 8016e40:	4b65      	ldr	r3, [pc, #404]	; (8016fd8 <udp_sendto_if_src+0x1ac>)
 8016e42:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016e46:	4965      	ldr	r1, [pc, #404]	; (8016fdc <udp_sendto_if_src+0x1b0>)
 8016e48:	4865      	ldr	r0, [pc, #404]	; (8016fe0 <udp_sendto_if_src+0x1b4>)
 8016e4a:	f000 fa93 	bl	8017374 <iprintf>
 8016e4e:	f06f 030f 	mvn.w	r3, #15
 8016e52:	e0bc      	b.n	8016fce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d109      	bne.n	8016e6e <udp_sendto_if_src+0x42>
 8016e5a:	4b5f      	ldr	r3, [pc, #380]	; (8016fd8 <udp_sendto_if_src+0x1ac>)
 8016e5c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016e60:	4960      	ldr	r1, [pc, #384]	; (8016fe4 <udp_sendto_if_src+0x1b8>)
 8016e62:	485f      	ldr	r0, [pc, #380]	; (8016fe0 <udp_sendto_if_src+0x1b4>)
 8016e64:	f000 fa86 	bl	8017374 <iprintf>
 8016e68:	f06f 030f 	mvn.w	r3, #15
 8016e6c:	e0af      	b.n	8016fce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d109      	bne.n	8016e88 <udp_sendto_if_src+0x5c>
 8016e74:	4b58      	ldr	r3, [pc, #352]	; (8016fd8 <udp_sendto_if_src+0x1ac>)
 8016e76:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016e7a:	495b      	ldr	r1, [pc, #364]	; (8016fe8 <udp_sendto_if_src+0x1bc>)
 8016e7c:	4858      	ldr	r0, [pc, #352]	; (8016fe0 <udp_sendto_if_src+0x1b4>)
 8016e7e:	f000 fa79 	bl	8017374 <iprintf>
 8016e82:	f06f 030f 	mvn.w	r3, #15
 8016e86:	e0a2      	b.n	8016fce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d109      	bne.n	8016ea2 <udp_sendto_if_src+0x76>
 8016e8e:	4b52      	ldr	r3, [pc, #328]	; (8016fd8 <udp_sendto_if_src+0x1ac>)
 8016e90:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016e94:	4955      	ldr	r1, [pc, #340]	; (8016fec <udp_sendto_if_src+0x1c0>)
 8016e96:	4852      	ldr	r0, [pc, #328]	; (8016fe0 <udp_sendto_if_src+0x1b4>)
 8016e98:	f000 fa6c 	bl	8017374 <iprintf>
 8016e9c:	f06f 030f 	mvn.w	r3, #15
 8016ea0:	e095      	b.n	8016fce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d109      	bne.n	8016ebc <udp_sendto_if_src+0x90>
 8016ea8:	4b4b      	ldr	r3, [pc, #300]	; (8016fd8 <udp_sendto_if_src+0x1ac>)
 8016eaa:	f240 22d5 	movw	r2, #725	; 0x2d5
 8016eae:	4950      	ldr	r1, [pc, #320]	; (8016ff0 <udp_sendto_if_src+0x1c4>)
 8016eb0:	484b      	ldr	r0, [pc, #300]	; (8016fe0 <udp_sendto_if_src+0x1b4>)
 8016eb2:	f000 fa5f 	bl	8017374 <iprintf>
 8016eb6:	f06f 030f 	mvn.w	r3, #15
 8016eba:	e088      	b.n	8016fce <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	8a5b      	ldrh	r3, [r3, #18]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d10f      	bne.n	8016ee4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016ec4:	68f9      	ldr	r1, [r7, #12]
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	8a5b      	ldrh	r3, [r3, #18]
 8016eca:	461a      	mov	r2, r3
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f000 f893 	bl	8016ff8 <udp_bind>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016ed6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d002      	beq.n	8016ee4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016ede:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016ee2:	e074      	b.n	8016fce <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	891b      	ldrh	r3, [r3, #8]
 8016ee8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016eec:	4293      	cmp	r3, r2
 8016eee:	d902      	bls.n	8016ef6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ef4:	e06b      	b.n	8016fce <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016ef6:	2108      	movs	r1, #8
 8016ef8:	68b8      	ldr	r0, [r7, #8]
 8016efa:	f7f9 fc2d 	bl	8010758 <pbuf_add_header>
 8016efe:	4603      	mov	r3, r0
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d015      	beq.n	8016f30 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016f04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f08:	2108      	movs	r1, #8
 8016f0a:	2022      	movs	r0, #34	; 0x22
 8016f0c:	f7f9 f9da 	bl	80102c4 <pbuf_alloc>
 8016f10:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d102      	bne.n	8016f1e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f1c:	e057      	b.n	8016fce <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	891b      	ldrh	r3, [r3, #8]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d006      	beq.n	8016f34 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016f26:	68b9      	ldr	r1, [r7, #8]
 8016f28:	69f8      	ldr	r0, [r7, #28]
 8016f2a:	f7f9 fdcf 	bl	8010acc <pbuf_chain>
 8016f2e:	e001      	b.n	8016f34 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	895b      	ldrh	r3, [r3, #10]
 8016f38:	2b07      	cmp	r3, #7
 8016f3a:	d806      	bhi.n	8016f4a <udp_sendto_if_src+0x11e>
 8016f3c:	4b26      	ldr	r3, [pc, #152]	; (8016fd8 <udp_sendto_if_src+0x1ac>)
 8016f3e:	f240 320e 	movw	r2, #782	; 0x30e
 8016f42:	492c      	ldr	r1, [pc, #176]	; (8016ff4 <udp_sendto_if_src+0x1c8>)
 8016f44:	4826      	ldr	r0, [pc, #152]	; (8016fe0 <udp_sendto_if_src+0x1b4>)
 8016f46:	f000 fa15 	bl	8017374 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016f4a:	69fb      	ldr	r3, [r7, #28]
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	8a5b      	ldrh	r3, [r3, #18]
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7f5 fcff 	bl	800c958 <lwip_htons>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016f62:	887b      	ldrh	r3, [r7, #2]
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7f5 fcf7 	bl	800c958 <lwip_htons>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	2200      	movs	r2, #0
 8016f76:	719a      	strb	r2, [r3, #6]
 8016f78:	2200      	movs	r2, #0
 8016f7a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	891b      	ldrh	r3, [r3, #8]
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7f5 fce9 	bl	800c958 <lwip_htons>
 8016f86:	4603      	mov	r3, r0
 8016f88:	461a      	mov	r2, r3
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016f8e:	2311      	movs	r3, #17
 8016f90:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	7adb      	ldrb	r3, [r3, #11]
 8016f96:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	7a9b      	ldrb	r3, [r3, #10]
 8016f9c:	7cb9      	ldrb	r1, [r7, #18]
 8016f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016fa0:	9202      	str	r2, [sp, #8]
 8016fa2:	7cfa      	ldrb	r2, [r7, #19]
 8016fa4:	9201      	str	r2, [sp, #4]
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	460b      	mov	r3, r1
 8016faa:	687a      	ldr	r2, [r7, #4]
 8016fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016fae:	69f8      	ldr	r0, [r7, #28]
 8016fb0:	f7f7 f990 	bl	800e2d4 <ip4_output_if_src>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016fb8:	69fa      	ldr	r2, [r7, #28]
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d004      	beq.n	8016fca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016fc0:	69f8      	ldr	r0, [r7, #28]
 8016fc2:	f7f9 fc5f 	bl	8010884 <pbuf_free>
    q = NULL;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016fca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	3720      	adds	r7, #32
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bd80      	pop	{r7, pc}
 8016fd6:	bf00      	nop
 8016fd8:	0801afe8 	.word	0x0801afe8
 8016fdc:	0801b208 	.word	0x0801b208
 8016fe0:	0801b070 	.word	0x0801b070
 8016fe4:	0801b228 	.word	0x0801b228
 8016fe8:	0801b248 	.word	0x0801b248
 8016fec:	0801b26c 	.word	0x0801b26c
 8016ff0:	0801b290 	.word	0x0801b290
 8016ff4:	0801b2b4 	.word	0x0801b2b4

08016ff8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b086      	sub	sp, #24
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	60f8      	str	r0, [r7, #12]
 8017000:	60b9      	str	r1, [r7, #8]
 8017002:	4613      	mov	r3, r2
 8017004:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d101      	bne.n	8017010 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801700c:	4b39      	ldr	r3, [pc, #228]	; (80170f4 <udp_bind+0xfc>)
 801700e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d109      	bne.n	801702a <udp_bind+0x32>
 8017016:	4b38      	ldr	r3, [pc, #224]	; (80170f8 <udp_bind+0x100>)
 8017018:	f240 32b7 	movw	r2, #951	; 0x3b7
 801701c:	4937      	ldr	r1, [pc, #220]	; (80170fc <udp_bind+0x104>)
 801701e:	4838      	ldr	r0, [pc, #224]	; (8017100 <udp_bind+0x108>)
 8017020:	f000 f9a8 	bl	8017374 <iprintf>
 8017024:	f06f 030f 	mvn.w	r3, #15
 8017028:	e060      	b.n	80170ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801702a:	2300      	movs	r3, #0
 801702c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801702e:	4b35      	ldr	r3, [pc, #212]	; (8017104 <udp_bind+0x10c>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	617b      	str	r3, [r7, #20]
 8017034:	e009      	b.n	801704a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	429a      	cmp	r2, r3
 801703c:	d102      	bne.n	8017044 <udp_bind+0x4c>
      rebind = 1;
 801703e:	2301      	movs	r3, #1
 8017040:	74fb      	strb	r3, [r7, #19]
      break;
 8017042:	e005      	b.n	8017050 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	617b      	str	r3, [r7, #20]
 801704a:	697b      	ldr	r3, [r7, #20]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d1f2      	bne.n	8017036 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017050:	88fb      	ldrh	r3, [r7, #6]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d109      	bne.n	801706a <udp_bind+0x72>
    port = udp_new_port();
 8017056:	f7ff fc35 	bl	80168c4 <udp_new_port>
 801705a:	4603      	mov	r3, r0
 801705c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801705e:	88fb      	ldrh	r3, [r7, #6]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d12c      	bne.n	80170be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017064:	f06f 0307 	mvn.w	r3, #7
 8017068:	e040      	b.n	80170ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801706a:	4b26      	ldr	r3, [pc, #152]	; (8017104 <udp_bind+0x10c>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	617b      	str	r3, [r7, #20]
 8017070:	e022      	b.n	80170b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017072:	68fa      	ldr	r2, [r7, #12]
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	429a      	cmp	r2, r3
 8017078:	d01b      	beq.n	80170b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	8a5b      	ldrh	r3, [r3, #18]
 801707e:	88fa      	ldrh	r2, [r7, #6]
 8017080:	429a      	cmp	r2, r3
 8017082:	d116      	bne.n	80170b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	681a      	ldr	r2, [r3, #0]
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801708c:	429a      	cmp	r2, r3
 801708e:	d00d      	beq.n	80170ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00a      	beq.n	80170ac <udp_bind+0xb4>
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d006      	beq.n	80170ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801709e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d003      	beq.n	80170ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d102      	bne.n	80170b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80170ac:	f06f 0307 	mvn.w	r3, #7
 80170b0:	e01c      	b.n	80170ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80170b2:	697b      	ldr	r3, [r7, #20]
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	617b      	str	r3, [r7, #20]
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d1d9      	bne.n	8017072 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d002      	beq.n	80170ca <udp_bind+0xd2>
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	e000      	b.n	80170cc <udp_bind+0xd4>
 80170ca:	2300      	movs	r3, #0
 80170cc:	68fa      	ldr	r2, [r7, #12]
 80170ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	88fa      	ldrh	r2, [r7, #6]
 80170d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80170d6:	7cfb      	ldrb	r3, [r7, #19]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d106      	bne.n	80170ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80170dc:	4b09      	ldr	r3, [pc, #36]	; (8017104 <udp_bind+0x10c>)
 80170de:	681a      	ldr	r2, [r3, #0]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80170e4:	4a07      	ldr	r2, [pc, #28]	; (8017104 <udp_bind+0x10c>)
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80170ea:	2300      	movs	r3, #0
}
 80170ec:	4618      	mov	r0, r3
 80170ee:	3718      	adds	r7, #24
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	0801b40c 	.word	0x0801b40c
 80170f8:	0801afe8 	.word	0x0801afe8
 80170fc:	0801b2e4 	.word	0x0801b2e4
 8017100:	0801b070 	.word	0x0801b070
 8017104:	24008380 	.word	0x24008380

08017108 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b086      	sub	sp, #24
 801710c:	af00      	add	r7, sp, #0
 801710e:	60f8      	str	r0, [r7, #12]
 8017110:	60b9      	str	r1, [r7, #8]
 8017112:	4613      	mov	r3, r2
 8017114:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d109      	bne.n	8017130 <udp_connect+0x28>
 801711c:	4b2c      	ldr	r3, [pc, #176]	; (80171d0 <udp_connect+0xc8>)
 801711e:	f240 4235 	movw	r2, #1077	; 0x435
 8017122:	492c      	ldr	r1, [pc, #176]	; (80171d4 <udp_connect+0xcc>)
 8017124:	482c      	ldr	r0, [pc, #176]	; (80171d8 <udp_connect+0xd0>)
 8017126:	f000 f925 	bl	8017374 <iprintf>
 801712a:	f06f 030f 	mvn.w	r3, #15
 801712e:	e04b      	b.n	80171c8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d109      	bne.n	801714a <udp_connect+0x42>
 8017136:	4b26      	ldr	r3, [pc, #152]	; (80171d0 <udp_connect+0xc8>)
 8017138:	f240 4236 	movw	r2, #1078	; 0x436
 801713c:	4927      	ldr	r1, [pc, #156]	; (80171dc <udp_connect+0xd4>)
 801713e:	4826      	ldr	r0, [pc, #152]	; (80171d8 <udp_connect+0xd0>)
 8017140:	f000 f918 	bl	8017374 <iprintf>
 8017144:	f06f 030f 	mvn.w	r3, #15
 8017148:	e03e      	b.n	80171c8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	8a5b      	ldrh	r3, [r3, #18]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d10f      	bne.n	8017172 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017152:	68f9      	ldr	r1, [r7, #12]
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	8a5b      	ldrh	r3, [r3, #18]
 8017158:	461a      	mov	r2, r3
 801715a:	68f8      	ldr	r0, [r7, #12]
 801715c:	f7ff ff4c 	bl	8016ff8 <udp_bind>
 8017160:	4603      	mov	r3, r0
 8017162:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d002      	beq.n	8017172 <udp_connect+0x6a>
      return err;
 801716c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017170:	e02a      	b.n	80171c8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017172:	68bb      	ldr	r3, [r7, #8]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d002      	beq.n	801717e <udp_connect+0x76>
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	e000      	b.n	8017180 <udp_connect+0x78>
 801717e:	2300      	movs	r3, #0
 8017180:	68fa      	ldr	r2, [r7, #12]
 8017182:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	88fa      	ldrh	r2, [r7, #6]
 8017188:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	7c1b      	ldrb	r3, [r3, #16]
 801718e:	f043 0304 	orr.w	r3, r3, #4
 8017192:	b2da      	uxtb	r2, r3
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017198:	4b11      	ldr	r3, [pc, #68]	; (80171e0 <udp_connect+0xd8>)
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	617b      	str	r3, [r7, #20]
 801719e:	e008      	b.n	80171b2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80171a0:	68fa      	ldr	r2, [r7, #12]
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	429a      	cmp	r2, r3
 80171a6:	d101      	bne.n	80171ac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80171a8:	2300      	movs	r3, #0
 80171aa:	e00d      	b.n	80171c8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	68db      	ldr	r3, [r3, #12]
 80171b0:	617b      	str	r3, [r7, #20]
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d1f3      	bne.n	80171a0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80171b8:	4b09      	ldr	r3, [pc, #36]	; (80171e0 <udp_connect+0xd8>)
 80171ba:	681a      	ldr	r2, [r3, #0]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80171c0:	4a07      	ldr	r2, [pc, #28]	; (80171e0 <udp_connect+0xd8>)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80171c6:	2300      	movs	r3, #0
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3718      	adds	r7, #24
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}
 80171d0:	0801afe8 	.word	0x0801afe8
 80171d4:	0801b2fc 	.word	0x0801b2fc
 80171d8:	0801b070 	.word	0x0801b070
 80171dc:	0801b318 	.word	0x0801b318
 80171e0:	24008380 	.word	0x24008380

080171e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d107      	bne.n	8017206 <udp_recv+0x22>
 80171f6:	4b08      	ldr	r3, [pc, #32]	; (8017218 <udp_recv+0x34>)
 80171f8:	f240 428a 	movw	r2, #1162	; 0x48a
 80171fc:	4907      	ldr	r1, [pc, #28]	; (801721c <udp_recv+0x38>)
 80171fe:	4808      	ldr	r0, [pc, #32]	; (8017220 <udp_recv+0x3c>)
 8017200:	f000 f8b8 	bl	8017374 <iprintf>
 8017204:	e005      	b.n	8017212 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	68ba      	ldr	r2, [r7, #8]
 801720a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	61da      	str	r2, [r3, #28]
}
 8017212:	3710      	adds	r7, #16
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}
 8017218:	0801afe8 	.word	0x0801afe8
 801721c:	0801b350 	.word	0x0801b350
 8017220:	0801b070 	.word	0x0801b070

08017224 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801722a:	2000      	movs	r0, #0
 801722c:	f7f8 fc14 	bl	800fa58 <memp_malloc>
 8017230:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d007      	beq.n	8017248 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017238:	2220      	movs	r2, #32
 801723a:	2100      	movs	r1, #0
 801723c:	6878      	ldr	r0, [r7, #4]
 801723e:	f000 f890 	bl	8017362 <memset>
    pcb->ttl = UDP_TTL;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	22ff      	movs	r2, #255	; 0xff
 8017246:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017248:	687b      	ldr	r3, [r7, #4]
}
 801724a:	4618      	mov	r0, r3
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
	...

08017254 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017254:	b480      	push	{r7}
 8017256:	b085      	sub	sp, #20
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d01e      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d01a      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d017      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d013      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801727a:	4b0d      	ldr	r3, [pc, #52]	; (80172b0 <udp_netif_ip_addr_changed+0x5c>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	60fb      	str	r3, [r7, #12]
 8017280:	e00c      	b.n	801729c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	429a      	cmp	r2, r3
 801728c:	d103      	bne.n	8017296 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	68db      	ldr	r3, [r3, #12]
 801729a:	60fb      	str	r3, [r7, #12]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d1ef      	bne.n	8017282 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80172a2:	bf00      	nop
 80172a4:	3714      	adds	r7, #20
 80172a6:	46bd      	mov	sp, r7
 80172a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	24008380 	.word	0x24008380

080172b4 <__libc_init_array>:
 80172b4:	b570      	push	{r4, r5, r6, lr}
 80172b6:	4e0d      	ldr	r6, [pc, #52]	; (80172ec <__libc_init_array+0x38>)
 80172b8:	4c0d      	ldr	r4, [pc, #52]	; (80172f0 <__libc_init_array+0x3c>)
 80172ba:	1ba4      	subs	r4, r4, r6
 80172bc:	10a4      	asrs	r4, r4, #2
 80172be:	2500      	movs	r5, #0
 80172c0:	42a5      	cmp	r5, r4
 80172c2:	d109      	bne.n	80172d8 <__libc_init_array+0x24>
 80172c4:	4e0b      	ldr	r6, [pc, #44]	; (80172f4 <__libc_init_array+0x40>)
 80172c6:	4c0c      	ldr	r4, [pc, #48]	; (80172f8 <__libc_init_array+0x44>)
 80172c8:	f001 f924 	bl	8018514 <_init>
 80172cc:	1ba4      	subs	r4, r4, r6
 80172ce:	10a4      	asrs	r4, r4, #2
 80172d0:	2500      	movs	r5, #0
 80172d2:	42a5      	cmp	r5, r4
 80172d4:	d105      	bne.n	80172e2 <__libc_init_array+0x2e>
 80172d6:	bd70      	pop	{r4, r5, r6, pc}
 80172d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80172dc:	4798      	blx	r3
 80172de:	3501      	adds	r5, #1
 80172e0:	e7ee      	b.n	80172c0 <__libc_init_array+0xc>
 80172e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80172e6:	4798      	blx	r3
 80172e8:	3501      	adds	r5, #1
 80172ea:	e7f2      	b.n	80172d2 <__libc_init_array+0x1e>
 80172ec:	0801b5c0 	.word	0x0801b5c0
 80172f0:	0801b5c0 	.word	0x0801b5c0
 80172f4:	0801b5c0 	.word	0x0801b5c0
 80172f8:	0801b5c4 	.word	0x0801b5c4

080172fc <memcmp>:
 80172fc:	b530      	push	{r4, r5, lr}
 80172fe:	2400      	movs	r4, #0
 8017300:	42a2      	cmp	r2, r4
 8017302:	d101      	bne.n	8017308 <memcmp+0xc>
 8017304:	2000      	movs	r0, #0
 8017306:	e007      	b.n	8017318 <memcmp+0x1c>
 8017308:	5d03      	ldrb	r3, [r0, r4]
 801730a:	3401      	adds	r4, #1
 801730c:	190d      	adds	r5, r1, r4
 801730e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017312:	42ab      	cmp	r3, r5
 8017314:	d0f4      	beq.n	8017300 <memcmp+0x4>
 8017316:	1b58      	subs	r0, r3, r5
 8017318:	bd30      	pop	{r4, r5, pc}

0801731a <memcpy>:
 801731a:	b510      	push	{r4, lr}
 801731c:	1e43      	subs	r3, r0, #1
 801731e:	440a      	add	r2, r1
 8017320:	4291      	cmp	r1, r2
 8017322:	d100      	bne.n	8017326 <memcpy+0xc>
 8017324:	bd10      	pop	{r4, pc}
 8017326:	f811 4b01 	ldrb.w	r4, [r1], #1
 801732a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801732e:	e7f7      	b.n	8017320 <memcpy+0x6>

08017330 <memmove>:
 8017330:	4288      	cmp	r0, r1
 8017332:	b510      	push	{r4, lr}
 8017334:	eb01 0302 	add.w	r3, r1, r2
 8017338:	d807      	bhi.n	801734a <memmove+0x1a>
 801733a:	1e42      	subs	r2, r0, #1
 801733c:	4299      	cmp	r1, r3
 801733e:	d00a      	beq.n	8017356 <memmove+0x26>
 8017340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017344:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017348:	e7f8      	b.n	801733c <memmove+0xc>
 801734a:	4283      	cmp	r3, r0
 801734c:	d9f5      	bls.n	801733a <memmove+0xa>
 801734e:	1881      	adds	r1, r0, r2
 8017350:	1ad2      	subs	r2, r2, r3
 8017352:	42d3      	cmn	r3, r2
 8017354:	d100      	bne.n	8017358 <memmove+0x28>
 8017356:	bd10      	pop	{r4, pc}
 8017358:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801735c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017360:	e7f7      	b.n	8017352 <memmove+0x22>

08017362 <memset>:
 8017362:	4402      	add	r2, r0
 8017364:	4603      	mov	r3, r0
 8017366:	4293      	cmp	r3, r2
 8017368:	d100      	bne.n	801736c <memset+0xa>
 801736a:	4770      	bx	lr
 801736c:	f803 1b01 	strb.w	r1, [r3], #1
 8017370:	e7f9      	b.n	8017366 <memset+0x4>
	...

08017374 <iprintf>:
 8017374:	b40f      	push	{r0, r1, r2, r3}
 8017376:	4b0a      	ldr	r3, [pc, #40]	; (80173a0 <iprintf+0x2c>)
 8017378:	b513      	push	{r0, r1, r4, lr}
 801737a:	681c      	ldr	r4, [r3, #0]
 801737c:	b124      	cbz	r4, 8017388 <iprintf+0x14>
 801737e:	69a3      	ldr	r3, [r4, #24]
 8017380:	b913      	cbnz	r3, 8017388 <iprintf+0x14>
 8017382:	4620      	mov	r0, r4
 8017384:	f000 f8b2 	bl	80174ec <__sinit>
 8017388:	ab05      	add	r3, sp, #20
 801738a:	9a04      	ldr	r2, [sp, #16]
 801738c:	68a1      	ldr	r1, [r4, #8]
 801738e:	9301      	str	r3, [sp, #4]
 8017390:	4620      	mov	r0, r4
 8017392:	f000 fb61 	bl	8017a58 <_vfiprintf_r>
 8017396:	b002      	add	sp, #8
 8017398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801739c:	b004      	add	sp, #16
 801739e:	4770      	bx	lr
 80173a0:	24000034 	.word	0x24000034

080173a4 <rand>:
 80173a4:	b538      	push	{r3, r4, r5, lr}
 80173a6:	4b13      	ldr	r3, [pc, #76]	; (80173f4 <rand+0x50>)
 80173a8:	681c      	ldr	r4, [r3, #0]
 80173aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80173ac:	b97b      	cbnz	r3, 80173ce <rand+0x2a>
 80173ae:	2018      	movs	r0, #24
 80173b0:	f000 f926 	bl	8017600 <malloc>
 80173b4:	4a10      	ldr	r2, [pc, #64]	; (80173f8 <rand+0x54>)
 80173b6:	4b11      	ldr	r3, [pc, #68]	; (80173fc <rand+0x58>)
 80173b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80173ba:	e9c0 2300 	strd	r2, r3, [r0]
 80173be:	4b10      	ldr	r3, [pc, #64]	; (8017400 <rand+0x5c>)
 80173c0:	6083      	str	r3, [r0, #8]
 80173c2:	230b      	movs	r3, #11
 80173c4:	8183      	strh	r3, [r0, #12]
 80173c6:	2201      	movs	r2, #1
 80173c8:	2300      	movs	r3, #0
 80173ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80173ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80173d0:	480c      	ldr	r0, [pc, #48]	; (8017404 <rand+0x60>)
 80173d2:	690a      	ldr	r2, [r1, #16]
 80173d4:	694b      	ldr	r3, [r1, #20]
 80173d6:	4c0c      	ldr	r4, [pc, #48]	; (8017408 <rand+0x64>)
 80173d8:	4350      	muls	r0, r2
 80173da:	fb04 0003 	mla	r0, r4, r3, r0
 80173de:	fba2 2304 	umull	r2, r3, r2, r4
 80173e2:	4403      	add	r3, r0
 80173e4:	1c54      	adds	r4, r2, #1
 80173e6:	f143 0500 	adc.w	r5, r3, #0
 80173ea:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80173ee:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80173f2:	bd38      	pop	{r3, r4, r5, pc}
 80173f4:	24000034 	.word	0x24000034
 80173f8:	abcd330e 	.word	0xabcd330e
 80173fc:	e66d1234 	.word	0xe66d1234
 8017400:	0005deec 	.word	0x0005deec
 8017404:	5851f42d 	.word	0x5851f42d
 8017408:	4c957f2d 	.word	0x4c957f2d

0801740c <siprintf>:
 801740c:	b40e      	push	{r1, r2, r3}
 801740e:	b500      	push	{lr}
 8017410:	b09c      	sub	sp, #112	; 0x70
 8017412:	ab1d      	add	r3, sp, #116	; 0x74
 8017414:	9002      	str	r0, [sp, #8]
 8017416:	9006      	str	r0, [sp, #24]
 8017418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801741c:	4809      	ldr	r0, [pc, #36]	; (8017444 <siprintf+0x38>)
 801741e:	9107      	str	r1, [sp, #28]
 8017420:	9104      	str	r1, [sp, #16]
 8017422:	4909      	ldr	r1, [pc, #36]	; (8017448 <siprintf+0x3c>)
 8017424:	f853 2b04 	ldr.w	r2, [r3], #4
 8017428:	9105      	str	r1, [sp, #20]
 801742a:	6800      	ldr	r0, [r0, #0]
 801742c:	9301      	str	r3, [sp, #4]
 801742e:	a902      	add	r1, sp, #8
 8017430:	f000 f9f0 	bl	8017814 <_svfiprintf_r>
 8017434:	9b02      	ldr	r3, [sp, #8]
 8017436:	2200      	movs	r2, #0
 8017438:	701a      	strb	r2, [r3, #0]
 801743a:	b01c      	add	sp, #112	; 0x70
 801743c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017440:	b003      	add	sp, #12
 8017442:	4770      	bx	lr
 8017444:	24000034 	.word	0x24000034
 8017448:	ffff0208 	.word	0xffff0208

0801744c <strcat>:
 801744c:	b510      	push	{r4, lr}
 801744e:	4603      	mov	r3, r0
 8017450:	781a      	ldrb	r2, [r3, #0]
 8017452:	1c5c      	adds	r4, r3, #1
 8017454:	b93a      	cbnz	r2, 8017466 <strcat+0x1a>
 8017456:	3b01      	subs	r3, #1
 8017458:	f811 2b01 	ldrb.w	r2, [r1], #1
 801745c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017460:	2a00      	cmp	r2, #0
 8017462:	d1f9      	bne.n	8017458 <strcat+0xc>
 8017464:	bd10      	pop	{r4, pc}
 8017466:	4623      	mov	r3, r4
 8017468:	e7f2      	b.n	8017450 <strcat+0x4>
	...

0801746c <std>:
 801746c:	2300      	movs	r3, #0
 801746e:	b510      	push	{r4, lr}
 8017470:	4604      	mov	r4, r0
 8017472:	e9c0 3300 	strd	r3, r3, [r0]
 8017476:	6083      	str	r3, [r0, #8]
 8017478:	8181      	strh	r1, [r0, #12]
 801747a:	6643      	str	r3, [r0, #100]	; 0x64
 801747c:	81c2      	strh	r2, [r0, #14]
 801747e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017482:	6183      	str	r3, [r0, #24]
 8017484:	4619      	mov	r1, r3
 8017486:	2208      	movs	r2, #8
 8017488:	305c      	adds	r0, #92	; 0x5c
 801748a:	f7ff ff6a 	bl	8017362 <memset>
 801748e:	4b05      	ldr	r3, [pc, #20]	; (80174a4 <std+0x38>)
 8017490:	6263      	str	r3, [r4, #36]	; 0x24
 8017492:	4b05      	ldr	r3, [pc, #20]	; (80174a8 <std+0x3c>)
 8017494:	62a3      	str	r3, [r4, #40]	; 0x28
 8017496:	4b05      	ldr	r3, [pc, #20]	; (80174ac <std+0x40>)
 8017498:	62e3      	str	r3, [r4, #44]	; 0x2c
 801749a:	4b05      	ldr	r3, [pc, #20]	; (80174b0 <std+0x44>)
 801749c:	6224      	str	r4, [r4, #32]
 801749e:	6323      	str	r3, [r4, #48]	; 0x30
 80174a0:	bd10      	pop	{r4, pc}
 80174a2:	bf00      	nop
 80174a4:	08017fb5 	.word	0x08017fb5
 80174a8:	08017fd7 	.word	0x08017fd7
 80174ac:	0801800f 	.word	0x0801800f
 80174b0:	08018033 	.word	0x08018033

080174b4 <_cleanup_r>:
 80174b4:	4901      	ldr	r1, [pc, #4]	; (80174bc <_cleanup_r+0x8>)
 80174b6:	f000 b885 	b.w	80175c4 <_fwalk_reent>
 80174ba:	bf00      	nop
 80174bc:	0801830d 	.word	0x0801830d

080174c0 <__sfmoreglue>:
 80174c0:	b570      	push	{r4, r5, r6, lr}
 80174c2:	1e4a      	subs	r2, r1, #1
 80174c4:	2568      	movs	r5, #104	; 0x68
 80174c6:	4355      	muls	r5, r2
 80174c8:	460e      	mov	r6, r1
 80174ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80174ce:	f000 f8ed 	bl	80176ac <_malloc_r>
 80174d2:	4604      	mov	r4, r0
 80174d4:	b140      	cbz	r0, 80174e8 <__sfmoreglue+0x28>
 80174d6:	2100      	movs	r1, #0
 80174d8:	e9c0 1600 	strd	r1, r6, [r0]
 80174dc:	300c      	adds	r0, #12
 80174de:	60a0      	str	r0, [r4, #8]
 80174e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80174e4:	f7ff ff3d 	bl	8017362 <memset>
 80174e8:	4620      	mov	r0, r4
 80174ea:	bd70      	pop	{r4, r5, r6, pc}

080174ec <__sinit>:
 80174ec:	6983      	ldr	r3, [r0, #24]
 80174ee:	b510      	push	{r4, lr}
 80174f0:	4604      	mov	r4, r0
 80174f2:	bb33      	cbnz	r3, 8017542 <__sinit+0x56>
 80174f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80174f8:	6503      	str	r3, [r0, #80]	; 0x50
 80174fa:	4b12      	ldr	r3, [pc, #72]	; (8017544 <__sinit+0x58>)
 80174fc:	4a12      	ldr	r2, [pc, #72]	; (8017548 <__sinit+0x5c>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	6282      	str	r2, [r0, #40]	; 0x28
 8017502:	4298      	cmp	r0, r3
 8017504:	bf04      	itt	eq
 8017506:	2301      	moveq	r3, #1
 8017508:	6183      	streq	r3, [r0, #24]
 801750a:	f000 f81f 	bl	801754c <__sfp>
 801750e:	6060      	str	r0, [r4, #4]
 8017510:	4620      	mov	r0, r4
 8017512:	f000 f81b 	bl	801754c <__sfp>
 8017516:	60a0      	str	r0, [r4, #8]
 8017518:	4620      	mov	r0, r4
 801751a:	f000 f817 	bl	801754c <__sfp>
 801751e:	2200      	movs	r2, #0
 8017520:	60e0      	str	r0, [r4, #12]
 8017522:	2104      	movs	r1, #4
 8017524:	6860      	ldr	r0, [r4, #4]
 8017526:	f7ff ffa1 	bl	801746c <std>
 801752a:	2201      	movs	r2, #1
 801752c:	2109      	movs	r1, #9
 801752e:	68a0      	ldr	r0, [r4, #8]
 8017530:	f7ff ff9c 	bl	801746c <std>
 8017534:	2202      	movs	r2, #2
 8017536:	2112      	movs	r1, #18
 8017538:	68e0      	ldr	r0, [r4, #12]
 801753a:	f7ff ff97 	bl	801746c <std>
 801753e:	2301      	movs	r3, #1
 8017540:	61a3      	str	r3, [r4, #24]
 8017542:	bd10      	pop	{r4, pc}
 8017544:	0801b520 	.word	0x0801b520
 8017548:	080174b5 	.word	0x080174b5

0801754c <__sfp>:
 801754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801754e:	4b1b      	ldr	r3, [pc, #108]	; (80175bc <__sfp+0x70>)
 8017550:	681e      	ldr	r6, [r3, #0]
 8017552:	69b3      	ldr	r3, [r6, #24]
 8017554:	4607      	mov	r7, r0
 8017556:	b913      	cbnz	r3, 801755e <__sfp+0x12>
 8017558:	4630      	mov	r0, r6
 801755a:	f7ff ffc7 	bl	80174ec <__sinit>
 801755e:	3648      	adds	r6, #72	; 0x48
 8017560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017564:	3b01      	subs	r3, #1
 8017566:	d503      	bpl.n	8017570 <__sfp+0x24>
 8017568:	6833      	ldr	r3, [r6, #0]
 801756a:	b133      	cbz	r3, 801757a <__sfp+0x2e>
 801756c:	6836      	ldr	r6, [r6, #0]
 801756e:	e7f7      	b.n	8017560 <__sfp+0x14>
 8017570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017574:	b16d      	cbz	r5, 8017592 <__sfp+0x46>
 8017576:	3468      	adds	r4, #104	; 0x68
 8017578:	e7f4      	b.n	8017564 <__sfp+0x18>
 801757a:	2104      	movs	r1, #4
 801757c:	4638      	mov	r0, r7
 801757e:	f7ff ff9f 	bl	80174c0 <__sfmoreglue>
 8017582:	6030      	str	r0, [r6, #0]
 8017584:	2800      	cmp	r0, #0
 8017586:	d1f1      	bne.n	801756c <__sfp+0x20>
 8017588:	230c      	movs	r3, #12
 801758a:	603b      	str	r3, [r7, #0]
 801758c:	4604      	mov	r4, r0
 801758e:	4620      	mov	r0, r4
 8017590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017592:	4b0b      	ldr	r3, [pc, #44]	; (80175c0 <__sfp+0x74>)
 8017594:	6665      	str	r5, [r4, #100]	; 0x64
 8017596:	e9c4 5500 	strd	r5, r5, [r4]
 801759a:	60a5      	str	r5, [r4, #8]
 801759c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80175a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80175a4:	2208      	movs	r2, #8
 80175a6:	4629      	mov	r1, r5
 80175a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80175ac:	f7ff fed9 	bl	8017362 <memset>
 80175b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80175b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80175b8:	e7e9      	b.n	801758e <__sfp+0x42>
 80175ba:	bf00      	nop
 80175bc:	0801b520 	.word	0x0801b520
 80175c0:	ffff0001 	.word	0xffff0001

080175c4 <_fwalk_reent>:
 80175c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175c8:	4680      	mov	r8, r0
 80175ca:	4689      	mov	r9, r1
 80175cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80175d0:	2600      	movs	r6, #0
 80175d2:	b914      	cbnz	r4, 80175da <_fwalk_reent+0x16>
 80175d4:	4630      	mov	r0, r6
 80175d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80175de:	3f01      	subs	r7, #1
 80175e0:	d501      	bpl.n	80175e6 <_fwalk_reent+0x22>
 80175e2:	6824      	ldr	r4, [r4, #0]
 80175e4:	e7f5      	b.n	80175d2 <_fwalk_reent+0xe>
 80175e6:	89ab      	ldrh	r3, [r5, #12]
 80175e8:	2b01      	cmp	r3, #1
 80175ea:	d907      	bls.n	80175fc <_fwalk_reent+0x38>
 80175ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175f0:	3301      	adds	r3, #1
 80175f2:	d003      	beq.n	80175fc <_fwalk_reent+0x38>
 80175f4:	4629      	mov	r1, r5
 80175f6:	4640      	mov	r0, r8
 80175f8:	47c8      	blx	r9
 80175fa:	4306      	orrs	r6, r0
 80175fc:	3568      	adds	r5, #104	; 0x68
 80175fe:	e7ee      	b.n	80175de <_fwalk_reent+0x1a>

08017600 <malloc>:
 8017600:	4b02      	ldr	r3, [pc, #8]	; (801760c <malloc+0xc>)
 8017602:	4601      	mov	r1, r0
 8017604:	6818      	ldr	r0, [r3, #0]
 8017606:	f000 b851 	b.w	80176ac <_malloc_r>
 801760a:	bf00      	nop
 801760c:	24000034 	.word	0x24000034

08017610 <_free_r>:
 8017610:	b538      	push	{r3, r4, r5, lr}
 8017612:	4605      	mov	r5, r0
 8017614:	2900      	cmp	r1, #0
 8017616:	d045      	beq.n	80176a4 <_free_r+0x94>
 8017618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801761c:	1f0c      	subs	r4, r1, #4
 801761e:	2b00      	cmp	r3, #0
 8017620:	bfb8      	it	lt
 8017622:	18e4      	addlt	r4, r4, r3
 8017624:	f000 ff12 	bl	801844c <__malloc_lock>
 8017628:	4a1f      	ldr	r2, [pc, #124]	; (80176a8 <_free_r+0x98>)
 801762a:	6813      	ldr	r3, [r2, #0]
 801762c:	4610      	mov	r0, r2
 801762e:	b933      	cbnz	r3, 801763e <_free_r+0x2e>
 8017630:	6063      	str	r3, [r4, #4]
 8017632:	6014      	str	r4, [r2, #0]
 8017634:	4628      	mov	r0, r5
 8017636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801763a:	f000 bf08 	b.w	801844e <__malloc_unlock>
 801763e:	42a3      	cmp	r3, r4
 8017640:	d90c      	bls.n	801765c <_free_r+0x4c>
 8017642:	6821      	ldr	r1, [r4, #0]
 8017644:	1862      	adds	r2, r4, r1
 8017646:	4293      	cmp	r3, r2
 8017648:	bf04      	itt	eq
 801764a:	681a      	ldreq	r2, [r3, #0]
 801764c:	685b      	ldreq	r3, [r3, #4]
 801764e:	6063      	str	r3, [r4, #4]
 8017650:	bf04      	itt	eq
 8017652:	1852      	addeq	r2, r2, r1
 8017654:	6022      	streq	r2, [r4, #0]
 8017656:	6004      	str	r4, [r0, #0]
 8017658:	e7ec      	b.n	8017634 <_free_r+0x24>
 801765a:	4613      	mov	r3, r2
 801765c:	685a      	ldr	r2, [r3, #4]
 801765e:	b10a      	cbz	r2, 8017664 <_free_r+0x54>
 8017660:	42a2      	cmp	r2, r4
 8017662:	d9fa      	bls.n	801765a <_free_r+0x4a>
 8017664:	6819      	ldr	r1, [r3, #0]
 8017666:	1858      	adds	r0, r3, r1
 8017668:	42a0      	cmp	r0, r4
 801766a:	d10b      	bne.n	8017684 <_free_r+0x74>
 801766c:	6820      	ldr	r0, [r4, #0]
 801766e:	4401      	add	r1, r0
 8017670:	1858      	adds	r0, r3, r1
 8017672:	4282      	cmp	r2, r0
 8017674:	6019      	str	r1, [r3, #0]
 8017676:	d1dd      	bne.n	8017634 <_free_r+0x24>
 8017678:	6810      	ldr	r0, [r2, #0]
 801767a:	6852      	ldr	r2, [r2, #4]
 801767c:	605a      	str	r2, [r3, #4]
 801767e:	4401      	add	r1, r0
 8017680:	6019      	str	r1, [r3, #0]
 8017682:	e7d7      	b.n	8017634 <_free_r+0x24>
 8017684:	d902      	bls.n	801768c <_free_r+0x7c>
 8017686:	230c      	movs	r3, #12
 8017688:	602b      	str	r3, [r5, #0]
 801768a:	e7d3      	b.n	8017634 <_free_r+0x24>
 801768c:	6820      	ldr	r0, [r4, #0]
 801768e:	1821      	adds	r1, r4, r0
 8017690:	428a      	cmp	r2, r1
 8017692:	bf04      	itt	eq
 8017694:	6811      	ldreq	r1, [r2, #0]
 8017696:	6852      	ldreq	r2, [r2, #4]
 8017698:	6062      	str	r2, [r4, #4]
 801769a:	bf04      	itt	eq
 801769c:	1809      	addeq	r1, r1, r0
 801769e:	6021      	streq	r1, [r4, #0]
 80176a0:	605c      	str	r4, [r3, #4]
 80176a2:	e7c7      	b.n	8017634 <_free_r+0x24>
 80176a4:	bd38      	pop	{r3, r4, r5, pc}
 80176a6:	bf00      	nop
 80176a8:	24004b68 	.word	0x24004b68

080176ac <_malloc_r>:
 80176ac:	b570      	push	{r4, r5, r6, lr}
 80176ae:	1ccd      	adds	r5, r1, #3
 80176b0:	f025 0503 	bic.w	r5, r5, #3
 80176b4:	3508      	adds	r5, #8
 80176b6:	2d0c      	cmp	r5, #12
 80176b8:	bf38      	it	cc
 80176ba:	250c      	movcc	r5, #12
 80176bc:	2d00      	cmp	r5, #0
 80176be:	4606      	mov	r6, r0
 80176c0:	db01      	blt.n	80176c6 <_malloc_r+0x1a>
 80176c2:	42a9      	cmp	r1, r5
 80176c4:	d903      	bls.n	80176ce <_malloc_r+0x22>
 80176c6:	230c      	movs	r3, #12
 80176c8:	6033      	str	r3, [r6, #0]
 80176ca:	2000      	movs	r0, #0
 80176cc:	bd70      	pop	{r4, r5, r6, pc}
 80176ce:	f000 febd 	bl	801844c <__malloc_lock>
 80176d2:	4a21      	ldr	r2, [pc, #132]	; (8017758 <_malloc_r+0xac>)
 80176d4:	6814      	ldr	r4, [r2, #0]
 80176d6:	4621      	mov	r1, r4
 80176d8:	b991      	cbnz	r1, 8017700 <_malloc_r+0x54>
 80176da:	4c20      	ldr	r4, [pc, #128]	; (801775c <_malloc_r+0xb0>)
 80176dc:	6823      	ldr	r3, [r4, #0]
 80176de:	b91b      	cbnz	r3, 80176e8 <_malloc_r+0x3c>
 80176e0:	4630      	mov	r0, r6
 80176e2:	f000 fc57 	bl	8017f94 <_sbrk_r>
 80176e6:	6020      	str	r0, [r4, #0]
 80176e8:	4629      	mov	r1, r5
 80176ea:	4630      	mov	r0, r6
 80176ec:	f000 fc52 	bl	8017f94 <_sbrk_r>
 80176f0:	1c43      	adds	r3, r0, #1
 80176f2:	d124      	bne.n	801773e <_malloc_r+0x92>
 80176f4:	230c      	movs	r3, #12
 80176f6:	6033      	str	r3, [r6, #0]
 80176f8:	4630      	mov	r0, r6
 80176fa:	f000 fea8 	bl	801844e <__malloc_unlock>
 80176fe:	e7e4      	b.n	80176ca <_malloc_r+0x1e>
 8017700:	680b      	ldr	r3, [r1, #0]
 8017702:	1b5b      	subs	r3, r3, r5
 8017704:	d418      	bmi.n	8017738 <_malloc_r+0x8c>
 8017706:	2b0b      	cmp	r3, #11
 8017708:	d90f      	bls.n	801772a <_malloc_r+0x7e>
 801770a:	600b      	str	r3, [r1, #0]
 801770c:	50cd      	str	r5, [r1, r3]
 801770e:	18cc      	adds	r4, r1, r3
 8017710:	4630      	mov	r0, r6
 8017712:	f000 fe9c 	bl	801844e <__malloc_unlock>
 8017716:	f104 000b 	add.w	r0, r4, #11
 801771a:	1d23      	adds	r3, r4, #4
 801771c:	f020 0007 	bic.w	r0, r0, #7
 8017720:	1ac3      	subs	r3, r0, r3
 8017722:	d0d3      	beq.n	80176cc <_malloc_r+0x20>
 8017724:	425a      	negs	r2, r3
 8017726:	50e2      	str	r2, [r4, r3]
 8017728:	e7d0      	b.n	80176cc <_malloc_r+0x20>
 801772a:	428c      	cmp	r4, r1
 801772c:	684b      	ldr	r3, [r1, #4]
 801772e:	bf16      	itet	ne
 8017730:	6063      	strne	r3, [r4, #4]
 8017732:	6013      	streq	r3, [r2, #0]
 8017734:	460c      	movne	r4, r1
 8017736:	e7eb      	b.n	8017710 <_malloc_r+0x64>
 8017738:	460c      	mov	r4, r1
 801773a:	6849      	ldr	r1, [r1, #4]
 801773c:	e7cc      	b.n	80176d8 <_malloc_r+0x2c>
 801773e:	1cc4      	adds	r4, r0, #3
 8017740:	f024 0403 	bic.w	r4, r4, #3
 8017744:	42a0      	cmp	r0, r4
 8017746:	d005      	beq.n	8017754 <_malloc_r+0xa8>
 8017748:	1a21      	subs	r1, r4, r0
 801774a:	4630      	mov	r0, r6
 801774c:	f000 fc22 	bl	8017f94 <_sbrk_r>
 8017750:	3001      	adds	r0, #1
 8017752:	d0cf      	beq.n	80176f4 <_malloc_r+0x48>
 8017754:	6025      	str	r5, [r4, #0]
 8017756:	e7db      	b.n	8017710 <_malloc_r+0x64>
 8017758:	24004b68 	.word	0x24004b68
 801775c:	24004b6c 	.word	0x24004b6c

08017760 <__ssputs_r>:
 8017760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017764:	688e      	ldr	r6, [r1, #8]
 8017766:	429e      	cmp	r6, r3
 8017768:	4682      	mov	sl, r0
 801776a:	460c      	mov	r4, r1
 801776c:	4690      	mov	r8, r2
 801776e:	4699      	mov	r9, r3
 8017770:	d837      	bhi.n	80177e2 <__ssputs_r+0x82>
 8017772:	898a      	ldrh	r2, [r1, #12]
 8017774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017778:	d031      	beq.n	80177de <__ssputs_r+0x7e>
 801777a:	6825      	ldr	r5, [r4, #0]
 801777c:	6909      	ldr	r1, [r1, #16]
 801777e:	1a6f      	subs	r7, r5, r1
 8017780:	6965      	ldr	r5, [r4, #20]
 8017782:	2302      	movs	r3, #2
 8017784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017788:	fb95 f5f3 	sdiv	r5, r5, r3
 801778c:	f109 0301 	add.w	r3, r9, #1
 8017790:	443b      	add	r3, r7
 8017792:	429d      	cmp	r5, r3
 8017794:	bf38      	it	cc
 8017796:	461d      	movcc	r5, r3
 8017798:	0553      	lsls	r3, r2, #21
 801779a:	d530      	bpl.n	80177fe <__ssputs_r+0x9e>
 801779c:	4629      	mov	r1, r5
 801779e:	f7ff ff85 	bl	80176ac <_malloc_r>
 80177a2:	4606      	mov	r6, r0
 80177a4:	b950      	cbnz	r0, 80177bc <__ssputs_r+0x5c>
 80177a6:	230c      	movs	r3, #12
 80177a8:	f8ca 3000 	str.w	r3, [sl]
 80177ac:	89a3      	ldrh	r3, [r4, #12]
 80177ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177b2:	81a3      	strh	r3, [r4, #12]
 80177b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177bc:	463a      	mov	r2, r7
 80177be:	6921      	ldr	r1, [r4, #16]
 80177c0:	f7ff fdab 	bl	801731a <memcpy>
 80177c4:	89a3      	ldrh	r3, [r4, #12]
 80177c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80177ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80177ce:	81a3      	strh	r3, [r4, #12]
 80177d0:	6126      	str	r6, [r4, #16]
 80177d2:	6165      	str	r5, [r4, #20]
 80177d4:	443e      	add	r6, r7
 80177d6:	1bed      	subs	r5, r5, r7
 80177d8:	6026      	str	r6, [r4, #0]
 80177da:	60a5      	str	r5, [r4, #8]
 80177dc:	464e      	mov	r6, r9
 80177de:	454e      	cmp	r6, r9
 80177e0:	d900      	bls.n	80177e4 <__ssputs_r+0x84>
 80177e2:	464e      	mov	r6, r9
 80177e4:	4632      	mov	r2, r6
 80177e6:	4641      	mov	r1, r8
 80177e8:	6820      	ldr	r0, [r4, #0]
 80177ea:	f7ff fda1 	bl	8017330 <memmove>
 80177ee:	68a3      	ldr	r3, [r4, #8]
 80177f0:	1b9b      	subs	r3, r3, r6
 80177f2:	60a3      	str	r3, [r4, #8]
 80177f4:	6823      	ldr	r3, [r4, #0]
 80177f6:	441e      	add	r6, r3
 80177f8:	6026      	str	r6, [r4, #0]
 80177fa:	2000      	movs	r0, #0
 80177fc:	e7dc      	b.n	80177b8 <__ssputs_r+0x58>
 80177fe:	462a      	mov	r2, r5
 8017800:	f000 fe26 	bl	8018450 <_realloc_r>
 8017804:	4606      	mov	r6, r0
 8017806:	2800      	cmp	r0, #0
 8017808:	d1e2      	bne.n	80177d0 <__ssputs_r+0x70>
 801780a:	6921      	ldr	r1, [r4, #16]
 801780c:	4650      	mov	r0, sl
 801780e:	f7ff feff 	bl	8017610 <_free_r>
 8017812:	e7c8      	b.n	80177a6 <__ssputs_r+0x46>

08017814 <_svfiprintf_r>:
 8017814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017818:	461d      	mov	r5, r3
 801781a:	898b      	ldrh	r3, [r1, #12]
 801781c:	061f      	lsls	r7, r3, #24
 801781e:	b09d      	sub	sp, #116	; 0x74
 8017820:	4680      	mov	r8, r0
 8017822:	460c      	mov	r4, r1
 8017824:	4616      	mov	r6, r2
 8017826:	d50f      	bpl.n	8017848 <_svfiprintf_r+0x34>
 8017828:	690b      	ldr	r3, [r1, #16]
 801782a:	b96b      	cbnz	r3, 8017848 <_svfiprintf_r+0x34>
 801782c:	2140      	movs	r1, #64	; 0x40
 801782e:	f7ff ff3d 	bl	80176ac <_malloc_r>
 8017832:	6020      	str	r0, [r4, #0]
 8017834:	6120      	str	r0, [r4, #16]
 8017836:	b928      	cbnz	r0, 8017844 <_svfiprintf_r+0x30>
 8017838:	230c      	movs	r3, #12
 801783a:	f8c8 3000 	str.w	r3, [r8]
 801783e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017842:	e0c8      	b.n	80179d6 <_svfiprintf_r+0x1c2>
 8017844:	2340      	movs	r3, #64	; 0x40
 8017846:	6163      	str	r3, [r4, #20]
 8017848:	2300      	movs	r3, #0
 801784a:	9309      	str	r3, [sp, #36]	; 0x24
 801784c:	2320      	movs	r3, #32
 801784e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017852:	2330      	movs	r3, #48	; 0x30
 8017854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017858:	9503      	str	r5, [sp, #12]
 801785a:	f04f 0b01 	mov.w	fp, #1
 801785e:	4637      	mov	r7, r6
 8017860:	463d      	mov	r5, r7
 8017862:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017866:	b10b      	cbz	r3, 801786c <_svfiprintf_r+0x58>
 8017868:	2b25      	cmp	r3, #37	; 0x25
 801786a:	d13e      	bne.n	80178ea <_svfiprintf_r+0xd6>
 801786c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017870:	d00b      	beq.n	801788a <_svfiprintf_r+0x76>
 8017872:	4653      	mov	r3, sl
 8017874:	4632      	mov	r2, r6
 8017876:	4621      	mov	r1, r4
 8017878:	4640      	mov	r0, r8
 801787a:	f7ff ff71 	bl	8017760 <__ssputs_r>
 801787e:	3001      	adds	r0, #1
 8017880:	f000 80a4 	beq.w	80179cc <_svfiprintf_r+0x1b8>
 8017884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017886:	4453      	add	r3, sl
 8017888:	9309      	str	r3, [sp, #36]	; 0x24
 801788a:	783b      	ldrb	r3, [r7, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	f000 809d 	beq.w	80179cc <_svfiprintf_r+0x1b8>
 8017892:	2300      	movs	r3, #0
 8017894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801789c:	9304      	str	r3, [sp, #16]
 801789e:	9307      	str	r3, [sp, #28]
 80178a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178a4:	931a      	str	r3, [sp, #104]	; 0x68
 80178a6:	462f      	mov	r7, r5
 80178a8:	2205      	movs	r2, #5
 80178aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80178ae:	4850      	ldr	r0, [pc, #320]	; (80179f0 <_svfiprintf_r+0x1dc>)
 80178b0:	f7e8 fd1e 	bl	80002f0 <memchr>
 80178b4:	9b04      	ldr	r3, [sp, #16]
 80178b6:	b9d0      	cbnz	r0, 80178ee <_svfiprintf_r+0xda>
 80178b8:	06d9      	lsls	r1, r3, #27
 80178ba:	bf44      	itt	mi
 80178bc:	2220      	movmi	r2, #32
 80178be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80178c2:	071a      	lsls	r2, r3, #28
 80178c4:	bf44      	itt	mi
 80178c6:	222b      	movmi	r2, #43	; 0x2b
 80178c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80178cc:	782a      	ldrb	r2, [r5, #0]
 80178ce:	2a2a      	cmp	r2, #42	; 0x2a
 80178d0:	d015      	beq.n	80178fe <_svfiprintf_r+0xea>
 80178d2:	9a07      	ldr	r2, [sp, #28]
 80178d4:	462f      	mov	r7, r5
 80178d6:	2000      	movs	r0, #0
 80178d8:	250a      	movs	r5, #10
 80178da:	4639      	mov	r1, r7
 80178dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178e0:	3b30      	subs	r3, #48	; 0x30
 80178e2:	2b09      	cmp	r3, #9
 80178e4:	d94d      	bls.n	8017982 <_svfiprintf_r+0x16e>
 80178e6:	b1b8      	cbz	r0, 8017918 <_svfiprintf_r+0x104>
 80178e8:	e00f      	b.n	801790a <_svfiprintf_r+0xf6>
 80178ea:	462f      	mov	r7, r5
 80178ec:	e7b8      	b.n	8017860 <_svfiprintf_r+0x4c>
 80178ee:	4a40      	ldr	r2, [pc, #256]	; (80179f0 <_svfiprintf_r+0x1dc>)
 80178f0:	1a80      	subs	r0, r0, r2
 80178f2:	fa0b f000 	lsl.w	r0, fp, r0
 80178f6:	4318      	orrs	r0, r3
 80178f8:	9004      	str	r0, [sp, #16]
 80178fa:	463d      	mov	r5, r7
 80178fc:	e7d3      	b.n	80178a6 <_svfiprintf_r+0x92>
 80178fe:	9a03      	ldr	r2, [sp, #12]
 8017900:	1d11      	adds	r1, r2, #4
 8017902:	6812      	ldr	r2, [r2, #0]
 8017904:	9103      	str	r1, [sp, #12]
 8017906:	2a00      	cmp	r2, #0
 8017908:	db01      	blt.n	801790e <_svfiprintf_r+0xfa>
 801790a:	9207      	str	r2, [sp, #28]
 801790c:	e004      	b.n	8017918 <_svfiprintf_r+0x104>
 801790e:	4252      	negs	r2, r2
 8017910:	f043 0302 	orr.w	r3, r3, #2
 8017914:	9207      	str	r2, [sp, #28]
 8017916:	9304      	str	r3, [sp, #16]
 8017918:	783b      	ldrb	r3, [r7, #0]
 801791a:	2b2e      	cmp	r3, #46	; 0x2e
 801791c:	d10c      	bne.n	8017938 <_svfiprintf_r+0x124>
 801791e:	787b      	ldrb	r3, [r7, #1]
 8017920:	2b2a      	cmp	r3, #42	; 0x2a
 8017922:	d133      	bne.n	801798c <_svfiprintf_r+0x178>
 8017924:	9b03      	ldr	r3, [sp, #12]
 8017926:	1d1a      	adds	r2, r3, #4
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	9203      	str	r2, [sp, #12]
 801792c:	2b00      	cmp	r3, #0
 801792e:	bfb8      	it	lt
 8017930:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017934:	3702      	adds	r7, #2
 8017936:	9305      	str	r3, [sp, #20]
 8017938:	4d2e      	ldr	r5, [pc, #184]	; (80179f4 <_svfiprintf_r+0x1e0>)
 801793a:	7839      	ldrb	r1, [r7, #0]
 801793c:	2203      	movs	r2, #3
 801793e:	4628      	mov	r0, r5
 8017940:	f7e8 fcd6 	bl	80002f0 <memchr>
 8017944:	b138      	cbz	r0, 8017956 <_svfiprintf_r+0x142>
 8017946:	2340      	movs	r3, #64	; 0x40
 8017948:	1b40      	subs	r0, r0, r5
 801794a:	fa03 f000 	lsl.w	r0, r3, r0
 801794e:	9b04      	ldr	r3, [sp, #16]
 8017950:	4303      	orrs	r3, r0
 8017952:	3701      	adds	r7, #1
 8017954:	9304      	str	r3, [sp, #16]
 8017956:	7839      	ldrb	r1, [r7, #0]
 8017958:	4827      	ldr	r0, [pc, #156]	; (80179f8 <_svfiprintf_r+0x1e4>)
 801795a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801795e:	2206      	movs	r2, #6
 8017960:	1c7e      	adds	r6, r7, #1
 8017962:	f7e8 fcc5 	bl	80002f0 <memchr>
 8017966:	2800      	cmp	r0, #0
 8017968:	d038      	beq.n	80179dc <_svfiprintf_r+0x1c8>
 801796a:	4b24      	ldr	r3, [pc, #144]	; (80179fc <_svfiprintf_r+0x1e8>)
 801796c:	bb13      	cbnz	r3, 80179b4 <_svfiprintf_r+0x1a0>
 801796e:	9b03      	ldr	r3, [sp, #12]
 8017970:	3307      	adds	r3, #7
 8017972:	f023 0307 	bic.w	r3, r3, #7
 8017976:	3308      	adds	r3, #8
 8017978:	9303      	str	r3, [sp, #12]
 801797a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801797c:	444b      	add	r3, r9
 801797e:	9309      	str	r3, [sp, #36]	; 0x24
 8017980:	e76d      	b.n	801785e <_svfiprintf_r+0x4a>
 8017982:	fb05 3202 	mla	r2, r5, r2, r3
 8017986:	2001      	movs	r0, #1
 8017988:	460f      	mov	r7, r1
 801798a:	e7a6      	b.n	80178da <_svfiprintf_r+0xc6>
 801798c:	2300      	movs	r3, #0
 801798e:	3701      	adds	r7, #1
 8017990:	9305      	str	r3, [sp, #20]
 8017992:	4619      	mov	r1, r3
 8017994:	250a      	movs	r5, #10
 8017996:	4638      	mov	r0, r7
 8017998:	f810 2b01 	ldrb.w	r2, [r0], #1
 801799c:	3a30      	subs	r2, #48	; 0x30
 801799e:	2a09      	cmp	r2, #9
 80179a0:	d903      	bls.n	80179aa <_svfiprintf_r+0x196>
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d0c8      	beq.n	8017938 <_svfiprintf_r+0x124>
 80179a6:	9105      	str	r1, [sp, #20]
 80179a8:	e7c6      	b.n	8017938 <_svfiprintf_r+0x124>
 80179aa:	fb05 2101 	mla	r1, r5, r1, r2
 80179ae:	2301      	movs	r3, #1
 80179b0:	4607      	mov	r7, r0
 80179b2:	e7f0      	b.n	8017996 <_svfiprintf_r+0x182>
 80179b4:	ab03      	add	r3, sp, #12
 80179b6:	9300      	str	r3, [sp, #0]
 80179b8:	4622      	mov	r2, r4
 80179ba:	4b11      	ldr	r3, [pc, #68]	; (8017a00 <_svfiprintf_r+0x1ec>)
 80179bc:	a904      	add	r1, sp, #16
 80179be:	4640      	mov	r0, r8
 80179c0:	f3af 8000 	nop.w
 80179c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80179c8:	4681      	mov	r9, r0
 80179ca:	d1d6      	bne.n	801797a <_svfiprintf_r+0x166>
 80179cc:	89a3      	ldrh	r3, [r4, #12]
 80179ce:	065b      	lsls	r3, r3, #25
 80179d0:	f53f af35 	bmi.w	801783e <_svfiprintf_r+0x2a>
 80179d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179d6:	b01d      	add	sp, #116	; 0x74
 80179d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179dc:	ab03      	add	r3, sp, #12
 80179de:	9300      	str	r3, [sp, #0]
 80179e0:	4622      	mov	r2, r4
 80179e2:	4b07      	ldr	r3, [pc, #28]	; (8017a00 <_svfiprintf_r+0x1ec>)
 80179e4:	a904      	add	r1, sp, #16
 80179e6:	4640      	mov	r0, r8
 80179e8:	f000 f9c2 	bl	8017d70 <_printf_i>
 80179ec:	e7ea      	b.n	80179c4 <_svfiprintf_r+0x1b0>
 80179ee:	bf00      	nop
 80179f0:	0801b584 	.word	0x0801b584
 80179f4:	0801b58a 	.word	0x0801b58a
 80179f8:	0801b58e 	.word	0x0801b58e
 80179fc:	00000000 	.word	0x00000000
 8017a00:	08017761 	.word	0x08017761

08017a04 <__sfputc_r>:
 8017a04:	6893      	ldr	r3, [r2, #8]
 8017a06:	3b01      	subs	r3, #1
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	b410      	push	{r4}
 8017a0c:	6093      	str	r3, [r2, #8]
 8017a0e:	da08      	bge.n	8017a22 <__sfputc_r+0x1e>
 8017a10:	6994      	ldr	r4, [r2, #24]
 8017a12:	42a3      	cmp	r3, r4
 8017a14:	db01      	blt.n	8017a1a <__sfputc_r+0x16>
 8017a16:	290a      	cmp	r1, #10
 8017a18:	d103      	bne.n	8017a22 <__sfputc_r+0x1e>
 8017a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a1e:	f000 bb0d 	b.w	801803c <__swbuf_r>
 8017a22:	6813      	ldr	r3, [r2, #0]
 8017a24:	1c58      	adds	r0, r3, #1
 8017a26:	6010      	str	r0, [r2, #0]
 8017a28:	7019      	strb	r1, [r3, #0]
 8017a2a:	4608      	mov	r0, r1
 8017a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a30:	4770      	bx	lr

08017a32 <__sfputs_r>:
 8017a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a34:	4606      	mov	r6, r0
 8017a36:	460f      	mov	r7, r1
 8017a38:	4614      	mov	r4, r2
 8017a3a:	18d5      	adds	r5, r2, r3
 8017a3c:	42ac      	cmp	r4, r5
 8017a3e:	d101      	bne.n	8017a44 <__sfputs_r+0x12>
 8017a40:	2000      	movs	r0, #0
 8017a42:	e007      	b.n	8017a54 <__sfputs_r+0x22>
 8017a44:	463a      	mov	r2, r7
 8017a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7ff ffda 	bl	8017a04 <__sfputc_r>
 8017a50:	1c43      	adds	r3, r0, #1
 8017a52:	d1f3      	bne.n	8017a3c <__sfputs_r+0xa>
 8017a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a58 <_vfiprintf_r>:
 8017a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5c:	460c      	mov	r4, r1
 8017a5e:	b09d      	sub	sp, #116	; 0x74
 8017a60:	4617      	mov	r7, r2
 8017a62:	461d      	mov	r5, r3
 8017a64:	4606      	mov	r6, r0
 8017a66:	b118      	cbz	r0, 8017a70 <_vfiprintf_r+0x18>
 8017a68:	6983      	ldr	r3, [r0, #24]
 8017a6a:	b90b      	cbnz	r3, 8017a70 <_vfiprintf_r+0x18>
 8017a6c:	f7ff fd3e 	bl	80174ec <__sinit>
 8017a70:	4b7c      	ldr	r3, [pc, #496]	; (8017c64 <_vfiprintf_r+0x20c>)
 8017a72:	429c      	cmp	r4, r3
 8017a74:	d158      	bne.n	8017b28 <_vfiprintf_r+0xd0>
 8017a76:	6874      	ldr	r4, [r6, #4]
 8017a78:	89a3      	ldrh	r3, [r4, #12]
 8017a7a:	0718      	lsls	r0, r3, #28
 8017a7c:	d55e      	bpl.n	8017b3c <_vfiprintf_r+0xe4>
 8017a7e:	6923      	ldr	r3, [r4, #16]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d05b      	beq.n	8017b3c <_vfiprintf_r+0xe4>
 8017a84:	2300      	movs	r3, #0
 8017a86:	9309      	str	r3, [sp, #36]	; 0x24
 8017a88:	2320      	movs	r3, #32
 8017a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a8e:	2330      	movs	r3, #48	; 0x30
 8017a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a94:	9503      	str	r5, [sp, #12]
 8017a96:	f04f 0b01 	mov.w	fp, #1
 8017a9a:	46b8      	mov	r8, r7
 8017a9c:	4645      	mov	r5, r8
 8017a9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017aa2:	b10b      	cbz	r3, 8017aa8 <_vfiprintf_r+0x50>
 8017aa4:	2b25      	cmp	r3, #37	; 0x25
 8017aa6:	d154      	bne.n	8017b52 <_vfiprintf_r+0xfa>
 8017aa8:	ebb8 0a07 	subs.w	sl, r8, r7
 8017aac:	d00b      	beq.n	8017ac6 <_vfiprintf_r+0x6e>
 8017aae:	4653      	mov	r3, sl
 8017ab0:	463a      	mov	r2, r7
 8017ab2:	4621      	mov	r1, r4
 8017ab4:	4630      	mov	r0, r6
 8017ab6:	f7ff ffbc 	bl	8017a32 <__sfputs_r>
 8017aba:	3001      	adds	r0, #1
 8017abc:	f000 80c2 	beq.w	8017c44 <_vfiprintf_r+0x1ec>
 8017ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ac2:	4453      	add	r3, sl
 8017ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ac6:	f898 3000 	ldrb.w	r3, [r8]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	f000 80ba 	beq.w	8017c44 <_vfiprintf_r+0x1ec>
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ada:	9304      	str	r3, [sp, #16]
 8017adc:	9307      	str	r3, [sp, #28]
 8017ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8017ae4:	46a8      	mov	r8, r5
 8017ae6:	2205      	movs	r2, #5
 8017ae8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017aec:	485e      	ldr	r0, [pc, #376]	; (8017c68 <_vfiprintf_r+0x210>)
 8017aee:	f7e8 fbff 	bl	80002f0 <memchr>
 8017af2:	9b04      	ldr	r3, [sp, #16]
 8017af4:	bb78      	cbnz	r0, 8017b56 <_vfiprintf_r+0xfe>
 8017af6:	06d9      	lsls	r1, r3, #27
 8017af8:	bf44      	itt	mi
 8017afa:	2220      	movmi	r2, #32
 8017afc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017b00:	071a      	lsls	r2, r3, #28
 8017b02:	bf44      	itt	mi
 8017b04:	222b      	movmi	r2, #43	; 0x2b
 8017b06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017b0a:	782a      	ldrb	r2, [r5, #0]
 8017b0c:	2a2a      	cmp	r2, #42	; 0x2a
 8017b0e:	d02a      	beq.n	8017b66 <_vfiprintf_r+0x10e>
 8017b10:	9a07      	ldr	r2, [sp, #28]
 8017b12:	46a8      	mov	r8, r5
 8017b14:	2000      	movs	r0, #0
 8017b16:	250a      	movs	r5, #10
 8017b18:	4641      	mov	r1, r8
 8017b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b1e:	3b30      	subs	r3, #48	; 0x30
 8017b20:	2b09      	cmp	r3, #9
 8017b22:	d969      	bls.n	8017bf8 <_vfiprintf_r+0x1a0>
 8017b24:	b360      	cbz	r0, 8017b80 <_vfiprintf_r+0x128>
 8017b26:	e024      	b.n	8017b72 <_vfiprintf_r+0x11a>
 8017b28:	4b50      	ldr	r3, [pc, #320]	; (8017c6c <_vfiprintf_r+0x214>)
 8017b2a:	429c      	cmp	r4, r3
 8017b2c:	d101      	bne.n	8017b32 <_vfiprintf_r+0xda>
 8017b2e:	68b4      	ldr	r4, [r6, #8]
 8017b30:	e7a2      	b.n	8017a78 <_vfiprintf_r+0x20>
 8017b32:	4b4f      	ldr	r3, [pc, #316]	; (8017c70 <_vfiprintf_r+0x218>)
 8017b34:	429c      	cmp	r4, r3
 8017b36:	bf08      	it	eq
 8017b38:	68f4      	ldreq	r4, [r6, #12]
 8017b3a:	e79d      	b.n	8017a78 <_vfiprintf_r+0x20>
 8017b3c:	4621      	mov	r1, r4
 8017b3e:	4630      	mov	r0, r6
 8017b40:	f000 fae0 	bl	8018104 <__swsetup_r>
 8017b44:	2800      	cmp	r0, #0
 8017b46:	d09d      	beq.n	8017a84 <_vfiprintf_r+0x2c>
 8017b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b4c:	b01d      	add	sp, #116	; 0x74
 8017b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b52:	46a8      	mov	r8, r5
 8017b54:	e7a2      	b.n	8017a9c <_vfiprintf_r+0x44>
 8017b56:	4a44      	ldr	r2, [pc, #272]	; (8017c68 <_vfiprintf_r+0x210>)
 8017b58:	1a80      	subs	r0, r0, r2
 8017b5a:	fa0b f000 	lsl.w	r0, fp, r0
 8017b5e:	4318      	orrs	r0, r3
 8017b60:	9004      	str	r0, [sp, #16]
 8017b62:	4645      	mov	r5, r8
 8017b64:	e7be      	b.n	8017ae4 <_vfiprintf_r+0x8c>
 8017b66:	9a03      	ldr	r2, [sp, #12]
 8017b68:	1d11      	adds	r1, r2, #4
 8017b6a:	6812      	ldr	r2, [r2, #0]
 8017b6c:	9103      	str	r1, [sp, #12]
 8017b6e:	2a00      	cmp	r2, #0
 8017b70:	db01      	blt.n	8017b76 <_vfiprintf_r+0x11e>
 8017b72:	9207      	str	r2, [sp, #28]
 8017b74:	e004      	b.n	8017b80 <_vfiprintf_r+0x128>
 8017b76:	4252      	negs	r2, r2
 8017b78:	f043 0302 	orr.w	r3, r3, #2
 8017b7c:	9207      	str	r2, [sp, #28]
 8017b7e:	9304      	str	r3, [sp, #16]
 8017b80:	f898 3000 	ldrb.w	r3, [r8]
 8017b84:	2b2e      	cmp	r3, #46	; 0x2e
 8017b86:	d10e      	bne.n	8017ba6 <_vfiprintf_r+0x14e>
 8017b88:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8017b8e:	d138      	bne.n	8017c02 <_vfiprintf_r+0x1aa>
 8017b90:	9b03      	ldr	r3, [sp, #12]
 8017b92:	1d1a      	adds	r2, r3, #4
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	9203      	str	r2, [sp, #12]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	bfb8      	it	lt
 8017b9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017ba0:	f108 0802 	add.w	r8, r8, #2
 8017ba4:	9305      	str	r3, [sp, #20]
 8017ba6:	4d33      	ldr	r5, [pc, #204]	; (8017c74 <_vfiprintf_r+0x21c>)
 8017ba8:	f898 1000 	ldrb.w	r1, [r8]
 8017bac:	2203      	movs	r2, #3
 8017bae:	4628      	mov	r0, r5
 8017bb0:	f7e8 fb9e 	bl	80002f0 <memchr>
 8017bb4:	b140      	cbz	r0, 8017bc8 <_vfiprintf_r+0x170>
 8017bb6:	2340      	movs	r3, #64	; 0x40
 8017bb8:	1b40      	subs	r0, r0, r5
 8017bba:	fa03 f000 	lsl.w	r0, r3, r0
 8017bbe:	9b04      	ldr	r3, [sp, #16]
 8017bc0:	4303      	orrs	r3, r0
 8017bc2:	f108 0801 	add.w	r8, r8, #1
 8017bc6:	9304      	str	r3, [sp, #16]
 8017bc8:	f898 1000 	ldrb.w	r1, [r8]
 8017bcc:	482a      	ldr	r0, [pc, #168]	; (8017c78 <_vfiprintf_r+0x220>)
 8017bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017bd2:	2206      	movs	r2, #6
 8017bd4:	f108 0701 	add.w	r7, r8, #1
 8017bd8:	f7e8 fb8a 	bl	80002f0 <memchr>
 8017bdc:	2800      	cmp	r0, #0
 8017bde:	d037      	beq.n	8017c50 <_vfiprintf_r+0x1f8>
 8017be0:	4b26      	ldr	r3, [pc, #152]	; (8017c7c <_vfiprintf_r+0x224>)
 8017be2:	bb1b      	cbnz	r3, 8017c2c <_vfiprintf_r+0x1d4>
 8017be4:	9b03      	ldr	r3, [sp, #12]
 8017be6:	3307      	adds	r3, #7
 8017be8:	f023 0307 	bic.w	r3, r3, #7
 8017bec:	3308      	adds	r3, #8
 8017bee:	9303      	str	r3, [sp, #12]
 8017bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bf2:	444b      	add	r3, r9
 8017bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8017bf6:	e750      	b.n	8017a9a <_vfiprintf_r+0x42>
 8017bf8:	fb05 3202 	mla	r2, r5, r2, r3
 8017bfc:	2001      	movs	r0, #1
 8017bfe:	4688      	mov	r8, r1
 8017c00:	e78a      	b.n	8017b18 <_vfiprintf_r+0xc0>
 8017c02:	2300      	movs	r3, #0
 8017c04:	f108 0801 	add.w	r8, r8, #1
 8017c08:	9305      	str	r3, [sp, #20]
 8017c0a:	4619      	mov	r1, r3
 8017c0c:	250a      	movs	r5, #10
 8017c0e:	4640      	mov	r0, r8
 8017c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c14:	3a30      	subs	r2, #48	; 0x30
 8017c16:	2a09      	cmp	r2, #9
 8017c18:	d903      	bls.n	8017c22 <_vfiprintf_r+0x1ca>
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d0c3      	beq.n	8017ba6 <_vfiprintf_r+0x14e>
 8017c1e:	9105      	str	r1, [sp, #20]
 8017c20:	e7c1      	b.n	8017ba6 <_vfiprintf_r+0x14e>
 8017c22:	fb05 2101 	mla	r1, r5, r1, r2
 8017c26:	2301      	movs	r3, #1
 8017c28:	4680      	mov	r8, r0
 8017c2a:	e7f0      	b.n	8017c0e <_vfiprintf_r+0x1b6>
 8017c2c:	ab03      	add	r3, sp, #12
 8017c2e:	9300      	str	r3, [sp, #0]
 8017c30:	4622      	mov	r2, r4
 8017c32:	4b13      	ldr	r3, [pc, #76]	; (8017c80 <_vfiprintf_r+0x228>)
 8017c34:	a904      	add	r1, sp, #16
 8017c36:	4630      	mov	r0, r6
 8017c38:	f3af 8000 	nop.w
 8017c3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8017c40:	4681      	mov	r9, r0
 8017c42:	d1d5      	bne.n	8017bf0 <_vfiprintf_r+0x198>
 8017c44:	89a3      	ldrh	r3, [r4, #12]
 8017c46:	065b      	lsls	r3, r3, #25
 8017c48:	f53f af7e 	bmi.w	8017b48 <_vfiprintf_r+0xf0>
 8017c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c4e:	e77d      	b.n	8017b4c <_vfiprintf_r+0xf4>
 8017c50:	ab03      	add	r3, sp, #12
 8017c52:	9300      	str	r3, [sp, #0]
 8017c54:	4622      	mov	r2, r4
 8017c56:	4b0a      	ldr	r3, [pc, #40]	; (8017c80 <_vfiprintf_r+0x228>)
 8017c58:	a904      	add	r1, sp, #16
 8017c5a:	4630      	mov	r0, r6
 8017c5c:	f000 f888 	bl	8017d70 <_printf_i>
 8017c60:	e7ec      	b.n	8017c3c <_vfiprintf_r+0x1e4>
 8017c62:	bf00      	nop
 8017c64:	0801b544 	.word	0x0801b544
 8017c68:	0801b584 	.word	0x0801b584
 8017c6c:	0801b564 	.word	0x0801b564
 8017c70:	0801b524 	.word	0x0801b524
 8017c74:	0801b58a 	.word	0x0801b58a
 8017c78:	0801b58e 	.word	0x0801b58e
 8017c7c:	00000000 	.word	0x00000000
 8017c80:	08017a33 	.word	0x08017a33

08017c84 <_printf_common>:
 8017c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c88:	4691      	mov	r9, r2
 8017c8a:	461f      	mov	r7, r3
 8017c8c:	688a      	ldr	r2, [r1, #8]
 8017c8e:	690b      	ldr	r3, [r1, #16]
 8017c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c94:	4293      	cmp	r3, r2
 8017c96:	bfb8      	it	lt
 8017c98:	4613      	movlt	r3, r2
 8017c9a:	f8c9 3000 	str.w	r3, [r9]
 8017c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017ca2:	4606      	mov	r6, r0
 8017ca4:	460c      	mov	r4, r1
 8017ca6:	b112      	cbz	r2, 8017cae <_printf_common+0x2a>
 8017ca8:	3301      	adds	r3, #1
 8017caa:	f8c9 3000 	str.w	r3, [r9]
 8017cae:	6823      	ldr	r3, [r4, #0]
 8017cb0:	0699      	lsls	r1, r3, #26
 8017cb2:	bf42      	ittt	mi
 8017cb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017cb8:	3302      	addmi	r3, #2
 8017cba:	f8c9 3000 	strmi.w	r3, [r9]
 8017cbe:	6825      	ldr	r5, [r4, #0]
 8017cc0:	f015 0506 	ands.w	r5, r5, #6
 8017cc4:	d107      	bne.n	8017cd6 <_printf_common+0x52>
 8017cc6:	f104 0a19 	add.w	sl, r4, #25
 8017cca:	68e3      	ldr	r3, [r4, #12]
 8017ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8017cd0:	1a9b      	subs	r3, r3, r2
 8017cd2:	42ab      	cmp	r3, r5
 8017cd4:	dc28      	bgt.n	8017d28 <_printf_common+0xa4>
 8017cd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017cda:	6822      	ldr	r2, [r4, #0]
 8017cdc:	3300      	adds	r3, #0
 8017cde:	bf18      	it	ne
 8017ce0:	2301      	movne	r3, #1
 8017ce2:	0692      	lsls	r2, r2, #26
 8017ce4:	d42d      	bmi.n	8017d42 <_printf_common+0xbe>
 8017ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017cea:	4639      	mov	r1, r7
 8017cec:	4630      	mov	r0, r6
 8017cee:	47c0      	blx	r8
 8017cf0:	3001      	adds	r0, #1
 8017cf2:	d020      	beq.n	8017d36 <_printf_common+0xb2>
 8017cf4:	6823      	ldr	r3, [r4, #0]
 8017cf6:	68e5      	ldr	r5, [r4, #12]
 8017cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8017cfc:	f003 0306 	and.w	r3, r3, #6
 8017d00:	2b04      	cmp	r3, #4
 8017d02:	bf08      	it	eq
 8017d04:	1aad      	subeq	r5, r5, r2
 8017d06:	68a3      	ldr	r3, [r4, #8]
 8017d08:	6922      	ldr	r2, [r4, #16]
 8017d0a:	bf0c      	ite	eq
 8017d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d10:	2500      	movne	r5, #0
 8017d12:	4293      	cmp	r3, r2
 8017d14:	bfc4      	itt	gt
 8017d16:	1a9b      	subgt	r3, r3, r2
 8017d18:	18ed      	addgt	r5, r5, r3
 8017d1a:	f04f 0900 	mov.w	r9, #0
 8017d1e:	341a      	adds	r4, #26
 8017d20:	454d      	cmp	r5, r9
 8017d22:	d11a      	bne.n	8017d5a <_printf_common+0xd6>
 8017d24:	2000      	movs	r0, #0
 8017d26:	e008      	b.n	8017d3a <_printf_common+0xb6>
 8017d28:	2301      	movs	r3, #1
 8017d2a:	4652      	mov	r2, sl
 8017d2c:	4639      	mov	r1, r7
 8017d2e:	4630      	mov	r0, r6
 8017d30:	47c0      	blx	r8
 8017d32:	3001      	adds	r0, #1
 8017d34:	d103      	bne.n	8017d3e <_printf_common+0xba>
 8017d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d3e:	3501      	adds	r5, #1
 8017d40:	e7c3      	b.n	8017cca <_printf_common+0x46>
 8017d42:	18e1      	adds	r1, r4, r3
 8017d44:	1c5a      	adds	r2, r3, #1
 8017d46:	2030      	movs	r0, #48	; 0x30
 8017d48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017d4c:	4422      	add	r2, r4
 8017d4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017d52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017d56:	3302      	adds	r3, #2
 8017d58:	e7c5      	b.n	8017ce6 <_printf_common+0x62>
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	4622      	mov	r2, r4
 8017d5e:	4639      	mov	r1, r7
 8017d60:	4630      	mov	r0, r6
 8017d62:	47c0      	blx	r8
 8017d64:	3001      	adds	r0, #1
 8017d66:	d0e6      	beq.n	8017d36 <_printf_common+0xb2>
 8017d68:	f109 0901 	add.w	r9, r9, #1
 8017d6c:	e7d8      	b.n	8017d20 <_printf_common+0x9c>
	...

08017d70 <_printf_i>:
 8017d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017d78:	460c      	mov	r4, r1
 8017d7a:	7e09      	ldrb	r1, [r1, #24]
 8017d7c:	b085      	sub	sp, #20
 8017d7e:	296e      	cmp	r1, #110	; 0x6e
 8017d80:	4617      	mov	r7, r2
 8017d82:	4606      	mov	r6, r0
 8017d84:	4698      	mov	r8, r3
 8017d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d88:	f000 80b3 	beq.w	8017ef2 <_printf_i+0x182>
 8017d8c:	d822      	bhi.n	8017dd4 <_printf_i+0x64>
 8017d8e:	2963      	cmp	r1, #99	; 0x63
 8017d90:	d036      	beq.n	8017e00 <_printf_i+0x90>
 8017d92:	d80a      	bhi.n	8017daa <_printf_i+0x3a>
 8017d94:	2900      	cmp	r1, #0
 8017d96:	f000 80b9 	beq.w	8017f0c <_printf_i+0x19c>
 8017d9a:	2958      	cmp	r1, #88	; 0x58
 8017d9c:	f000 8083 	beq.w	8017ea6 <_printf_i+0x136>
 8017da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017da4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017da8:	e032      	b.n	8017e10 <_printf_i+0xa0>
 8017daa:	2964      	cmp	r1, #100	; 0x64
 8017dac:	d001      	beq.n	8017db2 <_printf_i+0x42>
 8017dae:	2969      	cmp	r1, #105	; 0x69
 8017db0:	d1f6      	bne.n	8017da0 <_printf_i+0x30>
 8017db2:	6820      	ldr	r0, [r4, #0]
 8017db4:	6813      	ldr	r3, [r2, #0]
 8017db6:	0605      	lsls	r5, r0, #24
 8017db8:	f103 0104 	add.w	r1, r3, #4
 8017dbc:	d52a      	bpl.n	8017e14 <_printf_i+0xa4>
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	6011      	str	r1, [r2, #0]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	da03      	bge.n	8017dce <_printf_i+0x5e>
 8017dc6:	222d      	movs	r2, #45	; 0x2d
 8017dc8:	425b      	negs	r3, r3
 8017dca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017dce:	486f      	ldr	r0, [pc, #444]	; (8017f8c <_printf_i+0x21c>)
 8017dd0:	220a      	movs	r2, #10
 8017dd2:	e039      	b.n	8017e48 <_printf_i+0xd8>
 8017dd4:	2973      	cmp	r1, #115	; 0x73
 8017dd6:	f000 809d 	beq.w	8017f14 <_printf_i+0x1a4>
 8017dda:	d808      	bhi.n	8017dee <_printf_i+0x7e>
 8017ddc:	296f      	cmp	r1, #111	; 0x6f
 8017dde:	d020      	beq.n	8017e22 <_printf_i+0xb2>
 8017de0:	2970      	cmp	r1, #112	; 0x70
 8017de2:	d1dd      	bne.n	8017da0 <_printf_i+0x30>
 8017de4:	6823      	ldr	r3, [r4, #0]
 8017de6:	f043 0320 	orr.w	r3, r3, #32
 8017dea:	6023      	str	r3, [r4, #0]
 8017dec:	e003      	b.n	8017df6 <_printf_i+0x86>
 8017dee:	2975      	cmp	r1, #117	; 0x75
 8017df0:	d017      	beq.n	8017e22 <_printf_i+0xb2>
 8017df2:	2978      	cmp	r1, #120	; 0x78
 8017df4:	d1d4      	bne.n	8017da0 <_printf_i+0x30>
 8017df6:	2378      	movs	r3, #120	; 0x78
 8017df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017dfc:	4864      	ldr	r0, [pc, #400]	; (8017f90 <_printf_i+0x220>)
 8017dfe:	e055      	b.n	8017eac <_printf_i+0x13c>
 8017e00:	6813      	ldr	r3, [r2, #0]
 8017e02:	1d19      	adds	r1, r3, #4
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	6011      	str	r1, [r2, #0]
 8017e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017e10:	2301      	movs	r3, #1
 8017e12:	e08c      	b.n	8017f2e <_printf_i+0x1be>
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	6011      	str	r1, [r2, #0]
 8017e18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017e1c:	bf18      	it	ne
 8017e1e:	b21b      	sxthne	r3, r3
 8017e20:	e7cf      	b.n	8017dc2 <_printf_i+0x52>
 8017e22:	6813      	ldr	r3, [r2, #0]
 8017e24:	6825      	ldr	r5, [r4, #0]
 8017e26:	1d18      	adds	r0, r3, #4
 8017e28:	6010      	str	r0, [r2, #0]
 8017e2a:	0628      	lsls	r0, r5, #24
 8017e2c:	d501      	bpl.n	8017e32 <_printf_i+0xc2>
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	e002      	b.n	8017e38 <_printf_i+0xc8>
 8017e32:	0668      	lsls	r0, r5, #25
 8017e34:	d5fb      	bpl.n	8017e2e <_printf_i+0xbe>
 8017e36:	881b      	ldrh	r3, [r3, #0]
 8017e38:	4854      	ldr	r0, [pc, #336]	; (8017f8c <_printf_i+0x21c>)
 8017e3a:	296f      	cmp	r1, #111	; 0x6f
 8017e3c:	bf14      	ite	ne
 8017e3e:	220a      	movne	r2, #10
 8017e40:	2208      	moveq	r2, #8
 8017e42:	2100      	movs	r1, #0
 8017e44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017e48:	6865      	ldr	r5, [r4, #4]
 8017e4a:	60a5      	str	r5, [r4, #8]
 8017e4c:	2d00      	cmp	r5, #0
 8017e4e:	f2c0 8095 	blt.w	8017f7c <_printf_i+0x20c>
 8017e52:	6821      	ldr	r1, [r4, #0]
 8017e54:	f021 0104 	bic.w	r1, r1, #4
 8017e58:	6021      	str	r1, [r4, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d13d      	bne.n	8017eda <_printf_i+0x16a>
 8017e5e:	2d00      	cmp	r5, #0
 8017e60:	f040 808e 	bne.w	8017f80 <_printf_i+0x210>
 8017e64:	4665      	mov	r5, ip
 8017e66:	2a08      	cmp	r2, #8
 8017e68:	d10b      	bne.n	8017e82 <_printf_i+0x112>
 8017e6a:	6823      	ldr	r3, [r4, #0]
 8017e6c:	07db      	lsls	r3, r3, #31
 8017e6e:	d508      	bpl.n	8017e82 <_printf_i+0x112>
 8017e70:	6923      	ldr	r3, [r4, #16]
 8017e72:	6862      	ldr	r2, [r4, #4]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	bfde      	ittt	le
 8017e78:	2330      	movle	r3, #48	; 0x30
 8017e7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017e7e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017e82:	ebac 0305 	sub.w	r3, ip, r5
 8017e86:	6123      	str	r3, [r4, #16]
 8017e88:	f8cd 8000 	str.w	r8, [sp]
 8017e8c:	463b      	mov	r3, r7
 8017e8e:	aa03      	add	r2, sp, #12
 8017e90:	4621      	mov	r1, r4
 8017e92:	4630      	mov	r0, r6
 8017e94:	f7ff fef6 	bl	8017c84 <_printf_common>
 8017e98:	3001      	adds	r0, #1
 8017e9a:	d14d      	bne.n	8017f38 <_printf_i+0x1c8>
 8017e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ea0:	b005      	add	sp, #20
 8017ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ea6:	4839      	ldr	r0, [pc, #228]	; (8017f8c <_printf_i+0x21c>)
 8017ea8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017eac:	6813      	ldr	r3, [r2, #0]
 8017eae:	6821      	ldr	r1, [r4, #0]
 8017eb0:	1d1d      	adds	r5, r3, #4
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	6015      	str	r5, [r2, #0]
 8017eb6:	060a      	lsls	r2, r1, #24
 8017eb8:	d50b      	bpl.n	8017ed2 <_printf_i+0x162>
 8017eba:	07ca      	lsls	r2, r1, #31
 8017ebc:	bf44      	itt	mi
 8017ebe:	f041 0120 	orrmi.w	r1, r1, #32
 8017ec2:	6021      	strmi	r1, [r4, #0]
 8017ec4:	b91b      	cbnz	r3, 8017ece <_printf_i+0x15e>
 8017ec6:	6822      	ldr	r2, [r4, #0]
 8017ec8:	f022 0220 	bic.w	r2, r2, #32
 8017ecc:	6022      	str	r2, [r4, #0]
 8017ece:	2210      	movs	r2, #16
 8017ed0:	e7b7      	b.n	8017e42 <_printf_i+0xd2>
 8017ed2:	064d      	lsls	r5, r1, #25
 8017ed4:	bf48      	it	mi
 8017ed6:	b29b      	uxthmi	r3, r3
 8017ed8:	e7ef      	b.n	8017eba <_printf_i+0x14a>
 8017eda:	4665      	mov	r5, ip
 8017edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ee0:	fb02 3311 	mls	r3, r2, r1, r3
 8017ee4:	5cc3      	ldrb	r3, [r0, r3]
 8017ee6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017eea:	460b      	mov	r3, r1
 8017eec:	2900      	cmp	r1, #0
 8017eee:	d1f5      	bne.n	8017edc <_printf_i+0x16c>
 8017ef0:	e7b9      	b.n	8017e66 <_printf_i+0xf6>
 8017ef2:	6813      	ldr	r3, [r2, #0]
 8017ef4:	6825      	ldr	r5, [r4, #0]
 8017ef6:	6961      	ldr	r1, [r4, #20]
 8017ef8:	1d18      	adds	r0, r3, #4
 8017efa:	6010      	str	r0, [r2, #0]
 8017efc:	0628      	lsls	r0, r5, #24
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	d501      	bpl.n	8017f06 <_printf_i+0x196>
 8017f02:	6019      	str	r1, [r3, #0]
 8017f04:	e002      	b.n	8017f0c <_printf_i+0x19c>
 8017f06:	066a      	lsls	r2, r5, #25
 8017f08:	d5fb      	bpl.n	8017f02 <_printf_i+0x192>
 8017f0a:	8019      	strh	r1, [r3, #0]
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	6123      	str	r3, [r4, #16]
 8017f10:	4665      	mov	r5, ip
 8017f12:	e7b9      	b.n	8017e88 <_printf_i+0x118>
 8017f14:	6813      	ldr	r3, [r2, #0]
 8017f16:	1d19      	adds	r1, r3, #4
 8017f18:	6011      	str	r1, [r2, #0]
 8017f1a:	681d      	ldr	r5, [r3, #0]
 8017f1c:	6862      	ldr	r2, [r4, #4]
 8017f1e:	2100      	movs	r1, #0
 8017f20:	4628      	mov	r0, r5
 8017f22:	f7e8 f9e5 	bl	80002f0 <memchr>
 8017f26:	b108      	cbz	r0, 8017f2c <_printf_i+0x1bc>
 8017f28:	1b40      	subs	r0, r0, r5
 8017f2a:	6060      	str	r0, [r4, #4]
 8017f2c:	6863      	ldr	r3, [r4, #4]
 8017f2e:	6123      	str	r3, [r4, #16]
 8017f30:	2300      	movs	r3, #0
 8017f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f36:	e7a7      	b.n	8017e88 <_printf_i+0x118>
 8017f38:	6923      	ldr	r3, [r4, #16]
 8017f3a:	462a      	mov	r2, r5
 8017f3c:	4639      	mov	r1, r7
 8017f3e:	4630      	mov	r0, r6
 8017f40:	47c0      	blx	r8
 8017f42:	3001      	adds	r0, #1
 8017f44:	d0aa      	beq.n	8017e9c <_printf_i+0x12c>
 8017f46:	6823      	ldr	r3, [r4, #0]
 8017f48:	079b      	lsls	r3, r3, #30
 8017f4a:	d413      	bmi.n	8017f74 <_printf_i+0x204>
 8017f4c:	68e0      	ldr	r0, [r4, #12]
 8017f4e:	9b03      	ldr	r3, [sp, #12]
 8017f50:	4298      	cmp	r0, r3
 8017f52:	bfb8      	it	lt
 8017f54:	4618      	movlt	r0, r3
 8017f56:	e7a3      	b.n	8017ea0 <_printf_i+0x130>
 8017f58:	2301      	movs	r3, #1
 8017f5a:	464a      	mov	r2, r9
 8017f5c:	4639      	mov	r1, r7
 8017f5e:	4630      	mov	r0, r6
 8017f60:	47c0      	blx	r8
 8017f62:	3001      	adds	r0, #1
 8017f64:	d09a      	beq.n	8017e9c <_printf_i+0x12c>
 8017f66:	3501      	adds	r5, #1
 8017f68:	68e3      	ldr	r3, [r4, #12]
 8017f6a:	9a03      	ldr	r2, [sp, #12]
 8017f6c:	1a9b      	subs	r3, r3, r2
 8017f6e:	42ab      	cmp	r3, r5
 8017f70:	dcf2      	bgt.n	8017f58 <_printf_i+0x1e8>
 8017f72:	e7eb      	b.n	8017f4c <_printf_i+0x1dc>
 8017f74:	2500      	movs	r5, #0
 8017f76:	f104 0919 	add.w	r9, r4, #25
 8017f7a:	e7f5      	b.n	8017f68 <_printf_i+0x1f8>
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d1ac      	bne.n	8017eda <_printf_i+0x16a>
 8017f80:	7803      	ldrb	r3, [r0, #0]
 8017f82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017f86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f8a:	e76c      	b.n	8017e66 <_printf_i+0xf6>
 8017f8c:	0801b595 	.word	0x0801b595
 8017f90:	0801b5a6 	.word	0x0801b5a6

08017f94 <_sbrk_r>:
 8017f94:	b538      	push	{r3, r4, r5, lr}
 8017f96:	4c06      	ldr	r4, [pc, #24]	; (8017fb0 <_sbrk_r+0x1c>)
 8017f98:	2300      	movs	r3, #0
 8017f9a:	4605      	mov	r5, r0
 8017f9c:	4608      	mov	r0, r1
 8017f9e:	6023      	str	r3, [r4, #0]
 8017fa0:	f7e9 f9ee 	bl	8001380 <_sbrk>
 8017fa4:	1c43      	adds	r3, r0, #1
 8017fa6:	d102      	bne.n	8017fae <_sbrk_r+0x1a>
 8017fa8:	6823      	ldr	r3, [r4, #0]
 8017faa:	b103      	cbz	r3, 8017fae <_sbrk_r+0x1a>
 8017fac:	602b      	str	r3, [r5, #0]
 8017fae:	bd38      	pop	{r3, r4, r5, pc}
 8017fb0:	24008358 	.word	0x24008358

08017fb4 <__sread>:
 8017fb4:	b510      	push	{r4, lr}
 8017fb6:	460c      	mov	r4, r1
 8017fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017fbc:	f000 fa6e 	bl	801849c <_read_r>
 8017fc0:	2800      	cmp	r0, #0
 8017fc2:	bfab      	itete	ge
 8017fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8017fc8:	181b      	addge	r3, r3, r0
 8017fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017fce:	bfac      	ite	ge
 8017fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8017fd2:	81a3      	strhlt	r3, [r4, #12]
 8017fd4:	bd10      	pop	{r4, pc}

08017fd6 <__swrite>:
 8017fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fda:	461f      	mov	r7, r3
 8017fdc:	898b      	ldrh	r3, [r1, #12]
 8017fde:	05db      	lsls	r3, r3, #23
 8017fe0:	4605      	mov	r5, r0
 8017fe2:	460c      	mov	r4, r1
 8017fe4:	4616      	mov	r6, r2
 8017fe6:	d505      	bpl.n	8017ff4 <__swrite+0x1e>
 8017fe8:	2302      	movs	r3, #2
 8017fea:	2200      	movs	r2, #0
 8017fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ff0:	f000 f9b6 	bl	8018360 <_lseek_r>
 8017ff4:	89a3      	ldrh	r3, [r4, #12]
 8017ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ffe:	81a3      	strh	r3, [r4, #12]
 8018000:	4632      	mov	r2, r6
 8018002:	463b      	mov	r3, r7
 8018004:	4628      	mov	r0, r5
 8018006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801800a:	f000 b869 	b.w	80180e0 <_write_r>

0801800e <__sseek>:
 801800e:	b510      	push	{r4, lr}
 8018010:	460c      	mov	r4, r1
 8018012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018016:	f000 f9a3 	bl	8018360 <_lseek_r>
 801801a:	1c43      	adds	r3, r0, #1
 801801c:	89a3      	ldrh	r3, [r4, #12]
 801801e:	bf15      	itete	ne
 8018020:	6560      	strne	r0, [r4, #84]	; 0x54
 8018022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801802a:	81a3      	strheq	r3, [r4, #12]
 801802c:	bf18      	it	ne
 801802e:	81a3      	strhne	r3, [r4, #12]
 8018030:	bd10      	pop	{r4, pc}

08018032 <__sclose>:
 8018032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018036:	f000 b8d3 	b.w	80181e0 <_close_r>
	...

0801803c <__swbuf_r>:
 801803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801803e:	460e      	mov	r6, r1
 8018040:	4614      	mov	r4, r2
 8018042:	4605      	mov	r5, r0
 8018044:	b118      	cbz	r0, 801804e <__swbuf_r+0x12>
 8018046:	6983      	ldr	r3, [r0, #24]
 8018048:	b90b      	cbnz	r3, 801804e <__swbuf_r+0x12>
 801804a:	f7ff fa4f 	bl	80174ec <__sinit>
 801804e:	4b21      	ldr	r3, [pc, #132]	; (80180d4 <__swbuf_r+0x98>)
 8018050:	429c      	cmp	r4, r3
 8018052:	d12a      	bne.n	80180aa <__swbuf_r+0x6e>
 8018054:	686c      	ldr	r4, [r5, #4]
 8018056:	69a3      	ldr	r3, [r4, #24]
 8018058:	60a3      	str	r3, [r4, #8]
 801805a:	89a3      	ldrh	r3, [r4, #12]
 801805c:	071a      	lsls	r2, r3, #28
 801805e:	d52e      	bpl.n	80180be <__swbuf_r+0x82>
 8018060:	6923      	ldr	r3, [r4, #16]
 8018062:	b363      	cbz	r3, 80180be <__swbuf_r+0x82>
 8018064:	6923      	ldr	r3, [r4, #16]
 8018066:	6820      	ldr	r0, [r4, #0]
 8018068:	1ac0      	subs	r0, r0, r3
 801806a:	6963      	ldr	r3, [r4, #20]
 801806c:	b2f6      	uxtb	r6, r6
 801806e:	4283      	cmp	r3, r0
 8018070:	4637      	mov	r7, r6
 8018072:	dc04      	bgt.n	801807e <__swbuf_r+0x42>
 8018074:	4621      	mov	r1, r4
 8018076:	4628      	mov	r0, r5
 8018078:	f000 f948 	bl	801830c <_fflush_r>
 801807c:	bb28      	cbnz	r0, 80180ca <__swbuf_r+0x8e>
 801807e:	68a3      	ldr	r3, [r4, #8]
 8018080:	3b01      	subs	r3, #1
 8018082:	60a3      	str	r3, [r4, #8]
 8018084:	6823      	ldr	r3, [r4, #0]
 8018086:	1c5a      	adds	r2, r3, #1
 8018088:	6022      	str	r2, [r4, #0]
 801808a:	701e      	strb	r6, [r3, #0]
 801808c:	6963      	ldr	r3, [r4, #20]
 801808e:	3001      	adds	r0, #1
 8018090:	4283      	cmp	r3, r0
 8018092:	d004      	beq.n	801809e <__swbuf_r+0x62>
 8018094:	89a3      	ldrh	r3, [r4, #12]
 8018096:	07db      	lsls	r3, r3, #31
 8018098:	d519      	bpl.n	80180ce <__swbuf_r+0x92>
 801809a:	2e0a      	cmp	r6, #10
 801809c:	d117      	bne.n	80180ce <__swbuf_r+0x92>
 801809e:	4621      	mov	r1, r4
 80180a0:	4628      	mov	r0, r5
 80180a2:	f000 f933 	bl	801830c <_fflush_r>
 80180a6:	b190      	cbz	r0, 80180ce <__swbuf_r+0x92>
 80180a8:	e00f      	b.n	80180ca <__swbuf_r+0x8e>
 80180aa:	4b0b      	ldr	r3, [pc, #44]	; (80180d8 <__swbuf_r+0x9c>)
 80180ac:	429c      	cmp	r4, r3
 80180ae:	d101      	bne.n	80180b4 <__swbuf_r+0x78>
 80180b0:	68ac      	ldr	r4, [r5, #8]
 80180b2:	e7d0      	b.n	8018056 <__swbuf_r+0x1a>
 80180b4:	4b09      	ldr	r3, [pc, #36]	; (80180dc <__swbuf_r+0xa0>)
 80180b6:	429c      	cmp	r4, r3
 80180b8:	bf08      	it	eq
 80180ba:	68ec      	ldreq	r4, [r5, #12]
 80180bc:	e7cb      	b.n	8018056 <__swbuf_r+0x1a>
 80180be:	4621      	mov	r1, r4
 80180c0:	4628      	mov	r0, r5
 80180c2:	f000 f81f 	bl	8018104 <__swsetup_r>
 80180c6:	2800      	cmp	r0, #0
 80180c8:	d0cc      	beq.n	8018064 <__swbuf_r+0x28>
 80180ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80180ce:	4638      	mov	r0, r7
 80180d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180d2:	bf00      	nop
 80180d4:	0801b544 	.word	0x0801b544
 80180d8:	0801b564 	.word	0x0801b564
 80180dc:	0801b524 	.word	0x0801b524

080180e0 <_write_r>:
 80180e0:	b538      	push	{r3, r4, r5, lr}
 80180e2:	4c07      	ldr	r4, [pc, #28]	; (8018100 <_write_r+0x20>)
 80180e4:	4605      	mov	r5, r0
 80180e6:	4608      	mov	r0, r1
 80180e8:	4611      	mov	r1, r2
 80180ea:	2200      	movs	r2, #0
 80180ec:	6022      	str	r2, [r4, #0]
 80180ee:	461a      	mov	r2, r3
 80180f0:	f7e9 f8f5 	bl	80012de <_write>
 80180f4:	1c43      	adds	r3, r0, #1
 80180f6:	d102      	bne.n	80180fe <_write_r+0x1e>
 80180f8:	6823      	ldr	r3, [r4, #0]
 80180fa:	b103      	cbz	r3, 80180fe <_write_r+0x1e>
 80180fc:	602b      	str	r3, [r5, #0]
 80180fe:	bd38      	pop	{r3, r4, r5, pc}
 8018100:	24008358 	.word	0x24008358

08018104 <__swsetup_r>:
 8018104:	4b32      	ldr	r3, [pc, #200]	; (80181d0 <__swsetup_r+0xcc>)
 8018106:	b570      	push	{r4, r5, r6, lr}
 8018108:	681d      	ldr	r5, [r3, #0]
 801810a:	4606      	mov	r6, r0
 801810c:	460c      	mov	r4, r1
 801810e:	b125      	cbz	r5, 801811a <__swsetup_r+0x16>
 8018110:	69ab      	ldr	r3, [r5, #24]
 8018112:	b913      	cbnz	r3, 801811a <__swsetup_r+0x16>
 8018114:	4628      	mov	r0, r5
 8018116:	f7ff f9e9 	bl	80174ec <__sinit>
 801811a:	4b2e      	ldr	r3, [pc, #184]	; (80181d4 <__swsetup_r+0xd0>)
 801811c:	429c      	cmp	r4, r3
 801811e:	d10f      	bne.n	8018140 <__swsetup_r+0x3c>
 8018120:	686c      	ldr	r4, [r5, #4]
 8018122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018126:	b29a      	uxth	r2, r3
 8018128:	0715      	lsls	r5, r2, #28
 801812a:	d42c      	bmi.n	8018186 <__swsetup_r+0x82>
 801812c:	06d0      	lsls	r0, r2, #27
 801812e:	d411      	bmi.n	8018154 <__swsetup_r+0x50>
 8018130:	2209      	movs	r2, #9
 8018132:	6032      	str	r2, [r6, #0]
 8018134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018138:	81a3      	strh	r3, [r4, #12]
 801813a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801813e:	e03e      	b.n	80181be <__swsetup_r+0xba>
 8018140:	4b25      	ldr	r3, [pc, #148]	; (80181d8 <__swsetup_r+0xd4>)
 8018142:	429c      	cmp	r4, r3
 8018144:	d101      	bne.n	801814a <__swsetup_r+0x46>
 8018146:	68ac      	ldr	r4, [r5, #8]
 8018148:	e7eb      	b.n	8018122 <__swsetup_r+0x1e>
 801814a:	4b24      	ldr	r3, [pc, #144]	; (80181dc <__swsetup_r+0xd8>)
 801814c:	429c      	cmp	r4, r3
 801814e:	bf08      	it	eq
 8018150:	68ec      	ldreq	r4, [r5, #12]
 8018152:	e7e6      	b.n	8018122 <__swsetup_r+0x1e>
 8018154:	0751      	lsls	r1, r2, #29
 8018156:	d512      	bpl.n	801817e <__swsetup_r+0x7a>
 8018158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801815a:	b141      	cbz	r1, 801816e <__swsetup_r+0x6a>
 801815c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018160:	4299      	cmp	r1, r3
 8018162:	d002      	beq.n	801816a <__swsetup_r+0x66>
 8018164:	4630      	mov	r0, r6
 8018166:	f7ff fa53 	bl	8017610 <_free_r>
 801816a:	2300      	movs	r3, #0
 801816c:	6363      	str	r3, [r4, #52]	; 0x34
 801816e:	89a3      	ldrh	r3, [r4, #12]
 8018170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018174:	81a3      	strh	r3, [r4, #12]
 8018176:	2300      	movs	r3, #0
 8018178:	6063      	str	r3, [r4, #4]
 801817a:	6923      	ldr	r3, [r4, #16]
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	89a3      	ldrh	r3, [r4, #12]
 8018180:	f043 0308 	orr.w	r3, r3, #8
 8018184:	81a3      	strh	r3, [r4, #12]
 8018186:	6923      	ldr	r3, [r4, #16]
 8018188:	b94b      	cbnz	r3, 801819e <__swsetup_r+0x9a>
 801818a:	89a3      	ldrh	r3, [r4, #12]
 801818c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018194:	d003      	beq.n	801819e <__swsetup_r+0x9a>
 8018196:	4621      	mov	r1, r4
 8018198:	4630      	mov	r0, r6
 801819a:	f000 f917 	bl	80183cc <__smakebuf_r>
 801819e:	89a2      	ldrh	r2, [r4, #12]
 80181a0:	f012 0301 	ands.w	r3, r2, #1
 80181a4:	d00c      	beq.n	80181c0 <__swsetup_r+0xbc>
 80181a6:	2300      	movs	r3, #0
 80181a8:	60a3      	str	r3, [r4, #8]
 80181aa:	6963      	ldr	r3, [r4, #20]
 80181ac:	425b      	negs	r3, r3
 80181ae:	61a3      	str	r3, [r4, #24]
 80181b0:	6923      	ldr	r3, [r4, #16]
 80181b2:	b953      	cbnz	r3, 80181ca <__swsetup_r+0xc6>
 80181b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80181bc:	d1ba      	bne.n	8018134 <__swsetup_r+0x30>
 80181be:	bd70      	pop	{r4, r5, r6, pc}
 80181c0:	0792      	lsls	r2, r2, #30
 80181c2:	bf58      	it	pl
 80181c4:	6963      	ldrpl	r3, [r4, #20]
 80181c6:	60a3      	str	r3, [r4, #8]
 80181c8:	e7f2      	b.n	80181b0 <__swsetup_r+0xac>
 80181ca:	2000      	movs	r0, #0
 80181cc:	e7f7      	b.n	80181be <__swsetup_r+0xba>
 80181ce:	bf00      	nop
 80181d0:	24000034 	.word	0x24000034
 80181d4:	0801b544 	.word	0x0801b544
 80181d8:	0801b564 	.word	0x0801b564
 80181dc:	0801b524 	.word	0x0801b524

080181e0 <_close_r>:
 80181e0:	b538      	push	{r3, r4, r5, lr}
 80181e2:	4c06      	ldr	r4, [pc, #24]	; (80181fc <_close_r+0x1c>)
 80181e4:	2300      	movs	r3, #0
 80181e6:	4605      	mov	r5, r0
 80181e8:	4608      	mov	r0, r1
 80181ea:	6023      	str	r3, [r4, #0]
 80181ec:	f7e9 f893 	bl	8001316 <_close>
 80181f0:	1c43      	adds	r3, r0, #1
 80181f2:	d102      	bne.n	80181fa <_close_r+0x1a>
 80181f4:	6823      	ldr	r3, [r4, #0]
 80181f6:	b103      	cbz	r3, 80181fa <_close_r+0x1a>
 80181f8:	602b      	str	r3, [r5, #0]
 80181fa:	bd38      	pop	{r3, r4, r5, pc}
 80181fc:	24008358 	.word	0x24008358

08018200 <__sflush_r>:
 8018200:	898a      	ldrh	r2, [r1, #12]
 8018202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018206:	4605      	mov	r5, r0
 8018208:	0710      	lsls	r0, r2, #28
 801820a:	460c      	mov	r4, r1
 801820c:	d458      	bmi.n	80182c0 <__sflush_r+0xc0>
 801820e:	684b      	ldr	r3, [r1, #4]
 8018210:	2b00      	cmp	r3, #0
 8018212:	dc05      	bgt.n	8018220 <__sflush_r+0x20>
 8018214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018216:	2b00      	cmp	r3, #0
 8018218:	dc02      	bgt.n	8018220 <__sflush_r+0x20>
 801821a:	2000      	movs	r0, #0
 801821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018222:	2e00      	cmp	r6, #0
 8018224:	d0f9      	beq.n	801821a <__sflush_r+0x1a>
 8018226:	2300      	movs	r3, #0
 8018228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801822c:	682f      	ldr	r7, [r5, #0]
 801822e:	6a21      	ldr	r1, [r4, #32]
 8018230:	602b      	str	r3, [r5, #0]
 8018232:	d032      	beq.n	801829a <__sflush_r+0x9a>
 8018234:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018236:	89a3      	ldrh	r3, [r4, #12]
 8018238:	075a      	lsls	r2, r3, #29
 801823a:	d505      	bpl.n	8018248 <__sflush_r+0x48>
 801823c:	6863      	ldr	r3, [r4, #4]
 801823e:	1ac0      	subs	r0, r0, r3
 8018240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018242:	b10b      	cbz	r3, 8018248 <__sflush_r+0x48>
 8018244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018246:	1ac0      	subs	r0, r0, r3
 8018248:	2300      	movs	r3, #0
 801824a:	4602      	mov	r2, r0
 801824c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801824e:	6a21      	ldr	r1, [r4, #32]
 8018250:	4628      	mov	r0, r5
 8018252:	47b0      	blx	r6
 8018254:	1c43      	adds	r3, r0, #1
 8018256:	89a3      	ldrh	r3, [r4, #12]
 8018258:	d106      	bne.n	8018268 <__sflush_r+0x68>
 801825a:	6829      	ldr	r1, [r5, #0]
 801825c:	291d      	cmp	r1, #29
 801825e:	d848      	bhi.n	80182f2 <__sflush_r+0xf2>
 8018260:	4a29      	ldr	r2, [pc, #164]	; (8018308 <__sflush_r+0x108>)
 8018262:	40ca      	lsrs	r2, r1
 8018264:	07d6      	lsls	r6, r2, #31
 8018266:	d544      	bpl.n	80182f2 <__sflush_r+0xf2>
 8018268:	2200      	movs	r2, #0
 801826a:	6062      	str	r2, [r4, #4]
 801826c:	04d9      	lsls	r1, r3, #19
 801826e:	6922      	ldr	r2, [r4, #16]
 8018270:	6022      	str	r2, [r4, #0]
 8018272:	d504      	bpl.n	801827e <__sflush_r+0x7e>
 8018274:	1c42      	adds	r2, r0, #1
 8018276:	d101      	bne.n	801827c <__sflush_r+0x7c>
 8018278:	682b      	ldr	r3, [r5, #0]
 801827a:	b903      	cbnz	r3, 801827e <__sflush_r+0x7e>
 801827c:	6560      	str	r0, [r4, #84]	; 0x54
 801827e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018280:	602f      	str	r7, [r5, #0]
 8018282:	2900      	cmp	r1, #0
 8018284:	d0c9      	beq.n	801821a <__sflush_r+0x1a>
 8018286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801828a:	4299      	cmp	r1, r3
 801828c:	d002      	beq.n	8018294 <__sflush_r+0x94>
 801828e:	4628      	mov	r0, r5
 8018290:	f7ff f9be 	bl	8017610 <_free_r>
 8018294:	2000      	movs	r0, #0
 8018296:	6360      	str	r0, [r4, #52]	; 0x34
 8018298:	e7c0      	b.n	801821c <__sflush_r+0x1c>
 801829a:	2301      	movs	r3, #1
 801829c:	4628      	mov	r0, r5
 801829e:	47b0      	blx	r6
 80182a0:	1c41      	adds	r1, r0, #1
 80182a2:	d1c8      	bne.n	8018236 <__sflush_r+0x36>
 80182a4:	682b      	ldr	r3, [r5, #0]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d0c5      	beq.n	8018236 <__sflush_r+0x36>
 80182aa:	2b1d      	cmp	r3, #29
 80182ac:	d001      	beq.n	80182b2 <__sflush_r+0xb2>
 80182ae:	2b16      	cmp	r3, #22
 80182b0:	d101      	bne.n	80182b6 <__sflush_r+0xb6>
 80182b2:	602f      	str	r7, [r5, #0]
 80182b4:	e7b1      	b.n	801821a <__sflush_r+0x1a>
 80182b6:	89a3      	ldrh	r3, [r4, #12]
 80182b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182bc:	81a3      	strh	r3, [r4, #12]
 80182be:	e7ad      	b.n	801821c <__sflush_r+0x1c>
 80182c0:	690f      	ldr	r7, [r1, #16]
 80182c2:	2f00      	cmp	r7, #0
 80182c4:	d0a9      	beq.n	801821a <__sflush_r+0x1a>
 80182c6:	0793      	lsls	r3, r2, #30
 80182c8:	680e      	ldr	r6, [r1, #0]
 80182ca:	bf08      	it	eq
 80182cc:	694b      	ldreq	r3, [r1, #20]
 80182ce:	600f      	str	r7, [r1, #0]
 80182d0:	bf18      	it	ne
 80182d2:	2300      	movne	r3, #0
 80182d4:	eba6 0807 	sub.w	r8, r6, r7
 80182d8:	608b      	str	r3, [r1, #8]
 80182da:	f1b8 0f00 	cmp.w	r8, #0
 80182de:	dd9c      	ble.n	801821a <__sflush_r+0x1a>
 80182e0:	4643      	mov	r3, r8
 80182e2:	463a      	mov	r2, r7
 80182e4:	6a21      	ldr	r1, [r4, #32]
 80182e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80182e8:	4628      	mov	r0, r5
 80182ea:	47b0      	blx	r6
 80182ec:	2800      	cmp	r0, #0
 80182ee:	dc06      	bgt.n	80182fe <__sflush_r+0xfe>
 80182f0:	89a3      	ldrh	r3, [r4, #12]
 80182f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182f6:	81a3      	strh	r3, [r4, #12]
 80182f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182fc:	e78e      	b.n	801821c <__sflush_r+0x1c>
 80182fe:	4407      	add	r7, r0
 8018300:	eba8 0800 	sub.w	r8, r8, r0
 8018304:	e7e9      	b.n	80182da <__sflush_r+0xda>
 8018306:	bf00      	nop
 8018308:	20400001 	.word	0x20400001

0801830c <_fflush_r>:
 801830c:	b538      	push	{r3, r4, r5, lr}
 801830e:	690b      	ldr	r3, [r1, #16]
 8018310:	4605      	mov	r5, r0
 8018312:	460c      	mov	r4, r1
 8018314:	b1db      	cbz	r3, 801834e <_fflush_r+0x42>
 8018316:	b118      	cbz	r0, 8018320 <_fflush_r+0x14>
 8018318:	6983      	ldr	r3, [r0, #24]
 801831a:	b90b      	cbnz	r3, 8018320 <_fflush_r+0x14>
 801831c:	f7ff f8e6 	bl	80174ec <__sinit>
 8018320:	4b0c      	ldr	r3, [pc, #48]	; (8018354 <_fflush_r+0x48>)
 8018322:	429c      	cmp	r4, r3
 8018324:	d109      	bne.n	801833a <_fflush_r+0x2e>
 8018326:	686c      	ldr	r4, [r5, #4]
 8018328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801832c:	b17b      	cbz	r3, 801834e <_fflush_r+0x42>
 801832e:	4621      	mov	r1, r4
 8018330:	4628      	mov	r0, r5
 8018332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018336:	f7ff bf63 	b.w	8018200 <__sflush_r>
 801833a:	4b07      	ldr	r3, [pc, #28]	; (8018358 <_fflush_r+0x4c>)
 801833c:	429c      	cmp	r4, r3
 801833e:	d101      	bne.n	8018344 <_fflush_r+0x38>
 8018340:	68ac      	ldr	r4, [r5, #8]
 8018342:	e7f1      	b.n	8018328 <_fflush_r+0x1c>
 8018344:	4b05      	ldr	r3, [pc, #20]	; (801835c <_fflush_r+0x50>)
 8018346:	429c      	cmp	r4, r3
 8018348:	bf08      	it	eq
 801834a:	68ec      	ldreq	r4, [r5, #12]
 801834c:	e7ec      	b.n	8018328 <_fflush_r+0x1c>
 801834e:	2000      	movs	r0, #0
 8018350:	bd38      	pop	{r3, r4, r5, pc}
 8018352:	bf00      	nop
 8018354:	0801b544 	.word	0x0801b544
 8018358:	0801b564 	.word	0x0801b564
 801835c:	0801b524 	.word	0x0801b524

08018360 <_lseek_r>:
 8018360:	b538      	push	{r3, r4, r5, lr}
 8018362:	4c07      	ldr	r4, [pc, #28]	; (8018380 <_lseek_r+0x20>)
 8018364:	4605      	mov	r5, r0
 8018366:	4608      	mov	r0, r1
 8018368:	4611      	mov	r1, r2
 801836a:	2200      	movs	r2, #0
 801836c:	6022      	str	r2, [r4, #0]
 801836e:	461a      	mov	r2, r3
 8018370:	f7e8 fff8 	bl	8001364 <_lseek>
 8018374:	1c43      	adds	r3, r0, #1
 8018376:	d102      	bne.n	801837e <_lseek_r+0x1e>
 8018378:	6823      	ldr	r3, [r4, #0]
 801837a:	b103      	cbz	r3, 801837e <_lseek_r+0x1e>
 801837c:	602b      	str	r3, [r5, #0]
 801837e:	bd38      	pop	{r3, r4, r5, pc}
 8018380:	24008358 	.word	0x24008358

08018384 <__swhatbuf_r>:
 8018384:	b570      	push	{r4, r5, r6, lr}
 8018386:	460e      	mov	r6, r1
 8018388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801838c:	2900      	cmp	r1, #0
 801838e:	b096      	sub	sp, #88	; 0x58
 8018390:	4614      	mov	r4, r2
 8018392:	461d      	mov	r5, r3
 8018394:	da07      	bge.n	80183a6 <__swhatbuf_r+0x22>
 8018396:	2300      	movs	r3, #0
 8018398:	602b      	str	r3, [r5, #0]
 801839a:	89b3      	ldrh	r3, [r6, #12]
 801839c:	061a      	lsls	r2, r3, #24
 801839e:	d410      	bmi.n	80183c2 <__swhatbuf_r+0x3e>
 80183a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183a4:	e00e      	b.n	80183c4 <__swhatbuf_r+0x40>
 80183a6:	466a      	mov	r2, sp
 80183a8:	f000 f88a 	bl	80184c0 <_fstat_r>
 80183ac:	2800      	cmp	r0, #0
 80183ae:	dbf2      	blt.n	8018396 <__swhatbuf_r+0x12>
 80183b0:	9a01      	ldr	r2, [sp, #4]
 80183b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80183b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80183ba:	425a      	negs	r2, r3
 80183bc:	415a      	adcs	r2, r3
 80183be:	602a      	str	r2, [r5, #0]
 80183c0:	e7ee      	b.n	80183a0 <__swhatbuf_r+0x1c>
 80183c2:	2340      	movs	r3, #64	; 0x40
 80183c4:	2000      	movs	r0, #0
 80183c6:	6023      	str	r3, [r4, #0]
 80183c8:	b016      	add	sp, #88	; 0x58
 80183ca:	bd70      	pop	{r4, r5, r6, pc}

080183cc <__smakebuf_r>:
 80183cc:	898b      	ldrh	r3, [r1, #12]
 80183ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183d0:	079d      	lsls	r5, r3, #30
 80183d2:	4606      	mov	r6, r0
 80183d4:	460c      	mov	r4, r1
 80183d6:	d507      	bpl.n	80183e8 <__smakebuf_r+0x1c>
 80183d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80183dc:	6023      	str	r3, [r4, #0]
 80183de:	6123      	str	r3, [r4, #16]
 80183e0:	2301      	movs	r3, #1
 80183e2:	6163      	str	r3, [r4, #20]
 80183e4:	b002      	add	sp, #8
 80183e6:	bd70      	pop	{r4, r5, r6, pc}
 80183e8:	ab01      	add	r3, sp, #4
 80183ea:	466a      	mov	r2, sp
 80183ec:	f7ff ffca 	bl	8018384 <__swhatbuf_r>
 80183f0:	9900      	ldr	r1, [sp, #0]
 80183f2:	4605      	mov	r5, r0
 80183f4:	4630      	mov	r0, r6
 80183f6:	f7ff f959 	bl	80176ac <_malloc_r>
 80183fa:	b948      	cbnz	r0, 8018410 <__smakebuf_r+0x44>
 80183fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018400:	059a      	lsls	r2, r3, #22
 8018402:	d4ef      	bmi.n	80183e4 <__smakebuf_r+0x18>
 8018404:	f023 0303 	bic.w	r3, r3, #3
 8018408:	f043 0302 	orr.w	r3, r3, #2
 801840c:	81a3      	strh	r3, [r4, #12]
 801840e:	e7e3      	b.n	80183d8 <__smakebuf_r+0xc>
 8018410:	4b0d      	ldr	r3, [pc, #52]	; (8018448 <__smakebuf_r+0x7c>)
 8018412:	62b3      	str	r3, [r6, #40]	; 0x28
 8018414:	89a3      	ldrh	r3, [r4, #12]
 8018416:	6020      	str	r0, [r4, #0]
 8018418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801841c:	81a3      	strh	r3, [r4, #12]
 801841e:	9b00      	ldr	r3, [sp, #0]
 8018420:	6163      	str	r3, [r4, #20]
 8018422:	9b01      	ldr	r3, [sp, #4]
 8018424:	6120      	str	r0, [r4, #16]
 8018426:	b15b      	cbz	r3, 8018440 <__smakebuf_r+0x74>
 8018428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801842c:	4630      	mov	r0, r6
 801842e:	f000 f859 	bl	80184e4 <_isatty_r>
 8018432:	b128      	cbz	r0, 8018440 <__smakebuf_r+0x74>
 8018434:	89a3      	ldrh	r3, [r4, #12]
 8018436:	f023 0303 	bic.w	r3, r3, #3
 801843a:	f043 0301 	orr.w	r3, r3, #1
 801843e:	81a3      	strh	r3, [r4, #12]
 8018440:	89a3      	ldrh	r3, [r4, #12]
 8018442:	431d      	orrs	r5, r3
 8018444:	81a5      	strh	r5, [r4, #12]
 8018446:	e7cd      	b.n	80183e4 <__smakebuf_r+0x18>
 8018448:	080174b5 	.word	0x080174b5

0801844c <__malloc_lock>:
 801844c:	4770      	bx	lr

0801844e <__malloc_unlock>:
 801844e:	4770      	bx	lr

08018450 <_realloc_r>:
 8018450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018452:	4607      	mov	r7, r0
 8018454:	4614      	mov	r4, r2
 8018456:	460e      	mov	r6, r1
 8018458:	b921      	cbnz	r1, 8018464 <_realloc_r+0x14>
 801845a:	4611      	mov	r1, r2
 801845c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018460:	f7ff b924 	b.w	80176ac <_malloc_r>
 8018464:	b922      	cbnz	r2, 8018470 <_realloc_r+0x20>
 8018466:	f7ff f8d3 	bl	8017610 <_free_r>
 801846a:	4625      	mov	r5, r4
 801846c:	4628      	mov	r0, r5
 801846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018470:	f000 f848 	bl	8018504 <_malloc_usable_size_r>
 8018474:	42a0      	cmp	r0, r4
 8018476:	d20f      	bcs.n	8018498 <_realloc_r+0x48>
 8018478:	4621      	mov	r1, r4
 801847a:	4638      	mov	r0, r7
 801847c:	f7ff f916 	bl	80176ac <_malloc_r>
 8018480:	4605      	mov	r5, r0
 8018482:	2800      	cmp	r0, #0
 8018484:	d0f2      	beq.n	801846c <_realloc_r+0x1c>
 8018486:	4631      	mov	r1, r6
 8018488:	4622      	mov	r2, r4
 801848a:	f7fe ff46 	bl	801731a <memcpy>
 801848e:	4631      	mov	r1, r6
 8018490:	4638      	mov	r0, r7
 8018492:	f7ff f8bd 	bl	8017610 <_free_r>
 8018496:	e7e9      	b.n	801846c <_realloc_r+0x1c>
 8018498:	4635      	mov	r5, r6
 801849a:	e7e7      	b.n	801846c <_realloc_r+0x1c>

0801849c <_read_r>:
 801849c:	b538      	push	{r3, r4, r5, lr}
 801849e:	4c07      	ldr	r4, [pc, #28]	; (80184bc <_read_r+0x20>)
 80184a0:	4605      	mov	r5, r0
 80184a2:	4608      	mov	r0, r1
 80184a4:	4611      	mov	r1, r2
 80184a6:	2200      	movs	r2, #0
 80184a8:	6022      	str	r2, [r4, #0]
 80184aa:	461a      	mov	r2, r3
 80184ac:	f7e8 fefa 	bl	80012a4 <_read>
 80184b0:	1c43      	adds	r3, r0, #1
 80184b2:	d102      	bne.n	80184ba <_read_r+0x1e>
 80184b4:	6823      	ldr	r3, [r4, #0]
 80184b6:	b103      	cbz	r3, 80184ba <_read_r+0x1e>
 80184b8:	602b      	str	r3, [r5, #0]
 80184ba:	bd38      	pop	{r3, r4, r5, pc}
 80184bc:	24008358 	.word	0x24008358

080184c0 <_fstat_r>:
 80184c0:	b538      	push	{r3, r4, r5, lr}
 80184c2:	4c07      	ldr	r4, [pc, #28]	; (80184e0 <_fstat_r+0x20>)
 80184c4:	2300      	movs	r3, #0
 80184c6:	4605      	mov	r5, r0
 80184c8:	4608      	mov	r0, r1
 80184ca:	4611      	mov	r1, r2
 80184cc:	6023      	str	r3, [r4, #0]
 80184ce:	f7e8 ff2e 	bl	800132e <_fstat>
 80184d2:	1c43      	adds	r3, r0, #1
 80184d4:	d102      	bne.n	80184dc <_fstat_r+0x1c>
 80184d6:	6823      	ldr	r3, [r4, #0]
 80184d8:	b103      	cbz	r3, 80184dc <_fstat_r+0x1c>
 80184da:	602b      	str	r3, [r5, #0]
 80184dc:	bd38      	pop	{r3, r4, r5, pc}
 80184de:	bf00      	nop
 80184e0:	24008358 	.word	0x24008358

080184e4 <_isatty_r>:
 80184e4:	b538      	push	{r3, r4, r5, lr}
 80184e6:	4c06      	ldr	r4, [pc, #24]	; (8018500 <_isatty_r+0x1c>)
 80184e8:	2300      	movs	r3, #0
 80184ea:	4605      	mov	r5, r0
 80184ec:	4608      	mov	r0, r1
 80184ee:	6023      	str	r3, [r4, #0]
 80184f0:	f7e8 ff2d 	bl	800134e <_isatty>
 80184f4:	1c43      	adds	r3, r0, #1
 80184f6:	d102      	bne.n	80184fe <_isatty_r+0x1a>
 80184f8:	6823      	ldr	r3, [r4, #0]
 80184fa:	b103      	cbz	r3, 80184fe <_isatty_r+0x1a>
 80184fc:	602b      	str	r3, [r5, #0]
 80184fe:	bd38      	pop	{r3, r4, r5, pc}
 8018500:	24008358 	.word	0x24008358

08018504 <_malloc_usable_size_r>:
 8018504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018508:	1f18      	subs	r0, r3, #4
 801850a:	2b00      	cmp	r3, #0
 801850c:	bfbc      	itt	lt
 801850e:	580b      	ldrlt	r3, [r1, r0]
 8018510:	18c0      	addlt	r0, r0, r3
 8018512:	4770      	bx	lr

08018514 <_init>:
 8018514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018516:	bf00      	nop
 8018518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801851a:	bc08      	pop	{r3}
 801851c:	469e      	mov	lr, r3
 801851e:	4770      	bx	lr

08018520 <_fini>:
 8018520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018522:	bf00      	nop
 8018524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018526:	bc08      	pop	{r3}
 8018528:	469e      	mov	lr, r3
 801852a:	4770      	bx	lr
